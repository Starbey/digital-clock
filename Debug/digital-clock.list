
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009014  08009014  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800901c  0800901c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009020  08009020  00019020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014698  20000068  0800908c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014700  0800908c  00024700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016de8  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e9  00000000  00000000  00036ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001053  00000000  00000000  0003be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aca7  00000000  00000000  0003ce53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019583  00000000  00000000  00057afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1463  00000000  00000000  0007107d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d68  00000000  00000000  001124e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00118248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e28 	.word	0x08008e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08008e28 	.word	0x08008e28

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012fe4 	.word	0x20012fe4

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a4 	.word	0x200000a4

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 f96a 	bl	8001950 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 f95f 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 f954 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 f949 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 f940 	bl	8001950 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 f93a 	bl	8001950 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 f931 	bl	8001950 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fdff 	bl	800140c <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fdf9 	bl	800140c <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fdf3 	bl	800140c <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fded 	bl	800140c <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fde7 	bl	800140c <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fde1 	bl	800140c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fddb 	bl	800140c <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fdd5 	bl	800140c <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fdd2 	bl	800140c <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fdcc 	bl	800140c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fd7f 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f8d1 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa17 	bl	8000cc0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f939 	bl	8000b08 <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 f9c3 	bl	8000c20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 800089a:	4851      	ldr	r0, [pc, #324]	; (80009e0 <main+0x160>)
 800089c:	f002 faa8 	bl	8002df0 <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008a0:	f005 fe86 	bl	80065b0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008a4:	f007 f8a4 	bl	80079f0 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	200a      	movs	r0, #10
 80008ae:	f003 f833 	bl	8003918 <xQueueGenericCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a4b      	ldr	r2, [pc, #300]	; (80009e4 <main+0x164>)
 80008b6:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008b8:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <main+0x164>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>

  /*create timers */
  rtcUpdateTimerHandle = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, rtcUpdateTimerCallback);
 80008d6:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <main+0x168>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008e2:	4842      	ldr	r0, [pc, #264]	; (80009ec <main+0x16c>)
 80008e4:	f004 fec2 	bl	800566c <xTimerCreate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a41      	ldr	r2, [pc, #260]	; (80009f0 <main+0x170>)
 80008ec:	6013      	str	r3, [r2, #0]

  modeTimerHandle = xTimerCreate("Mode_Polling_Timer", pdMS_TO_TICKS(MODE_POLL_PERIOD), pdTRUE, NULL, modeTimerCallback);
 80008ee:	4b41      	ldr	r3, [pc, #260]	; (80009f4 <main+0x174>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	2201      	movs	r2, #1
 80008f6:	2164      	movs	r1, #100	; 0x64
 80008f8:	483f      	ldr	r0, [pc, #252]	; (80009f8 <main+0x178>)
 80008fa:	f004 feb7 	bl	800566c <xTimerCreate>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a3e      	ldr	r2, [pc, #248]	; (80009fc <main+0x17c>)
 8000902:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 8000904:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <main+0x180>)
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	2302      	movs	r3, #2
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	22fa      	movs	r2, #250	; 0xfa
 8000910:	493c      	ldr	r1, [pc, #240]	; (8000a04 <main+0x184>)
 8000912:	483d      	ldr	r0, [pc, #244]	; (8000a08 <main+0x188>)
 8000914:	f003 fc94 	bl	8004240 <xTaskCreate>
 8000918:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d00a      	beq.n	8000936 <main+0xb6>
        __asm volatile
 8000920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000924:	f383 8811 	msr	BASEPRI, r3
 8000928:	f3bf 8f6f 	isb	sy
 800092c:	f3bf 8f4f 	dsb	sy
 8000930:	60fb      	str	r3, [r7, #12]
    }
 8000932:	bf00      	nop
 8000934:	e7fe      	b.n	8000934 <main+0xb4>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <main+0x18c>)
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	2303      	movs	r3, #3
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2300      	movs	r3, #0
 8000940:	22fa      	movs	r2, #250	; 0xfa
 8000942:	4933      	ldr	r1, [pc, #204]	; (8000a10 <main+0x190>)
 8000944:	4833      	ldr	r0, [pc, #204]	; (8000a14 <main+0x194>)
 8000946:	f003 fc7b 	bl	8004240 <xTaskCreate>
 800094a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d00a      	beq.n	8000968 <main+0xe8>
        __asm volatile
 8000952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000956:	f383 8811 	msr	BASEPRI, r3
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	f3bf 8f4f 	dsb	sy
 8000962:	60bb      	str	r3, [r7, #8]
    }
 8000964:	bf00      	nop
 8000966:	e7fe      	b.n	8000966 <main+0xe6>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <main+0x198>)
 800096a:	9301      	str	r3, [sp, #4]
 800096c:	2302      	movs	r3, #2
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	22fa      	movs	r2, #250	; 0xfa
 8000974:	4929      	ldr	r1, [pc, #164]	; (8000a1c <main+0x19c>)
 8000976:	482a      	ldr	r0, [pc, #168]	; (8000a20 <main+0x1a0>)
 8000978:	f003 fc62 	bl	8004240 <xTaskCreate>
 800097c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d00a      	beq.n	800099a <main+0x11a>
        __asm volatile
 8000984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000988:	f383 8811 	msr	BASEPRI, r3
 800098c:	f3bf 8f6f 	isb	sy
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	607b      	str	r3, [r7, #4]
    }
 8000996:	bf00      	nop
 8000998:	e7fe      	b.n	8000998 <main+0x118>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <main+0x1a4>)
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2302      	movs	r3, #2
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	22fa      	movs	r2, #250	; 0xfa
 80009a6:	4920      	ldr	r1, [pc, #128]	; (8000a28 <main+0x1a8>)
 80009a8:	4820      	ldr	r0, [pc, #128]	; (8000a2c <main+0x1ac>)
 80009aa:	f003 fc49 	bl	8004240 <xTaskCreate>
 80009ae:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d00a      	beq.n	80009cc <main+0x14c>
        __asm volatile
 80009b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ba:	f383 8811 	msr	BASEPRI, r3
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	f3bf 8f4f 	dsb	sy
 80009c6:	603b      	str	r3, [r7, #0]
    }
 80009c8:	bf00      	nop
 80009ca:	e7fe      	b.n	80009ca <main+0x14a>

  lcdInit();
 80009cc:	f7ff ff1a 	bl	8000804 <lcdInit>
  HAL_Delay(1000);
 80009d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d4:	f000 fd1a 	bl	800140c <HAL_Delay>

  vTaskStartScheduler();
 80009d8:	f003 ff2c 	bl	8004834 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x15c>
 80009de:	bf00      	nop
 80009e0:	200000a4 	.word	0x200000a4
 80009e4:	200000fc 	.word	0x200000fc
 80009e8:	08000edd 	.word	0x08000edd
 80009ec:	08008e40 	.word	0x08008e40
 80009f0:	20000100 	.word	0x20000100
 80009f4:	08000ff9 	.word	0x08000ff9
 80009f8:	08008e4c 	.word	0x08008e4c
 80009fc:	20000104 	.word	0x20000104
 8000a00:	200000f0 	.word	0x200000f0
 8000a04:	08008e60 	.word	0x08008e60
 8000a08:	08000e89 	.word	0x08000e89
 8000a0c:	200000ec 	.word	0x200000ec
 8000a10:	08008e74 	.word	0x08008e74
 8000a14:	08000e31 	.word	0x08000e31
 8000a18:	200000f4 	.word	0x200000f4
 8000a1c:	08008e80 	.word	0x08008e80
 8000a20:	08000efd 	.word	0x08000efd
 8000a24:	200000f8 	.word	0x200000f8
 8000a28:	08008e90 	.word	0x08008e90
 8000a2c:	0800102d 	.word	0x0800102d

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	; 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	; 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f007 fd6e 	bl	8008520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <SystemClock_Config+0xd0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <SystemClock_Config+0xd0>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <SystemClock_Config+0xd0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <SystemClock_Config+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <SystemClock_Config+0xd4>)
 8000a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a90:	2309      	movs	r3, #9
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000aac:	2354      	movs	r3, #84	; 0x54
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 ff7b 	bl	80019b8 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ac8:	f000 fad2 	bl	8001070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	2102      	movs	r1, #2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 f9dd 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000af4:	f000 fabc 	bl	8001070 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3750      	adds	r7, #80	; 0x50
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40007000 	.word	0x40007000

08000b08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2228      	movs	r2, #40	; 0x28
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f007 fcf9 	bl	8008520 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b30:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <MX_RTC_Init+0x114>)
 8000b32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b3c:	227f      	movs	r2, #127	; 0x7f
 8000b3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b58:	482f      	ldr	r0, [pc, #188]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b5a:	f001 fcd1 	bl	8002500 <HAL_RTC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b64:	f000 fa84 	bl	8001070 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	2201      	movs	r2, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4823      	ldr	r0, [pc, #140]	; (8000c18 <MX_RTC_Init+0x110>)
 8000b8c:	f001 fd2e 	bl	80025ec <HAL_RTC_SetTime>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000b96:	f000 fa6b 	bl	8001070 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4817      	ldr	r0, [pc, #92]	; (8000c18 <MX_RTC_Init+0x110>)
 8000bbc:	f001 fe0e 	bl	80027dc <HAL_RTC_SetDate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000bc6:	f000 fa53 	bl	8001070 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_RTC_Init+0x110>)
 8000c02:	f001 febe 	bl	8002982 <HAL_RTC_SetAlarm>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000c0c:	f000 fa30 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3740      	adds	r7, #64	; 0x40
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000084 	.word	0x20000084
 8000c1c:	40002800 	.word	0x40002800

08000c20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MX_TIM1_Init+0x9c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c44:	2254      	movs	r2, #84	; 0x54
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c6a:	f002 f871 	bl	8002d50 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c74:	f000 f9fc 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c86:	f002 fa77 	bl	8003178 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c90:	f000 f9ee 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000ca2:	f002 fc73 	bl	800358c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cac:	f000 f9e0 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000a4 	.word	0x200000a4
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a42      	ldr	r2, [pc, #264]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3b      	ldr	r2, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f240 6103 	movw	r1, #1539	; 0x603
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000d4e:	f000 fdff 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|LD2_Pin|E_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f248 0130 	movw	r1, #32816	; 0x8030
 8000d58:	4833      	ldr	r0, [pc, #204]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000d5a:	f000 fdf9 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2181      	movs	r1, #129	; 0x81
 8000d62:	4832      	ldr	r0, [pc, #200]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000d64:	f000 fdf4 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4829      	ldr	r0, [pc, #164]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000d80:	f000 fc4a 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin BUZZER_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10;
 8000d84:	f240 6303 	movw	r3, #1539	; 0x603
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000d9e:	f000 fc3b 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000da2:	230c      	movs	r3, #12
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db2:	2307      	movs	r3, #7
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481a      	ldr	r0, [pc, #104]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000dbe:	f000 fc2b 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin LD2_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|LD2_Pin|E_Pin;
 8000dc2:	f248 0330 	movw	r3, #32816	; 0x8030
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4813      	ldr	r0, [pc, #76]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000ddc:	f000 fc1c 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000de0:	2381      	movs	r3, #129	; 0x81
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000df8:	f000 fc0e 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_GPIO_Init+0x16c>)
 8000e12:	f000 fc01 	bl	8001618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400

08000e30 <printTaskHandler>:

/* USER CODE BEGIN 4 */

	void printTaskHandler(void *parameters){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
		uint32_t *str;

		while(1){
			/* print top row */
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <printTaskHandler+0x54>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f107 010c 	add.w	r1, r7, #12
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 ff89 	bl	8003d5c <xQueueReceive>
			lcdClear();
 8000e4a:	f7ff fcb0 	bl	80007ae <lcdClear>
			lcdMoveCursor(0, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fc89 	bl	8000768 <lcdMoveCursor>
			lcdSendString( (char*) str );
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fcb3 	bl	80007c4 <lcdSendString>

			/* print bottom row */
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <printTaskHandler+0x54>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f107 010c 	add.w	r1, r7, #12
 8000e66:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 ff76 	bl	8003d5c <xQueueReceive>
			lcdMoveCursor(1, 0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fc78 	bl	8000768 <lcdMoveCursor>
			lcdSendString( (char*) str );
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fca2 	bl	80007c4 <lcdSendString>
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e80:	e7da      	b.n	8000e38 <printTaskHandler+0x8>
 8000e82:	bf00      	nop
 8000e84:	200000fc 	.word	0x200000fc

08000e88 <startTimerTaskHandler>:
		}
	}

	void startTimerTaskHandler(void *parameters){
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af02      	add	r7, sp, #8
 8000e8e:	6078      	str	r0, [r7, #4]
		while(1){
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <startTimerTaskHandler+0x48>)
 8000e92:	681c      	ldr	r4, [r3, #0]
 8000e94:	f003 fe3e 	bl	8004b14 <xTaskGetTickCount>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f004 fc3b 	bl	8005720 <xTimerGenericCommand>
			xTimerStart(modeTimerHandle, portMAX_DELAY);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <startTimerTaskHandler+0x4c>)
 8000eac:	681c      	ldr	r4, [r3, #0]
 8000eae:	f003 fe31 	bl	8004b14 <xTaskGetTickCount>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f004 fc2e 	bl	8005720 <xTimerGenericCommand>
			vTaskSuspend(startTimerTaskHandle);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <startTimerTaskHandler+0x50>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fb41 	bl	8004550 <vTaskSuspend>
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000ece:	e7df      	b.n	8000e90 <startTimerTaskHandler+0x8>
 8000ed0:	20000100 	.word	0x20000100
 8000ed4:	20000104 	.word	0x20000104
 8000ed8:	200000f0 	.word	0x200000f0

08000edc <rtcUpdateTimerCallback>:
		}
	}

	void rtcUpdateTimerCallback(TimerHandle_t xTimer){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
		vTaskResume(rtcUpdateTaskHandle);
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <rtcUpdateTimerCallback+0x1c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f003 fc11 	bl	8004710 <vTaskResume>
	}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000f4 	.word	0x200000f4

08000efc <rtcUpdateTaskHandler>:

	void rtcUpdateTaskHandler(void *parameters){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
		static char strBuffer[40];
		static char *str = strBuffer;

		while(1){
			vTaskSuspend(NULL);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f003 fb23 	bl	8004550 <vTaskSuspend>

			RTC_DateTypeDef rtcDate;
			RTC_TimeTypeDef rtcTime;

			memset(&rtcDate,0,sizeof(rtcDate));
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2204      	movs	r2, #4
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fb04 	bl	8008520 <memset>
			memset(&rtcTime,0,sizeof(rtcTime));
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f007 fafd 	bl	8008520 <memset>

			HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <rtcUpdateTaskHandler+0xdc>)
 8000f30:	f001 fbf6 	bl	8002720 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4826      	ldr	r0, [pc, #152]	; (8000fd8 <rtcUpdateTaskHandler+0xdc>)
 8000f3e:	f001 fcd1 	bl	80028e4 <HAL_RTC_GetDate>

			char *format;
			format = (rtcTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <rtcUpdateTaskHandler+0x50>
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <rtcUpdateTaskHandler+0xe0>)
 8000f4a:	e000      	b.n	8000f4e <rtcUpdateTaskHandler+0x52>
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <rtcUpdateTaskHandler+0xe4>)
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24

			memset(&strBuffer, 0, sizeof(strBuffer) );
 8000f50:	2228      	movs	r2, #40	; 0x28
 8000f52:	2100      	movs	r1, #0
 8000f54:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <rtcUpdateTaskHandler+0xe8>)
 8000f56:	f007 fae3 	bl	8008520 <memset>

			sprintf( (char*) strBuffer, "%02d:%02d:%02d [%s]",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, format);
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	4618      	mov	r0, r3
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	461a      	mov	r2, r3
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	460a      	mov	r2, r1
 8000f70:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <rtcUpdateTaskHandler+0xec>)
 8000f72:	481c      	ldr	r0, [pc, #112]	; (8000fe4 <rtcUpdateTaskHandler+0xe8>)
 8000f74:	f007 faa4 	bl	80084c0 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(str);
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <rtcUpdateTaskHandler+0xf0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 fa2f 	bl	80083e0 <SEGGER_SYSVIEW_PrintfTarget>
			xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <rtcUpdateTaskHandler+0xf4>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	4917      	ldr	r1, [pc, #92]	; (8000fec <rtcUpdateTaskHandler+0xf0>)
 8000f8e:	f002 fd35 	bl	80039fc <xQueueGenericSend>

			memset(&strBuffer, 0, sizeof(strBuffer) );
 8000f92:	2228      	movs	r2, #40	; 0x28
 8000f94:	2100      	movs	r1, #0
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <rtcUpdateTaskHandler+0xe8>)
 8000f98:	f007 fac2 	bl	8008520 <memset>
			sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 8000f9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fac:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <rtcUpdateTaskHandler+0xf8>)
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <rtcUpdateTaskHandler+0xe8>)
 8000fb8:	f007 fa82 	bl	80084c0 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(str);
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <rtcUpdateTaskHandler+0xf0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f007 fa0d 	bl	80083e0 <SEGGER_SYSVIEW_PrintfTarget>
			xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <rtcUpdateTaskHandler+0xf4>)
 8000fc8:	6818      	ldr	r0, [r3, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <rtcUpdateTaskHandler+0xf0>)
 8000fd2:	f002 fd13 	bl	80039fc <xQueueGenericSend>
		while(1){
 8000fd6:	e795      	b.n	8000f04 <rtcUpdateTaskHandler+0x8>
 8000fd8:	20000084 	.word	0x20000084
 8000fdc:	08008ea0 	.word	0x08008ea0
 8000fe0:	08008ea4 	.word	0x08008ea4
 8000fe4:	20000108 	.word	0x20000108
 8000fe8:	08008ea8 	.word	0x08008ea8
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	200000fc 	.word	0x200000fc
 8000ff4:	08008ebc 	.word	0x08008ebc

08000ff8 <modeTimerCallback>:

		}
	}

	void modeTimerCallback(TimerHandle_t xTimer){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
		if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <modeTimerCallback+0x2c>)
 8001006:	f000 fc8b 	bl	8001920 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d104      	bne.n	800101a <modeTimerCallback+0x22>
			vTaskResume(alarmSetTaskHandle);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <modeTimerCallback+0x30>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f003 fb7b 	bl	8004710 <vTaskResume>
		}
	}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020400 	.word	0x40020400
 8001028:	200000f8 	.word	0x200000f8

0800102c <alarmSetTaskHandler>:

	void alarmSetTaskHandler(void *parameters){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
		while(1){
			vTaskSuspend(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f003 fa8b 	bl	8004550 <vTaskSuspend>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800103a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103e:	4802      	ldr	r0, [pc, #8]	; (8001048 <alarmSetTaskHandler+0x1c>)
 8001040:	f000 fc9f 	bl	8001982 <HAL_GPIO_TogglePin>
			vTaskSuspend(NULL);
 8001044:	e7f6      	b.n	8001034 <alarmSetTaskHandler+0x8>
 8001046:	bf00      	nop
 8001048:	40020800 	.word	0x40020800

0800104c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d101      	bne.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105e:	f000 f9b5 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40000c00 	.word	0x40000c00

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_MspInit+0x50>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_MspInit+0x50>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_MspInit+0x50>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_MspInit+0x50>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_MspInit+0x50>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_MspInit+0x50>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f000 fa77 	bl	80015ae <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 80010c0:	f004 fefa 	bl	8005eb8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <HAL_RTC_MspInit+0x50>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d111      	bne.n	8001116 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4618      	mov	r0, r3
 8001102:	f001 f90f 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800110c:	f7ff ffb0 	bl	8001070 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RTC_MspInit+0x54>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40002800 	.word	0x40002800
 8001124:	42470e3c 	.word	0x42470e3c

08001128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x3c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10d      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x40>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_TIM_Base_MspInit+0x40>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_TIM_Base_MspInit+0x40>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40010000 	.word	0x40010000
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_InitTick+0xe4>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_InitTick+0xe4>)
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_InitTick+0xe4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f88c 	bl	80022c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 f871 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 80011b6:	6378      	str	r0, [r7, #52]	; 0x34
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ba:	f001 f86d 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c6:	4a23      	ldr	r2, [pc, #140]	; (8001254 <HAL_InitTick+0xe8>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3b01      	subs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_InitTick+0xec>)
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <HAL_InitTick+0xf0>)
 80011d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_InitTick+0xec>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_InitTick+0xec>)
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_InitTick+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_InitTick+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_InitTick+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <HAL_InitTick+0xec>)
 80011fa:	f001 fda9 	bl	8002d50 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11b      	bne.n	8001244 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <HAL_InitTick+0xec>)
 800120e:	f001 fe49 	bl	8002ea4 <HAL_TIM_Base_Start_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121c:	2b00      	cmp	r3, #0
 800121e:	d111      	bne.n	8001244 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001220:	2032      	movs	r0, #50	; 0x32
 8001222:	f000 f9eb 	bl	80015fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d808      	bhi.n	800123e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	2032      	movs	r0, #50	; 0x32
 8001232:	f000 f9c7 	bl	80015c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_InitTick+0xf4>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e002      	b.n	8001244 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	431bde83 	.word	0x431bde83
 8001258:	20000130 	.word	0x20000130
 800125c:	40000c00 	.word	0x40000c00
 8001260:	20000008 	.word	0x20000008

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM5_IRQHandler+0x10>)
 8001296:	f001 fe67 	bl	8002f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000130 	.word	0x20000130

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f007 f92c 	bl	8008530 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20018000 	.word	0x20018000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000178 	.word	0x20000178
 800130c:	20014700 	.word	0x20014700

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800136c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800133a:	490e      	ldr	r1, [pc, #56]	; (8001374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001350:	4c0b      	ldr	r4, [pc, #44]	; (8001380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135e:	f7ff ffd7 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001362:	f007 f8eb 	bl	800853c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff fa8b 	bl	8000880 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800136c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001378:	08009024 	.word	0x08009024
  ldr r2, =_sbss
 800137c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001380:	20014700 	.word	0x20014700

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_Init+0x40>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <HAL_Init+0x40>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_Init+0x40>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f8fc 	bl	80015ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fed8 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fe5e 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	2000017c 	.word	0x2000017c

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2000017c 	.word	0x2000017c

0800140c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff ffee 	bl	80013f4 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d005      	beq.n	8001432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_Delay+0x44>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001432:	bf00      	nop
 8001434:	f7ff ffde 	bl	80013f4 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f7      	bhi.n	8001434 <HAL_Delay+0x28>
  {
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000000c 	.word	0x2000000c

08001454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001470:	4013      	ands	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800147c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <__NVIC_SetPriorityGrouping+0x44>)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	60d3      	str	r3, [r2, #12]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <__NVIC_GetPriorityGrouping+0x18>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	f003 0307 	and.w	r3, r3, #7
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db0b      	blt.n	80014e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <__NVIC_EnableIRQ+0x38>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff4c 	bl	8001454 <__NVIC_SetPriorityGrouping>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d6:	f7ff ff61 	bl	800149c <__NVIC_GetPriorityGrouping>
 80015da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	6978      	ldr	r0, [r7, #20]
 80015e2:	f7ff ffb1 	bl	8001548 <NVIC_EncodePriority>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff80 	bl	80014f4 <__NVIC_SetPriority>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff54 	bl	80014b8 <__NVIC_EnableIRQ>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e159      	b.n	80018e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 8148 	bne.w	80018e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80a2 	beq.w	80018e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a56      	ldr	r2, [pc, #344]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <HAL_GPIO_Init+0x2e8>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_GPIO_Init+0x2ec>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2f0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x202>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2f4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x1fe>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_GPIO_Init+0x2f8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x1fa>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a46      	ldr	r2, [pc, #280]	; (8001914 <HAL_GPIO_Init+0x2fc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x1f6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a45      	ldr	r2, [pc, #276]	; (8001918 <HAL_GPIO_Init+0x300>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x1f2>
 8001806:	2304      	movs	r3, #4
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x204>
 800180a:	2307      	movs	r3, #7
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x204>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x204>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x204>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x204>
 800181a:	2300      	movs	r3, #0
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800182c:	4935      	ldr	r1, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x2ec>)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_GPIO_Init+0x304>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <HAL_GPIO_Init+0x304>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_GPIO_Init+0x304>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001888:	4a24      	ldr	r2, [pc, #144]	; (800191c <HAL_GPIO_Init+0x304>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_GPIO_Init+0x304>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_GPIO_Init+0x304>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_GPIO_Init+0x304>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_GPIO_Init+0x304>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	f67f aea2 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800
 8001908:	40020000 	.word	0x40020000
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40013c00 	.word	0x40013c00

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001982:	b480      	push	{r7}
 8001984:	b085      	sub	sp, #20
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43d9      	mvns	r1, r3
 80019a0:	887b      	ldrh	r3, [r7, #2]
 80019a2:	400b      	ands	r3, r1
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e267      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d075      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d00c      	beq.n	80019fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e2:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d112      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ee:	4b82      	ldr	r3, [pc, #520]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019fa:	d10b      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	4b7e      	ldr	r3, [pc, #504]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d05b      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x108>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d157      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e242      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x74>
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x98>
 8001a36:	4b70      	ldr	r3, [pc, #448]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6f      	ldr	r2, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a6c      	ldr	r2, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xb0>
 8001a50:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a68      	ldr	r2, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fcc0 	bl	80013f4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fcbc 	bl	80013f4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e207      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xc0>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fcac 	bl	80013f4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fca8 	bl	80013f4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1f3      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xe8>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d063      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x152>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1c7      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e03a      	b.n	8001b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_RCC_OscConfig+0x244>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fc61 	bl	80013f4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff fc5d 	bl	80013f4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1a8      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	600b      	str	r3, [r1, #0]
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_OscConfig+0x244>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff fc40 	bl	80013f4 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff fc3c 	bl	80013f4 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e187      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d036      	beq.n	8001c10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d016      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_OscConfig+0x248>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fc20 	bl	80013f4 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fc1c 	bl	80013f4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e167      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x200>
 8001bd6:	e01b      	b.n	8001c10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_OscConfig+0x248>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bde:	f7ff fc09 	bl	80013f4 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	e00e      	b.n	8001c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc05 	bl	80013f4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d907      	bls.n	8001c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e150      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	42470000 	.word	0x42470000
 8001c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ea      	bne.n	8001be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8097 	beq.w	8001d4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b7d      	ldr	r3, [pc, #500]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a7c      	ldr	r2, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b77      	ldr	r3, [pc, #476]	; (8001e2c <HAL_RCC_OscConfig+0x474>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d118      	bne.n	8001c8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5a:	4b74      	ldr	r3, [pc, #464]	; (8001e2c <HAL_RCC_OscConfig+0x474>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a73      	ldr	r2, [pc, #460]	; (8001e2c <HAL_RCC_OscConfig+0x474>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c66:	f7ff fbc5 	bl	80013f4 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6e:	f7ff fbc1 	bl	80013f4 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e10c      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x474>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2ea>
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x324>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x30c>
 8001caa:	4b5f      	ldr	r3, [pc, #380]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a5e      	ldr	r2, [pc, #376]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a5b      	ldr	r2, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x324>
 8001cc4:	4b58      	ldr	r3, [pc, #352]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a57      	ldr	r2, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a54      	ldr	r2, [pc, #336]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d015      	beq.n	8001d10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fb86 	bl	80013f4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff fb82 	bl	80013f4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e0cb      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0ee      	beq.n	8001cec <HAL_RCC_OscConfig+0x334>
 8001d0e:	e014      	b.n	8001d3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fb70 	bl	80013f4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7ff fb6c 	bl	80013f4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e0b5      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ee      	bne.n	8001d18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	4a38      	ldr	r2, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a1 	beq.w	8001e98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d05c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d141      	bne.n	8001dee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_OscConfig+0x478>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fb40 	bl	80013f4 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff fb3c 	bl	80013f4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e087      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69da      	ldr	r2, [r3, #28]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	491b      	ldr	r1, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x478>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb15 	bl	80013f4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff fb11 	bl	80013f4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e05c      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x416>
 8001dec:	e054      	b.n	8001e98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fafe 	bl	80013f4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fafa 	bl	80013f4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e045      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x444>
 8001e1a:	e03d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e038      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x4ec>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d028      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d121      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d11a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cc      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	494d      	ldr	r1, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d044      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e067      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f98:	f7ff fa2c 	bl	80013f4 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7ff fa28 	bl	80013f4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e04f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20c      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e032      	b.n	8002056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f821 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f88c 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023c00 	.word	0x40023c00
 8002064:	40023800 	.word	0x40023800
 8002068:	08008fa4 	.word	0x08008fa4
 800206c:	20000004 	.word	0x20000004
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002078:	b094      	sub	sp, #80	; 0x50
 800207a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
 8002080:	2300      	movs	r3, #0
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002084:	2300      	movs	r3, #0
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d00d      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002098:	2b08      	cmp	r3, #8
 800209a:	f200 80e1 	bhi.w	8002260 <HAL_RCC_GetSysClockFreq+0x1ec>
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x34>
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d003      	beq.n	80020ae <HAL_RCC_GetSysClockFreq+0x3a>
 80020a6:	e0db      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b73      	ldr	r3, [pc, #460]	; (8002278 <HAL_RCC_GetSysClockFreq+0x204>)
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020ac:	e0db      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ae:	4b73      	ldr	r3, [pc, #460]	; (800227c <HAL_RCC_GetSysClockFreq+0x208>)
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020b2:	e0d8      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b4:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020be:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ca:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	2200      	movs	r2, #0
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
 80020e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020e6:	4622      	mov	r2, r4
 80020e8:	462b      	mov	r3, r5
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	0159      	lsls	r1, r3, #5
 80020f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f8:	0150      	lsls	r0, r2, #5
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4621      	mov	r1, r4
 8002100:	1a51      	subs	r1, r2, r1
 8002102:	6139      	str	r1, [r7, #16]
 8002104:	4629      	mov	r1, r5
 8002106:	eb63 0301 	sbc.w	r3, r3, r1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002118:	4659      	mov	r1, fp
 800211a:	018b      	lsls	r3, r1, #6
 800211c:	4651      	mov	r1, sl
 800211e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002122:	4651      	mov	r1, sl
 8002124:	018a      	lsls	r2, r1, #6
 8002126:	4651      	mov	r1, sl
 8002128:	ebb2 0801 	subs.w	r8, r2, r1
 800212c:	4659      	mov	r1, fp
 800212e:	eb63 0901 	sbc.w	r9, r3, r1
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800213e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002146:	4690      	mov	r8, r2
 8002148:	4699      	mov	r9, r3
 800214a:	4623      	mov	r3, r4
 800214c:	eb18 0303 	adds.w	r3, r8, r3
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	462b      	mov	r3, r5
 8002154:	eb49 0303 	adc.w	r3, r9, r3
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002166:	4629      	mov	r1, r5
 8002168:	024b      	lsls	r3, r1, #9
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002170:	4621      	mov	r1, r4
 8002172:	024a      	lsls	r2, r1, #9
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800217a:	2200      	movs	r2, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
 800217e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002184:	f7fe f8d4 	bl	8000330 <__aeabi_uldivmod>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4613      	mov	r3, r2
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002190:	e058      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b38      	ldr	r3, [pc, #224]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	2200      	movs	r2, #0
 800219a:	4618      	mov	r0, r3
 800219c:	4611      	mov	r1, r2
 800219e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	f04f 0000 	mov.w	r0, #0
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	0159      	lsls	r1, r3, #5
 80021ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021be:	0150      	lsls	r0, r2, #5
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4641      	mov	r1, r8
 80021c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ca:	4649      	mov	r1, r9
 80021cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021e4:	ebb2 040a 	subs.w	r4, r2, sl
 80021e8:	eb63 050b 	sbc.w	r5, r3, fp
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	00eb      	lsls	r3, r5, #3
 80021f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021fa:	00e2      	lsls	r2, r4, #3
 80021fc:	4614      	mov	r4, r2
 80021fe:	461d      	mov	r5, r3
 8002200:	4643      	mov	r3, r8
 8002202:	18e3      	adds	r3, r4, r3
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	464b      	mov	r3, r9
 8002208:	eb45 0303 	adc.w	r3, r5, r3
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221a:	4629      	mov	r1, r5
 800221c:	028b      	lsls	r3, r1, #10
 800221e:	4621      	mov	r1, r4
 8002220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002224:	4621      	mov	r1, r4
 8002226:	028a      	lsls	r2, r1, #10
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222e:	2200      	movs	r2, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	61fa      	str	r2, [r7, #28]
 8002234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002238:	f7fe f87a 	bl	8000330 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_GetSysClockFreq+0x200>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800225e:	e002      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetSysClockFreq+0x204>)
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002268:	4618      	mov	r0, r3
 800226a:	3750      	adds	r7, #80	; 0x50
 800226c:	46bd      	mov	sp, r7
 800226e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	00f42400 	.word	0x00f42400
 800227c:	007a1200 	.word	0x007a1200

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000004 	.word	0x20000004

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	08008fb4 	.word	0x08008fb4

080022c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	220f      	movs	r2, #15
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCC_GetClockConfig+0x60>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002348:	2b00      	cmp	r3, #0
 800234a:	d035      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800234c:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002352:	f7ff f84f 	bl	80013f4 <HAL_GetTick>
 8002356:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800235a:	f7ff f84b 	bl	80013f4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ba      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800236c:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	019a      	lsls	r2, r3, #6
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	071b      	lsls	r3, r3, #28
 8002384:	495a      	ldr	r1, [pc, #360]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002392:	f7ff f82f 	bl	80013f4 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800239a:	f7ff f82b 	bl	80013f4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e09a      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8083 	beq.w	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023e2:	4b44      	ldr	r3, [pc, #272]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ee:	f7ff f801 	bl	80013f4 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fffd 	bl	80013f4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e06c      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02f      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	429a      	cmp	r2, r3
 8002430:	d028      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d114      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe ffcb 	bl	80013f4 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe ffc7 	bl	80013f4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e034      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002490:	d10d      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80024a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a6:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]
 80024ac:	e005      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024b8:	6093      	str	r3, [r2, #8]
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c6:	490a      	ldr	r1, [pc, #40]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7c1a      	ldrb	r2, [r3, #16]
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024de:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	42470068 	.word	0x42470068
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42470e40 	.word	0x42470e40
 80024fc:	424711e0 	.word	0x424711e0

08002500 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e066      	b.n	80025e4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7f5b      	ldrb	r3, [r3, #29]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fdd2 	bl	80010d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	22ca      	movs	r2, #202	; 0xca
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2253      	movs	r2, #83	; 0x53
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fb6f 	bl	8002c26 <RTC_EnterInitMode>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12c      	bne.n	80025ac <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002564:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68d2      	ldr	r2, [r2, #12]
 800258c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6919      	ldr	r1, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fb76 	bl	8002c94 <RTC_ExitInitMode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d113      	bne.n	80025da <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	7f1b      	ldrb	r3, [r3, #28]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_RTC_SetTime+0x1c>
 8002604:	2302      	movs	r3, #2
 8002606:	e087      	b.n	8002718 <HAL_RTC_SetTime+0x12c>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2202      	movs	r2, #2
 8002612:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d126      	bne.n	8002668 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fb53 	bl	8002cde <RTC_ByteToBcd2>
 8002638:	4603      	mov	r3, r0
 800263a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	785b      	ldrb	r3, [r3, #1]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fb4c 	bl	8002cde <RTC_ByteToBcd2>
 8002646:	4603      	mov	r3, r0
 8002648:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800264a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	789b      	ldrb	r3, [r3, #2]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fb44 	bl	8002cde <RTC_ByteToBcd2>
 8002656:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002658:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	78db      	ldrb	r3, [r3, #3]
 8002660:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e018      	b.n	800269a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	785b      	ldrb	r3, [r3, #1]
 8002686:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002688:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800268e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	78db      	ldrb	r3, [r3, #3]
 8002694:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	22ca      	movs	r2, #202	; 0xca
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2253      	movs	r2, #83	; 0x53
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fabb 	bl	8002c26 <RTC_EnterInitMode>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d120      	bne.n	80026fc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80026c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80026c8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 face 	bl	8002c94 <RTC_ExitInitMode>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	22ff      	movs	r2, #255	; 0xff
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	771a      	strb	r2, [r3, #28]

  return status;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
}
 8002718:	4618      	mov	r0, r3
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	bd90      	pop	{r4, r7, pc}

08002720 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002752:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002756:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	0c1b      	lsrs	r3, r3, #16
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	0d9b      	lsrs	r3, r3, #22
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11a      	bne.n	80027d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fab9 	bl	8002d18 <RTC_Bcd2ToByte>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	785b      	ldrb	r3, [r3, #1]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fab0 	bl	8002d18 <RTC_Bcd2ToByte>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	789b      	ldrb	r3, [r3, #2]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 faa7 	bl	8002d18 <RTC_Bcd2ToByte>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	7f1b      	ldrb	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_RTC_SetDate+0x1c>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e071      	b.n	80028dc <HAL_RTC_SetDate+0x100>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2202      	movs	r2, #2
 8002802:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_RTC_SetDate+0x4c>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	785b      	ldrb	r3, [r3, #1]
 800281a:	f023 0310 	bic.w	r3, r3, #16
 800281e:	b2db      	uxtb	r3, r3
 8002820:	330a      	adds	r3, #10
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11c      	bne.n	8002868 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fa53 	bl	8002cde <RTC_ByteToBcd2>
 8002838:	4603      	mov	r3, r0
 800283a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fa4c 	bl	8002cde <RTC_ByteToBcd2>
 8002846:	4603      	mov	r3, r0
 8002848:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800284a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fa44 	bl	8002cde <RTC_ByteToBcd2>
 8002856:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002858:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e00e      	b.n	8002886 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	78db      	ldrb	r3, [r3, #3]
 800286c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002874:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800287a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	22ca      	movs	r2, #202	; 0xca
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2253      	movs	r2, #83	; 0x53
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9c5 	bl	8002c26 <RTC_EnterInitMode>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028b4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f9ec 	bl	8002c94 <RTC_ExitInitMode>
 80028bc:	4603      	mov	r3, r0
 80028be:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	22ff      	movs	r2, #255	; 0xff
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	771a      	strb	r2, [r3, #28]

  return status;
 80028da:	7cfb      	ldrb	r3, [r7, #19]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002902:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	b2da      	uxtb	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11a      	bne.n	8002978 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	78db      	ldrb	r3, [r3, #3]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f9e6 	bl	8002d18 <RTC_Bcd2ToByte>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f9dd 	bl	8002d18 <RTC_Bcd2ToByte>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	789b      	ldrb	r3, [r3, #2]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f9d4 	bl	8002d18 <RTC_Bcd2ToByte>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b089      	sub	sp, #36	; 0x24
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	7f1b      	ldrb	r3, [r3, #28]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_RTC_SetAlarm+0x24>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e113      	b.n	8002bce <HAL_RTC_SetAlarm+0x24c>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2202      	movs	r2, #2
 80029b0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d137      	bne.n	8002a28 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f984 	bl	8002cde <RTC_ByteToBcd2>
 80029d6:	4603      	mov	r3, r0
 80029d8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f97d 	bl	8002cde <RTC_ByteToBcd2>
 80029e4:	4603      	mov	r3, r0
 80029e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80029e8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	789b      	ldrb	r3, [r3, #2]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f975 	bl	8002cde <RTC_ByteToBcd2>
 80029f4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80029f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	78db      	ldrb	r3, [r3, #3]
 80029fe:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002a00:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f967 	bl	8002cde <RTC_ByteToBcd2>
 8002a10:	4603      	mov	r3, r0
 8002a12:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002a14:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002a1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e023      	b.n	8002a70 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a48:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002a4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	78db      	ldrb	r3, [r3, #3]
 8002a54:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002a56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002a60:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002a66:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	22ca      	movs	r2, #202	; 0xca
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2253      	movs	r2, #83	; 0x53
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a94:	d148      	bne.n	8002b28 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002ac6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac8:	f7fe fc94 	bl	80013f4 <HAL_GetTick>
 8002acc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ace:	e013      	b.n	8002af8 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ad0:	f7fe fc90 	bl	80013f4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ade:	d90b      	bls.n	8002af8 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	22ff      	movs	r2, #255	; 0xff
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e06a      	b.n	8002bce <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0e4      	beq.n	8002ad0 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	e047      	b.n	8002bb8 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b36:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b46:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fc4b 	bl	80013f4 <HAL_GetTick>
 8002b5e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b60:	e013      	b.n	8002b8a <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b62:	f7fe fc47 	bl	80013f4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b70:	d90b      	bls.n	8002b8a <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e021      	b.n	8002bce <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0e4      	beq.n	8002b62 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb6:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
 8002bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd90      	pop	{r4, r7, pc}

08002bd6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf2:	f7fe fbff 	bl	80013f4 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bfa:	f7fe fbfb 	bl	80013f4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c08:	d901      	bls.n	8002c0e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e007      	b.n	8002c1e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ee      	beq.n	8002bfa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d122      	bne.n	8002c8a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fbce 	bl	80013f4 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c5a:	e00c      	b.n	8002c76 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5c:	f7fe fbca 	bl	80013f4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6a:	d904      	bls.n	8002c76 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <RTC_EnterInitMode+0x64>
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d1e8      	bne.n	8002c5c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cae:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff89 	bl	8002bd6 <HAL_RTC_WaitForSynchro>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002cec:	e005      	b.n	8002cfa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	3b0a      	subs	r3, #10
 8002cf8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d8f6      	bhi.n	8002cee <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b2db      	uxtb	r3, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	4413      	add	r3, r2
 8002d42:	b2db      	uxtb	r3, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e041      	b.n	8002de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f9d6 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 fae2 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d001      	beq.n	8002e08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e03c      	b.n	8002e82 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_TIM_Base_Start+0xa0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_Base_Start+0x5c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_Base_Start+0x5c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_TIM_Base_Start+0xa4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start+0x5c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_TIM_Base_Start+0xa8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start+0x5c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_TIM_Base_Start+0xac>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start+0x5c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <HAL_TIM_Base_Start+0xb0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d010      	beq.n	8002e80 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40014000 	.word	0x40014000

08002ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e044      	b.n	8002f46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <HAL_TIM_Base_Start_IT+0xb0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d018      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x6c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d013      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_TIM_Base_Start_IT+0xb4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00e      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x6c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_TIM_Base_Start_IT+0xb8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x6c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0x6c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d111      	bne.n	8002f34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b06      	cmp	r3, #6
 8002f20:	d010      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0201 	orr.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	e007      	b.n	8002f44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40014000 	.word	0x40014000

08002f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0202 	mvn.w	r2, #2
 8002f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f9b5 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f9a7 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f9b8 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0204 	mvn.w	r2, #4
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f98b 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f97d 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f98e 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b08      	cmp	r3, #8
 8003024:	d122      	bne.n	800306c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d11b      	bne.n	800306c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0208 	mvn.w	r2, #8
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2204      	movs	r2, #4
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f961 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f953 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f964 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b10      	cmp	r3, #16
 8003078:	d122      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b10      	cmp	r3, #16
 8003086:	d11b      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0210 	mvn.w	r2, #16
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2208      	movs	r2, #8
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f937 	bl	800331a <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f929 	bl	8003306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f93a 	bl	800332e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0201 	mvn.w	r2, #1
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd ffb0 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b80      	cmp	r3, #128	; 0x80
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fab2 	bl	800367c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d10e      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d107      	bne.n	8003144 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8ff 	bl	8003342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d10e      	bne.n	8003170 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b20      	cmp	r3, #32
 800315e:	d107      	bne.n	8003170 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0220 	mvn.w	r2, #32
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fa7c 	bl	8003668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x1c>
 8003190:	2302      	movs	r3, #2
 8003192:	e0b4      	b.n	80032fe <HAL_TIM_ConfigClockSource+0x186>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd4>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8086 	beq.w	80032ea <HAL_TIM_ConfigClockSource+0x172>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xa6>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x11a>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xfa>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 f98d 	bl	800354c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04f      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 f976 	bl	800354c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f8ea 	bl	8003458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f943 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 8003290:	e02c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f909 	bl	80034b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f933 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f8ca 	bl	8003458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f923 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f91a 	bl	8003516 <TIM_ITRx_SetConfig>
      break;
 80032e2:	e003      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a34      	ldr	r2, [pc, #208]	; (800343c <TIM_Base_SetConfig+0xe4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00f      	beq.n	8003390 <TIM_Base_SetConfig+0x38>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d00b      	beq.n	8003390 <TIM_Base_SetConfig+0x38>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a31      	ldr	r2, [pc, #196]	; (8003440 <TIM_Base_SetConfig+0xe8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_Base_SetConfig+0x38>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a30      	ldr	r2, [pc, #192]	; (8003444 <TIM_Base_SetConfig+0xec>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_Base_SetConfig+0x38>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <TIM_Base_SetConfig+0xf0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d108      	bne.n	80033a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <TIM_Base_SetConfig+0xe4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a22      	ldr	r2, [pc, #136]	; (8003440 <TIM_Base_SetConfig+0xe8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <TIM_Base_SetConfig+0xec>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <TIM_Base_SetConfig+0xf0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <TIM_Base_SetConfig+0xf4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1e      	ldr	r2, [pc, #120]	; (8003450 <TIM_Base_SetConfig+0xf8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0x8a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <TIM_Base_SetConfig+0xfc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <TIM_Base_SetConfig+0xe4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40010000 	.word	0x40010000
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800
 8003448:	40000c00 	.word	0x40000c00
 800344c:	40014000 	.word	0x40014000
 8003450:	40014400 	.word	0x40014400
 8003454:	40014800 	.word	0x40014800

08003458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 030a 	bic.w	r3, r3, #10
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b087      	sub	sp, #28
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0210 	bic.w	r2, r3, #16
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	031b      	lsls	r3, r3, #12
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	f043 0307 	orr.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	609a      	str	r2, [r3, #8]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	431a      	orrs	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e050      	b.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d013      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d10c      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00
 8003664:	40014000 	.word	0x40014000

08003668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f103 0208 	add.w	r2, r3, #8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f103 0208 	add.w	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f103 0208 	add.w	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80036ea:	b480      	push	{r7}
 80036ec:	b085      	sub	sp, #20
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d103      	bne.n	8003752 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e00c      	b.n	800376c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3308      	adds	r3, #8
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e002      	b.n	8003760 <vListInsert+0x2e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d2f6      	bcs.n	800375a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	601a      	str	r2, [r3, #0]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6852      	ldr	r2, [r2, #4]
 80037c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d103      	bne.n	80037d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1e5a      	subs	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003802:	2301      	movs	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericReset+0x2e>
        __asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
    }
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d05d      	beq.n	80038e8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003830:	2b00      	cmp	r3, #0
 8003832:	d059      	beq.n	80038e8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2100      	movs	r1, #0
 800383e:	fba3 2302 	umull	r2, r3, r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d000      	beq.n	8003848 <xQueueGenericReset+0x50>
 8003846:	2101      	movs	r1, #1
 8003848:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14c      	bne.n	80038e8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800384e:	f002 fbb1 	bl	8005fb4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	441a      	add	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2200      	movs	r2, #0
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	3b01      	subs	r3, #1
 8003880:	6939      	ldr	r1, [r7, #16]
 8003882:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	441a      	add	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	22ff      	movs	r2, #255	; 0xff
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	22ff      	movs	r2, #255	; 0xff
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d114      	bne.n	80038ce <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01a      	beq.n	80038e2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	3310      	adds	r3, #16
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fb4d 	bl	8004f50 <xTaskRemoveFromEventList>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d012      	beq.n	80038e2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <xQueueGenericReset+0x11c>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	e009      	b.n	80038e2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3310      	adds	r3, #16
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fedc 	bl	8003690 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3324      	adds	r3, #36	; 0x24
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fed7 	bl	8003690 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80038e2:	f002 fb97 	bl	8006014 <vPortExitCritical>
 80038e6:	e001      	b.n	80038ec <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <xQueueGenericReset+0x110>
        __asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60bb      	str	r3, [r7, #8]
    }
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003908:	697b      	ldr	r3, [r7, #20]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d02e      	beq.n	800398e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003930:	2100      	movs	r1, #0
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	fba3 2302 	umull	r2, r3, r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d000      	beq.n	8003940 <xQueueGenericCreate+0x28>
 800393e:	2101      	movs	r1, #1
 8003940:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d123      	bne.n	800398e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800394e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003952:	d81c      	bhi.n	800398e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3350      	adds	r3, #80	; 0x50
 8003962:	4618      	mov	r0, r3
 8003964:	f002 fc4a 	bl	80061fc <pvPortMalloc>
 8003968:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01c      	beq.n	80039aa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3350      	adds	r3, #80	; 0x50
 8003978:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800397a:	79fa      	ldrb	r2, [r7, #7]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f814 	bl	80039b4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800398c:	e00d      	b.n	80039aa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericCreate+0x92>
        __asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	613b      	str	r3, [r7, #16]
    }
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80039aa:	69fb      	ldr	r3, [r7, #28]
    }
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e002      	b.n	80039d6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039e2:	2101      	movs	r1, #1
 80039e4:	69b8      	ldr	r0, [r7, #24]
 80039e6:	f7ff ff07 	bl	80037f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08e      	sub	sp, #56	; 0x38
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <xQueueGenericSend+0x32>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <xQueueGenericSend+0x40>
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <xQueueGenericSend+0x44>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <xQueueGenericSend+0x46>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <xQueueGenericSend+0x60>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSend+0x6e>
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <xQueueGenericSend+0x72>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueGenericSend+0x74>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <xQueueGenericSend+0x8e>
        __asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	623b      	str	r3, [r7, #32]
    }
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a8a:	f001 fc73 	bl	8005374 <xTaskGetSchedulerState>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <xQueueGenericSend+0x9e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSend+0xa2>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSend+0xa4>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xQueueGenericSend+0xbe>
        __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	61fb      	str	r3, [r7, #28]
    }
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003aba:	f002 fa7b 	bl	8005fb4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <xQueueGenericSend+0xd4>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d129      	bne.n	8003b24 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad6:	f000 fa21 	bl	8003f1c <prvCopyDataToQueue>
 8003ada:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 fa31 	bl	8004f50 <xTaskRemoveFromEventList>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003af4:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <xQueueGenericSend+0x1f8>)
 8003af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	e00a      	b.n	8003b1c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <xQueueGenericSend+0x1f8>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003b1c:	f002 fa7a 	bl	8006014 <vPortExitCritical>
                return pdPASS;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e063      	b.n	8003bec <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003b2a:	f002 fa73 	bl	8006014 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e05c      	b.n	8003bec <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d106      	bne.n	8003b46 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fadf 	bl	8005100 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003b46:	f002 fa65 	bl	8006014 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003b4a:	f000 fed5 	bl	80048f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003b4e:	f002 fa31 	bl	8005fb4 <vPortEnterCritical>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d103      	bne.n	8003b68 <xQueueGenericSend+0x16c>
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d103      	bne.n	8003b7e <xQueueGenericSend+0x182>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b7e:	f002 fa49 	bl	8006014 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b82:	1d3a      	adds	r2, r7, #4
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 face 	bl	800512c <xTaskCheckForTimeOut>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d124      	bne.n	8003be0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b98:	f000 fab8 	bl	800410c <prvIsQueueFull>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	3310      	adds	r3, #16
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f964 	bl	8004e78 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb2:	f000 fa43 	bl	800403c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003bb6:	f000 fead 	bl	8004914 <xTaskResumeAll>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f af7c 	bne.w	8003aba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <xQueueGenericSend+0x1f8>)
 8003bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	e772      	b.n	8003aba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd6:	f000 fa31 	bl	800403c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003bda:	f000 fe9b 	bl	8004914 <xTaskResumeAll>
 8003bde:	e76c      	b.n	8003aba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be2:	f000 fa2b 	bl	800403c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003be6:	f000 fe95 	bl	8004914 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003bea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3738      	adds	r7, #56	; 0x38
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	e000ed04 	.word	0xe000ed04

08003bf8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b092      	sub	sp, #72	; 0x48
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10a      	bne.n	8003c26 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003c22:	bf00      	nop
 8003c24:	e7fe      	b.n	8003c24 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <xQueueGenericSendFromISR+0x3c>
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <xQueueGenericSendFromISR+0x40>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <xQueueGenericSendFromISR+0x42>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d103      	bne.n	8003c62 <xQueueGenericSendFromISR+0x6a>
 8003c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <xQueueGenericSendFromISR+0x6e>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <xQueueGenericSendFromISR+0x70>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c82:	f002 fa7b 	bl	800617c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003c86:	f3ef 8211 	mrs	r2, BASEPRI
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	623a      	str	r2, [r7, #32]
 8003c9c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <xQueueGenericSendFromISR+0xbc>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d146      	bne.n	8003d42 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003cca:	f000 f927 	bl	8003f1c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003cce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d112      	bne.n	8003cfe <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02d      	beq.n	8003d3c <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	3324      	adds	r3, #36	; 0x24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f933 	bl	8004f50 <xTaskRemoveFromEventList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d025      	beq.n	8003d3c <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d022      	beq.n	8003d3c <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e01e      	b.n	8003d3c <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8003cfe:	f000 ff2b 	bl	8004b58 <uxTaskGetNumberOfTasks>
 8003d02:	6338      	str	r0, [r7, #48]	; 0x30
 8003d04:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d916      	bls.n	8003d3c <xQueueGenericSendFromISR+0x144>
 8003d0e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003d12:	2b7f      	cmp	r3, #127	; 0x7f
 8003d14:	d10a      	bne.n	8003d2c <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61bb      	str	r3, [r7, #24]
    }
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xQueueGenericSendFromISR+0x132>
 8003d2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d30:	3301      	adds	r3, #1
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	b25a      	sxtb	r2, r3
 8003d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8003d40:	e001      	b.n	8003d46 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	647b      	str	r3, [r7, #68]	; 0x44
 8003d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d48:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003d50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3748      	adds	r7, #72	; 0x48
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08c      	sub	sp, #48	; 0x30
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <xQueueReceive+0x30>
        __asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	623b      	str	r3, [r7, #32]
    }
 8003d88:	bf00      	nop
 8003d8a:	e7fe      	b.n	8003d8a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <xQueueReceive+0x3e>
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <xQueueReceive+0x42>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <xQueueReceive+0x44>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xQueueReceive+0x5e>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	61fb      	str	r3, [r7, #28]
    }
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dba:	f001 fadb 	bl	8005374 <xTaskGetSchedulerState>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <xQueueReceive+0x6e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <xQueueReceive+0x72>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <xQueueReceive+0x74>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xQueueReceive+0x8e>
        __asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	61bb      	str	r3, [r7, #24]
    }
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003dea:	f002 f8e3 	bl	8005fb4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d01f      	beq.n	8003e3a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfe:	f000 f8f7 	bl	8003ff0 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	1e5a      	subs	r2, r3, #1
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00f      	beq.n	8003e32 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	3310      	adds	r3, #16
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f89a 	bl	8004f50 <xTaskRemoveFromEventList>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e22:	4b3d      	ldr	r3, [pc, #244]	; (8003f18 <xQueueReceive+0x1bc>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e32:	f002 f8ef 	bl	8006014 <vPortExitCritical>
                return pdPASS;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e069      	b.n	8003f0e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e40:	f002 f8e8 	bl	8006014 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e062      	b.n	8003f0e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e4e:	f107 0310 	add.w	r3, r7, #16
 8003e52:	4618      	mov	r0, r3
 8003e54:	f001 f954 	bl	8005100 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e5c:	f002 f8da 	bl	8006014 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e60:	f000 fd4a 	bl	80048f8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e64:	f002 f8a6 	bl	8005fb4 <vPortEnterCritical>
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <xQueueReceive+0x122>
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d103      	bne.n	8003e94 <xQueueReceive+0x138>
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	f002 f8be 	bl	8006014 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e98:	1d3a      	adds	r2, r7, #4
 8003e9a:	f107 0310 	add.w	r3, r7, #16
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 f943 	bl	800512c <xTaskCheckForTimeOut>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d123      	bne.n	8003ef4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eae:	f000 f917 	bl	80040e0 <prvIsQueueEmpty>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d017      	beq.n	8003ee8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 ffd9 	bl	8004e78 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec8:	f000 f8b8 	bl	800403c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ecc:	f000 fd22 	bl	8004914 <xTaskResumeAll>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d189      	bne.n	8003dea <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003ed6:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <xQueueReceive+0x1bc>)
 8003ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	e780      	b.n	8003dea <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eea:	f000 f8a7 	bl	800403c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003eee:	f000 fd11 	bl	8004914 <xTaskResumeAll>
 8003ef2:	e77a      	b.n	8003dea <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef6:	f000 f8a1 	bl	800403c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003efa:	f000 fd0b 	bl	8004914 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f00:	f000 f8ee 	bl	80040e0 <prvIsQueueEmpty>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f43f af6f 	beq.w	8003dea <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f0c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3730      	adds	r7, #48	; 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d14d      	bne.n	8003fde <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fa32 	bl	80053b0 <xTaskPriorityDisinherit>
 8003f4c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e043      	b.n	8003fde <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d119      	bne.n	8003f90 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6858      	ldr	r0, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	461a      	mov	r2, r3
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	f004 fb0e 	bl	8008588 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d32b      	bcc.n	8003fde <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e026      	b.n	8003fde <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68d8      	ldr	r0, [r3, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	f004 faf4 	bl	8008588 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	425b      	negs	r3, r3
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d207      	bcs.n	8003fcc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d105      	bne.n	8003fde <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003fe6:	697b      	ldr	r3, [r7, #20]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	441a      	add	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d303      	bcc.n	8004024 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68d9      	ldr	r1, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	461a      	mov	r2, r3
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f004 faaa 	bl	8008588 <memcpy>
    }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004044:	f001 ffb6 	bl	8005fb4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800404e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004050:	e011      	b.n	8004076 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ff76 	bl	8004f50 <xTaskRemoveFromEventList>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800406a:	f001 f8c5 	bl	80051f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3b01      	subs	r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	dce9      	bgt.n	8004052 <prvUnlockQueue+0x16>
 800407e:	e000      	b.n	8004082 <prvUnlockQueue+0x46>
                    break;
 8004080:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	22ff      	movs	r2, #255	; 0xff
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800408a:	f001 ffc3 	bl	8006014 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800408e:	f001 ff91 	bl	8005fb4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004098:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800409a:	e011      	b.n	80040c0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3310      	adds	r3, #16
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff51 	bl	8004f50 <xTaskRemoveFromEventList>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80040b4:	f001 f8a0 	bl	80051f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dce9      	bgt.n	800409c <prvUnlockQueue+0x60>
 80040c8:	e000      	b.n	80040cc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80040ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80040d4:	f001 ff9e 	bl	8006014 <vPortExitCritical>
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040e8:	f001 ff64 	bl	8005fb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e001      	b.n	80040fe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040fe:	f001 ff89 	bl	8006014 <vPortExitCritical>

    return xReturn;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004114:	f001 ff4e 	bl	8005fb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	429a      	cmp	r2, r3
 8004122:	d102      	bne.n	800412a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e001      	b.n	800412e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800412e:	f001 ff71 	bl	8006014 <vPortExitCritical>

    return xReturn;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
    }
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d024      	beq.n	80041b6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e01e      	b.n	80041b0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <vQueueAddToRegistry+0x98>)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	d105      	bne.n	800418e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <vQueueAddToRegistry+0x98>)
 8004188:	4413      	add	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
                    break;
 800418c:	e013      	b.n	80041b6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <vQueueAddToRegistry+0x6e>
 8004194:	4a0f      	ldr	r2, [pc, #60]	; (80041d4 <vQueueAddToRegistry+0x98>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d104      	bne.n	80041aa <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <vQueueAddToRegistry+0x98>)
 80041a6:	4413      	add	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	3301      	adds	r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d9dd      	bls.n	8004172 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000180 	.word	0x20000180

080041d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80041e8:	f001 fee4 	bl	8005fb4 <vPortEnterCritical>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d103      	bne.n	8004202 <vQueueWaitForMessageRestricted+0x2a>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004208:	b25b      	sxtb	r3, r3
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d103      	bne.n	8004218 <vQueueWaitForMessageRestricted+0x40>
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004218:	f001 fefc 	bl	8006014 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3324      	adds	r3, #36	; 0x24
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fe47 	bl	8004ec0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004232:	6978      	ldr	r0, [r7, #20]
 8004234:	f7ff ff02 	bl	800403c <prvUnlockQueue>
    }
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f001 ffd1 	bl	80061fc <pvPortMalloc>
 800425a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d013      	beq.n	800428a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004262:	2058      	movs	r0, #88	; 0x58
 8004264:	f001 ffca 	bl	80061fc <pvPortMalloc>
 8004268:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004270:	2258      	movs	r2, #88	; 0x58
 8004272:	2100      	movs	r1, #0
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f004 f953 	bl	8008520 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
 8004280:	e005      	b.n	800428e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f002 f874 	bl	8006370 <vPortFree>
 8004288:	e001      	b.n	800428e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	2300      	movs	r3, #0
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f80e 	bl	80042cc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80042b0:	69f8      	ldr	r0, [r7, #28]
 80042b2:	f000 f899 	bl	80043e8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e002      	b.n	80042c2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295
 80042c0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80042c2:	69bb      	ldr	r3, [r7, #24]
    }
 80042c4:	4618      	mov	r0, r3
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	461a      	mov	r2, r3
 80042e4:	21a5      	movs	r1, #165	; 0xa5
 80042e6:	f004 f91b 	bl	8008520 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f4:	3b01      	subs	r3, #1
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f023 0307 	bic.w	r3, r3, #7
 8004302:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <prvInitialiseNewTask+0x58>
        __asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	617b      	str	r3, [r7, #20]
    }
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01e      	beq.n	8004368 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e012      	b.n	8004356 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	7819      	ldrb	r1, [r3, #0]
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	3334      	adds	r3, #52	; 0x34
 8004340:	460a      	mov	r2, r1
 8004342:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	3301      	adds	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b09      	cmp	r3, #9
 800435a:	d9e9      	bls.n	8004330 <prvInitialiseNewTask+0x64>
 800435c:	e000      	b.n	8004360 <prvInitialiseNewTask+0x94>
            {
                break;
 800435e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436a:	2b05      	cmp	r3, #5
 800436c:	d90a      	bls.n	8004384 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	613b      	str	r3, [r7, #16]
    }
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2b05      	cmp	r3, #5
 8004388:	d901      	bls.n	800438e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800438a:	2305      	movs	r3, #5
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004398:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	3304      	adds	r3, #4
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff f996 	bl	80036d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	3318      	adds	r3, #24
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff f991 	bl	80036d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f1c3 0206 	rsb	r2, r3, #6
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	69b8      	ldr	r0, [r7, #24]
 80043ca:	f001 fc49 	bl	8005c60 <pxPortInitialiseStack>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80043d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043e0:	bf00      	nop
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80043e8:	b5b0      	push	{r4, r5, r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80043f0:	f001 fde0 	bl	8005fb4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80043f4:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <prvAddNewTaskToReadyList+0x14c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a4e      	ldr	r2, [pc, #312]	; (8004534 <prvAddNewTaskToReadyList+0x14c>)
 80043fc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80043fe:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <prvAddNewTaskToReadyList+0x150>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004406:	4a4c      	ldr	r2, [pc, #304]	; (8004538 <prvAddNewTaskToReadyList+0x150>)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800440c:	4b49      	ldr	r3, [pc, #292]	; (8004534 <prvAddNewTaskToReadyList+0x14c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d110      	bne.n	8004436 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004414:	f000 ff14 	bl	8005240 <prvInitialiseTaskLists>
 8004418:	e00d      	b.n	8004436 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800441a:	4b48      	ldr	r3, [pc, #288]	; (800453c <prvAddNewTaskToReadyList+0x154>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004422:	4b45      	ldr	r3, [pc, #276]	; (8004538 <prvAddNewTaskToReadyList+0x150>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004430:	4a41      	ldr	r2, [pc, #260]	; (8004538 <prvAddNewTaskToReadyList+0x150>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <prvAddNewTaskToReadyList+0x158>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	4a40      	ldr	r2, [pc, #256]	; (8004540 <prvAddNewTaskToReadyList+0x158>)
 800443e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004440:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <prvAddNewTaskToReadyList+0x158>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <prvAddNewTaskToReadyList+0x94>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	f003 fdb3 	bl	8007fbc <SEGGER_SYSVIEW_OnTaskCreate>
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	461d      	mov	r5, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461c      	mov	r4, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	1ae3      	subs	r3, r4, r3
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	462b      	mov	r3, r5
 8004478:	f002 f93c 	bl	80066f4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f003 fe20 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2201      	movs	r2, #1
 800448a:	409a      	lsls	r2, r3
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <prvAddNewTaskToReadyList+0x15c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4313      	orrs	r3, r2
 8004492:	4a2c      	ldr	r2, [pc, #176]	; (8004544 <prvAddNewTaskToReadyList+0x15c>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	492b      	ldr	r1, [pc, #172]	; (8004548 <prvAddNewTaskToReadyList+0x160>)
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3304      	adds	r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	3204      	adds	r2, #4
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	1d1a      	adds	r2, r3, #4
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <prvAddNewTaskToReadyList+0x160>)
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	615a      	str	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	4918      	ldr	r1, [pc, #96]	; (8004548 <prvAddNewTaskToReadyList+0x160>)
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	4814      	ldr	r0, [pc, #80]	; (8004548 <prvAddNewTaskToReadyList+0x160>)
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4403      	add	r3, r0
 8004500:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004502:	f001 fd87 	bl	8006014 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <prvAddNewTaskToReadyList+0x154>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00e      	beq.n	800452c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <prvAddNewTaskToReadyList+0x150>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d207      	bcs.n	800452c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <prvAddNewTaskToReadyList+0x164>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bdb0      	pop	{r4, r5, r7, pc}
 8004534:	200002ac 	.word	0x200002ac
 8004538:	200001c0 	.word	0x200001c0
 800453c:	200002b8 	.word	0x200002b8
 8004540:	200002c8 	.word	0x200002c8
 8004544:	200002b4 	.word	0x200002b4
 8004548:	200001c4 	.word	0x200001c4
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004558:	f001 fd2c 	bl	8005fb4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <vTaskSuspend+0x18>
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <vTaskSuspend+0x13c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	e000      	b.n	800456a <vTaskSuspend+0x1a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4618      	mov	r0, r3
 8004570:	f003 fe4a 	bl	8008208 <SEGGER_SYSVIEW_ShrinkId>
 8004574:	4603      	mov	r3, r0
 8004576:	4619      	mov	r1, r3
 8004578:	2029      	movs	r0, #41	; 0x29
 800457a:	f003 f9a3 	bl	80078c4 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f90e 	bl	80037a4 <uxListRemove>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d115      	bne.n	80045ba <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	493f      	ldr	r1, [pc, #252]	; (8004690 <vTaskSuspend+0x140>)
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <vTaskSuspend+0x6a>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	4b38      	ldr	r3, [pc, #224]	; (8004694 <vTaskSuspend+0x144>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4013      	ands	r3, r2
 80045b6:	4a37      	ldr	r2, [pc, #220]	; (8004694 <vTaskSuspend+0x144>)
 80045b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff f8ec 	bl	80037a4 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	211b      	movs	r1, #27
 80045d0:	4618      	mov	r0, r3
 80045d2:	f003 fdb9 	bl	8008148 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	482e      	ldr	r0, [pc, #184]	; (8004698 <vTaskSuspend+0x148>)
 80045de:	f7ff f884 	bl	80036ea <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e010      	b.n	800460a <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4413      	add	r3, r2
 80045ee:	3354      	adds	r3, #84	; 0x54
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	3354      	adds	r3, #84	; 0x54
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3301      	adds	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	ddeb      	ble.n	80045e8 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004610:	f001 fd00 	bl	8006014 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <vTaskSuspend+0x14c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800461c:	f001 fcca 	bl	8005fb4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004620:	f000 fe8c 	bl	800533c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004624:	f001 fcf6 	bl	8006014 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <vTaskSuspend+0x13c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d127      	bne.n	8004682 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <vTaskSuspend+0x14c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <vTaskSuspend+0x150>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <vTaskSuspend+0x108>
        __asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60fb      	str	r3, [r7, #12]
    }
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <vTaskSuspend+0x154>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004668:	e00b      	b.n	8004682 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <vTaskSuspend+0x148>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <vTaskSuspend+0x158>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d103      	bne.n	800467e <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <vTaskSuspend+0x13c>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    }
 800467c:	e001      	b.n	8004682 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 800467e:	f000 fb91 	bl	8004da4 <vTaskSwitchContext>
    }
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200001c0 	.word	0x200001c0
 8004690:	200001c4 	.word	0x200001c4
 8004694:	200002b4 	.word	0x200002b4
 8004698:	20000298 	.word	0x20000298
 800469c:	200002b8 	.word	0x200002b8
 80046a0:	200002d4 	.word	0x200002d4
 80046a4:	e000ed04 	.word	0xe000ed04
 80046a8:	200002ac 	.word	0x200002ac

080046ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60fb      	str	r3, [r7, #12]
    }
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <prvTaskIsTaskSuspended+0x5c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10a      	bne.n	80046f8 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <prvTaskIsTaskSuspended+0x60>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d005      	beq.n	80046f8 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80046f8:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80046fa:	4618      	mov	r0, r3
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000298 	.word	0x20000298
 800470c:	2000026c 	.word	0x2000026c

08004710 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <vTaskResume+0x28>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004738:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <vTaskResume+0x114>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d06c      	beq.n	800481c <vTaskResume+0x10c>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d069      	beq.n	800481c <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 8004748:	f001 fc34 	bl	8005fb4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f7ff ffad 	bl	80046ac <prvTaskIsTaskSuspended>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05f      	beq.n	8004818 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fd54 	bl	8008208 <SEGGER_SYSVIEW_ShrinkId>
 8004760:	4603      	mov	r3, r0
 8004762:	4619      	mov	r1, r3
 8004764:	202a      	movs	r0, #42	; 0x2a
 8004766:	f003 f8ad 	bl	80078c4 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f818 	bl	80037a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4618      	mov	r0, r3
 8004778:	f003 fca4 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <vTaskResume+0x118>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4313      	orrs	r3, r2
 800478a:	4a27      	ldr	r2, [pc, #156]	; (8004828 <vTaskResume+0x118>)
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004792:	4926      	ldr	r1, [pc, #152]	; (800482c <vTaskResume+0x11c>)
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3304      	adds	r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	3204      	adds	r2, #4
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <vTaskResume+0x11c>)
 80047d2:	441a      	add	r2, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	615a      	str	r2, [r3, #20]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4913      	ldr	r1, [pc, #76]	; (800482c <vTaskResume+0x11c>)
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	480f      	ldr	r0, [pc, #60]	; (800482c <vTaskResume+0x11c>)
 80047ee:	4613      	mov	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4403      	add	r3, r0
 80047f8:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <vTaskResume+0x114>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d307      	bcc.n	8004818 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <vTaskResume+0x120>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004818:	f001 fbfc 	bl	8006014 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800481c:	bf00      	nop
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200001c0 	.word	0x200001c0
 8004828:	200002b4 	.word	0x200002b4
 800482c:	200001c4 	.word	0x200001c4
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <vTaskStartScheduler+0xa4>)
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	2300      	movs	r3, #0
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	2282      	movs	r2, #130	; 0x82
 8004846:	4925      	ldr	r1, [pc, #148]	; (80048dc <vTaskStartScheduler+0xa8>)
 8004848:	4825      	ldr	r0, [pc, #148]	; (80048e0 <vTaskStartScheduler+0xac>)
 800484a:	f7ff fcf9 	bl	8004240 <xTaskCreate>
 800484e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d102      	bne.n	800485c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004856:	f000 fed7 	bl	8005608 <xTimerCreateTimerTask>
 800485a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d124      	bne.n	80048ac <vTaskStartScheduler+0x78>
        __asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
    }
 8004874:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <vTaskStartScheduler+0xb0>)
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <vTaskStartScheduler+0xb4>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <vTaskStartScheduler+0xb8>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <vTaskStartScheduler+0xbc>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <vTaskStartScheduler+0xa4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d102      	bne.n	800489c <vTaskStartScheduler+0x68>
 8004896:	f003 fb75 	bl	8007f84 <SEGGER_SYSVIEW_OnIdle>
 800489a:	e004      	b.n	80048a6 <vTaskStartScheduler+0x72>
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <vTaskStartScheduler+0xbc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f003 fbcd 	bl	8008040 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80048a6:	f001 fa65 	bl	8005d74 <xPortStartScheduler>
 80048aa:	e00e      	b.n	80048ca <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d10a      	bne.n	80048ca <vTaskStartScheduler+0x96>
        __asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	607b      	str	r3, [r7, #4]
    }
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <vTaskStartScheduler+0xc0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200002d0 	.word	0x200002d0
 80048dc:	08008ecc 	.word	0x08008ecc
 80048e0:	08005211 	.word	0x08005211
 80048e4:	200002cc 	.word	0x200002cc
 80048e8:	200002b8 	.word	0x200002b8
 80048ec:	200002b0 	.word	0x200002b0
 80048f0:	200001c0 	.word	0x200001c0
 80048f4:	20000010 	.word	0x20000010

080048f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <vTaskSuspendAll+0x18>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a03      	ldr	r2, [pc, #12]	; (8004910 <vTaskSuspendAll+0x18>)
 8004904:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	200002d4 	.word	0x200002d4

08004914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004922:	4b73      	ldr	r3, [pc, #460]	; (8004af0 <xTaskResumeAll+0x1dc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <xTaskResumeAll+0x2c>
        __asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	607b      	str	r3, [r7, #4]
    }
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004940:	f001 fb38 	bl	8005fb4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004944:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <xTaskResumeAll+0x1dc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3b01      	subs	r3, #1
 800494a:	4a69      	ldr	r2, [pc, #420]	; (8004af0 <xTaskResumeAll+0x1dc>)
 800494c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494e:	4b68      	ldr	r3, [pc, #416]	; (8004af0 <xTaskResumeAll+0x1dc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80c4 	bne.w	8004ae0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004958:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <xTaskResumeAll+0x1e0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80bf 	beq.w	8004ae0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004962:	e08e      	b.n	8004a82 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <xTaskResumeAll+0x1e4>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	6a12      	ldr	r2, [r2, #32]
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	69d2      	ldr	r2, [r2, #28]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3318      	adds	r3, #24
 800498e:	429a      	cmp	r2, r3
 8004990:	d103      	bne.n	800499a <xTaskResumeAll+0x86>
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2200      	movs	r2, #0
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	68d2      	ldr	r2, [r2, #12]
 80049b8:	609a      	str	r2, [r3, #8]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	6892      	ldr	r2, [r2, #8]
 80049c2:	605a      	str	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3304      	adds	r3, #4
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d103      	bne.n	80049d8 <xTaskResumeAll+0xc4>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2200      	movs	r2, #0
 80049dc:	615a      	str	r2, [r3, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f003 fb6a 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	4b40      	ldr	r3, [pc, #256]	; (8004afc <xTaskResumeAll+0x1e8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <xTaskResumeAll+0x1e8>)
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	493e      	ldr	r1, [pc, #248]	; (8004b00 <xTaskResumeAll+0x1ec>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	3304      	adds	r3, #4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	3204      	adds	r2, #4
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a2e      	ldr	r2, [pc, #184]	; (8004b00 <xTaskResumeAll+0x1ec>)
 8004a46:	441a      	add	r2, r3
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	615a      	str	r2, [r3, #20]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	492b      	ldr	r1, [pc, #172]	; (8004b00 <xTaskResumeAll+0x1ec>)
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	4827      	ldr	r0, [pc, #156]	; (8004b00 <xTaskResumeAll+0x1ec>)
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4403      	add	r3, r0
 8004a6c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <xTaskResumeAll+0x1f0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8004a7c:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <xTaskResumeAll+0x1f4>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a82:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <xTaskResumeAll+0x1e4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f47f af6c 	bne.w	8004964 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004a92:	f000 fc53 	bl	800533c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <xTaskResumeAll+0x1f8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004aa2:	f000 f865 	bl	8004b70 <xTaskIncrementTick>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004aac:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <xTaskResumeAll+0x1f4>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f1      	bne.n	8004aa2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <xTaskResumeAll+0x1f8>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <xTaskResumeAll+0x1f4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <xTaskResumeAll+0x1fc>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004ae0:	f001 fa98 	bl	8006014 <vPortExitCritical>

    return xAlreadyYielded;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200002d4 	.word	0x200002d4
 8004af4:	200002ac 	.word	0x200002ac
 8004af8:	2000026c 	.word	0x2000026c
 8004afc:	200002b4 	.word	0x200002b4
 8004b00:	200001c4 	.word	0x200001c4
 8004b04:	200001c0 	.word	0x200001c0
 8004b08:	200002c0 	.word	0x200002c0
 8004b0c:	200002bc 	.word	0x200002bc
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <xTaskGetTickCount+0x1c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004b20:	687b      	ldr	r3, [r7, #4]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	200002b0 	.word	0x200002b0

08004b34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b3a:	f001 fb1f 	bl	800617c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004b42:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <xTaskGetTickCountFromISR+0x20>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004b48:	683b      	ldr	r3, [r7, #0]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	200002b0 	.word	0x200002b0

08004b58 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <uxTaskGetNumberOfTasks+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	200002ac 	.word	0x200002ac

08004b70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b7a:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <xTaskIncrementTick+0x208>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 80f0 	bne.w	8004d64 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b84:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <xTaskIncrementTick+0x20c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004b8c:	4a7b      	ldr	r2, [pc, #492]	; (8004d7c <xTaskIncrementTick+0x20c>)
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d120      	bne.n	8004bda <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004b98:	4b79      	ldr	r3, [pc, #484]	; (8004d80 <xTaskIncrementTick+0x210>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <xTaskIncrementTick+0x48>
        __asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	607b      	str	r3, [r7, #4]
    }
 8004bb4:	bf00      	nop
 8004bb6:	e7fe      	b.n	8004bb6 <xTaskIncrementTick+0x46>
 8004bb8:	4b71      	ldr	r3, [pc, #452]	; (8004d80 <xTaskIncrementTick+0x210>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <xTaskIncrementTick+0x214>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6f      	ldr	r2, [pc, #444]	; (8004d80 <xTaskIncrementTick+0x210>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	4a6f      	ldr	r2, [pc, #444]	; (8004d84 <xTaskIncrementTick+0x214>)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	4b6e      	ldr	r3, [pc, #440]	; (8004d88 <xTaskIncrementTick+0x218>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4a6d      	ldr	r2, [pc, #436]	; (8004d88 <xTaskIncrementTick+0x218>)
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	f000 fbb1 	bl	800533c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004bda:	4b6c      	ldr	r3, [pc, #432]	; (8004d8c <xTaskIncrementTick+0x21c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a3a      	ldr	r2, [r7, #32]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	f0c0 80aa 	bcc.w	8004d3a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be6:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <xTaskIncrementTick+0x210>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf0:	4b66      	ldr	r3, [pc, #408]	; (8004d8c <xTaskIncrementTick+0x21c>)
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	601a      	str	r2, [r3, #0]
                    break;
 8004bf8:	e09f      	b.n	8004d3a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfa:	4b61      	ldr	r3, [pc, #388]	; (8004d80 <xTaskIncrementTick+0x210>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d203      	bcs.n	8004c1a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c12:	4a5e      	ldr	r2, [pc, #376]	; (8004d8c <xTaskIncrementTick+0x21c>)
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004c18:	e08f      	b.n	8004d3a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	68d2      	ldr	r2, [r2, #12]
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	6892      	ldr	r2, [r2, #8]
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d103      	bne.n	8004c48 <xTaskIncrementTick+0xd8>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	615a      	str	r2, [r3, #20]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	6a12      	ldr	r2, [r2, #32]
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	69d2      	ldr	r2, [r2, #28]
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	3318      	adds	r3, #24
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d103      	bne.n	8004c8e <xTaskIncrementTick+0x11e>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2200      	movs	r2, #0
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1e5a      	subs	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f003 fa0f 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <xTaskIncrementTick+0x220>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a36      	ldr	r2, [pc, #216]	; (8004d90 <xTaskIncrementTick+0x220>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4935      	ldr	r1, [pc, #212]	; (8004d94 <xTaskIncrementTick+0x224>)
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3304      	adds	r3, #4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	3204      	adds	r2, #4
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4a26      	ldr	r2, [pc, #152]	; (8004d94 <xTaskIncrementTick+0x224>)
 8004cfc:	441a      	add	r2, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	615a      	str	r2, [r3, #20]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	4923      	ldr	r1, [pc, #140]	; (8004d94 <xTaskIncrementTick+0x224>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	481f      	ldr	r0, [pc, #124]	; (8004d94 <xTaskIncrementTick+0x224>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4403      	add	r3, r0
 8004d22:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <xTaskIncrementTick+0x228>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f67f af59 	bls.w	8004be6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d38:	e755      	b.n	8004be6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d3a:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <xTaskIncrementTick+0x228>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	4914      	ldr	r1, [pc, #80]	; (8004d94 <xTaskIncrementTick+0x224>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d901      	bls.n	8004d56 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <xTaskIncrementTick+0x22c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e004      	b.n	8004d6e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004d64:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <xTaskIncrementTick+0x230>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <xTaskIncrementTick+0x230>)
 8004d6c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200002d4 	.word	0x200002d4
 8004d7c:	200002b0 	.word	0x200002b0
 8004d80:	20000264 	.word	0x20000264
 8004d84:	20000268 	.word	0x20000268
 8004d88:	200002c4 	.word	0x200002c4
 8004d8c:	200002cc 	.word	0x200002cc
 8004d90:	200002b4 	.word	0x200002b4
 8004d94:	200001c4 	.word	0x200001c4
 8004d98:	200001c0 	.word	0x200001c0
 8004d9c:	200002c0 	.word	0x200002c0
 8004da0:	200002bc 	.word	0x200002bc

08004da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <vTaskSwitchContext+0xbc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004db2:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <vTaskSwitchContext+0xc0>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004db8:	e04d      	b.n	8004e56 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004dba:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <vTaskSwitchContext+0xc0>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc0:	4b29      	ldr	r3, [pc, #164]	; (8004e68 <vTaskSwitchContext+0xc4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	fab3 f383 	clz	r3, r3
 8004dcc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	f1c3 031f 	rsb	r3, r3, #31
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	4925      	ldr	r1, [pc, #148]	; (8004e6c <vTaskSwitchContext+0xc8>)
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
    }
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vTaskSwitchContext+0x5a>
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <vTaskSwitchContext+0xc8>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3308      	adds	r3, #8
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d104      	bne.n	8004e30 <vTaskSwitchContext+0x8c>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <vTaskSwitchContext+0xcc>)
 8004e38:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <vTaskSwitchContext+0xcc>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <vTaskSwitchContext+0xd0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d102      	bne.n	8004e4c <vTaskSwitchContext+0xa8>
 8004e46:	f003 f89d 	bl	8007f84 <SEGGER_SYSVIEW_OnIdle>
}
 8004e4a:	e004      	b.n	8004e56 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <vTaskSwitchContext+0xcc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f003 f8f5 	bl	8008040 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004e56:	bf00      	nop
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200002d4 	.word	0x200002d4
 8004e64:	200002c0 	.word	0x200002c0
 8004e68:	200002b4 	.word	0x200002b4
 8004e6c:	200001c4 	.word	0x200001c4
 8004e70:	200001c0 	.word	0x200001c0
 8004e74:	200002d0 	.word	0x200002d0

08004e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
    }
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <vTaskPlaceOnEventList+0x44>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe fc43 	bl	8003732 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eac:	2101      	movs	r1, #1
 8004eae:	6838      	ldr	r0, [r7, #0]
 8004eb0:	f000 fb2a 	bl	8005508 <prvAddCurrentTaskToDelayedList>
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200001c0 	.word	0x200001c0

08004ec0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	613b      	str	r3, [r7, #16]
    }
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	61da      	str	r2, [r3, #28]
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	621a      	str	r2, [r3, #32]
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	3218      	adds	r2, #24
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f103 0218 	add.w	r2, r3, #24
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <vTaskPlaceOnEventListRestricted+0x8c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004f36:	2024      	movs	r0, #36	; 0x24
 8004f38:	f002 fca6 	bl	8007888 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f000 fae2 	bl	8005508 <prvAddCurrentTaskToDelayedList>
    }
 8004f44:	bf00      	nop
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200001c0 	.word	0x200001c0

08004f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
    }
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	6a3a      	ldr	r2, [r7, #32]
 8004f88:	6a12      	ldr	r2, [r2, #32]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	69d2      	ldr	r2, [r2, #28]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d103      	bne.n	8004faa <xTaskRemoveFromEventList+0x5a>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2200      	movs	r2, #0
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fba:	4b4b      	ldr	r3, [pc, #300]	; (80050e8 <xTaskRemoveFromEventList+0x198>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d162      	bne.n	8005088 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	68d2      	ldr	r2, [r2, #12]
 8004fd0:	609a      	str	r2, [r3, #8]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	6a3a      	ldr	r2, [r7, #32]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d103      	bne.n	8004ff0 <xTaskRemoveFromEventList+0xa0>
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	615a      	str	r2, [r3, #20]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	4618      	mov	r0, r3
 8005004:	f003 f85e 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	4b36      	ldr	r3, [pc, #216]	; (80050ec <xTaskRemoveFromEventList+0x19c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	4a35      	ldr	r2, [pc, #212]	; (80050ec <xTaskRemoveFromEventList+0x19c>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	4934      	ldr	r1, [pc, #208]	; (80050f0 <xTaskRemoveFromEventList+0x1a0>)
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3304      	adds	r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	60da      	str	r2, [r3, #12]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	3204      	adds	r2, #4
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4a24      	ldr	r2, [pc, #144]	; (80050f0 <xTaskRemoveFromEventList+0x1a0>)
 800505e:	441a      	add	r2, r3
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	615a      	str	r2, [r3, #20]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4921      	ldr	r1, [pc, #132]	; (80050f0 <xTaskRemoveFromEventList+0x1a0>)
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	481d      	ldr	r0, [pc, #116]	; (80050f0 <xTaskRemoveFromEventList+0x1a0>)
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4403      	add	r3, r0
 8005084:	6019      	str	r1, [r3, #0]
 8005086:	e01b      	b.n	80050c0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <xTaskRemoveFromEventList+0x1a4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	61da      	str	r2, [r3, #28]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	621a      	str	r2, [r3, #32]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	3218      	adds	r2, #24
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f103 0218 	add.w	r2, r3, #24
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	4a10      	ldr	r2, [pc, #64]	; (80050f4 <xTaskRemoveFromEventList+0x1a4>)
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <xTaskRemoveFromEventList+0x1a4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3301      	adds	r3, #1
 80050bc:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <xTaskRemoveFromEventList+0x1a4>)
 80050be:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <xTaskRemoveFromEventList+0x1a8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d905      	bls.n	80050da <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <xTaskRemoveFromEventList+0x1ac>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e001      	b.n	80050de <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200002d4 	.word	0x200002d4
 80050ec:	200002b4 	.word	0x200002b4
 80050f0:	200001c4 	.word	0x200001c4
 80050f4:	2000026c 	.word	0x2000026c
 80050f8:	200001c0 	.word	0x200001c0
 80050fc:	200002c0 	.word	0x200002c0

08005100 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <vTaskInternalSetTimeOutState+0x24>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <vTaskInternalSetTimeOutState+0x28>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	605a      	str	r2, [r3, #4]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	200002c4 	.word	0x200002c4
 8005128:	200002b0 	.word	0x200002b0

0800512c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	613b      	str	r3, [r7, #16]
    }
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	60fb      	str	r3, [r7, #12]
    }
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800516e:	f000 ff21 	bl	8005fb4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005172:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <xTaskCheckForTimeOut+0xc4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d102      	bne.n	8005192 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e026      	b.n	80051e0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <xTaskCheckForTimeOut+0xc8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d00a      	beq.n	80051b4 <xTaskCheckForTimeOut+0x88>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d305      	bcc.n	80051b4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	e015      	b.n	80051e0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20b      	bcs.n	80051d6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	1ad2      	subs	r2, r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ff98 	bl	8005100 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
 80051d4:	e004      	b.n	80051e0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80051e0:	f000 ff18 	bl	8006014 <vPortExitCritical>

    return xReturn;
 80051e4:	69fb      	ldr	r3, [r7, #28]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	200002b0 	.word	0x200002b0
 80051f4:	200002c4 	.word	0x200002c4

080051f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <vTaskMissedYield+0x14>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
}
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	200002c0 	.word	0x200002c0

08005210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005218:	f000 f852 	bl	80052c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <prvIdleTask+0x28>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d9f9      	bls.n	8005218 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <prvIdleTask+0x2c>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005234:	e7f0      	b.n	8005218 <prvIdleTask+0x8>
 8005236:	bf00      	nop
 8005238:	200001c4 	.word	0x200001c4
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005246:	2300      	movs	r3, #0
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	e00c      	b.n	8005266 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <prvInitialiseTaskLists+0x60>)
 8005258:	4413      	add	r3, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fa18 	bl	8003690 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3301      	adds	r3, #1
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b05      	cmp	r3, #5
 800526a:	d9ef      	bls.n	800524c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800526c:	480d      	ldr	r0, [pc, #52]	; (80052a4 <prvInitialiseTaskLists+0x64>)
 800526e:	f7fe fa0f 	bl	8003690 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005272:	480d      	ldr	r0, [pc, #52]	; (80052a8 <prvInitialiseTaskLists+0x68>)
 8005274:	f7fe fa0c 	bl	8003690 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005278:	480c      	ldr	r0, [pc, #48]	; (80052ac <prvInitialiseTaskLists+0x6c>)
 800527a:	f7fe fa09 	bl	8003690 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800527e:	480c      	ldr	r0, [pc, #48]	; (80052b0 <prvInitialiseTaskLists+0x70>)
 8005280:	f7fe fa06 	bl	8003690 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005284:	480b      	ldr	r0, [pc, #44]	; (80052b4 <prvInitialiseTaskLists+0x74>)
 8005286:	f7fe fa03 	bl	8003690 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <prvInitialiseTaskLists+0x78>)
 800528c:	4a05      	ldr	r2, [pc, #20]	; (80052a4 <prvInitialiseTaskLists+0x64>)
 800528e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <prvInitialiseTaskLists+0x7c>)
 8005292:	4a05      	ldr	r2, [pc, #20]	; (80052a8 <prvInitialiseTaskLists+0x68>)
 8005294:	601a      	str	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	200001c4 	.word	0x200001c4
 80052a4:	2000023c 	.word	0x2000023c
 80052a8:	20000250 	.word	0x20000250
 80052ac:	2000026c 	.word	0x2000026c
 80052b0:	20000280 	.word	0x20000280
 80052b4:	20000298 	.word	0x20000298
 80052b8:	20000264 	.word	0x20000264
 80052bc:	20000268 	.word	0x20000268

080052c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052c6:	e019      	b.n	80052fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80052c8:	f000 fe74 	bl	8005fb4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <prvCheckTasksWaitingTermination+0x50>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fa63 	bl	80037a4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <prvCheckTasksWaitingTermination+0x54>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <prvCheckTasksWaitingTermination+0x54>)
 80052e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	4a0a      	ldr	r2, [pc, #40]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80052f2:	f000 fe8f 	bl	8006014 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f810 	bl	800531c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <prvCheckTasksWaitingTermination+0x58>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e1      	bne.n	80052c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000280 	.word	0x20000280
 8005314:	200002ac 	.word	0x200002ac
 8005318:	20000294 	.word	0x20000294

0800531c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005328:	4618      	mov	r0, r3
 800532a:	f001 f821 	bl	8006370 <vPortFree>
            vPortFree( pxTCB );
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f001 f81e 	bl	8006370 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005340:	4b0a      	ldr	r3, [pc, #40]	; (800536c <prvResetNextTaskUnblockTime+0x30>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <prvResetNextTaskUnblockTime+0x34>)
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005352:	e005      	b.n	8005360 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <prvResetNextTaskUnblockTime+0x30>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <prvResetNextTaskUnblockTime+0x34>)
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000264 	.word	0x20000264
 8005370:	200002cc 	.word	0x200002cc

08005374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <xTaskGetSchedulerState+0x34>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005382:	2301      	movs	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	e008      	b.n	800539a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <xTaskGetSchedulerState+0x38>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005390:	2302      	movs	r3, #2
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	e001      	b.n	800539a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800539a:	687b      	ldr	r3, [r7, #4]
    }
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	200002b8 	.word	0x200002b8
 80053ac:	200002d4 	.word	0x200002d4

080053b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8095 	beq.w	80054f2 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80053c8:	4b4c      	ldr	r3, [pc, #304]	; (80054fc <xTaskPriorityDisinherit+0x14c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d00a      	beq.n	80053e8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	613b      	str	r3, [r7, #16]
    }
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
    }
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	1e5a      	subs	r2, r3, #1
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	429a      	cmp	r2, r3
 800541a:	d06a      	beq.n	80054f2 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d166      	bne.n	80054f2 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3304      	adds	r3, #4
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe f9bb 	bl	80037a4 <uxListRemove>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	2201      	movs	r2, #1
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43da      	mvns	r2, r3
 8005440:	4b2f      	ldr	r3, [pc, #188]	; (8005500 <xTaskPriorityDisinherit+0x150>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4013      	ands	r3, r2
 8005446:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <xTaskPriorityDisinherit+0x150>)
 8005448:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4619      	mov	r1, r3
 800544e:	204a      	movs	r0, #74	; 0x4a
 8005450:	f002 fa38 	bl	80078c4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	f1c3 0206 	rsb	r2, r3, #6
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	4618      	mov	r0, r3
 800546c:	f002 fe2a 	bl	80080c4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	2201      	movs	r2, #1
 8005476:	409a      	lsls	r2, r3
 8005478:	4b21      	ldr	r3, [pc, #132]	; (8005500 <xTaskPriorityDisinherit+0x150>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4313      	orrs	r3, r2
 800547e:	4a20      	ldr	r2, [pc, #128]	; (8005500 <xTaskPriorityDisinherit+0x150>)
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	491f      	ldr	r1, [pc, #124]	; (8005504 <xTaskPriorityDisinherit+0x154>)
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	3304      	adds	r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	3204      	adds	r2, #4
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <xTaskPriorityDisinherit+0x154>)
 80054c6:	441a      	add	r2, r3
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	615a      	str	r2, [r3, #20]
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	490c      	ldr	r1, [pc, #48]	; (8005504 <xTaskPriorityDisinherit+0x154>)
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1c59      	adds	r1, r3, #1
 80054e0:	4808      	ldr	r0, [pc, #32]	; (8005504 <xTaskPriorityDisinherit+0x154>)
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80054f2:	69fb      	ldr	r3, [r7, #28]
    }
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	200001c0 	.word	0x200001c0
 8005500:	200002b4 	.word	0x200002b4
 8005504:	200001c4 	.word	0x200001c4

08005508 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005512:	4b36      	ldr	r3, [pc, #216]	; (80055ec <prvAddCurrentTaskToDelayedList+0xe4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3304      	adds	r3, #4
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe f940 	bl	80037a4 <uxListRemove>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800552a:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	2201      	movs	r2, #1
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	4b2e      	ldr	r3, [pc, #184]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4013      	ands	r3, r2
 800553e:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xec>)
 8005540:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d124      	bne.n	8005594 <prvAddCurrentTaskToDelayedList+0x8c>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	3204      	adds	r2, #4
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	1d1a      	adds	r2, r3, #4
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005584:	615a      	str	r2, [r3, #20]
 8005586:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005592:	e026      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d209      	bcs.n	80055c0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <prvAddCurrentTaskToDelayedList+0xf4>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe f8ba 	bl	8003732 <vListInsert>
}
 80055be:	e010      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <prvAddCurrentTaskToDelayedList+0xf8>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe f8b0 	bl	8003732 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <prvAddCurrentTaskToDelayedList+0xfc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d202      	bcs.n	80055e2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80055dc:	4a09      	ldr	r2, [pc, #36]	; (8005604 <prvAddCurrentTaskToDelayedList+0xfc>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6013      	str	r3, [r2, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	200002b0 	.word	0x200002b0
 80055f0:	200001c0 	.word	0x200001c0
 80055f4:	200002b4 	.word	0x200002b4
 80055f8:	20000298 	.word	0x20000298
 80055fc:	20000268 	.word	0x20000268
 8005600:	20000264 	.word	0x20000264
 8005604:	200002cc 	.word	0x200002cc

08005608 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800560e:	2300      	movs	r3, #0
 8005610:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005612:	f000 faef 	bl	8005bf4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <xTimerCreateTimerTask+0x54>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xTimerCreateTimerTask+0x58>)
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	2302      	movs	r3, #2
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2300      	movs	r3, #0
 8005628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800562c:	490d      	ldr	r1, [pc, #52]	; (8005664 <xTimerCreateTimerTask+0x5c>)
 800562e:	480e      	ldr	r0, [pc, #56]	; (8005668 <xTimerCreateTimerTask+0x60>)
 8005630:	f7fe fe06 	bl	8004240 <xTaskCreate>
 8005634:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	603b      	str	r3, [r7, #0]
    }
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005652:	687b      	ldr	r3, [r7, #4]
    }
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000308 	.word	0x20000308
 8005660:	2000030c 	.word	0x2000030c
 8005664:	08008ed4 	.word	0x08008ed4
 8005668:	08005861 	.word	0x08005861

0800566c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800567a:	202c      	movs	r0, #44	; 0x2c
 800567c:	f000 fdbe 	bl	80061fc <pvPortMalloc>
 8005680:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f805 	bl	80056ae <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80056a4:	697b      	ldr	r3, [r7, #20]
        }
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	617b      	str	r3, [r7, #20]
    }
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80056d8:	f000 fa8c 	bl	8005bf4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fd ffe9 	bl	80036d0 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTimerGenericCommand+0x2e>
        __asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	623b      	str	r3, [r7, #32]
    }
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800574e:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <xTimerGenericCommand+0x98>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02a      	beq.n	80057ac <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b05      	cmp	r3, #5
 8005766:	dc18      	bgt.n	800579a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005768:	f7ff fe04 	bl	8005374 <xTaskGetSchedulerState>
 800576c:	4603      	mov	r3, r0
 800576e:	2b02      	cmp	r3, #2
 8005770:	d109      	bne.n	8005786 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <xTimerGenericCommand+0x98>)
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	f107 0114 	add.w	r1, r7, #20
 800577a:	2300      	movs	r3, #0
 800577c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800577e:	f7fe f93d 	bl	80039fc <xQueueGenericSend>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24
 8005784:	e012      	b.n	80057ac <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <xTimerGenericCommand+0x98>)
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	f107 0114 	add.w	r1, r7, #20
 800578e:	2300      	movs	r3, #0
 8005790:	2200      	movs	r2, #0
 8005792:	f7fe f933 	bl	80039fc <xQueueGenericSend>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24
 8005798:	e008      	b.n	80057ac <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <xTimerGenericCommand+0x98>)
 800579c:	6818      	ldr	r0, [r3, #0]
 800579e:	f107 0114 	add.w	r1, r7, #20
 80057a2:	2300      	movs	r3, #0
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	f7fe fa27 	bl	8003bf8 <xQueueGenericSendFromISR>
 80057aa:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80057ae:	4618      	mov	r0, r3
 80057b0:	3728      	adds	r7, #40	; 0x28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000308 	.word	0x20000308

080057bc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80057c8:	e008      	b.n	80057dc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	18d1      	adds	r1, r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f8dd 	bl	80059a8 <prvInsertTimerInActiveList>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ea      	bne.n	80057ca <prvReloadTimer+0xe>
        }
    }
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <prvProcessExpiredTimer+0x5c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3304      	adds	r3, #4
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd ffc3 	bl	80037a4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ffc3 	bl	80057bc <prvReloadTimer>
 8005836:	e008      	b.n	800584a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	4798      	blx	r3
    }
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000300 	.word	0x20000300

08005860 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005868:	f107 0308 	add.w	r3, r7, #8
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f857 	bl	8005920 <prvGetNextExpireTime>
 8005872:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4619      	mov	r1, r3
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f803 	bl	8005884 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800587e:	f000 f8d5 	bl	8005a2c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005882:	e7f1      	b.n	8005868 <prvTimerTask+0x8>

08005884 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800588e:	f7ff f833 	bl	80048f8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f866 	bl	8005968 <prvSampleTimeNow>
 800589c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d130      	bne.n	8005906 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <prvProcessTimerOrBlockTask+0x3c>
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d806      	bhi.n	80058c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80058b2:	f7ff f82f 	bl	8004914 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058b6:	68f9      	ldr	r1, [r7, #12]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ffa1 	bl	8005800 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80058be:	e024      	b.n	800590a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058c6:	4b13      	ldr	r3, [pc, #76]	; (8005914 <prvProcessTimerOrBlockTask+0x90>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <prvProcessTimerOrBlockTask+0x50>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <prvProcessTimerOrBlockTask+0x52>
 80058d4:	2300      	movs	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <prvProcessTimerOrBlockTask+0x94>)
 80058da:	6818      	ldr	r0, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7fe fc77 	bl	80041d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80058ea:	f7ff f813 	bl	8004914 <xTaskResumeAll>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80058f4:	4b09      	ldr	r3, [pc, #36]	; (800591c <prvProcessTimerOrBlockTask+0x98>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
    }
 8005904:	e001      	b.n	800590a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005906:	f7ff f805 	bl	8004914 <xTaskResumeAll>
    }
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000304 	.word	0x20000304
 8005918:	20000308 	.word	0x20000308
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005928:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <prvGetNextExpireTime+0x44>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <prvGetNextExpireTime+0x16>
 8005932:	2201      	movs	r2, #1
 8005934:	e000      	b.n	8005938 <prvGetNextExpireTime+0x18>
 8005936:	2200      	movs	r2, #0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <prvGetNextExpireTime+0x44>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e001      	b.n	8005954 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005954:	68fb      	ldr	r3, [r7, #12]
    }
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000300 	.word	0x20000300

08005968 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005970:	f7ff f8d0 	bl	8004b14 <xTaskGetTickCount>
 8005974:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <prvSampleTimeNow+0x3c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	429a      	cmp	r2, r3
 800597e:	d205      	bcs.n	800598c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005980:	f000 f912 	bl	8005ba8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e002      	b.n	8005992 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005992:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <prvSampleTimeNow+0x3c>)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005998:	68fb      	ldr	r3, [r7, #12]
    }
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000310 	.word	0x20000310

080059a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d812      	bhi.n	80059f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80059dc:	2301      	movs	r3, #1
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e01b      	b.n	8005a1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <prvInsertTimerInActiveList+0x7c>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7fd fea0 	bl	8003732 <vListInsert>
 80059f2:	e012      	b.n	8005a1a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d206      	bcs.n	8005a0a <prvInsertTimerInActiveList+0x62>
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d302      	bcc.n	8005a0a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e007      	b.n	8005a1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <prvInsertTimerInActiveList+0x80>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fd fe8c 	bl	8003732 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005a1a:	697b      	ldr	r3, [r7, #20]
    }
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000304 	.word	0x20000304
 8005a28:	20000300 	.word	0x20000300

08005a2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a32:	e0a6      	b.n	8005b82 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f2c0 80a3 	blt.w	8005b82 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd fea9 	bl	80037a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a52:	1d3b      	adds	r3, r7, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff ff87 	bl	8005968 <prvSampleTimeNow>
 8005a5a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 808d 	bhi.w	8005b80 <prvProcessReceivedCommands+0x154>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <prvProcessReceivedCommands+0x40>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005af9 	.word	0x08005af9
 8005a78:	08005b0d 	.word	0x08005b0d
 8005a7c:	08005b57 	.word	0x08005b57
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005a91 	.word	0x08005a91
 8005a88:	08005af9 	.word	0x08005af9
 8005a8c:	08005b0d 	.word	0x08005b0d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	18d1      	adds	r1, r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	69f8      	ldr	r0, [r7, #28]
 8005ab0:	f7ff ff7a 	bl	80059a8 <prvInsertTimerInActiveList>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	4413      	add	r3, r2
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	69f8      	ldr	r0, [r7, #28]
 8005ad6:	f7ff fe71 	bl	80057bc <prvReloadTimer>
 8005ada:	e008      	b.n	8005aee <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	69f8      	ldr	r0, [r7, #28]
 8005af4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005af6:	e044      	b.n	8005b82 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005b0a:	e03a      	b.n	8005b82 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	617b      	str	r3, [r7, #20]
    }
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	18d1      	adds	r1, r2, r3
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	69f8      	ldr	r0, [r7, #28]
 8005b50:	f7ff ff2a 	bl	80059a8 <prvInsertTimerInActiveList>
                        break;
 8005b54:	e015      	b.n	8005b82 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d103      	bne.n	8005b6c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005b64:	69f8      	ldr	r0, [r7, #28]
 8005b66:	f000 fc03 	bl	8006370 <vPortFree>
 8005b6a:	e00a      	b.n	8005b82 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b72:	f023 0301 	bic.w	r3, r3, #1
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005b7e:	e000      	b.n	8005b82 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005b80:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b82:	4b08      	ldr	r3, [pc, #32]	; (8005ba4 <prvProcessReceivedCommands+0x178>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f107 0108 	add.w	r1, r7, #8
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fe f8e5 	bl	8003d5c <xQueueReceive>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f47f af4d 	bne.w	8005a34 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000308 	.word	0x20000308

08005ba8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bae:	e009      	b.n	8005bc4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <prvSwitchTimerLists+0x44>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005bba:	f04f 31ff 	mov.w	r1, #4294967295
 8005bbe:	6838      	ldr	r0, [r7, #0]
 8005bc0:	f7ff fe1e 	bl	8005800 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <prvSwitchTimerLists+0x44>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <prvSwitchTimerLists+0x44>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <prvSwitchTimerLists+0x48>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a04      	ldr	r2, [pc, #16]	; (8005bec <prvSwitchTimerLists+0x44>)
 8005bda:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <prvSwitchTimerLists+0x48>)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6013      	str	r3, [r2, #0]
    }
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20000300 	.word	0x20000300
 8005bf0:	20000304 	.word	0x20000304

08005bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005bf8:	f000 f9dc 	bl	8005fb4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005bfc:	4b12      	ldr	r3, [pc, #72]	; (8005c48 <prvCheckForValidListAndQueue+0x54>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11d      	bne.n	8005c40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005c04:	4811      	ldr	r0, [pc, #68]	; (8005c4c <prvCheckForValidListAndQueue+0x58>)
 8005c06:	f7fd fd43 	bl	8003690 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005c0a:	4811      	ldr	r0, [pc, #68]	; (8005c50 <prvCheckForValidListAndQueue+0x5c>)
 8005c0c:	f7fd fd40 	bl	8003690 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005c10:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <prvCheckForValidListAndQueue+0x60>)
 8005c12:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <prvCheckForValidListAndQueue+0x58>)
 8005c14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005c16:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <prvCheckForValidListAndQueue+0x64>)
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <prvCheckForValidListAndQueue+0x5c>)
 8005c1a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	210c      	movs	r1, #12
 8005c20:	200a      	movs	r0, #10
 8005c22:	f7fd fe79 	bl	8003918 <xQueueGenericCreate>
 8005c26:	4603      	mov	r3, r0
 8005c28:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <prvCheckForValidListAndQueue+0x54>)
 8005c2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvCheckForValidListAndQueue+0x54>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <prvCheckForValidListAndQueue+0x54>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4908      	ldr	r1, [pc, #32]	; (8005c5c <prvCheckForValidListAndQueue+0x68>)
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fa7e 	bl	800413c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005c40:	f000 f9e8 	bl	8006014 <vPortExitCritical>
    }
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000308 	.word	0x20000308
 8005c4c:	200002d8 	.word	0x200002d8
 8005c50:	200002ec 	.word	0x200002ec
 8005c54:	20000300 	.word	0x20000300
 8005c58:	20000304 	.word	0x20000304
 8005c5c:	08008edc 	.word	0x08008edc

08005c60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3b04      	subs	r3, #4
 8005c70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f023 0201 	bic.w	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b04      	subs	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005c90:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <pxPortInitialiseStack+0x64>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3b14      	subs	r3, #20
 8005c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f06f 0202 	mvn.w	r2, #2
 8005cae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3b20      	subs	r3, #32
 8005cb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	08005cc9 	.word	0x08005cc9

08005cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <prvTaskExitError+0x54>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d00a      	beq.n	8005cf2 <prvTaskExitError+0x2a>
        __asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	60fb      	str	r3, [r7, #12]
    }
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <prvTaskExitError+0x28>
        __asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60bb      	str	r3, [r7, #8]
    }
 8005d04:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005d06:	bf00      	nop
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0fc      	beq.n	8005d08 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000014 	.word	0x20000014

08005d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005d20:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <pxCurrentTCBConst2>)
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	6808      	ldr	r0, [r1, #0]
 8005d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2a:	f380 8809 	msr	PSP, r0
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8811 	msr	BASEPRI, r0
 8005d3a:	4770      	bx	lr
 8005d3c:	f3af 8000 	nop.w

08005d40 <pxCurrentTCBConst2>:
 8005d40:	200001c0 	.word	0x200001c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop

08005d48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005d48:	4808      	ldr	r0, [pc, #32]	; (8005d6c <prvPortStartFirstTask+0x24>)
 8005d4a:	6800      	ldr	r0, [r0, #0]
 8005d4c:	6800      	ldr	r0, [r0, #0]
 8005d4e:	f380 8808 	msr	MSP, r0
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8814 	msr	CONTROL, r0
 8005d5a:	b662      	cpsie	i
 8005d5c:	b661      	cpsie	f
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	df00      	svc	0
 8005d68:	bf00      	nop
 8005d6a:	0000      	.short	0x0000
 8005d6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop

08005d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d7a:	4b46      	ldr	r3, [pc, #280]	; (8005e94 <xPortStartScheduler+0x120>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a46      	ldr	r2, [pc, #280]	; (8005e98 <xPortStartScheduler+0x124>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10a      	bne.n	8005d9a <xPortStartScheduler+0x26>
        __asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
    }
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d9a:	4b3e      	ldr	r3, [pc, #248]	; (8005e94 <xPortStartScheduler+0x120>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a3f      	ldr	r2, [pc, #252]	; (8005e9c <xPortStartScheduler+0x128>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10a      	bne.n	8005dba <xPortStartScheduler+0x46>
        __asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
    }
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <xPortStartScheduler+0x12c>)
 8005dbc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b31      	ldr	r3, [pc, #196]	; (8005ea4 <xPortStartScheduler+0x130>)
 8005de0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005de2:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005de4:	2207      	movs	r2, #7
 8005de6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005de8:	e009      	b.n	8005dfe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8005dea:	4b2f      	ldr	r3, [pc, #188]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005df2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d0ef      	beq.n	8005dea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1c3 0307 	rsb	r3, r3, #7
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d00a      	beq.n	8005e2c <xPortStartScheduler+0xb8>
        __asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60bb      	str	r3, [r7, #8]
    }
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005e34:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e36:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <xPortStartScheduler+0x134>)
 8005e40:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005e4a:	4b18      	ldr	r3, [pc, #96]	; (8005eac <xPortStartScheduler+0x138>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a17      	ldr	r2, [pc, #92]	; (8005eac <xPortStartScheduler+0x138>)
 8005e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <xPortStartScheduler+0x138>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a14      	ldr	r2, [pc, #80]	; (8005eac <xPortStartScheduler+0x138>)
 8005e5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005e62:	f000 f95b 	bl	800611c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005e66:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <xPortStartScheduler+0x13c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005e6c:	f000 f97a 	bl	8006164 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e70:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <xPortStartScheduler+0x140>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a0f      	ldr	r2, [pc, #60]	; (8005eb4 <xPortStartScheduler+0x140>)
 8005e76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005e7c:	f7ff ff64 	bl	8005d48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005e80:	f7fe ff90 	bl	8004da4 <vTaskSwitchContext>
    prvTaskExitError();
 8005e84:	f7ff ff20 	bl	8005cc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	e000ed00 	.word	0xe000ed00
 8005e98:	410fc271 	.word	0x410fc271
 8005e9c:	410fc270 	.word	0x410fc270
 8005ea0:	e000e400 	.word	0xe000e400
 8005ea4:	20000314 	.word	0x20000314
 8005ea8:	20000318 	.word	0x20000318
 8005eac:	e000ed20 	.word	0xe000ed20
 8005eb0:	20000014 	.word	0x20000014
 8005eb4:	e000ef34 	.word	0xe000ef34

08005eb8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <vInitPrioGroupValue+0xe4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a37      	ldr	r2, [pc, #220]	; (8005fa0 <vInitPrioGroupValue+0xe8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d10a      	bne.n	8005ede <vInitPrioGroupValue+0x26>
        __asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	613b      	str	r3, [r7, #16]
    }
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ede:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <vInitPrioGroupValue+0xe4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a30      	ldr	r2, [pc, #192]	; (8005fa4 <vInitPrioGroupValue+0xec>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10a      	bne.n	8005efe <vInitPrioGroupValue+0x46>
        __asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	60fb      	str	r3, [r7, #12]
    }
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005efe:	4b2a      	ldr	r3, [pc, #168]	; (8005fa8 <vInitPrioGroupValue+0xf0>)
 8005f00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <vInitPrioGroupValue+0xf4>)
 8005f24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f26:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f28:	2207      	movs	r2, #7
 8005f2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f2c:	e009      	b.n	8005f42 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8005f2e:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d0ef      	beq.n	8005f2e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f4e:	4b18      	ldr	r3, [pc, #96]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1c3 0307 	rsb	r3, r3, #7
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d00a      	beq.n	8005f70 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60bb      	str	r3, [r7, #8]
    }
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f78:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f82:	4a0b      	ldr	r2, [pc, #44]	; (8005fb0 <vInitPrioGroupValue+0xf8>)
 8005f84:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	e000ed00 	.word	0xe000ed00
 8005fa0:	410fc271 	.word	0x410fc271
 8005fa4:	410fc270 	.word	0x410fc270
 8005fa8:	e000e400 	.word	0xe000e400
 8005fac:	20000314 	.word	0x20000314
 8005fb0:	20000318 	.word	0x20000318

08005fb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
        __asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	607b      	str	r3, [r7, #4]
    }
 8005fcc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <vPortEnterCritical+0x58>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <vPortEnterCritical+0x58>)
 8005fd6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005fd8:	4b0c      	ldr	r3, [pc, #48]	; (800600c <vPortEnterCritical+0x58>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d10f      	bne.n	8006000 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <vPortEnterCritical+0x5c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <vPortEnterCritical+0x4c>
        __asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	603b      	str	r3, [r7, #0]
    }
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <vPortEnterCritical+0x4a>
    }
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	20000014 	.word	0x20000014
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <vPortExitCritical+0x50>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <vPortExitCritical+0x24>
        __asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	607b      	str	r3, [r7, #4]
    }
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <vPortExitCritical+0x50>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <vPortExitCritical+0x50>)
 8006040:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d105      	bne.n	8006056 <vPortExitCritical+0x42>
 800604a:	2300      	movs	r3, #0
 800604c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f383 8811 	msr	BASEPRI, r3
    }
 8006054:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000014 	.word	0x20000014
	...

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7fe fe80 	bl	8004da4 <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	200001c0 	.word	0x200001c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
        __asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
    }
 80060f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7fe fd3d 	bl	8004b70 <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <SysTick_Handler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
    }
 800610e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	; (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000004 	.word	0x20000004
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
 8006172:	0000      	.short	0x0000
 8006174:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop

0800617c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006182:	f3ef 8305 	mrs	r3, IPSR
 8006186:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d914      	bls.n	80061b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <vPortValidateInterruptPriority+0x70>)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006198:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <vPortValidateInterruptPriority+0x74>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	7afa      	ldrb	r2, [r7, #11]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d20a      	bcs.n	80061b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
    }
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061b8:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <vPortValidateInterruptPriority+0x78>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <vPortValidateInterruptPriority+0x7c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d90a      	bls.n	80061de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	603b      	str	r3, [r7, #0]
    }
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <vPortValidateInterruptPriority+0x60>
    }
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e3f0 	.word	0xe000e3f0
 80061f0:	20000314 	.word	0x20000314
 80061f4:	e000ed0c 	.word	0xe000ed0c
 80061f8:	20000318 	.word	0x20000318

080061fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006208:	f7fe fb76 	bl	80048f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800620c:	4b53      	ldr	r3, [pc, #332]	; (800635c <pvPortMalloc+0x160>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006214:	f000 f908 	bl	8006428 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d012      	beq.n	8006244 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800621e:	2208      	movs	r2, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	3308      	adds	r3, #8
 800622a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	43db      	mvns	r3, r3
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	429a      	cmp	r2, r3
 8006234:	d804      	bhi.n	8006240 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	4413      	add	r3, r2
 800623c:	607b      	str	r3, [r7, #4]
 800623e:	e001      	b.n	8006244 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	db70      	blt.n	800632c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d06d      	beq.n	800632c <pvPortMalloc+0x130>
 8006250:	4b43      	ldr	r3, [pc, #268]	; (8006360 <pvPortMalloc+0x164>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	429a      	cmp	r2, r3
 8006258:	d868      	bhi.n	800632c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800625a:	4b42      	ldr	r3, [pc, #264]	; (8006364 <pvPortMalloc+0x168>)
 800625c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800625e:	4b41      	ldr	r3, [pc, #260]	; (8006364 <pvPortMalloc+0x168>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006264:	e004      	b.n	8006270 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <pvPortMalloc+0x86>
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f1      	bne.n	8006266 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006282:	4b36      	ldr	r3, [pc, #216]	; (800635c <pvPortMalloc+0x160>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006288:	429a      	cmp	r2, r3
 800628a:	d04f      	beq.n	800632c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2208      	movs	r2, #8
 8006292:	4413      	add	r3, r2
 8006294:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	2308      	movs	r3, #8
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d91f      	bls.n	80062ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <pvPortMalloc+0xda>
        __asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	613b      	str	r3, [r7, #16]
    }
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062e8:	6978      	ldr	r0, [r7, #20]
 80062ea:	f000 f8f9 	bl	80064e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <pvPortMalloc+0x164>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <pvPortMalloc+0x164>)
 80062fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062fc:	4b18      	ldr	r3, [pc, #96]	; (8006360 <pvPortMalloc+0x164>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <pvPortMalloc+0x16c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d203      	bcs.n	8006310 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <pvPortMalloc+0x164>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <pvPortMalloc+0x16c>)
 800630e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <pvPortMalloc+0x170>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a10      	ldr	r2, [pc, #64]	; (800636c <pvPortMalloc+0x170>)
 800632a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800632c:	f7fe faf2 	bl	8004914 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <pvPortMalloc+0x154>
        __asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	60fb      	str	r3, [r7, #12]
    }
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <pvPortMalloc+0x152>
    return pvReturn;
 8006350:	69fb      	ldr	r3, [r7, #28]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3728      	adds	r7, #40	; 0x28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20012f24 	.word	0x20012f24
 8006360:	20012f28 	.word	0x20012f28
 8006364:	20012f1c 	.word	0x20012f1c
 8006368:	20012f2c 	.word	0x20012f2c
 800636c:	20012f30 	.word	0x20012f30

08006370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d049      	beq.n	8006416 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006382:	2308      	movs	r3, #8
 8006384:	425b      	negs	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	db0a      	blt.n	80063ae <vPortFree+0x3e>
        __asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	60fb      	str	r3, [r7, #12]
    }
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <vPortFree+0x5c>
        __asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60bb      	str	r3, [r7, #8]
    }
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	0fdb      	lsrs	r3, r3, #31
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01c      	beq.n	8006416 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d118      	bne.n	8006416 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80063f0:	f7fe fa82 	bl	80048f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <vPortFree+0xb0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4413      	add	r3, r2
 80063fe:	4a08      	ldr	r2, [pc, #32]	; (8006420 <vPortFree+0xb0>)
 8006400:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006402:	6938      	ldr	r0, [r7, #16]
 8006404:	f000 f86c 	bl	80064e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <vPortFree+0xb4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	4a05      	ldr	r2, [pc, #20]	; (8006424 <vPortFree+0xb4>)
 8006410:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006412:	f7fe fa7f 	bl	8004914 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006416:	bf00      	nop
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20012f28 	.word	0x20012f28
 8006424:	20012f34 	.word	0x20012f34

08006428 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800642e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006432:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <prvHeapInit+0xa4>)
 8006436:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00c      	beq.n	800645c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3307      	adds	r3, #7
 8006446:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <prvHeapInit+0xa4>)
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006460:	4a1b      	ldr	r2, [pc, #108]	; (80064d0 <prvHeapInit+0xa8>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <prvHeapInit+0xa8>)
 8006468:	2200      	movs	r2, #0
 800646a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	4413      	add	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006474:	2208      	movs	r2, #8
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0307 	bic.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <prvHeapInit+0xac>)
 8006488:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800648a:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <prvHeapInit+0xac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <prvHeapInit+0xac>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	1ad2      	subs	r2, r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064a8:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvHeapInit+0xac>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	4a08      	ldr	r2, [pc, #32]	; (80064d8 <prvHeapInit+0xb0>)
 80064b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	4a07      	ldr	r2, [pc, #28]	; (80064dc <prvHeapInit+0xb4>)
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	2000031c 	.word	0x2000031c
 80064d0:	20012f1c 	.word	0x20012f1c
 80064d4:	20012f24 	.word	0x20012f24
 80064d8:	20012f2c 	.word	0x20012f2c
 80064dc:	20012f28 	.word	0x20012f28

080064e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064e8:	4b28      	ldr	r3, [pc, #160]	; (800658c <prvInsertBlockIntoFreeList+0xac>)
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e002      	b.n	80064f4 <prvInsertBlockIntoFreeList+0x14>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d8f7      	bhi.n	80064ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	429a      	cmp	r2, r3
 800650e:	d108      	bne.n	8006522 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	441a      	add	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d118      	bne.n	8006568 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <prvInsertBlockIntoFreeList+0xb0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d00d      	beq.n	800655e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	441a      	add	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e008      	b.n	8006570 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <prvInsertBlockIntoFreeList+0xb0>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e003      	b.n	8006570 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	429a      	cmp	r2, r3
 8006576:	d002      	beq.n	800657e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20012f1c 	.word	0x20012f1c
 8006590:	20012f24 	.word	0x20012f24

08006594 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <_cbSendSystemDesc+0x14>)
 800659a:	f001 fc9d 	bl	8007ed8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800659e:	4803      	ldr	r0, [pc, #12]	; (80065ac <_cbSendSystemDesc+0x18>)
 80065a0:	f001 fc9a 	bl	8007ed8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80065a4:	bf00      	nop
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	08008ee4 	.word	0x08008ee4
 80065ac:	08008f1c 	.word	0x08008f1c

080065b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80065ba:	6819      	ldr	r1, [r3, #0]
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80065be:	4a06      	ldr	r2, [pc, #24]	; (80065d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80065c0:	f001 f90e 	bl	80077e0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80065c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80065c8:	f001 f94e 	bl	8007868 <SEGGER_SYSVIEW_SetRAMBase>
}
 80065cc:	bf00      	nop
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20000004 	.word	0x20000004
 80065d4:	08006595 	.word	0x08006595
 80065d8:	08008fbc 	.word	0x08008fbc

080065dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80065dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065de:	b085      	sub	sp, #20
 80065e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80065e2:	2300      	movs	r3, #0
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	e033      	b.n	8006650 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80065e8:	491e      	ldr	r1, [pc, #120]	; (8006664 <_cbSendTaskList+0x88>)
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	491a      	ldr	r1, [pc, #104]	; (8006664 <_cbSendTaskList+0x88>)
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3304      	adds	r3, #4
 8006608:	6819      	ldr	r1, [r3, #0]
 800660a:	4c16      	ldr	r4, [pc, #88]	; (8006664 <_cbSendTaskList+0x88>)
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4423      	add	r3, r4
 8006618:	3308      	adds	r3, #8
 800661a:	681c      	ldr	r4, [r3, #0]
 800661c:	4d11      	ldr	r5, [pc, #68]	; (8006664 <_cbSendTaskList+0x88>)
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	442b      	add	r3, r5
 800662a:	330c      	adds	r3, #12
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	4e0d      	ldr	r6, [pc, #52]	; (8006664 <_cbSendTaskList+0x88>)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4433      	add	r3, r6
 800663c:	3310      	adds	r3, #16
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	462b      	mov	r3, r5
 8006644:	4622      	mov	r2, r4
 8006646:	f000 f8bd 	bl	80067c4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3301      	adds	r3, #1
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <_cbSendTaskList+0x8c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3c6      	bcc.n	80065e8 <_cbSendTaskList+0xc>
  }
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006664:	20012f38 	.word	0x20012f38
 8006668:	20012fd8 	.word	0x20012fd8

0800666c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800666c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006674:	f7fe fa5e 	bl	8004b34 <xTaskGetTickCountFromISR>
 8006678:	4603      	mov	r3, r0
 800667a:	2200      	movs	r2, #0
 800667c:	469a      	mov	sl, r3
 800667e:	4693      	mov	fp, r2
 8006680:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006684:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	f04f 0b00 	mov.w	fp, #0
 8006694:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006698:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800669c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80066a0:	4652      	mov	r2, sl
 80066a2:	465b      	mov	r3, fp
 80066a4:	1a14      	subs	r4, r2, r0
 80066a6:	eb63 0501 	sbc.w	r5, r3, r1
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	00ab      	lsls	r3, r5, #2
 80066b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80066b8:	00a2      	lsls	r2, r4, #2
 80066ba:	4614      	mov	r4, r2
 80066bc:	461d      	mov	r5, r3
 80066be:	eb14 0800 	adds.w	r8, r4, r0
 80066c2:	eb45 0901 	adc.w	r9, r5, r1
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066da:	4690      	mov	r8, r2
 80066dc:	4699      	mov	r9, r3
 80066de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80066e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080066f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006702:	2205      	movs	r2, #5
 8006704:	492b      	ldr	r1, [pc, #172]	; (80067b4 <SYSVIEW_AddTask+0xc0>)
 8006706:	68b8      	ldr	r0, [r7, #8]
 8006708:	f001 fefa 	bl	8008500 <memcmp>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04b      	beq.n	80067aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006712:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b07      	cmp	r3, #7
 8006718:	d903      	bls.n	8006722 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800671a:	4828      	ldr	r0, [pc, #160]	; (80067bc <SYSVIEW_AddTask+0xc8>)
 800671c:	f001 fe74 	bl	8008408 <SEGGER_SYSVIEW_Warn>
    return;
 8006720:	e044      	b.n	80067ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006722:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4926      	ldr	r1, [pc, #152]	; (80067c0 <SYSVIEW_AddTask+0xcc>)
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006736:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4921      	ldr	r1, [pc, #132]	; (80067c0 <SYSVIEW_AddTask+0xcc>)
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	3304      	adds	r3, #4
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800674c:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	491b      	ldr	r1, [pc, #108]	; (80067c0 <SYSVIEW_AddTask+0xcc>)
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3308      	adds	r3, #8
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4916      	ldr	r1, [pc, #88]	; (80067c0 <SYSVIEW_AddTask+0xcc>)
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	330c      	adds	r3, #12
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4910      	ldr	r1, [pc, #64]	; (80067c0 <SYSVIEW_AddTask+0xcc>)
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	3310      	adds	r3, #16
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a08      	ldr	r2, [pc, #32]	; (80067b8 <SYSVIEW_AddTask+0xc4>)
 8006796:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f80e 	bl	80067c4 <SYSVIEW_SendTaskInfo>
 80067a8:	e000      	b.n	80067ac <SYSVIEW_AddTask+0xb8>
    return;
 80067aa:	bf00      	nop

}
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	08008f2c 	.word	0x08008f2c
 80067b8:	20012fd8 	.word	0x20012fd8
 80067bc:	08008f34 	.word	0x08008f34
 80067c0:	20012f38 	.word	0x20012f38

080067c4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	; 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80067d2:	f107 0314 	add.w	r3, r7, #20
 80067d6:	2214      	movs	r2, #20
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 fea0 	bl	8008520 <memset>
  TaskInfo.TaskID     = TaskID;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fa75 	bl	8007ce8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80067fe:	bf00      	nop
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800680e:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <USART2_IRQHandler+0x80>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800681e:	4b1b      	ldr	r3, [pc, #108]	; (800688c <USART2_IRQHandler+0x84>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 030b 	and.w	r3, r3, #11
 800682c:	2b00      	cmp	r3, #0
 800682e:	d108      	bne.n	8006842 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006830:	4b17      	ldr	r3, [pc, #92]	; (8006890 <USART2_IRQHandler+0x88>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <USART2_IRQHandler+0x88>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	79fa      	ldrb	r2, [r7, #7]
 800683e:	4610      	mov	r0, r2
 8006840:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <USART2_IRQHandler+0x8c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006854:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <USART2_IRQHandler+0x8c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	1dfa      	adds	r2, r7, #7
 800685a:	4610      	mov	r0, r2
 800685c:	4798      	blx	r3
 800685e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <USART2_IRQHandler+0x90>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <USART2_IRQHandler+0x90>)
 800686c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e006      	b.n	8006882 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <USART2_IRQHandler+0x80>)
 8006876:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8006878:	79fa      	ldrb	r2, [r7, #7]
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <USART2_IRQHandler+0x84>)
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e000      	b.n	8006882 <USART2_IRQHandler+0x7a>
      return;
 8006880:	bf00      	nop
    }
  }
}
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40011000 	.word	0x40011000
 800688c:	40011004 	.word	0x40011004
 8006890:	20012fdc 	.word	0x20012fdc
 8006894:	20012fe0 	.word	0x20012fe0
 8006898:	4001100c 	.word	0x4001100c

0800689c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	6013      	str	r3, [r2, #0]
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	4001100c 	.word	0x4001100c

080068bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <_DoInit+0x98>)
 80068c4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2203      	movs	r2, #3
 80068ca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2203      	movs	r2, #3
 80068d0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a20      	ldr	r2, [pc, #128]	; (8006958 <_DoInit+0x9c>)
 80068d6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a20      	ldr	r2, [pc, #128]	; (800695c <_DoInit+0xa0>)
 80068dc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068e4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <_DoInit+0x9c>)
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a17      	ldr	r2, [pc, #92]	; (8006960 <_DoInit+0xa4>)
 8006902:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2210      	movs	r2, #16
 8006908:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3307      	adds	r3, #7
 8006920:	4a10      	ldr	r2, [pc, #64]	; (8006964 <_DoInit+0xa8>)
 8006922:	6810      	ldr	r0, [r2, #0]
 8006924:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006926:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <_DoInit+0xac>)
 800692e:	6810      	ldr	r0, [r2, #0]
 8006930:	6018      	str	r0, [r3, #0]
 8006932:	8891      	ldrh	r1, [r2, #4]
 8006934:	7992      	ldrb	r2, [r2, #6]
 8006936:	8099      	strh	r1, [r3, #4]
 8006938:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800693a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006944:	f3bf 8f5f 	dmb	sy
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	20012fe4 	.word	0x20012fe4
 8006958:	08008f84 	.word	0x08008f84
 800695c:	2001308c 	.word	0x2001308c
 8006960:	2001348c 	.word	0x2001348c
 8006964:	08008f90 	.word	0x08008f90
 8006968:	08008f94 	.word	0x08008f94

0800696c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800696c:	b580      	push	{r7, lr}
 800696e:	b08c      	sub	sp, #48	; 0x30
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006978:	4b3e      	ldr	r3, [pc, #248]	; (8006a74 <SEGGER_RTT_ReadNoLock+0x108>)
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <SEGGER_RTT_ReadNoLock+0x1e>
 8006986:	f7ff ff99 	bl	80068bc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4613      	mov	r3, r2
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	3360      	adds	r3, #96	; 0x60
 8006996:	4a37      	ldr	r2, [pc, #220]	; (8006a74 <SEGGER_RTT_ReadNoLock+0x108>)
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80069b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d92b      	bls.n	8006a10 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bf28      	it	cs
 80069ca:	4613      	movcs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	4413      	add	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	6939      	ldr	r1, [r7, #16]
 80069dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069de:	f001 fdd3 	bl	8008588 <memcpy>
    NumBytesRead += NumBytesRem;
 80069e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	4413      	add	r3, r2
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80069ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80069fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	4413      	add	r3, r2
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d101      	bne.n	8006a10 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bf28      	it	cs
 8006a20:	4613      	movcs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d019      	beq.n	8006a5e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	4413      	add	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	6939      	ldr	r1, [r7, #16]
 8006a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a3a:	f001 fda5 	bl	8008588 <memcpy>
    NumBytesRead += NumBytesRem;
 8006a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3730      	adds	r7, #48	; 0x30
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20012fe4 	.word	0x20012fe4

08006a78 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006a86:	4b3d      	ldr	r3, [pc, #244]	; (8006b7c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006a94:	f7ff ff12 	bl	80068bc <_DoInit>
  SEGGER_RTT_LOCK();
 8006a98:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9c:	f04f 0120 	mov.w	r1, #32
 8006aa0:	f381 8811 	msr	BASEPRI, r1
 8006aa4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006aa6:	4b35      	ldr	r3, [pc, #212]	; (8006b7c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006aa8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006aae:	6939      	ldr	r1, [r7, #16]
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	4413      	add	r3, r2
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	440b      	add	r3, r1
 8006abe:	3304      	adds	r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	dbeb      	blt.n	8006aae <SEGGER_RTT_AllocUpBuffer+0x36>
 8006ad6:	e000      	b.n	8006ada <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006ad8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	da3f      	bge.n	8006b64 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006ae4:	6939      	ldr	r1, [r7, #16]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	4613      	mov	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	440b      	add	r3, r1
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006af8:	6939      	ldr	r1, [r7, #16]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	4613      	mov	r3, r2
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	4413      	add	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	440b      	add	r3, r1
 8006b08:	3304      	adds	r3, #4
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006b0e:	6939      	ldr	r1, [r7, #16]
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3320      	adds	r3, #32
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006b22:	6939      	ldr	r1, [r7, #16]
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	4613      	mov	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	3328      	adds	r3, #40	; 0x28
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006b36:	6939      	ldr	r1, [r7, #16]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	440b      	add	r3, r1
 8006b44:	3324      	adds	r3, #36	; 0x24
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006b4a:	6939      	ldr	r1, [r7, #16]
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4413      	add	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	440b      	add	r3, r1
 8006b58:	332c      	adds	r3, #44	; 0x2c
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006b5e:	f3bf 8f5f 	dmb	sy
 8006b62:	e002      	b.n	8006b6a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295
 8006b68:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006b70:	69fb      	ldr	r3, [r7, #28]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20012fe4 	.word	0x20012fe4

08006b80 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006b8e:	4b33      	ldr	r3, [pc, #204]	; (8006c5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006b9c:	f7ff fe8e 	bl	80068bc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ba0:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006ba2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d24d      	bcs.n	8006c4c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb4:	f04f 0120 	mov.w	r1, #32
 8006bb8:	f381 8811 	msr	BASEPRI, r1
 8006bbc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d031      	beq.n	8006c28 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	440b      	add	r3, r1
 8006bd2:	3360      	adds	r3, #96	; 0x60
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006bd8:	6979      	ldr	r1, [r7, #20]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	440b      	add	r3, r1
 8006be6:	3364      	adds	r3, #100	; 0x64
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3368      	adds	r3, #104	; 0x68
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3370      	adds	r3, #112	; 0x70
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	440b      	add	r3, r1
 8006c22:	336c      	adds	r3, #108	; 0x6c
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006c28:	6979      	ldr	r1, [r7, #20]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	440b      	add	r3, r1
 8006c36:	3374      	adds	r3, #116	; 0x74
 8006c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006c3c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e002      	b.n	8006c52 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006c52:	69fb      	ldr	r3, [r7, #28]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20012fe4 	.word	0x20012fe4

08006c60 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006c70:	e002      	b.n	8006c78 <_EncodeStr+0x18>
    Len++;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	3301      	adds	r3, #1
 8006c76:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f6      	bne.n	8006c72 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d901      	bls.n	8006c90 <_EncodeStr+0x30>
    Len = Limit;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2bfe      	cmp	r3, #254	; 0xfe
 8006c94:	d806      	bhi.n	8006ca4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	60fa      	str	r2, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e011      	b.n	8006cc8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	60fa      	str	r2, [r7, #12]
 8006caa:	22ff      	movs	r2, #255	; 0xff
 8006cac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	60fa      	str	r2, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	0a19      	lsrs	r1, r3, #8
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	60fa      	str	r2, [r7, #12]
 8006cc4:	b2ca      	uxtb	r2, r1
 8006cc6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006ccc:	e00a      	b.n	8006ce4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	1c53      	adds	r3, r2, #1
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	1c59      	adds	r1, r3, #1
 8006cd8:	60f9      	str	r1, [r7, #12]
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	701a      	strb	r2, [r3, #0]
    n++;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d3f0      	bcc.n	8006cce <_EncodeStr+0x6e>
  }
  return pPayload;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
	...

08006d14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006d1a:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <_HandleIncomingPacket+0xdc>)
 8006d1c:	7e1b      	ldrb	r3, [r3, #24]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	1cfb      	adds	r3, r7, #3
 8006d22:	2201      	movs	r2, #1
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7ff fe21 	bl	800696c <SEGGER_RTT_ReadNoLock>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dd59      	ble.n	8006de8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d032      	beq.n	8006da0 <_HandleIncomingPacket+0x8c>
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	dc42      	bgt.n	8006dc4 <_HandleIncomingPacket+0xb0>
 8006d3e:	2b07      	cmp	r3, #7
 8006d40:	dc16      	bgt.n	8006d70 <_HandleIncomingPacket+0x5c>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dd3e      	ble.n	8006dc4 <_HandleIncomingPacket+0xb0>
 8006d46:	3b01      	subs	r3, #1
 8006d48:	2b06      	cmp	r3, #6
 8006d4a:	d83b      	bhi.n	8006dc4 <_HandleIncomingPacket+0xb0>
 8006d4c:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <_HandleIncomingPacket+0x40>)
 8006d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d52:	bf00      	nop
 8006d54:	08006d77 	.word	0x08006d77
 8006d58:	08006d7d 	.word	0x08006d7d
 8006d5c:	08006d83 	.word	0x08006d83
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d8f 	.word	0x08006d8f
 8006d68:	08006d95 	.word	0x08006d95
 8006d6c:	08006d9b 	.word	0x08006d9b
 8006d70:	2b7f      	cmp	r3, #127	; 0x7f
 8006d72:	d034      	beq.n	8006dde <_HandleIncomingPacket+0xca>
 8006d74:	e026      	b.n	8006dc4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006d76:	f000 fe3b 	bl	80079f0 <SEGGER_SYSVIEW_Start>
      break;
 8006d7a:	e035      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006d7c:	f000 fef4 	bl	8007b68 <SEGGER_SYSVIEW_Stop>
      break;
 8006d80:	e032      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006d82:	f001 f8cd 	bl	8007f20 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006d86:	e02f      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006d88:	f001 f892 	bl	8007eb0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006d8c:	e02c      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006d8e:	f000 ff11 	bl	8007bb4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006d92:	e029      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006d94:	f001 fae6 	bl	8008364 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006d98:	e026      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006d9a:	f001 fac5 	bl	8008328 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006d9e:	e023      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <_HandleIncomingPacket+0xdc>)
 8006da2:	7e1b      	ldrb	r3, [r3, #24]
 8006da4:	4618      	mov	r0, r3
 8006da6:	1cfb      	adds	r3, r7, #3
 8006da8:	2201      	movs	r2, #1
 8006daa:	4619      	mov	r1, r3
 8006dac:	f7ff fdde 	bl	800696c <SEGGER_RTT_ReadNoLock>
 8006db0:	4603      	mov	r3, r0
 8006db2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd13      	ble.n	8006de2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fa33 	bl	8008228 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006dc2:	e00e      	b.n	8006de2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	b25b      	sxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da0c      	bge.n	8006de6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <_HandleIncomingPacket+0xdc>)
 8006dce:	7e1b      	ldrb	r3, [r3, #24]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	1cfb      	adds	r3, r7, #3
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f7ff fdc8 	bl	800696c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006ddc:	e003      	b.n	8006de6 <_HandleIncomingPacket+0xd2>
      break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
      break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <_HandleIncomingPacket+0xd4>
      break;
 8006de6:	bf00      	nop
    }
  }
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200144a4 	.word	0x200144a4

08006df4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08c      	sub	sp, #48	; 0x30
 8006df8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	3301      	adds	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e0e:	e00b      	b.n	8006e28 <_TrySendOverflowPacket+0x34>
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	1c59      	adds	r1, r3, #1
 8006e18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	09db      	lsrs	r3, r3, #7
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2c:	d8f0      	bhi.n	8006e10 <_TrySendOverflowPacket+0x1c>
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006e3e:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <_TrySendOverflowPacket+0xe4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006e44:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	623b      	str	r3, [r7, #32]
 8006e56:	e00b      	b.n	8006e70 <_TrySendOverflowPacket+0x7c>
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	1c59      	adds	r1, r3, #1
 8006e60:	6279      	str	r1, [r7, #36]	; 0x24
 8006e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	09db      	lsrs	r3, r3, #7
 8006e6e:	623b      	str	r3, [r7, #32]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	2b7f      	cmp	r3, #127	; 0x7f
 8006e74:	d8f0      	bhi.n	8006e58 <_TrySendOverflowPacket+0x64>
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	1c5a      	adds	r2, r3, #1
 8006e7a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	701a      	strb	r2, [r3, #0]
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	1d3b      	adds	r3, r7, #4
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	461a      	mov	r2, r3
 8006e94:	1d3b      	adds	r3, r7, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	f7f9 f9a2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006ea0:	f7ff fcfc 	bl	800689c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d009      	beq.n	8006ebe <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006eb0:	4b08      	ldr	r3, [pc, #32]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006eba:	701a      	strb	r2, [r3, #0]
 8006ebc:	e004      	b.n	8006ec8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a03      	ldr	r2, [pc, #12]	; (8006ed4 <_TrySendOverflowPacket+0xe0>)
 8006ec6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006ec8:	693b      	ldr	r3, [r7, #16]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3730      	adds	r7, #48	; 0x30
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200144a4 	.word	0x200144a4
 8006ed8:	e0001004 	.word	0xe0001004

08006edc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08a      	sub	sp, #40	; 0x28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006ee8:	4b6d      	ldr	r3, [pc, #436]	; (80070a0 <_SendPacket+0x1c4>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d010      	beq.n	8006f12 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006ef0:	4b6b      	ldr	r3, [pc, #428]	; (80070a0 <_SendPacket+0x1c4>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80a5 	beq.w	8007044 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006efa:	4b69      	ldr	r3, [pc, #420]	; (80070a0 <_SendPacket+0x1c4>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d109      	bne.n	8006f16 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006f02:	f7ff ff77 	bl	8006df4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006f06:	4b66      	ldr	r3, [pc, #408]	; (80070a0 <_SendPacket+0x1c4>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	f040 809c 	bne.w	8007048 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006f10:	e001      	b.n	8006f16 <_SendPacket+0x3a>
    goto Send;
 8006f12:	bf00      	nop
 8006f14:	e000      	b.n	8006f18 <_SendPacket+0x3c>
Send:
 8006f16:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b1f      	cmp	r3, #31
 8006f1c:	d809      	bhi.n	8006f32 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006f1e:	4b60      	ldr	r3, [pc, #384]	; (80070a0 <_SendPacket+0x1c4>)
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 808d 	bne.w	800704c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b17      	cmp	r3, #23
 8006f36:	d807      	bhi.n	8006f48 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e03d      	b.n	8006fc4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d912      	bls.n	8006f7c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	09da      	lsrs	r2, r3, #7
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	3a01      	subs	r2, #1
 8006f6e:	60fa      	str	r2, [r7, #12]
 8006f70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e006      	b.n	8006f8a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8e:	d912      	bls.n	8006fb6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	09da      	lsrs	r2, r3, #7
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	3a01      	subs	r2, #1
 8006fa8:	60fa      	str	r2, [r7, #12]
 8006faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	701a      	strb	r2, [r3, #0]
 8006fb4:	e006      	b.n	8006fc4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006fc4:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <_SendPacket+0x1c8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006fca:	4b35      	ldr	r3, [pc, #212]	; (80070a0 <_SendPacket+0x1c4>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	623b      	str	r3, [r7, #32]
 8006fdc:	e00b      	b.n	8006ff6 <_SendPacket+0x11a>
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	6279      	str	r1, [r7, #36]	; 0x24
 8006fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	09db      	lsrs	r3, r3, #7
 8006ff4:	623b      	str	r3, [r7, #32]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8006ffa:	d8f0      	bhi.n	8006fde <_SendPacket+0x102>
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	627a      	str	r2, [r7, #36]	; 0x24
 8007002:	6a3a      	ldr	r2, [r7, #32]
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800700c:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <_SendPacket+0x1c4>)
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	4618      	mov	r0, r3
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	461a      	mov	r2, r3
 800701a:	68f9      	ldr	r1, [r7, #12]
 800701c:	f7f9 f8e0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007020:	4603      	mov	r3, r0
 8007022:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007024:	f7ff fc3a 	bl	800689c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800702e:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <_SendPacket+0x1c4>)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	60d3      	str	r3, [r2, #12]
 8007034:	e00b      	b.n	800704e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007036:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <_SendPacket+0x1c4>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b18      	ldr	r3, [pc, #96]	; (80070a0 <_SendPacket+0x1c4>)
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e004      	b.n	800704e <_SendPacket+0x172>
    goto SendDone;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <_SendPacket+0x172>
      goto SendDone;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <_SendPacket+0x172>
      goto SendDone;
 800704c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800704e:	4b14      	ldr	r3, [pc, #80]	; (80070a0 <_SendPacket+0x1c4>)
 8007050:	7e1b      	ldrb	r3, [r3, #24]
 8007052:	4619      	mov	r1, r3
 8007054:	4a14      	ldr	r2, [pc, #80]	; (80070a8 <_SendPacket+0x1cc>)
 8007056:	460b      	mov	r3, r1
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	440b      	add	r3, r1
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4413      	add	r3, r2
 8007060:	336c      	adds	r3, #108	; 0x6c
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <_SendPacket+0x1c4>)
 8007066:	7e1b      	ldrb	r3, [r3, #24]
 8007068:	4618      	mov	r0, r3
 800706a:	490f      	ldr	r1, [pc, #60]	; (80070a8 <_SendPacket+0x1cc>)
 800706c:	4603      	mov	r3, r0
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4403      	add	r3, r0
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	440b      	add	r3, r1
 8007076:	3370      	adds	r3, #112	; 0x70
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d00b      	beq.n	8007096 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800707e:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <_SendPacket+0x1c4>)
 8007080:	789b      	ldrb	r3, [r3, #2]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d107      	bne.n	8007096 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <_SendPacket+0x1c4>)
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800708c:	f7ff fe42 	bl	8006d14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007090:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <_SendPacket+0x1c4>)
 8007092:	2200      	movs	r2, #0
 8007094:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007096:	bf00      	nop
 8007098:	3728      	adds	r7, #40	; 0x28
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200144a4 	.word	0x200144a4
 80070a4:	e0001004 	.word	0xe0001004
 80070a8:	20012fe4 	.word	0x20012fe4

080070ac <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	3301      	adds	r3, #1
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d80a      	bhi.n	80070dc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6051      	str	r1, [r2, #4]
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d15a      	bne.n	800719a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	623b      	str	r3, [r7, #32]
 8007104:	e00b      	b.n	800711e <_StoreChar+0x72>
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	1c59      	adds	r1, r3, #1
 800710e:	6279      	str	r1, [r7, #36]	; 0x24
 8007110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	09db      	lsrs	r3, r3, #7
 800711c:	623b      	str	r3, [r7, #32]
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	2b7f      	cmp	r3, #127	; 0x7f
 8007122:	d8f0      	bhi.n	8007106 <_StoreChar+0x5a>
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	627a      	str	r2, [r7, #36]	; 0x24
 800712a:	6a3a      	ldr	r2, [r7, #32]
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	2300      	movs	r3, #0
 800713a:	61bb      	str	r3, [r7, #24]
 800713c:	e00b      	b.n	8007156 <_StoreChar+0xaa>
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	1c59      	adds	r1, r3, #1
 8007146:	61f9      	str	r1, [r7, #28]
 8007148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	701a      	strb	r2, [r3, #0]
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b7f      	cmp	r3, #127	; 0x7f
 800715a:	d8f0      	bhi.n	800713e <_StoreChar+0x92>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	b2d2      	uxtb	r2, r2
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	221a      	movs	r2, #26
 8007172:	6939      	ldr	r1, [r7, #16]
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff feb1 	bl	8006edc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fdbb 	bl	8006cfa <_PreparePacket>
 8007184:	4602      	mov	r2, r0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	611a      	str	r2, [r3, #16]
  }
}
 800719a:	bf00      	nop
 800719c:	3728      	adds	r7, #40	; 0x28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	; 0x28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80071b6:	2301      	movs	r3, #1
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80071ba:	2301      	movs	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80071be:	e007      	b.n	80071d0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80071c0:	6a3a      	ldr	r2, [r7, #32]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	623b      	str	r3, [r7, #32]
    Width++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80071d0:	6a3a      	ldr	r2, [r7, #32]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d2f3      	bcs.n	80071c0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d901      	bls.n	80071e4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11f      	bne.n	800722e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01c      	beq.n	800722e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <_PrintUnsigned+0x66>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <_PrintUnsigned+0x66>
        c = '0';
 8007204:	2330      	movs	r3, #48	; 0x30
 8007206:	76fb      	strb	r3, [r7, #27]
 8007208:	e001      	b.n	800720e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800720a:	2320      	movs	r3, #32
 800720c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800720e:	e007      	b.n	8007220 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	3b01      	subs	r3, #1
 8007214:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8007216:	7efb      	ldrb	r3, [r7, #27]
 8007218:	4619      	mov	r1, r3
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f7ff ff46 	bl	80070ac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <_PrintUnsigned+0x8a>
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	429a      	cmp	r2, r3
 800722c:	d3f0      	bcc.n	8007210 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d903      	bls.n	800723c <_PrintUnsigned+0x98>
      NumDigits--;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	3b01      	subs	r3, #1
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	e009      	b.n	8007250 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	429a      	cmp	r2, r3
 800724c:	d200      	bcs.n	8007250 <_PrintUnsigned+0xac>
        break;
 800724e:	e005      	b.n	800725c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	fb02 f303 	mul.w	r3, r2, r3
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800725a:	e7e8      	b.n	800722e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726a:	fb02 f303 	mul.w	r3, r2, r3
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8007274:	4a15      	ldr	r2, [pc, #84]	; (80072cc <_PrintUnsigned+0x128>)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff ff14 	bl	80070ac <_StoreChar>
    Digit /= Base;
 8007284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e3      	bne.n	800725c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8007294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d011      	beq.n	80072c2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80072a4:	e006      	b.n	80072b4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	3b01      	subs	r3, #1
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80072ac:	2120      	movs	r1, #32
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fefc 	bl	80070ac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <_PrintUnsigned+0x11e>
 80072ba:	69fa      	ldr	r2, [r7, #28]
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	429a      	cmp	r2, r3
 80072c0:	d3f1      	bcc.n	80072a6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80072c2:	bf00      	nop
 80072c4:	3728      	adds	r7, #40	; 0x28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	08008fd0 	.word	0x08008fd0

080072d0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfb8      	it	lt
 80072e4:	425b      	neglt	r3, r3
 80072e6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80072ec:	e007      	b.n	80072fe <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80072f6:	613b      	str	r3, [r7, #16]
    Width++;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	429a      	cmp	r2, r3
 8007304:	daf3      	bge.n	80072ee <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	429a      	cmp	r2, r3
 800730c:	d901      	bls.n	8007312 <_PrintInt+0x42>
    Width = NumDigits;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <_PrintInt+0x5e>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	db04      	blt.n	8007328 <_PrintInt+0x58>
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <_PrintInt+0x5e>
    FieldWidth--;
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	3b01      	subs	r3, #1
 800732c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <_PrintInt+0x6e>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <_PrintInt+0x9c>
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d111      	bne.n	800736c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800734e:	e006      	b.n	800735e <_PrintInt+0x8e>
        FieldWidth--;
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	3b01      	subs	r3, #1
 8007354:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8007356:	2120      	movs	r1, #32
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7ff fea7 	bl	80070ac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <_PrintInt+0x9c>
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	429a      	cmp	r2, r3
 800736a:	d3f1      	bcc.n	8007350 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da07      	bge.n	8007382 <_PrintInt+0xb2>
    v = -v;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	425b      	negs	r3, r3
 8007376:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8007378:	212d      	movs	r1, #45	; 0x2d
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fe96 	bl	80070ac <_StoreChar>
 8007380:	e008      	b.n	8007394 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800738c:	212b      	movs	r1, #43	; 0x2b
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff fe8c 	bl	80070ac <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d019      	beq.n	80073d2 <_PrintInt+0x102>
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d114      	bne.n	80073d2 <_PrintInt+0x102>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d111      	bne.n	80073d2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00e      	beq.n	80073d2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80073b4:	e006      	b.n	80073c4 <_PrintInt+0xf4>
        FieldWidth--;
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80073bc:	2130      	movs	r1, #48	; 0x30
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fe74 	bl	80070ac <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <_PrintInt+0x102>
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d3f1      	bcc.n	80073b6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f7ff fedf 	bl	80071a4 <_PrintUnsigned>
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b098      	sub	sp, #96	; 0x60
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80073fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007400:	f04f 0120 	mov.w	r1, #32
 8007404:	f381 8811 	msr	BASEPRI, r1
 8007408:	633b      	str	r3, [r7, #48]	; 0x30
 800740a:	48b7      	ldr	r0, [pc, #732]	; (80076e8 <_VPrintTarget+0x2f8>)
 800740c:	f7ff fc75 	bl	8006cfa <_PreparePacket>
 8007410:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8007412:	4bb5      	ldr	r3, [pc, #724]	; (80076e8 <_VPrintTarget+0x2f8>)
 8007414:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8007436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8183 	beq.w	8007746 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8007440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007444:	2b25      	cmp	r3, #37	; 0x25
 8007446:	f040 8170 	bne.w	800772a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800744a:	2300      	movs	r3, #0
 800744c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800745a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800745e:	3b23      	subs	r3, #35	; 0x23
 8007460:	2b0d      	cmp	r3, #13
 8007462:	d83f      	bhi.n	80074e4 <_VPrintTarget+0xf4>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <_VPrintTarget+0x7c>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	080074d5 	.word	0x080074d5
 8007470:	080074e5 	.word	0x080074e5
 8007474:	080074e5 	.word	0x080074e5
 8007478:	080074e5 	.word	0x080074e5
 800747c:	080074e5 	.word	0x080074e5
 8007480:	080074e5 	.word	0x080074e5
 8007484:	080074e5 	.word	0x080074e5
 8007488:	080074e5 	.word	0x080074e5
 800748c:	080074c5 	.word	0x080074c5
 8007490:	080074e5 	.word	0x080074e5
 8007494:	080074a5 	.word	0x080074a5
 8007498:	080074e5 	.word	0x080074e5
 800749c:	080074e5 	.word	0x080074e5
 80074a0:	080074b5 	.word	0x080074b5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80074a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e01a      	b.n	80074ea <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80074b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b6:	f043 0302 	orr.w	r3, r3, #2
 80074ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e012      	b.n	80074ea <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80074c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c6:	f043 0304 	orr.w	r3, r3, #4
 80074ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e00a      	b.n	80074ea <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80074d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074d6:	f043 0308 	orr.w	r3, r3, #8
 80074da:	64bb      	str	r3, [r7, #72]	; 0x48
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e002      	b.n	80074ea <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80074e4:	2300      	movs	r3, #0
 80074e6:	653b      	str	r3, [r7, #80]	; 0x50
 80074e8:	bf00      	nop
        }
      } while (v);
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1b0      	bne.n	8007452 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80074f0:	2300      	movs	r3, #0
 80074f2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80074fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007500:	2b2f      	cmp	r3, #47	; 0x2f
 8007502:	d912      	bls.n	800752a <_VPrintTarget+0x13a>
 8007504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007508:	2b39      	cmp	r3, #57	; 0x39
 800750a:	d80e      	bhi.n	800752a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8007512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	461a      	mov	r2, r3
 800751e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007522:	4413      	add	r3, r2
 8007524:	3b30      	subs	r3, #48	; 0x30
 8007526:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8007528:	e7e4      	b.n	80074f4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800752a:	2300      	movs	r3, #0
 800752c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8007536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800753a:	2b2e      	cmp	r3, #46	; 0x2e
 800753c:	d11d      	bne.n	800757a <_VPrintTarget+0x18a>
        sFormat++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800754c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007550:	2b2f      	cmp	r3, #47	; 0x2f
 8007552:	d912      	bls.n	800757a <_VPrintTarget+0x18a>
 8007554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007558:	2b39      	cmp	r3, #57	; 0x39
 800755a:	d80e      	bhi.n	800757a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8007562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007564:	4613      	mov	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	005b      	lsls	r3, r3, #1
 800756c:	461a      	mov	r2, r3
 800756e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007572:	4413      	add	r3, r2
 8007574:	3b30      	subs	r3, #48	; 0x30
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8007578:	e7e4      	b.n	8007544 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8007582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007586:	2b6c      	cmp	r3, #108	; 0x6c
 8007588:	d003      	beq.n	8007592 <_VPrintTarget+0x1a2>
 800758a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800758e:	2b68      	cmp	r3, #104	; 0x68
 8007590:	d107      	bne.n	80075a2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80075a0:	e7ef      	b.n	8007582 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80075a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075a6:	2b25      	cmp	r3, #37	; 0x25
 80075a8:	f000 80b3 	beq.w	8007712 <_VPrintTarget+0x322>
 80075ac:	2b25      	cmp	r3, #37	; 0x25
 80075ae:	f2c0 80b7 	blt.w	8007720 <_VPrintTarget+0x330>
 80075b2:	2b78      	cmp	r3, #120	; 0x78
 80075b4:	f300 80b4 	bgt.w	8007720 <_VPrintTarget+0x330>
 80075b8:	2b58      	cmp	r3, #88	; 0x58
 80075ba:	f2c0 80b1 	blt.w	8007720 <_VPrintTarget+0x330>
 80075be:	3b58      	subs	r3, #88	; 0x58
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	f200 80ad 	bhi.w	8007720 <_VPrintTarget+0x330>
 80075c6:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <_VPrintTarget+0x1dc>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080076c3 	.word	0x080076c3
 80075d0:	08007721 	.word	0x08007721
 80075d4:	08007721 	.word	0x08007721
 80075d8:	08007721 	.word	0x08007721
 80075dc:	08007721 	.word	0x08007721
 80075e0:	08007721 	.word	0x08007721
 80075e4:	08007721 	.word	0x08007721
 80075e8:	08007721 	.word	0x08007721
 80075ec:	08007721 	.word	0x08007721
 80075f0:	08007721 	.word	0x08007721
 80075f4:	08007721 	.word	0x08007721
 80075f8:	08007651 	.word	0x08007651
 80075fc:	08007677 	.word	0x08007677
 8007600:	08007721 	.word	0x08007721
 8007604:	08007721 	.word	0x08007721
 8007608:	08007721 	.word	0x08007721
 800760c:	08007721 	.word	0x08007721
 8007610:	08007721 	.word	0x08007721
 8007614:	08007721 	.word	0x08007721
 8007618:	08007721 	.word	0x08007721
 800761c:	08007721 	.word	0x08007721
 8007620:	08007721 	.word	0x08007721
 8007624:	08007721 	.word	0x08007721
 8007628:	08007721 	.word	0x08007721
 800762c:	080076ed 	.word	0x080076ed
 8007630:	08007721 	.word	0x08007721
 8007634:	08007721 	.word	0x08007721
 8007638:	08007721 	.word	0x08007721
 800763c:	08007721 	.word	0x08007721
 8007640:	0800769d 	.word	0x0800769d
 8007644:	08007721 	.word	0x08007721
 8007648:	08007721 	.word	0x08007721
 800764c:	080076c3 	.word	0x080076c3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	1d19      	adds	r1, r3, #4
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800765e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8007664:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff fd1c 	bl	80070ac <_StoreChar>
        break;
 8007674:	e055      	b.n	8007722 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	1d19      	adds	r1, r3, #4
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	6011      	str	r1, [r2, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007684:	f107 0014 	add.w	r0, r7, #20
 8007688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007692:	220a      	movs	r2, #10
 8007694:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007696:	f7ff fe1b 	bl	80072d0 <_PrintInt>
        break;
 800769a:	e042      	b.n	8007722 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6011      	str	r1, [r2, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80076aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076ac:	f107 0014 	add.w	r0, r7, #20
 80076b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	220a      	movs	r2, #10
 80076bc:	f7ff fd72 	bl	80071a4 <_PrintUnsigned>
        break;
 80076c0:	e02f      	b.n	8007722 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1d19      	adds	r1, r3, #4
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	6011      	str	r1, [r2, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80076d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076d2:	f107 0014 	add.w	r0, r7, #20
 80076d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e0:	2210      	movs	r2, #16
 80076e2:	f7ff fd5f 	bl	80071a4 <_PrintUnsigned>
        break;
 80076e6:	e01c      	b.n	8007722 <_VPrintTarget+0x332>
 80076e8:	200144d4 	.word	0x200144d4
      case 'p':
        v = va_arg(*pParamList, int);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80076fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076fc:	f107 0014 	add.w	r0, r7, #20
 8007700:	2300      	movs	r3, #0
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	2308      	movs	r3, #8
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	2308      	movs	r3, #8
 800770a:	2210      	movs	r2, #16
 800770c:	f7ff fd4a 	bl	80071a4 <_PrintUnsigned>
        break;
 8007710:	e007      	b.n	8007722 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8007712:	f107 0314 	add.w	r3, r7, #20
 8007716:	2125      	movs	r1, #37	; 0x25
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fcc7 	bl	80070ac <_StoreChar>
        break;
 800771e:	e000      	b.n	8007722 <_VPrintTarget+0x332>
      default:
        break;
 8007720:	bf00      	nop
      }
      sFormat++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e007      	b.n	800773a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800772a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800772e:	f107 0314 	add.w	r3, r7, #20
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fcb9 	bl	80070ac <_StoreChar>
    }
  } while (*sFormat);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f47f ae72 	bne.w	8007428 <_VPrintTarget+0x38>
 8007744:	e000      	b.n	8007748 <_VPrintTarget+0x358>
      break;
 8007746:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	2b00      	cmp	r3, #0
 800774c:	d041      	beq.n	80077d2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800774e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	643b      	str	r3, [r7, #64]	; 0x40
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800775e:	e00b      	b.n	8007778 <_VPrintTarget+0x388>
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	b2da      	uxtb	r2, r3
 8007764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007766:	1c59      	adds	r1, r3, #1
 8007768:	6439      	str	r1, [r7, #64]	; 0x40
 800776a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	09db      	lsrs	r3, r3, #7
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	2b7f      	cmp	r3, #127	; 0x7f
 800777c:	d8f0      	bhi.n	8007760 <_VPrintTarget+0x370>
 800777e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	643a      	str	r2, [r7, #64]	; 0x40
 8007784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
 800778a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	63bb      	str	r3, [r7, #56]	; 0x38
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
 8007796:	e00b      	b.n	80077b0 <_VPrintTarget+0x3c0>
 8007798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779a:	b2da      	uxtb	r2, r3
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	1c59      	adds	r1, r3, #1
 80077a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80077a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	09db      	lsrs	r3, r3, #7
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	2b7f      	cmp	r3, #127	; 0x7f
 80077b4:	d8f0      	bhi.n	8007798 <_VPrintTarget+0x3a8>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	1c5a      	adds	r2, r3, #1
 80077ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80077bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	69b9      	ldr	r1, [r7, #24]
 80077ca:	221a      	movs	r2, #26
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7ff fb85 	bl	8006edc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80077d8:	bf00      	nop
 80077da:	3758      	adds	r7, #88	; 0x58
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80077ee:	2300      	movs	r3, #0
 80077f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077f4:	4917      	ldr	r1, [pc, #92]	; (8007854 <SEGGER_SYSVIEW_Init+0x74>)
 80077f6:	4818      	ldr	r0, [pc, #96]	; (8007858 <SEGGER_SYSVIEW_Init+0x78>)
 80077f8:	f7ff f93e 	bl	8006a78 <SEGGER_RTT_AllocUpBuffer>
 80077fc:	4603      	mov	r3, r0
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007802:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007806:	785a      	ldrb	r2, [r3, #1]
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 800780a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 800780e:	7e1b      	ldrb	r3, [r3, #24]
 8007810:	4618      	mov	r0, r3
 8007812:	2300      	movs	r3, #0
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2308      	movs	r3, #8
 8007818:	4a11      	ldr	r2, [pc, #68]	; (8007860 <SEGGER_SYSVIEW_Init+0x80>)
 800781a:	490f      	ldr	r1, [pc, #60]	; (8007858 <SEGGER_SYSVIEW_Init+0x78>)
 800781c:	f7ff f9b0 	bl	8006b80 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007820:	4b0e      	ldr	r3, [pc, #56]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007822:	2200      	movs	r2, #0
 8007824:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <SEGGER_SYSVIEW_Init+0x84>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a0c      	ldr	r2, [pc, #48]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 800782c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800782e:	4a0b      	ldr	r2, [pc, #44]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007834:	4a09      	ldr	r2, [pc, #36]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800783a:	4a08      	ldr	r2, [pc, #32]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007840:	4a06      	ldr	r2, [pc, #24]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <SEGGER_SYSVIEW_Init+0x7c>)
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2001349c 	.word	0x2001349c
 8007858:	08008f9c 	.word	0x08008f9c
 800785c:	200144a4 	.word	0x200144a4
 8007860:	2001449c 	.word	0x2001449c
 8007864:	e0001004 	.word	0xe0001004

08007868 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007870:	4a04      	ldr	r2, [pc, #16]	; (8007884 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6113      	str	r3, [r2, #16]
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	200144a4 	.word	0x200144a4

08007888 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007890:	f3ef 8311 	mrs	r3, BASEPRI
 8007894:	f04f 0120 	mov.w	r1, #32
 8007898:	f381 8811 	msr	BASEPRI, r1
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	4808      	ldr	r0, [pc, #32]	; (80078c0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80078a0:	f7ff fa2b 	bl	8006cfa <_PreparePacket>
 80078a4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	f7ff fb16 	bl	8006edc <_SendPacket>
  RECORD_END();
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f383 8811 	msr	BASEPRI, r3
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200144d4 	.word	0x200144d4

080078c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80078ce:	f3ef 8311 	mrs	r3, BASEPRI
 80078d2:	f04f 0120 	mov.w	r1, #32
 80078d6:	f381 8811 	msr	BASEPRI, r1
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	4816      	ldr	r0, [pc, #88]	; (8007938 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80078de:	f7ff fa0c 	bl	8006cfa <_PreparePacket>
 80078e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	e00b      	b.n	800790a <SEGGER_SYSVIEW_RecordU32+0x46>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	1c59      	adds	r1, r3, #1
 80078fa:	61f9      	str	r1, [r7, #28]
 80078fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	09db      	lsrs	r3, r3, #7
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b7f      	cmp	r3, #127	; 0x7f
 800790e:	d8f0      	bhi.n	80078f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	61fa      	str	r2, [r7, #28]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	68f9      	ldr	r1, [r7, #12]
 8007924:	6938      	ldr	r0, [r7, #16]
 8007926:	f7ff fad9 	bl	8006edc <_SendPacket>
  RECORD_END();
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f383 8811 	msr	BASEPRI, r3
}
 8007930:	bf00      	nop
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200144d4 	.word	0x200144d4

0800793c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b08c      	sub	sp, #48	; 0x30
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007948:	f3ef 8311 	mrs	r3, BASEPRI
 800794c:	f04f 0120 	mov.w	r1, #32
 8007950:	f381 8811 	msr	BASEPRI, r1
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	4825      	ldr	r0, [pc, #148]	; (80079ec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007958:	f7ff f9cf 	bl	8006cfa <_PreparePacket>
 800795c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
 800796a:	e00b      	b.n	8007984 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	b2da      	uxtb	r2, r3
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	1c59      	adds	r1, r3, #1
 8007974:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007976:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	09db      	lsrs	r3, r3, #7
 8007982:	62bb      	str	r3, [r7, #40]	; 0x28
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	2b7f      	cmp	r3, #127	; 0x7f
 8007988:	d8f0      	bhi.n	800796c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	623b      	str	r3, [r7, #32]
 80079a2:	e00b      	b.n	80079bc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	1c59      	adds	r1, r3, #1
 80079ac:	6279      	str	r1, [r7, #36]	; 0x24
 80079ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	09db      	lsrs	r3, r3, #7
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2b7f      	cmp	r3, #127	; 0x7f
 80079c0:	d8f0      	bhi.n	80079a4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	627a      	str	r2, [r7, #36]	; 0x24
 80079c8:	6a3a      	ldr	r2, [r7, #32]
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	6979      	ldr	r1, [r7, #20]
 80079d6:	69b8      	ldr	r0, [r7, #24]
 80079d8:	f7ff fa80 	bl	8006edc <_SendPacket>
  RECORD_END();
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f383 8811 	msr	BASEPRI, r3
}
 80079e2:	bf00      	nop
 80079e4:	3730      	adds	r7, #48	; 0x30
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	200144d4 	.word	0x200144d4

080079f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08c      	sub	sp, #48	; 0x30
 80079f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80079f6:	4b59      	ldr	r3, [pc, #356]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80079fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007a00:	f04f 0120 	mov.w	r1, #32
 8007a04:	f381 8811 	msr	BASEPRI, r1
 8007a08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007a0a:	4b54      	ldr	r3, [pc, #336]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	220a      	movs	r2, #10
 8007a10:	4953      	ldr	r1, [pc, #332]	; (8007b60 <SEGGER_SYSVIEW_Start+0x170>)
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7f8 fbe4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007a1e:	f7fe ff3d 	bl	800689c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007a22:	200a      	movs	r0, #10
 8007a24:	f7ff ff30 	bl	8007888 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a28:	f3ef 8311 	mrs	r3, BASEPRI
 8007a2c:	f04f 0120 	mov.w	r1, #32
 8007a30:	f381 8811 	msr	BASEPRI, r1
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	484b      	ldr	r0, [pc, #300]	; (8007b64 <SEGGER_SYSVIEW_Start+0x174>)
 8007a38:	f7ff f95f 	bl	8006cfa <_PreparePacket>
 8007a3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a46:	4b45      	ldr	r3, [pc, #276]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4c:	e00b      	b.n	8007a66 <SEGGER_SYSVIEW_Start+0x76>
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	1c59      	adds	r1, r3, #1
 8007a56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007a58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	09db      	lsrs	r3, r3, #7
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2b7f      	cmp	r3, #127	; 0x7f
 8007a6a:	d8f0      	bhi.n	8007a4e <SEGGER_SYSVIEW_Start+0x5e>
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a80:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	623b      	str	r3, [r7, #32]
 8007a86:	e00b      	b.n	8007aa0 <SEGGER_SYSVIEW_Start+0xb0>
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	1c59      	adds	r1, r3, #1
 8007a90:	6279      	str	r1, [r7, #36]	; 0x24
 8007a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	09db      	lsrs	r3, r3, #7
 8007a9e:	623b      	str	r3, [r7, #32]
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa4:	d8f0      	bhi.n	8007a88 <SEGGER_SYSVIEW_Start+0x98>
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	627a      	str	r2, [r7, #36]	; 0x24
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	61fb      	str	r3, [r7, #28]
 8007aba:	4b28      	ldr	r3, [pc, #160]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	61bb      	str	r3, [r7, #24]
 8007ac0:	e00b      	b.n	8007ada <SEGGER_SYSVIEW_Start+0xea>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	1c59      	adds	r1, r3, #1
 8007aca:	61f9      	str	r1, [r7, #28]
 8007acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	09db      	lsrs	r3, r3, #7
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ade:	d8f0      	bhi.n	8007ac2 <SEGGER_SYSVIEW_Start+0xd2>
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	61fa      	str	r2, [r7, #28]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	2300      	movs	r3, #0
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	e00b      	b.n	8007b12 <SEGGER_SYSVIEW_Start+0x122>
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1c59      	adds	r1, r3, #1
 8007b02:	6179      	str	r1, [r7, #20]
 8007b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	09db      	lsrs	r3, r3, #7
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b7f      	cmp	r3, #127	; 0x7f
 8007b16:	d8f0      	bhi.n	8007afa <SEGGER_SYSVIEW_Start+0x10a>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	617a      	str	r2, [r7, #20]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007b28:	2218      	movs	r2, #24
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff f9d5 	bl	8006edc <_SendPacket>
      RECORD_END();
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007b38:	4b08      	ldr	r3, [pc, #32]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007b40:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <SEGGER_SYSVIEW_Start+0x16c>)
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007b46:	f000 f9eb 	bl	8007f20 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007b4a:	f000 f9b1 	bl	8007eb0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007b4e:	f000 fc09 	bl	8008364 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007b52:	bf00      	nop
 8007b54:	3730      	adds	r7, #48	; 0x30
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200144a4 	.word	0x200144a4
 8007b60:	08008fc4 	.word	0x08008fc4
 8007b64:	200144d4 	.word	0x200144d4

08007b68 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8007b72:	f04f 0120 	mov.w	r1, #32
 8007b76:	f381 8811 	msr	BASEPRI, r1
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	480b      	ldr	r0, [pc, #44]	; (8007bac <SEGGER_SYSVIEW_Stop+0x44>)
 8007b7e:	f7ff f8bc 	bl	8006cfa <_PreparePacket>
 8007b82:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007b8c:	220b      	movs	r2, #11
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6838      	ldr	r0, [r7, #0]
 8007b92:	f7ff f9a3 	bl	8006edc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007b96:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <SEGGER_SYSVIEW_Stop+0x48>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f383 8811 	msr	BASEPRI, r3
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200144d4 	.word	0x200144d4
 8007bb0:	200144a4 	.word	0x200144a4

08007bb4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08c      	sub	sp, #48	; 0x30
 8007bb8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007bba:	f3ef 8311 	mrs	r3, BASEPRI
 8007bbe:	f04f 0120 	mov.w	r1, #32
 8007bc2:	f381 8811 	msr	BASEPRI, r1
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	4845      	ldr	r0, [pc, #276]	; (8007ce0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007bca:	f7ff f896 	bl	8006cfa <_PreparePacket>
 8007bce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bde:	e00b      	b.n	8007bf8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	1c59      	adds	r1, r3, #1
 8007be8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	09db      	lsrs	r3, r3, #7
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8007bfc:	d8f0      	bhi.n	8007be0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
 8007c12:	4b34      	ldr	r3, [pc, #208]	; (8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	623b      	str	r3, [r7, #32]
 8007c18:	e00b      	b.n	8007c32 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	1c59      	adds	r1, r3, #1
 8007c22:	6279      	str	r1, [r7, #36]	; 0x24
 8007c24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c28:	b2d2      	uxtb	r2, r2
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	09db      	lsrs	r3, r3, #7
 8007c30:	623b      	str	r3, [r7, #32]
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	2b7f      	cmp	r3, #127	; 0x7f
 8007c36:	d8f0      	bhi.n	8007c1a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	e00b      	b.n	8007c6c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	1c59      	adds	r1, r3, #1
 8007c5c:	61f9      	str	r1, [r7, #28]
 8007c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	09db      	lsrs	r3, r3, #7
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c70:	d8f0      	bhi.n	8007c54 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	61fa      	str	r2, [r7, #28]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	e00b      	b.n	8007ca4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	1c59      	adds	r1, r3, #1
 8007c94:	6179      	str	r1, [r7, #20]
 8007c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c9a:	b2d2      	uxtb	r2, r2
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	09db      	lsrs	r3, r3, #7
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca8:	d8f0      	bhi.n	8007c8c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	617a      	str	r2, [r7, #20]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007cba:	2218      	movs	r2, #24
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	68b8      	ldr	r0, [r7, #8]
 8007cc0:	f7ff f90c 	bl	8006edc <_SendPacket>
  RECORD_END();
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	4798      	blx	r3
  }
}
 8007cd8:	bf00      	nop
 8007cda:	3730      	adds	r7, #48	; 0x30
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200144d4 	.word	0x200144d4
 8007ce4:	200144a4 	.word	0x200144a4

08007ce8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b092      	sub	sp, #72	; 0x48
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf4:	f04f 0120 	mov.w	r1, #32
 8007cf8:	f381 8811 	msr	BASEPRI, r1
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	486a      	ldr	r0, [pc, #424]	; (8007ea8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007d00:	f7fe fffb 	bl	8006cfa <_PreparePacket>
 8007d04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b66      	ldr	r3, [pc, #408]	; (8007eac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	643b      	str	r3, [r7, #64]	; 0x40
 8007d1a:	e00b      	b.n	8007d34 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d22:	1c59      	adds	r1, r3, #1
 8007d24:	6479      	str	r1, [r7, #68]	; 0x44
 8007d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d30:	09db      	lsrs	r3, r3, #7
 8007d32:	643b      	str	r3, [r7, #64]	; 0x40
 8007d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d36:	2b7f      	cmp	r3, #127	; 0x7f
 8007d38:	d8f0      	bhi.n	8007d1c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d54:	e00b      	b.n	8007d6e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	1c59      	adds	r1, r3, #1
 8007d5e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	09db      	lsrs	r3, r3, #7
 8007d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	2b7f      	cmp	r3, #127	; 0x7f
 8007d72:	d8f0      	bhi.n	8007d56 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d7c:	b2d2      	uxtb	r2, r2
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d82:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7fe ff67 	bl	8006c60 <_EncodeStr>
 8007d92:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007d94:	2209      	movs	r2, #9
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	6938      	ldr	r0, [r7, #16]
 8007d9a:	f7ff f89f 	bl	8006edc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b40      	ldr	r3, [pc, #256]	; (8007eac <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30
 8007db2:	e00b      	b.n	8007dcc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	6379      	str	r1, [r7, #52]	; 0x34
 8007dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	09db      	lsrs	r3, r3, #7
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd0:	d8f0      	bhi.n	8007db4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	637a      	str	r2, [r7, #52]	; 0x34
 8007dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dec:	e00b      	b.n	8007e06 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	1c59      	adds	r1, r3, #1
 8007df6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	09db      	lsrs	r3, r3, #7
 8007e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	2b7f      	cmp	r3, #127	; 0x7f
 8007e0a:	d8f0      	bhi.n	8007dee <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	e00b      	b.n	8007e40 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	1c59      	adds	r1, r3, #1
 8007e30:	6279      	str	r1, [r7, #36]	; 0x24
 8007e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	09db      	lsrs	r3, r3, #7
 8007e3e:	623b      	str	r3, [r7, #32]
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	2b7f      	cmp	r3, #127	; 0x7f
 8007e44:	d8f0      	bhi.n	8007e28 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8007e4c:	6a3a      	ldr	r2, [r7, #32]
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	e00b      	b.n	8007e78 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	1c59      	adds	r1, r3, #1
 8007e68:	61f9      	str	r1, [r7, #28]
 8007e6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	09db      	lsrs	r3, r3, #7
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e7c:	d8f0      	bhi.n	8007e60 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	61fa      	str	r2, [r7, #28]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	b2d2      	uxtb	r2, r2
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007e8e:	2215      	movs	r2, #21
 8007e90:	68f9      	ldr	r1, [r7, #12]
 8007e92:	6938      	ldr	r0, [r7, #16]
 8007e94:	f7ff f822 	bl	8006edc <_SendPacket>
  RECORD_END();
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f383 8811 	msr	BASEPRI, r3
}
 8007e9e:	bf00      	nop
 8007ea0:	3748      	adds	r7, #72	; 0x48
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200144d4 	.word	0x200144d4
 8007eac:	200144a4 	.word	0x200144a4

08007eb0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007eb4:	4b07      	ldr	r3, [pc, #28]	; (8007ed4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007ec6:	4b03      	ldr	r3, [pc, #12]	; (8007ed4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4798      	blx	r3
  }
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200144a4 	.word	0x200144a4

08007ed8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ee4:	f04f 0120 	mov.w	r1, #32
 8007ee8:	f381 8811 	msr	BASEPRI, r1
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	480b      	ldr	r0, [pc, #44]	; (8007f1c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007ef0:	f7fe ff03 	bl	8006cfa <_PreparePacket>
 8007ef4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f7fe feb0 	bl	8006c60 <_EncodeStr>
 8007f00:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007f02:	220e      	movs	r2, #14
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f7fe ffe8 	bl	8006edc <_SendPacket>
  RECORD_END();
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f383 8811 	msr	BASEPRI, r3
}
 8007f12:	bf00      	nop
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	200144d4 	.word	0x200144d4

08007f20 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007f20:	b590      	push	{r4, r7, lr}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01a      	beq.n	8007f64 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d015      	beq.n	8007f64 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007f38:	4b10      	ldr	r3, [pc, #64]	; (8007f7c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4798      	blx	r3
 8007f40:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007f44:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	000a      	movs	r2, r1
 8007f54:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007f56:	4613      	mov	r3, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	200d      	movs	r0, #13
 8007f5e:	f7ff fced 	bl	800793c <SEGGER_SYSVIEW_RecordU32x2>
 8007f62:	e006      	b.n	8007f72 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007f64:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	200c      	movs	r0, #12
 8007f6c:	f7ff fcaa 	bl	80078c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd90      	pop	{r4, r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200144a4 	.word	0x200144a4
 8007f80:	e0001004 	.word	0xe0001004

08007f84 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f8e:	f04f 0120 	mov.w	r1, #32
 8007f92:	f381 8811 	msr	BASEPRI, r1
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	4807      	ldr	r0, [pc, #28]	; (8007fb8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007f9a:	f7fe feae 	bl	8006cfa <_PreparePacket>
 8007f9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007fa0:	2211      	movs	r2, #17
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6838      	ldr	r0, [r7, #0]
 8007fa6:	f7fe ff99 	bl	8006edc <_SendPacket>
  RECORD_END();
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f383 8811 	msr	BASEPRI, r3
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200144d4 	.word	0x200144d4

08007fbc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007fc4:	f3ef 8311 	mrs	r3, BASEPRI
 8007fc8:	f04f 0120 	mov.w	r1, #32
 8007fcc:	f381 8811 	msr	BASEPRI, r1
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	4819      	ldr	r0, [pc, #100]	; (8008038 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007fd4:	f7fe fe91 	bl	8006cfa <_PreparePacket>
 8007fd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007fde:	4b17      	ldr	r3, [pc, #92]	; (800803c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	61fb      	str	r3, [r7, #28]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	e00b      	b.n	800800a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	1c59      	adds	r1, r3, #1
 8007ffa:	61f9      	str	r1, [r7, #28]
 8007ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	09db      	lsrs	r3, r3, #7
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b7f      	cmp	r3, #127	; 0x7f
 800800e:	d8f0      	bhi.n	8007ff2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	61fa      	str	r2, [r7, #28]
 8008016:	69ba      	ldr	r2, [r7, #24]
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008020:	2208      	movs	r2, #8
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	6938      	ldr	r0, [r7, #16]
 8008026:	f7fe ff59 	bl	8006edc <_SendPacket>
  RECORD_END();
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f383 8811 	msr	BASEPRI, r3
}
 8008030:	bf00      	nop
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	200144d4 	.word	0x200144d4
 800803c:	200144a4 	.word	0x200144a4

08008040 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008048:	f3ef 8311 	mrs	r3, BASEPRI
 800804c:	f04f 0120 	mov.w	r1, #32
 8008050:	f381 8811 	msr	BASEPRI, r1
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	4819      	ldr	r0, [pc, #100]	; (80080bc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008058:	f7fe fe4f 	bl	8006cfa <_PreparePacket>
 800805c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008062:	4b17      	ldr	r3, [pc, #92]	; (80080c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	e00b      	b.n	800808e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	1c59      	adds	r1, r3, #1
 800807e:	61f9      	str	r1, [r7, #28]
 8008080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	09db      	lsrs	r3, r3, #7
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b7f      	cmp	r3, #127	; 0x7f
 8008092:	d8f0      	bhi.n	8008076 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	61fa      	str	r2, [r7, #28]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80080a4:	2204      	movs	r2, #4
 80080a6:	68f9      	ldr	r1, [r7, #12]
 80080a8:	6938      	ldr	r0, [r7, #16]
 80080aa:	f7fe ff17 	bl	8006edc <_SendPacket>
  RECORD_END();
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f383 8811 	msr	BASEPRI, r3
}
 80080b4:	bf00      	nop
 80080b6:	3720      	adds	r7, #32
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200144d4 	.word	0x200144d4
 80080c0:	200144a4 	.word	0x200144a4

080080c4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80080cc:	f3ef 8311 	mrs	r3, BASEPRI
 80080d0:	f04f 0120 	mov.w	r1, #32
 80080d4:	f381 8811 	msr	BASEPRI, r1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	4819      	ldr	r0, [pc, #100]	; (8008140 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80080dc:	f7fe fe0d 	bl	8006cfa <_PreparePacket>
 80080e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80080e6:	4b17      	ldr	r3, [pc, #92]	; (8008144 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	61bb      	str	r3, [r7, #24]
 80080f8:	e00b      	b.n	8008112 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	1c59      	adds	r1, r3, #1
 8008102:	61f9      	str	r1, [r7, #28]
 8008104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	09db      	lsrs	r3, r3, #7
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2b7f      	cmp	r3, #127	; 0x7f
 8008116:	d8f0      	bhi.n	80080fa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008128:	2206      	movs	r2, #6
 800812a:	68f9      	ldr	r1, [r7, #12]
 800812c:	6938      	ldr	r0, [r7, #16]
 800812e:	f7fe fed5 	bl	8006edc <_SendPacket>
  RECORD_END();
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f383 8811 	msr	BASEPRI, r3
}
 8008138:	bf00      	nop
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200144d4 	.word	0x200144d4
 8008144:	200144a4 	.word	0x200144a4

08008148 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008148:	b580      	push	{r7, lr}
 800814a:	b08a      	sub	sp, #40	; 0x28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008152:	f3ef 8311 	mrs	r3, BASEPRI
 8008156:	f04f 0120 	mov.w	r1, #32
 800815a:	f381 8811 	msr	BASEPRI, r1
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	4827      	ldr	r0, [pc, #156]	; (8008200 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008162:	f7fe fdca 	bl	8006cfa <_PreparePacket>
 8008166:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	623b      	str	r3, [r7, #32]
 800817e:	e00b      	b.n	8008198 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	1c59      	adds	r1, r3, #1
 8008188:	6279      	str	r1, [r7, #36]	; 0x24
 800818a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	09db      	lsrs	r3, r3, #7
 8008196:	623b      	str	r3, [r7, #32]
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	2b7f      	cmp	r3, #127	; 0x7f
 800819c:	d8f0      	bhi.n	8008180 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	627a      	str	r2, [r7, #36]	; 0x24
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	61bb      	str	r3, [r7, #24]
 80081b6:	e00b      	b.n	80081d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	61f9      	str	r1, [r7, #28]
 80081c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081c6:	b2d2      	uxtb	r2, r2
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	09db      	lsrs	r3, r3, #7
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b7f      	cmp	r3, #127	; 0x7f
 80081d4:	d8f0      	bhi.n	80081b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	61fa      	str	r2, [r7, #28]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80081e6:	2207      	movs	r2, #7
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	6938      	ldr	r0, [r7, #16]
 80081ec:	f7fe fe76 	bl	8006edc <_SendPacket>
  RECORD_END();
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f383 8811 	msr	BASEPRI, r3
}
 80081f6:	bf00      	nop
 80081f8:	3728      	adds	r7, #40	; 0x28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	200144d4 	.word	0x200144d4
 8008204:	200144a4 	.word	0x200144a4

08008208 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	1ad3      	subs	r3, r2, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	200144a4 	.word	0x200144a4

08008228 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b08c      	sub	sp, #48	; 0x30
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008232:	4b3b      	ldr	r3, [pc, #236]	; (8008320 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d06d      	beq.n	8008316 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800823a:	4b39      	ldr	r3, [pc, #228]	; (8008320 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008240:	2300      	movs	r3, #0
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
 8008244:	e008      	b.n	8008258 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	3301      	adds	r3, #1
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825c:	429a      	cmp	r2, r3
 800825e:	d3f2      	bcc.n	8008246 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008260:	e000      	b.n	8008264 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008262:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d055      	beq.n	8008316 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800826a:	f3ef 8311 	mrs	r3, BASEPRI
 800826e:	f04f 0120 	mov.w	r1, #32
 8008272:	f381 8811 	msr	BASEPRI, r1
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	482a      	ldr	r0, [pc, #168]	; (8008324 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800827a:	f7fe fd3e 	bl	8006cfa <_PreparePacket>
 800827e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	623b      	str	r3, [r7, #32]
 800828c:	e00b      	b.n	80082a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	6279      	str	r1, [r7, #36]	; 0x24
 8008298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	09db      	lsrs	r3, r3, #7
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	2b7f      	cmp	r3, #127	; 0x7f
 80082aa:	d8f0      	bhi.n	800828e <SEGGER_SYSVIEW_SendModule+0x66>
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	627a      	str	r2, [r7, #36]	; 0x24
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	b2d2      	uxtb	r2, r2
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	61bb      	str	r3, [r7, #24]
 80082c6:	e00b      	b.n	80082e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	1c59      	adds	r1, r3, #1
 80082d0:	61f9      	str	r1, [r7, #28]
 80082d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	09db      	lsrs	r3, r3, #7
 80082de:	61bb      	str	r3, [r7, #24]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	2b7f      	cmp	r3, #127	; 0x7f
 80082e4:	d8f0      	bhi.n	80082c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	61fa      	str	r2, [r7, #28]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2280      	movs	r2, #128	; 0x80
 80082fc:	4619      	mov	r1, r3
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7fe fcae 	bl	8006c60 <_EncodeStr>
 8008304:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008306:	2216      	movs	r2, #22
 8008308:	68f9      	ldr	r1, [r7, #12]
 800830a:	6938      	ldr	r0, [r7, #16]
 800830c:	f7fe fde6 	bl	8006edc <_SendPacket>
      RECORD_END();
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008316:	bf00      	nop
 8008318:	3730      	adds	r7, #48	; 0x30
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	200144cc 	.word	0x200144cc
 8008324:	200144d4 	.word	0x200144d4

08008328 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00f      	beq.n	8008356 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008336:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f2      	bne.n	800833c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200144cc 	.word	0x200144cc

08008364 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800836a:	f3ef 8311 	mrs	r3, BASEPRI
 800836e:	f04f 0120 	mov.w	r1, #32
 8008372:	f381 8811 	msr	BASEPRI, r1
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	4817      	ldr	r0, [pc, #92]	; (80083d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800837a:	f7fe fcbe 	bl	8006cfa <_PreparePacket>
 800837e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	4b14      	ldr	r3, [pc, #80]	; (80083dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	e00b      	b.n	80083a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	b2da      	uxtb	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	1c59      	adds	r1, r3, #1
 8008398:	6179      	str	r1, [r7, #20]
 800839a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	09db      	lsrs	r3, r3, #7
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b7f      	cmp	r3, #127	; 0x7f
 80083ac:	d8f0      	bhi.n	8008390 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	617a      	str	r2, [r7, #20]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	b2d2      	uxtb	r2, r2
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80083be:	221b      	movs	r2, #27
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	68b8      	ldr	r0, [r7, #8]
 80083c4:	f7fe fd8a 	bl	8006edc <_SendPacket>
  RECORD_END();
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f383 8811 	msr	BASEPRI, r3
}
 80083ce:	bf00      	nop
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200144d4 	.word	0x200144d4
 80083dc:	200144d0 	.word	0x200144d0

080083e0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80083e0:	b40f      	push	{r0, r1, r2, r3}
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80083e8:	f107 0314 	add.w	r3, r7, #20
 80083ec:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80083ee:	1d3b      	adds	r3, r7, #4
 80083f0:	461a      	mov	r2, r3
 80083f2:	2100      	movs	r1, #0
 80083f4:	6938      	ldr	r0, [r7, #16]
 80083f6:	f7fe fffb 	bl	80073f0 <_VPrintTarget>
  va_end(ParamList);
}
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008404:	b004      	add	sp, #16
 8008406:	4770      	bx	lr

08008408 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008410:	f3ef 8311 	mrs	r3, BASEPRI
 8008414:	f04f 0120 	mov.w	r1, #32
 8008418:	f381 8811 	msr	BASEPRI, r1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	4827      	ldr	r0, [pc, #156]	; (80084bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8008420:	f7fe fc6b 	bl	8006cfa <_PreparePacket>
 8008424:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008426:	2280      	movs	r2, #128	; 0x80
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	6938      	ldr	r0, [r7, #16]
 800842c:	f7fe fc18 	bl	8006c60 <_EncodeStr>
 8008430:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
 8008436:	2301      	movs	r3, #1
 8008438:	623b      	str	r3, [r7, #32]
 800843a:	e00b      	b.n	8008454 <SEGGER_SYSVIEW_Warn+0x4c>
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	b2da      	uxtb	r2, r3
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	1c59      	adds	r1, r3, #1
 8008444:	6279      	str	r1, [r7, #36]	; 0x24
 8008446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	09db      	lsrs	r3, r3, #7
 8008452:	623b      	str	r3, [r7, #32]
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	2b7f      	cmp	r3, #127	; 0x7f
 8008458:	d8f0      	bhi.n	800843c <SEGGER_SYSVIEW_Warn+0x34>
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	627a      	str	r2, [r7, #36]	; 0x24
 8008460:	6a3a      	ldr	r2, [r7, #32]
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	2300      	movs	r3, #0
 8008470:	61bb      	str	r3, [r7, #24]
 8008472:	e00b      	b.n	800848c <SEGGER_SYSVIEW_Warn+0x84>
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	1c59      	adds	r1, r3, #1
 800847c:	61f9      	str	r1, [r7, #28]
 800847e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	09db      	lsrs	r3, r3, #7
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	2b7f      	cmp	r3, #127	; 0x7f
 8008490:	d8f0      	bhi.n	8008474 <SEGGER_SYSVIEW_Warn+0x6c>
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	61fa      	str	r2, [r7, #28]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80084a2:	221a      	movs	r2, #26
 80084a4:	68f9      	ldr	r1, [r7, #12]
 80084a6:	6938      	ldr	r0, [r7, #16]
 80084a8:	f7fe fd18 	bl	8006edc <_SendPacket>
  RECORD_END();
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f383 8811 	msr	BASEPRI, r3
}
 80084b2:	bf00      	nop
 80084b4:	3728      	adds	r7, #40	; 0x28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200144d4 	.word	0x200144d4

080084c0 <siprintf>:
 80084c0:	b40e      	push	{r1, r2, r3}
 80084c2:	b500      	push	{lr}
 80084c4:	b09c      	sub	sp, #112	; 0x70
 80084c6:	ab1d      	add	r3, sp, #116	; 0x74
 80084c8:	9002      	str	r0, [sp, #8]
 80084ca:	9006      	str	r0, [sp, #24]
 80084cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084d0:	4809      	ldr	r0, [pc, #36]	; (80084f8 <siprintf+0x38>)
 80084d2:	9107      	str	r1, [sp, #28]
 80084d4:	9104      	str	r1, [sp, #16]
 80084d6:	4909      	ldr	r1, [pc, #36]	; (80084fc <siprintf+0x3c>)
 80084d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084dc:	9105      	str	r1, [sp, #20]
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	a902      	add	r1, sp, #8
 80084e4:	f000 f9b0 	bl	8008848 <_svfiprintf_r>
 80084e8:	9b02      	ldr	r3, [sp, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	b01c      	add	sp, #112	; 0x70
 80084f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f4:	b003      	add	sp, #12
 80084f6:	4770      	bx	lr
 80084f8:	20000064 	.word	0x20000064
 80084fc:	ffff0208 	.word	0xffff0208

08008500 <memcmp>:
 8008500:	b510      	push	{r4, lr}
 8008502:	3901      	subs	r1, #1
 8008504:	4402      	add	r2, r0
 8008506:	4290      	cmp	r0, r2
 8008508:	d101      	bne.n	800850e <memcmp+0xe>
 800850a:	2000      	movs	r0, #0
 800850c:	e005      	b.n	800851a <memcmp+0x1a>
 800850e:	7803      	ldrb	r3, [r0, #0]
 8008510:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008514:	42a3      	cmp	r3, r4
 8008516:	d001      	beq.n	800851c <memcmp+0x1c>
 8008518:	1b18      	subs	r0, r3, r4
 800851a:	bd10      	pop	{r4, pc}
 800851c:	3001      	adds	r0, #1
 800851e:	e7f2      	b.n	8008506 <memcmp+0x6>

08008520 <memset>:
 8008520:	4402      	add	r2, r0
 8008522:	4603      	mov	r3, r0
 8008524:	4293      	cmp	r3, r2
 8008526:	d100      	bne.n	800852a <memset+0xa>
 8008528:	4770      	bx	lr
 800852a:	f803 1b01 	strb.w	r1, [r3], #1
 800852e:	e7f9      	b.n	8008524 <memset+0x4>

08008530 <__errno>:
 8008530:	4b01      	ldr	r3, [pc, #4]	; (8008538 <__errno+0x8>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000064 	.word	0x20000064

0800853c <__libc_init_array>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	4d0d      	ldr	r5, [pc, #52]	; (8008574 <__libc_init_array+0x38>)
 8008540:	4c0d      	ldr	r4, [pc, #52]	; (8008578 <__libc_init_array+0x3c>)
 8008542:	1b64      	subs	r4, r4, r5
 8008544:	10a4      	asrs	r4, r4, #2
 8008546:	2600      	movs	r6, #0
 8008548:	42a6      	cmp	r6, r4
 800854a:	d109      	bne.n	8008560 <__libc_init_array+0x24>
 800854c:	4d0b      	ldr	r5, [pc, #44]	; (800857c <__libc_init_array+0x40>)
 800854e:	4c0c      	ldr	r4, [pc, #48]	; (8008580 <__libc_init_array+0x44>)
 8008550:	f000 fc6a 	bl	8008e28 <_init>
 8008554:	1b64      	subs	r4, r4, r5
 8008556:	10a4      	asrs	r4, r4, #2
 8008558:	2600      	movs	r6, #0
 800855a:	42a6      	cmp	r6, r4
 800855c:	d105      	bne.n	800856a <__libc_init_array+0x2e>
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	f855 3b04 	ldr.w	r3, [r5], #4
 8008564:	4798      	blx	r3
 8008566:	3601      	adds	r6, #1
 8008568:	e7ee      	b.n	8008548 <__libc_init_array+0xc>
 800856a:	f855 3b04 	ldr.w	r3, [r5], #4
 800856e:	4798      	blx	r3
 8008570:	3601      	adds	r6, #1
 8008572:	e7f2      	b.n	800855a <__libc_init_array+0x1e>
 8008574:	0800901c 	.word	0x0800901c
 8008578:	0800901c 	.word	0x0800901c
 800857c:	0800901c 	.word	0x0800901c
 8008580:	08009020 	.word	0x08009020

08008584 <__retarget_lock_acquire_recursive>:
 8008584:	4770      	bx	lr

08008586 <__retarget_lock_release_recursive>:
 8008586:	4770      	bx	lr

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800859e:	4291      	cmp	r1, r2
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <_free_r>:
 80085a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d044      	beq.n	8008634 <_free_r+0x90>
 80085aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ae:	9001      	str	r0, [sp, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f1a1 0404 	sub.w	r4, r1, #4
 80085b6:	bfb8      	it	lt
 80085b8:	18e4      	addlt	r4, r4, r3
 80085ba:	f000 f8df 	bl	800877c <__malloc_lock>
 80085be:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <_free_r+0x94>)
 80085c0:	9801      	ldr	r0, [sp, #4]
 80085c2:	6813      	ldr	r3, [r2, #0]
 80085c4:	b933      	cbnz	r3, 80085d4 <_free_r+0x30>
 80085c6:	6063      	str	r3, [r4, #4]
 80085c8:	6014      	str	r4, [r2, #0]
 80085ca:	b003      	add	sp, #12
 80085cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085d0:	f000 b8da 	b.w	8008788 <__malloc_unlock>
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	d908      	bls.n	80085ea <_free_r+0x46>
 80085d8:	6825      	ldr	r5, [r4, #0]
 80085da:	1961      	adds	r1, r4, r5
 80085dc:	428b      	cmp	r3, r1
 80085de:	bf01      	itttt	eq
 80085e0:	6819      	ldreq	r1, [r3, #0]
 80085e2:	685b      	ldreq	r3, [r3, #4]
 80085e4:	1949      	addeq	r1, r1, r5
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	e7ed      	b.n	80085c6 <_free_r+0x22>
 80085ea:	461a      	mov	r2, r3
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b10b      	cbz	r3, 80085f4 <_free_r+0x50>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d9fa      	bls.n	80085ea <_free_r+0x46>
 80085f4:	6811      	ldr	r1, [r2, #0]
 80085f6:	1855      	adds	r5, r2, r1
 80085f8:	42a5      	cmp	r5, r4
 80085fa:	d10b      	bne.n	8008614 <_free_r+0x70>
 80085fc:	6824      	ldr	r4, [r4, #0]
 80085fe:	4421      	add	r1, r4
 8008600:	1854      	adds	r4, r2, r1
 8008602:	42a3      	cmp	r3, r4
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	d1e0      	bne.n	80085ca <_free_r+0x26>
 8008608:	681c      	ldr	r4, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	6053      	str	r3, [r2, #4]
 800860e:	440c      	add	r4, r1
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	e7da      	b.n	80085ca <_free_r+0x26>
 8008614:	d902      	bls.n	800861c <_free_r+0x78>
 8008616:	230c      	movs	r3, #12
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	e7d6      	b.n	80085ca <_free_r+0x26>
 800861c:	6825      	ldr	r5, [r4, #0]
 800861e:	1961      	adds	r1, r4, r5
 8008620:	428b      	cmp	r3, r1
 8008622:	bf04      	itt	eq
 8008624:	6819      	ldreq	r1, [r3, #0]
 8008626:	685b      	ldreq	r3, [r3, #4]
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	bf04      	itt	eq
 800862c:	1949      	addeq	r1, r1, r5
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	6054      	str	r4, [r2, #4]
 8008632:	e7ca      	b.n	80085ca <_free_r+0x26>
 8008634:	b003      	add	sp, #12
 8008636:	bd30      	pop	{r4, r5, pc}
 8008638:	200146f8 	.word	0x200146f8

0800863c <sbrk_aligned>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4e0e      	ldr	r6, [pc, #56]	; (8008678 <sbrk_aligned+0x3c>)
 8008640:	460c      	mov	r4, r1
 8008642:	6831      	ldr	r1, [r6, #0]
 8008644:	4605      	mov	r5, r0
 8008646:	b911      	cbnz	r1, 800864e <sbrk_aligned+0x12>
 8008648:	f000 fba6 	bl	8008d98 <_sbrk_r>
 800864c:	6030      	str	r0, [r6, #0]
 800864e:	4621      	mov	r1, r4
 8008650:	4628      	mov	r0, r5
 8008652:	f000 fba1 	bl	8008d98 <_sbrk_r>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d00a      	beq.n	8008670 <sbrk_aligned+0x34>
 800865a:	1cc4      	adds	r4, r0, #3
 800865c:	f024 0403 	bic.w	r4, r4, #3
 8008660:	42a0      	cmp	r0, r4
 8008662:	d007      	beq.n	8008674 <sbrk_aligned+0x38>
 8008664:	1a21      	subs	r1, r4, r0
 8008666:	4628      	mov	r0, r5
 8008668:	f000 fb96 	bl	8008d98 <_sbrk_r>
 800866c:	3001      	adds	r0, #1
 800866e:	d101      	bne.n	8008674 <sbrk_aligned+0x38>
 8008670:	f04f 34ff 	mov.w	r4, #4294967295
 8008674:	4620      	mov	r0, r4
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	200146fc 	.word	0x200146fc

0800867c <_malloc_r>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	1ccd      	adds	r5, r1, #3
 8008682:	f025 0503 	bic.w	r5, r5, #3
 8008686:	3508      	adds	r5, #8
 8008688:	2d0c      	cmp	r5, #12
 800868a:	bf38      	it	cc
 800868c:	250c      	movcc	r5, #12
 800868e:	2d00      	cmp	r5, #0
 8008690:	4607      	mov	r7, r0
 8008692:	db01      	blt.n	8008698 <_malloc_r+0x1c>
 8008694:	42a9      	cmp	r1, r5
 8008696:	d905      	bls.n	80086a4 <_malloc_r+0x28>
 8008698:	230c      	movs	r3, #12
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	2600      	movs	r6, #0
 800869e:	4630      	mov	r0, r6
 80086a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008778 <_malloc_r+0xfc>
 80086a8:	f000 f868 	bl	800877c <__malloc_lock>
 80086ac:	f8d8 3000 	ldr.w	r3, [r8]
 80086b0:	461c      	mov	r4, r3
 80086b2:	bb5c      	cbnz	r4, 800870c <_malloc_r+0x90>
 80086b4:	4629      	mov	r1, r5
 80086b6:	4638      	mov	r0, r7
 80086b8:	f7ff ffc0 	bl	800863c <sbrk_aligned>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	4604      	mov	r4, r0
 80086c0:	d155      	bne.n	800876e <_malloc_r+0xf2>
 80086c2:	f8d8 4000 	ldr.w	r4, [r8]
 80086c6:	4626      	mov	r6, r4
 80086c8:	2e00      	cmp	r6, #0
 80086ca:	d145      	bne.n	8008758 <_malloc_r+0xdc>
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	d048      	beq.n	8008762 <_malloc_r+0xe6>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	4631      	mov	r1, r6
 80086d4:	4638      	mov	r0, r7
 80086d6:	eb04 0903 	add.w	r9, r4, r3
 80086da:	f000 fb5d 	bl	8008d98 <_sbrk_r>
 80086de:	4581      	cmp	r9, r0
 80086e0:	d13f      	bne.n	8008762 <_malloc_r+0xe6>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	1a6d      	subs	r5, r5, r1
 80086e6:	4629      	mov	r1, r5
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ffa7 	bl	800863c <sbrk_aligned>
 80086ee:	3001      	adds	r0, #1
 80086f0:	d037      	beq.n	8008762 <_malloc_r+0xe6>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	442b      	add	r3, r5
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	f8d8 3000 	ldr.w	r3, [r8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d038      	beq.n	8008772 <_malloc_r+0xf6>
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	42a2      	cmp	r2, r4
 8008704:	d12b      	bne.n	800875e <_malloc_r+0xe2>
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	e00f      	b.n	800872c <_malloc_r+0xb0>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	1b52      	subs	r2, r2, r5
 8008710:	d41f      	bmi.n	8008752 <_malloc_r+0xd6>
 8008712:	2a0b      	cmp	r2, #11
 8008714:	d917      	bls.n	8008746 <_malloc_r+0xca>
 8008716:	1961      	adds	r1, r4, r5
 8008718:	42a3      	cmp	r3, r4
 800871a:	6025      	str	r5, [r4, #0]
 800871c:	bf18      	it	ne
 800871e:	6059      	strne	r1, [r3, #4]
 8008720:	6863      	ldr	r3, [r4, #4]
 8008722:	bf08      	it	eq
 8008724:	f8c8 1000 	streq.w	r1, [r8]
 8008728:	5162      	str	r2, [r4, r5]
 800872a:	604b      	str	r3, [r1, #4]
 800872c:	4638      	mov	r0, r7
 800872e:	f104 060b 	add.w	r6, r4, #11
 8008732:	f000 f829 	bl	8008788 <__malloc_unlock>
 8008736:	f026 0607 	bic.w	r6, r6, #7
 800873a:	1d23      	adds	r3, r4, #4
 800873c:	1af2      	subs	r2, r6, r3
 800873e:	d0ae      	beq.n	800869e <_malloc_r+0x22>
 8008740:	1b9b      	subs	r3, r3, r6
 8008742:	50a3      	str	r3, [r4, r2]
 8008744:	e7ab      	b.n	800869e <_malloc_r+0x22>
 8008746:	42a3      	cmp	r3, r4
 8008748:	6862      	ldr	r2, [r4, #4]
 800874a:	d1dd      	bne.n	8008708 <_malloc_r+0x8c>
 800874c:	f8c8 2000 	str.w	r2, [r8]
 8008750:	e7ec      	b.n	800872c <_malloc_r+0xb0>
 8008752:	4623      	mov	r3, r4
 8008754:	6864      	ldr	r4, [r4, #4]
 8008756:	e7ac      	b.n	80086b2 <_malloc_r+0x36>
 8008758:	4634      	mov	r4, r6
 800875a:	6876      	ldr	r6, [r6, #4]
 800875c:	e7b4      	b.n	80086c8 <_malloc_r+0x4c>
 800875e:	4613      	mov	r3, r2
 8008760:	e7cc      	b.n	80086fc <_malloc_r+0x80>
 8008762:	230c      	movs	r3, #12
 8008764:	603b      	str	r3, [r7, #0]
 8008766:	4638      	mov	r0, r7
 8008768:	f000 f80e 	bl	8008788 <__malloc_unlock>
 800876c:	e797      	b.n	800869e <_malloc_r+0x22>
 800876e:	6025      	str	r5, [r4, #0]
 8008770:	e7dc      	b.n	800872c <_malloc_r+0xb0>
 8008772:	605b      	str	r3, [r3, #4]
 8008774:	deff      	udf	#255	; 0xff
 8008776:	bf00      	nop
 8008778:	200146f8 	.word	0x200146f8

0800877c <__malloc_lock>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__malloc_lock+0x8>)
 800877e:	f7ff bf01 	b.w	8008584 <__retarget_lock_acquire_recursive>
 8008782:	bf00      	nop
 8008784:	200146f4 	.word	0x200146f4

08008788 <__malloc_unlock>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__malloc_unlock+0x8>)
 800878a:	f7ff befc 	b.w	8008586 <__retarget_lock_release_recursive>
 800878e:	bf00      	nop
 8008790:	200146f4 	.word	0x200146f4

08008794 <__ssputs_r>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	688e      	ldr	r6, [r1, #8]
 800879a:	461f      	mov	r7, r3
 800879c:	42be      	cmp	r6, r7
 800879e:	680b      	ldr	r3, [r1, #0]
 80087a0:	4682      	mov	sl, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	4690      	mov	r8, r2
 80087a6:	d82c      	bhi.n	8008802 <__ssputs_r+0x6e>
 80087a8:	898a      	ldrh	r2, [r1, #12]
 80087aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ae:	d026      	beq.n	80087fe <__ssputs_r+0x6a>
 80087b0:	6965      	ldr	r5, [r4, #20]
 80087b2:	6909      	ldr	r1, [r1, #16]
 80087b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087b8:	eba3 0901 	sub.w	r9, r3, r1
 80087bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087c0:	1c7b      	adds	r3, r7, #1
 80087c2:	444b      	add	r3, r9
 80087c4:	106d      	asrs	r5, r5, #1
 80087c6:	429d      	cmp	r5, r3
 80087c8:	bf38      	it	cc
 80087ca:	461d      	movcc	r5, r3
 80087cc:	0553      	lsls	r3, r2, #21
 80087ce:	d527      	bpl.n	8008820 <__ssputs_r+0x8c>
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7ff ff53 	bl	800867c <_malloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	b360      	cbz	r0, 8008834 <__ssputs_r+0xa0>
 80087da:	6921      	ldr	r1, [r4, #16]
 80087dc:	464a      	mov	r2, r9
 80087de:	f7ff fed3 	bl	8008588 <memcpy>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	6126      	str	r6, [r4, #16]
 80087f0:	6165      	str	r5, [r4, #20]
 80087f2:	444e      	add	r6, r9
 80087f4:	eba5 0509 	sub.w	r5, r5, r9
 80087f8:	6026      	str	r6, [r4, #0]
 80087fa:	60a5      	str	r5, [r4, #8]
 80087fc:	463e      	mov	r6, r7
 80087fe:	42be      	cmp	r6, r7
 8008800:	d900      	bls.n	8008804 <__ssputs_r+0x70>
 8008802:	463e      	mov	r6, r7
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	4632      	mov	r2, r6
 8008808:	4641      	mov	r1, r8
 800880a:	f000 faab 	bl	8008d64 <memmove>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	1b9b      	subs	r3, r3, r6
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	4433      	add	r3, r6
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	2000      	movs	r0, #0
 800881c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008820:	462a      	mov	r2, r5
 8008822:	f000 fac9 	bl	8008db8 <_realloc_r>
 8008826:	4606      	mov	r6, r0
 8008828:	2800      	cmp	r0, #0
 800882a:	d1e0      	bne.n	80087ee <__ssputs_r+0x5a>
 800882c:	6921      	ldr	r1, [r4, #16]
 800882e:	4650      	mov	r0, sl
 8008830:	f7ff feb8 	bl	80085a4 <_free_r>
 8008834:	230c      	movs	r3, #12
 8008836:	f8ca 3000 	str.w	r3, [sl]
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e7e9      	b.n	800881c <__ssputs_r+0x88>

08008848 <_svfiprintf_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	4698      	mov	r8, r3
 800884e:	898b      	ldrh	r3, [r1, #12]
 8008850:	061b      	lsls	r3, r3, #24
 8008852:	b09d      	sub	sp, #116	; 0x74
 8008854:	4607      	mov	r7, r0
 8008856:	460d      	mov	r5, r1
 8008858:	4614      	mov	r4, r2
 800885a:	d50e      	bpl.n	800887a <_svfiprintf_r+0x32>
 800885c:	690b      	ldr	r3, [r1, #16]
 800885e:	b963      	cbnz	r3, 800887a <_svfiprintf_r+0x32>
 8008860:	2140      	movs	r1, #64	; 0x40
 8008862:	f7ff ff0b 	bl	800867c <_malloc_r>
 8008866:	6028      	str	r0, [r5, #0]
 8008868:	6128      	str	r0, [r5, #16]
 800886a:	b920      	cbnz	r0, 8008876 <_svfiprintf_r+0x2e>
 800886c:	230c      	movs	r3, #12
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e0d0      	b.n	8008a18 <_svfiprintf_r+0x1d0>
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	616b      	str	r3, [r5, #20]
 800887a:	2300      	movs	r3, #0
 800887c:	9309      	str	r3, [sp, #36]	; 0x24
 800887e:	2320      	movs	r3, #32
 8008880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008884:	f8cd 800c 	str.w	r8, [sp, #12]
 8008888:	2330      	movs	r3, #48	; 0x30
 800888a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a30 <_svfiprintf_r+0x1e8>
 800888e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008892:	f04f 0901 	mov.w	r9, #1
 8008896:	4623      	mov	r3, r4
 8008898:	469a      	mov	sl, r3
 800889a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889e:	b10a      	cbz	r2, 80088a4 <_svfiprintf_r+0x5c>
 80088a0:	2a25      	cmp	r2, #37	; 0x25
 80088a2:	d1f9      	bne.n	8008898 <_svfiprintf_r+0x50>
 80088a4:	ebba 0b04 	subs.w	fp, sl, r4
 80088a8:	d00b      	beq.n	80088c2 <_svfiprintf_r+0x7a>
 80088aa:	465b      	mov	r3, fp
 80088ac:	4622      	mov	r2, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	4638      	mov	r0, r7
 80088b2:	f7ff ff6f 	bl	8008794 <__ssputs_r>
 80088b6:	3001      	adds	r0, #1
 80088b8:	f000 80a9 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088be:	445a      	add	r2, fp
 80088c0:	9209      	str	r2, [sp, #36]	; 0x24
 80088c2:	f89a 3000 	ldrb.w	r3, [sl]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80a1 	beq.w	8008a0e <_svfiprintf_r+0x1c6>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d6:	f10a 0a01 	add.w	sl, sl, #1
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	9307      	str	r3, [sp, #28]
 80088de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088e2:	931a      	str	r3, [sp, #104]	; 0x68
 80088e4:	4654      	mov	r4, sl
 80088e6:	2205      	movs	r2, #5
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	4850      	ldr	r0, [pc, #320]	; (8008a30 <_svfiprintf_r+0x1e8>)
 80088ee:	f7f7 fccf 	bl	8000290 <memchr>
 80088f2:	9a04      	ldr	r2, [sp, #16]
 80088f4:	b9d8      	cbnz	r0, 800892e <_svfiprintf_r+0xe6>
 80088f6:	06d0      	lsls	r0, r2, #27
 80088f8:	bf44      	itt	mi
 80088fa:	2320      	movmi	r3, #32
 80088fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008900:	0711      	lsls	r1, r2, #28
 8008902:	bf44      	itt	mi
 8008904:	232b      	movmi	r3, #43	; 0x2b
 8008906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890a:	f89a 3000 	ldrb.w	r3, [sl]
 800890e:	2b2a      	cmp	r3, #42	; 0x2a
 8008910:	d015      	beq.n	800893e <_svfiprintf_r+0xf6>
 8008912:	9a07      	ldr	r2, [sp, #28]
 8008914:	4654      	mov	r4, sl
 8008916:	2000      	movs	r0, #0
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	4621      	mov	r1, r4
 800891e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008922:	3b30      	subs	r3, #48	; 0x30
 8008924:	2b09      	cmp	r3, #9
 8008926:	d94d      	bls.n	80089c4 <_svfiprintf_r+0x17c>
 8008928:	b1b0      	cbz	r0, 8008958 <_svfiprintf_r+0x110>
 800892a:	9207      	str	r2, [sp, #28]
 800892c:	e014      	b.n	8008958 <_svfiprintf_r+0x110>
 800892e:	eba0 0308 	sub.w	r3, r0, r8
 8008932:	fa09 f303 	lsl.w	r3, r9, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	46a2      	mov	sl, r4
 800893c:	e7d2      	b.n	80088e4 <_svfiprintf_r+0x9c>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	1d19      	adds	r1, r3, #4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9103      	str	r1, [sp, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	bfbb      	ittet	lt
 800894a:	425b      	neglt	r3, r3
 800894c:	f042 0202 	orrlt.w	r2, r2, #2
 8008950:	9307      	strge	r3, [sp, #28]
 8008952:	9307      	strlt	r3, [sp, #28]
 8008954:	bfb8      	it	lt
 8008956:	9204      	strlt	r2, [sp, #16]
 8008958:	7823      	ldrb	r3, [r4, #0]
 800895a:	2b2e      	cmp	r3, #46	; 0x2e
 800895c:	d10c      	bne.n	8008978 <_svfiprintf_r+0x130>
 800895e:	7863      	ldrb	r3, [r4, #1]
 8008960:	2b2a      	cmp	r3, #42	; 0x2a
 8008962:	d134      	bne.n	80089ce <_svfiprintf_r+0x186>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	1d1a      	adds	r2, r3, #4
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	9203      	str	r2, [sp, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	bfb8      	it	lt
 8008970:	f04f 33ff 	movlt.w	r3, #4294967295
 8008974:	3402      	adds	r4, #2
 8008976:	9305      	str	r3, [sp, #20]
 8008978:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a40 <_svfiprintf_r+0x1f8>
 800897c:	7821      	ldrb	r1, [r4, #0]
 800897e:	2203      	movs	r2, #3
 8008980:	4650      	mov	r0, sl
 8008982:	f7f7 fc85 	bl	8000290 <memchr>
 8008986:	b138      	cbz	r0, 8008998 <_svfiprintf_r+0x150>
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	eba0 000a 	sub.w	r0, r0, sl
 800898e:	2240      	movs	r2, #64	; 0x40
 8008990:	4082      	lsls	r2, r0
 8008992:	4313      	orrs	r3, r2
 8008994:	3401      	adds	r4, #1
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899c:	4825      	ldr	r0, [pc, #148]	; (8008a34 <_svfiprintf_r+0x1ec>)
 800899e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089a2:	2206      	movs	r2, #6
 80089a4:	f7f7 fc74 	bl	8000290 <memchr>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d038      	beq.n	8008a1e <_svfiprintf_r+0x1d6>
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <_svfiprintf_r+0x1f0>)
 80089ae:	bb1b      	cbnz	r3, 80089f8 <_svfiprintf_r+0x1b0>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	3307      	adds	r3, #7
 80089b4:	f023 0307 	bic.w	r3, r3, #7
 80089b8:	3308      	adds	r3, #8
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089be:	4433      	add	r3, r6
 80089c0:	9309      	str	r3, [sp, #36]	; 0x24
 80089c2:	e768      	b.n	8008896 <_svfiprintf_r+0x4e>
 80089c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089c8:	460c      	mov	r4, r1
 80089ca:	2001      	movs	r0, #1
 80089cc:	e7a6      	b.n	800891c <_svfiprintf_r+0xd4>
 80089ce:	2300      	movs	r3, #0
 80089d0:	3401      	adds	r4, #1
 80089d2:	9305      	str	r3, [sp, #20]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f04f 0c0a 	mov.w	ip, #10
 80089da:	4620      	mov	r0, r4
 80089dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e0:	3a30      	subs	r2, #48	; 0x30
 80089e2:	2a09      	cmp	r2, #9
 80089e4:	d903      	bls.n	80089ee <_svfiprintf_r+0x1a6>
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0c6      	beq.n	8008978 <_svfiprintf_r+0x130>
 80089ea:	9105      	str	r1, [sp, #20]
 80089ec:	e7c4      	b.n	8008978 <_svfiprintf_r+0x130>
 80089ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f2:	4604      	mov	r4, r0
 80089f4:	2301      	movs	r3, #1
 80089f6:	e7f0      	b.n	80089da <_svfiprintf_r+0x192>
 80089f8:	ab03      	add	r3, sp, #12
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	462a      	mov	r2, r5
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <_svfiprintf_r+0x1f4>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	4638      	mov	r0, r7
 8008a04:	f3af 8000 	nop.w
 8008a08:	1c42      	adds	r2, r0, #1
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	d1d6      	bne.n	80089bc <_svfiprintf_r+0x174>
 8008a0e:	89ab      	ldrh	r3, [r5, #12]
 8008a10:	065b      	lsls	r3, r3, #25
 8008a12:	f53f af2d 	bmi.w	8008870 <_svfiprintf_r+0x28>
 8008a16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a18:	b01d      	add	sp, #116	; 0x74
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	ab03      	add	r3, sp, #12
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	462a      	mov	r2, r5
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <_svfiprintf_r+0x1f4>)
 8008a26:	a904      	add	r1, sp, #16
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f000 f879 	bl	8008b20 <_printf_i>
 8008a2e:	e7eb      	b.n	8008a08 <_svfiprintf_r+0x1c0>
 8008a30:	08008fe0 	.word	0x08008fe0
 8008a34:	08008fea 	.word	0x08008fea
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	08008795 	.word	0x08008795
 8008a40:	08008fe6 	.word	0x08008fe6

08008a44 <_printf_common>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	4616      	mov	r6, r2
 8008a4a:	4699      	mov	r9, r3
 8008a4c:	688a      	ldr	r2, [r1, #8]
 8008a4e:	690b      	ldr	r3, [r1, #16]
 8008a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a54:	4293      	cmp	r3, r2
 8008a56:	bfb8      	it	lt
 8008a58:	4613      	movlt	r3, r2
 8008a5a:	6033      	str	r3, [r6, #0]
 8008a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a60:	4607      	mov	r7, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	b10a      	cbz	r2, 8008a6a <_printf_common+0x26>
 8008a66:	3301      	adds	r3, #1
 8008a68:	6033      	str	r3, [r6, #0]
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	0699      	lsls	r1, r3, #26
 8008a6e:	bf42      	ittt	mi
 8008a70:	6833      	ldrmi	r3, [r6, #0]
 8008a72:	3302      	addmi	r3, #2
 8008a74:	6033      	strmi	r3, [r6, #0]
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	f015 0506 	ands.w	r5, r5, #6
 8008a7c:	d106      	bne.n	8008a8c <_printf_common+0x48>
 8008a7e:	f104 0a19 	add.w	sl, r4, #25
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	6832      	ldr	r2, [r6, #0]
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	42ab      	cmp	r3, r5
 8008a8a:	dc26      	bgt.n	8008ada <_printf_common+0x96>
 8008a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a90:	1e13      	subs	r3, r2, #0
 8008a92:	6822      	ldr	r2, [r4, #0]
 8008a94:	bf18      	it	ne
 8008a96:	2301      	movne	r3, #1
 8008a98:	0692      	lsls	r2, r2, #26
 8008a9a:	d42b      	bmi.n	8008af4 <_printf_common+0xb0>
 8008a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	47c0      	blx	r8
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	d01e      	beq.n	8008ae8 <_printf_common+0xa4>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	6922      	ldr	r2, [r4, #16]
 8008aae:	f003 0306 	and.w	r3, r3, #6
 8008ab2:	2b04      	cmp	r3, #4
 8008ab4:	bf02      	ittt	eq
 8008ab6:	68e5      	ldreq	r5, [r4, #12]
 8008ab8:	6833      	ldreq	r3, [r6, #0]
 8008aba:	1aed      	subeq	r5, r5, r3
 8008abc:	68a3      	ldr	r3, [r4, #8]
 8008abe:	bf0c      	ite	eq
 8008ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ac4:	2500      	movne	r5, #0
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bfc4      	itt	gt
 8008aca:	1a9b      	subgt	r3, r3, r2
 8008acc:	18ed      	addgt	r5, r5, r3
 8008ace:	2600      	movs	r6, #0
 8008ad0:	341a      	adds	r4, #26
 8008ad2:	42b5      	cmp	r5, r6
 8008ad4:	d11a      	bne.n	8008b0c <_printf_common+0xc8>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e008      	b.n	8008aec <_printf_common+0xa8>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	47c0      	blx	r8
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d103      	bne.n	8008af0 <_printf_common+0xac>
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af0:	3501      	adds	r5, #1
 8008af2:	e7c6      	b.n	8008a82 <_printf_common+0x3e>
 8008af4:	18e1      	adds	r1, r4, r3
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	2030      	movs	r0, #48	; 0x30
 8008afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008afe:	4422      	add	r2, r4
 8008b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b08:	3302      	adds	r3, #2
 8008b0a:	e7c7      	b.n	8008a9c <_printf_common+0x58>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4622      	mov	r2, r4
 8008b10:	4649      	mov	r1, r9
 8008b12:	4638      	mov	r0, r7
 8008b14:	47c0      	blx	r8
 8008b16:	3001      	adds	r0, #1
 8008b18:	d0e6      	beq.n	8008ae8 <_printf_common+0xa4>
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7d9      	b.n	8008ad2 <_printf_common+0x8e>
	...

08008b20 <_printf_i>:
 8008b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	7e0f      	ldrb	r7, [r1, #24]
 8008b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b28:	2f78      	cmp	r7, #120	; 0x78
 8008b2a:	4691      	mov	r9, r2
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	469a      	mov	sl, r3
 8008b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b36:	d807      	bhi.n	8008b48 <_printf_i+0x28>
 8008b38:	2f62      	cmp	r7, #98	; 0x62
 8008b3a:	d80a      	bhi.n	8008b52 <_printf_i+0x32>
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	f000 80d4 	beq.w	8008cea <_printf_i+0x1ca>
 8008b42:	2f58      	cmp	r7, #88	; 0x58
 8008b44:	f000 80c0 	beq.w	8008cc8 <_printf_i+0x1a8>
 8008b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b50:	e03a      	b.n	8008bc8 <_printf_i+0xa8>
 8008b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b56:	2b15      	cmp	r3, #21
 8008b58:	d8f6      	bhi.n	8008b48 <_printf_i+0x28>
 8008b5a:	a101      	add	r1, pc, #4	; (adr r1, 8008b60 <_printf_i+0x40>)
 8008b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bcd 	.word	0x08008bcd
 8008b68:	08008b49 	.word	0x08008b49
 8008b6c:	08008b49 	.word	0x08008b49
 8008b70:	08008b49 	.word	0x08008b49
 8008b74:	08008b49 	.word	0x08008b49
 8008b78:	08008bcd 	.word	0x08008bcd
 8008b7c:	08008b49 	.word	0x08008b49
 8008b80:	08008b49 	.word	0x08008b49
 8008b84:	08008b49 	.word	0x08008b49
 8008b88:	08008b49 	.word	0x08008b49
 8008b8c:	08008cd1 	.word	0x08008cd1
 8008b90:	08008bf9 	.word	0x08008bf9
 8008b94:	08008c8b 	.word	0x08008c8b
 8008b98:	08008b49 	.word	0x08008b49
 8008b9c:	08008b49 	.word	0x08008b49
 8008ba0:	08008cf3 	.word	0x08008cf3
 8008ba4:	08008b49 	.word	0x08008b49
 8008ba8:	08008bf9 	.word	0x08008bf9
 8008bac:	08008b49 	.word	0x08008b49
 8008bb0:	08008b49 	.word	0x08008b49
 8008bb4:	08008c93 	.word	0x08008c93
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	1d1a      	adds	r2, r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	602a      	str	r2, [r5, #0]
 8008bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e09f      	b.n	8008d0c <_printf_i+0x1ec>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	0607      	lsls	r7, r0, #24
 8008bd2:	f103 0104 	add.w	r1, r3, #4
 8008bd6:	6029      	str	r1, [r5, #0]
 8008bd8:	d501      	bpl.n	8008bde <_printf_i+0xbe>
 8008bda:	681e      	ldr	r6, [r3, #0]
 8008bdc:	e003      	b.n	8008be6 <_printf_i+0xc6>
 8008bde:	0646      	lsls	r6, r0, #25
 8008be0:	d5fb      	bpl.n	8008bda <_printf_i+0xba>
 8008be2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	da03      	bge.n	8008bf2 <_printf_i+0xd2>
 8008bea:	232d      	movs	r3, #45	; 0x2d
 8008bec:	4276      	negs	r6, r6
 8008bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf2:	485a      	ldr	r0, [pc, #360]	; (8008d5c <_printf_i+0x23c>)
 8008bf4:	230a      	movs	r3, #10
 8008bf6:	e012      	b.n	8008c1e <_printf_i+0xfe>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	6820      	ldr	r0, [r4, #0]
 8008bfc:	1d19      	adds	r1, r3, #4
 8008bfe:	6029      	str	r1, [r5, #0]
 8008c00:	0605      	lsls	r5, r0, #24
 8008c02:	d501      	bpl.n	8008c08 <_printf_i+0xe8>
 8008c04:	681e      	ldr	r6, [r3, #0]
 8008c06:	e002      	b.n	8008c0e <_printf_i+0xee>
 8008c08:	0641      	lsls	r1, r0, #25
 8008c0a:	d5fb      	bpl.n	8008c04 <_printf_i+0xe4>
 8008c0c:	881e      	ldrh	r6, [r3, #0]
 8008c0e:	4853      	ldr	r0, [pc, #332]	; (8008d5c <_printf_i+0x23c>)
 8008c10:	2f6f      	cmp	r7, #111	; 0x6f
 8008c12:	bf0c      	ite	eq
 8008c14:	2308      	moveq	r3, #8
 8008c16:	230a      	movne	r3, #10
 8008c18:	2100      	movs	r1, #0
 8008c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c1e:	6865      	ldr	r5, [r4, #4]
 8008c20:	60a5      	str	r5, [r4, #8]
 8008c22:	2d00      	cmp	r5, #0
 8008c24:	bfa2      	ittt	ge
 8008c26:	6821      	ldrge	r1, [r4, #0]
 8008c28:	f021 0104 	bicge.w	r1, r1, #4
 8008c2c:	6021      	strge	r1, [r4, #0]
 8008c2e:	b90e      	cbnz	r6, 8008c34 <_printf_i+0x114>
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	d04b      	beq.n	8008ccc <_printf_i+0x1ac>
 8008c34:	4615      	mov	r5, r2
 8008c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c3e:	5dc7      	ldrb	r7, [r0, r7]
 8008c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c44:	4637      	mov	r7, r6
 8008c46:	42bb      	cmp	r3, r7
 8008c48:	460e      	mov	r6, r1
 8008c4a:	d9f4      	bls.n	8008c36 <_printf_i+0x116>
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d10b      	bne.n	8008c68 <_printf_i+0x148>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07de      	lsls	r6, r3, #31
 8008c54:	d508      	bpl.n	8008c68 <_printf_i+0x148>
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	6861      	ldr	r1, [r4, #4]
 8008c5a:	4299      	cmp	r1, r3
 8008c5c:	bfde      	ittt	le
 8008c5e:	2330      	movle	r3, #48	; 0x30
 8008c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c68:	1b52      	subs	r2, r2, r5
 8008c6a:	6122      	str	r2, [r4, #16]
 8008c6c:	f8cd a000 	str.w	sl, [sp]
 8008c70:	464b      	mov	r3, r9
 8008c72:	aa03      	add	r2, sp, #12
 8008c74:	4621      	mov	r1, r4
 8008c76:	4640      	mov	r0, r8
 8008c78:	f7ff fee4 	bl	8008a44 <_printf_common>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d14a      	bne.n	8008d16 <_printf_i+0x1f6>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	b004      	add	sp, #16
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	f043 0320 	orr.w	r3, r3, #32
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	4833      	ldr	r0, [pc, #204]	; (8008d60 <_printf_i+0x240>)
 8008c94:	2778      	movs	r7, #120	; 0x78
 8008c96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	6829      	ldr	r1, [r5, #0]
 8008c9e:	061f      	lsls	r7, r3, #24
 8008ca0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ca4:	d402      	bmi.n	8008cac <_printf_i+0x18c>
 8008ca6:	065f      	lsls	r7, r3, #25
 8008ca8:	bf48      	it	mi
 8008caa:	b2b6      	uxthmi	r6, r6
 8008cac:	07df      	lsls	r7, r3, #31
 8008cae:	bf48      	it	mi
 8008cb0:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb4:	6029      	str	r1, [r5, #0]
 8008cb6:	bf48      	it	mi
 8008cb8:	6023      	strmi	r3, [r4, #0]
 8008cba:	b91e      	cbnz	r6, 8008cc4 <_printf_i+0x1a4>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	f023 0320 	bic.w	r3, r3, #32
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	2310      	movs	r3, #16
 8008cc6:	e7a7      	b.n	8008c18 <_printf_i+0xf8>
 8008cc8:	4824      	ldr	r0, [pc, #144]	; (8008d5c <_printf_i+0x23c>)
 8008cca:	e7e4      	b.n	8008c96 <_printf_i+0x176>
 8008ccc:	4615      	mov	r5, r2
 8008cce:	e7bd      	b.n	8008c4c <_printf_i+0x12c>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	6826      	ldr	r6, [r4, #0]
 8008cd4:	6961      	ldr	r1, [r4, #20]
 8008cd6:	1d18      	adds	r0, r3, #4
 8008cd8:	6028      	str	r0, [r5, #0]
 8008cda:	0635      	lsls	r5, r6, #24
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0x1c4>
 8008ce0:	6019      	str	r1, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0x1ca>
 8008ce4:	0670      	lsls	r0, r6, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0x1c0>
 8008ce8:	8019      	strh	r1, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	4615      	mov	r5, r2
 8008cf0:	e7bc      	b.n	8008c6c <_printf_i+0x14c>
 8008cf2:	682b      	ldr	r3, [r5, #0]
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	602a      	str	r2, [r5, #0]
 8008cf8:	681d      	ldr	r5, [r3, #0]
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7f7 fac6 	bl	8000290 <memchr>
 8008d04:	b108      	cbz	r0, 8008d0a <_printf_i+0x1ea>
 8008d06:	1b40      	subs	r0, r0, r5
 8008d08:	6060      	str	r0, [r4, #4]
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d14:	e7aa      	b.n	8008c6c <_printf_i+0x14c>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	462a      	mov	r2, r5
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d0ad      	beq.n	8008c80 <_printf_i+0x160>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	079b      	lsls	r3, r3, #30
 8008d28:	d413      	bmi.n	8008d52 <_printf_i+0x232>
 8008d2a:	68e0      	ldr	r0, [r4, #12]
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	bfb8      	it	lt
 8008d32:	4618      	movlt	r0, r3
 8008d34:	e7a6      	b.n	8008c84 <_printf_i+0x164>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d09d      	beq.n	8008c80 <_printf_i+0x160>
 8008d44:	3501      	adds	r5, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	9903      	ldr	r1, [sp, #12]
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dcf2      	bgt.n	8008d36 <_printf_i+0x216>
 8008d50:	e7eb      	b.n	8008d2a <_printf_i+0x20a>
 8008d52:	2500      	movs	r5, #0
 8008d54:	f104 0619 	add.w	r6, r4, #25
 8008d58:	e7f5      	b.n	8008d46 <_printf_i+0x226>
 8008d5a:	bf00      	nop
 8008d5c:	08008ff1 	.word	0x08008ff1
 8008d60:	08009002 	.word	0x08009002

08008d64 <memmove>:
 8008d64:	4288      	cmp	r0, r1
 8008d66:	b510      	push	{r4, lr}
 8008d68:	eb01 0402 	add.w	r4, r1, r2
 8008d6c:	d902      	bls.n	8008d74 <memmove+0x10>
 8008d6e:	4284      	cmp	r4, r0
 8008d70:	4623      	mov	r3, r4
 8008d72:	d807      	bhi.n	8008d84 <memmove+0x20>
 8008d74:	1e43      	subs	r3, r0, #1
 8008d76:	42a1      	cmp	r1, r4
 8008d78:	d008      	beq.n	8008d8c <memmove+0x28>
 8008d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d82:	e7f8      	b.n	8008d76 <memmove+0x12>
 8008d84:	4402      	add	r2, r0
 8008d86:	4601      	mov	r1, r0
 8008d88:	428a      	cmp	r2, r1
 8008d8a:	d100      	bne.n	8008d8e <memmove+0x2a>
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d96:	e7f7      	b.n	8008d88 <memmove+0x24>

08008d98 <_sbrk_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d06      	ldr	r5, [pc, #24]	; (8008db4 <_sbrk_r+0x1c>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	602b      	str	r3, [r5, #0]
 8008da4:	f7f8 fa7e 	bl	80012a4 <_sbrk>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_sbrk_r+0x1a>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_sbrk_r+0x1a>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	200146f0 	.word	0x200146f0

08008db8 <_realloc_r>:
 8008db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	4614      	mov	r4, r2
 8008dc0:	460e      	mov	r6, r1
 8008dc2:	b921      	cbnz	r1, 8008dce <_realloc_r+0x16>
 8008dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	4611      	mov	r1, r2
 8008dca:	f7ff bc57 	b.w	800867c <_malloc_r>
 8008dce:	b92a      	cbnz	r2, 8008ddc <_realloc_r+0x24>
 8008dd0:	f7ff fbe8 	bl	80085a4 <_free_r>
 8008dd4:	4625      	mov	r5, r4
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ddc:	f000 f81b 	bl	8008e16 <_malloc_usable_size_r>
 8008de0:	4284      	cmp	r4, r0
 8008de2:	4607      	mov	r7, r0
 8008de4:	d802      	bhi.n	8008dec <_realloc_r+0x34>
 8008de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dea:	d812      	bhi.n	8008e12 <_realloc_r+0x5a>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4640      	mov	r0, r8
 8008df0:	f7ff fc44 	bl	800867c <_malloc_r>
 8008df4:	4605      	mov	r5, r0
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0ed      	beq.n	8008dd6 <_realloc_r+0x1e>
 8008dfa:	42bc      	cmp	r4, r7
 8008dfc:	4622      	mov	r2, r4
 8008dfe:	4631      	mov	r1, r6
 8008e00:	bf28      	it	cs
 8008e02:	463a      	movcs	r2, r7
 8008e04:	f7ff fbc0 	bl	8008588 <memcpy>
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	f7ff fbca 	bl	80085a4 <_free_r>
 8008e10:	e7e1      	b.n	8008dd6 <_realloc_r+0x1e>
 8008e12:	4635      	mov	r5, r6
 8008e14:	e7df      	b.n	8008dd6 <_realloc_r+0x1e>

08008e16 <_malloc_usable_size_r>:
 8008e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1a:	1f18      	subs	r0, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfbc      	itt	lt
 8008e20:	580b      	ldrlt	r3, [r1, r0]
 8008e22:	18c0      	addlt	r0, r0, r3
 8008e24:	4770      	bx	lr
	...

08008e28 <_init>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	bf00      	nop
 8008e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e2e:	bc08      	pop	{r3}
 8008e30:	469e      	mov	lr, r3
 8008e32:	4770      	bx	lr

08008e34 <_fini>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	bf00      	nop
 8008e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e3a:	bc08      	pop	{r3}
 8008e3c:	469e      	mov	lr, r3
 8008e3e:	4770      	bx	lr
