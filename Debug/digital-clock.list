
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e9c  08006e9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea4  08006ea4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea8  08006ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013514  2000001c  08006ec8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013530  08006ec8  00023530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016733  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003846  00000000  00000000  000367c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0003a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001013  00000000  00000000  0003b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a813  00000000  00000000  0003c50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187d7  00000000  00000000  00056d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0ed1  00000000  00000000  0006f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000576c  00000000  00000000  001103c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00115b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d90 	.word	0x08006d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08006d90 	.word	0x08006d90

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f64 	.word	0x20012f64

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <lcdDelayUs+0x30>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000592:	bf00      	nop
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <lcdDelayUs+0x30>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f9      	bcc.n	8000594 <lcdDelayUs+0x14>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000058 	.word	0x20000058

080005b4 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	461a      	mov	r2, r3
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4821      	ldr	r0, [pc, #132]	; (8000650 <lcdSend+0x9c>)
 80005cc:	f000 ffc0 	bl	8001550 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	2101      	movs	r1, #1
 80005e0:	481c      	ldr	r0, [pc, #112]	; (8000654 <lcdSend+0xa0>)
 80005e2:	f000 ffb5 	bl	8001550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <lcdSend+0xa0>)
 80005f8:	f000 ffaa 	bl	8001550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	2101      	movs	r1, #1
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <lcdSend+0x9c>)
 800060e:	f000 ff9f 	bl	8001550 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2110      	movs	r1, #16
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <lcdSend+0xa4>)
 8000620:	f000 ff96 	bl	8001550 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <lcdSend+0xa4>)
 800062c:	f000 ff90 	bl	8001550 <HAL_GPIO_WritePin>
	lcdDelayUs(12);
 8000630:	200c      	movs	r0, #12
 8000632:	f7ff ffa5 	bl	8000580 <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <lcdSend+0xa4>)
 800063e:	f000 ff87 	bl	8001550 <HAL_GPIO_WritePin>
	lcdDelayUs(20);
 8000642:	2014      	movs	r0, #20
 8000644:	f7ff ff9c 	bl	8000580 <lcdDelayUs>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400
 8000654:	40020800 	.word	0x40020800
 8000658:	40020000 	.word	0x40020000

0800065c <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	091b      	lsrs	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffa0 	bl	80005b4 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff98 	bl	80005b4 <lcdSend>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <lcdSendData>:

static void lcdSendData(char data){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	091b      	lsrs	r3, r3, #4
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff88 	bl	80005b4 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff80 	bl	80005b4 <lcdSend>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <lcdMoveCursor+0x1c>
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d005      	beq.n	80006e2 <lcdMoveCursor+0x26>
 80006d6:	e009      	b.n	80006ec <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006de:	73fb      	strb	r3, [r7, #15]
		break;
 80006e0:	e004      	b.n	80006ec <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006e8:	73fb      	strb	r3, [r7, #15]
		break;
 80006ea:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffb4 	bl	800065c <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80006f4:	203c      	movs	r0, #60	; 0x3c
 80006f6:	f7ff ff43 	bl	8000580 <lcdDelayUs>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <lcdClear>:

void lcdClear(void){
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff ffa8 	bl	800065c <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 800070c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000710:	f7ff ff36 	bl	8000580 <lcdDelayUs>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcdSendString>:

void lcdSendString(char *str){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fda7 	bl	8000274 <strlen>
 8000726:	60b8      	str	r0, [r7, #8]
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	e009      	b.n	8000742 <lcdSendString+0x2a>
		lcdSendData(str[i]);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffa8 	bl	800068c <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	429a      	cmp	r2, r3
 8000748:	d902      	bls.n	8000750 <lcdSendString+0x38>
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2b63      	cmp	r3, #99	; 0x63
 800074e:	d9ee      	bls.n	800072e <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <lcdInit>:

void lcdInit(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800075c:	2032      	movs	r0, #50	; 0x32
 800075e:	f000 fc6d 	bl	800103c <HAL_Delay>
	lcdSendCommand(0x30);
 8000762:	2030      	movs	r0, #48	; 0x30
 8000764:	f7ff ff7a 	bl	800065c <lcdSendCommand>
	HAL_Delay(5);
 8000768:	2005      	movs	r0, #5
 800076a:	f000 fc67 	bl	800103c <HAL_Delay>
	lcdSendCommand(0x30);
 800076e:	2030      	movs	r0, #48	; 0x30
 8000770:	f7ff ff74 	bl	800065c <lcdSendCommand>
	HAL_Delay(1);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fc61 	bl	800103c <HAL_Delay>
	lcdSendCommand(0x30);
 800077a:	2030      	movs	r0, #48	; 0x30
 800077c:	f7ff ff6e 	bl	800065c <lcdSendCommand>
	HAL_Delay(10);
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fc5b 	bl	800103c <HAL_Delay>
	lcdSendCommand(0x20); //set to 4-bit mode
 8000786:	2020      	movs	r0, #32
 8000788:	f7ff ff68 	bl	800065c <lcdSendCommand>
	HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f000 fc55 	bl	800103c <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f7ff ff62 	bl	800065c <lcdSendCommand>
	HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fc4f 	bl	800103c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800079e:	2008      	movs	r0, #8
 80007a0:	f7ff ff5c 	bl	800065c <lcdSendCommand>
	HAL_Delay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fc49 	bl	800103c <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff56 	bl	800065c <lcdSendCommand>
	HAL_Delay(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fc43 	bl	800103c <HAL_Delay>
	HAL_Delay(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fc40 	bl	800103c <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 80007bc:	2006      	movs	r0, #6
 80007be:	f7ff ff4d 	bl	800065c <lcdSendCommand>
	HAL_Delay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f000 fc3a 	bl	800103c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 80007c8:	200c      	movs	r0, #12
 80007ca:	f7ff ff47 	bl	800065c <lcdSendCommand>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f000 fbed 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f879 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e2:	f000 f95b 	bl	8000a9c <MX_GPIO_Init>
  MX_RTC_Init();
 80007e6:	f000 f8e3 	bl	80009b0 <MX_RTC_Init>
  MX_TIM1_Init();
 80007ea:	f000 f907 	bl	80009fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 80007ee:	482e      	ldr	r0, [pc, #184]	; (80008a8 <main+0xd4>)
 80007f0:	f001 fdb6 	bl	8002360 <HAL_TIM_Base_Start>

  //SEGGER_SYSVIEW_Conf();
  //SEGGER_SYSVIEW_Start();

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	200a      	movs	r0, #10
 80007fa:	f002 fb45 	bl	8002e88 <xQueueGenericCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <main+0xd8>)
 8000802:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <main+0xd8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10a      	bne.n	8000822 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000810:	f383 8811 	msr	BASEPRI, r3
 8000814:	f3bf 8f6f 	isb	sy
 8000818:	f3bf 8f4f 	dsb	sy
 800081c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <main+0x4c>

  /*create timers */
  rtcUpdateTimerHandle = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, rtcUpdateTimerCallback);
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <main+0xdc>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800082e:	4821      	ldr	r0, [pc, #132]	; (80008b4 <main+0xe0>)
 8000830:	f004 f8fe 	bl	8004a30 <xTimerCreate>
 8000834:	4603      	mov	r3, r0
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <main+0xe4>)
 8000838:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 3, &startTimerTaskHandle);
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <main+0xe8>)
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	2303      	movs	r3, #3
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	22fa      	movs	r2, #250	; 0xfa
 8000846:	491e      	ldr	r1, [pc, #120]	; (80008c0 <main+0xec>)
 8000848:	481e      	ldr	r0, [pc, #120]	; (80008c4 <main+0xf0>)
 800084a:	f002 ffb1 	bl	80037b0 <xTaskCreate>
 800084e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d00a      	beq.n	800086c <main+0x98>
        __asm volatile
 8000856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085a:	f383 8811 	msr	BASEPRI, r3
 800085e:	f3bf 8f6f 	isb	sy
 8000862:	f3bf 8f4f 	dsb	sy
 8000866:	607b      	str	r3, [r7, #4]
    }
 8000868:	bf00      	nop
 800086a:	e7fe      	b.n	800086a <main+0x96>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 4, &printTaskHandle);
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <main+0xf4>)
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	2304      	movs	r3, #4
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2300      	movs	r3, #0
 8000876:	22fa      	movs	r2, #250	; 0xfa
 8000878:	4914      	ldr	r1, [pc, #80]	; (80008cc <main+0xf8>)
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <main+0xfc>)
 800087c:	f002 ff98 	bl	80037b0 <xTaskCreate>
 8000880:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d00a      	beq.n	800089e <main+0xca>
        __asm volatile
 8000888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800088c:	f383 8811 	msr	BASEPRI, r3
 8000890:	f3bf 8f6f 	isb	sy
 8000894:	f3bf 8f4f 	dsb	sy
 8000898:	603b      	str	r3, [r7, #0]
    }
 800089a:	bf00      	nop
 800089c:	e7fe      	b.n	800089c <main+0xc8>

//  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 1, &rtcUpdateTaskHandle);
//  configASSERT(status == pdPASS);

  lcdInit();
 800089e:	f7ff ff5b 	bl	8000758 <lcdInit>
//  lcdClear();
//  lcdSendString("hello world hello world hello world hello world hello world hello world hello world hello world ");
//  lcdClear();

  vTaskStartScheduler();
 80008a2:	f003 f9bb 	bl	8003c1c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0xd2>
 80008a8:	20000058 	.word	0x20000058
 80008ac:	200000a8 	.word	0x200000a8
 80008b0:	08000c99 	.word	0x08000c99
 80008b4:	08006da8 	.word	0x08006da8
 80008b8:	200000ac 	.word	0x200000ac
 80008bc:	200000a4 	.word	0x200000a4
 80008c0:	08006db4 	.word	0x08006db4
 80008c4:	08000c61 	.word	0x08000c61
 80008c8:	200000a0 	.word	0x200000a0
 80008cc:	08006dc8 	.word	0x08006dc8
 80008d0:	08000bf1 	.word	0x08000bf1

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fa1a 	bl	8006d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <SystemClock_Config+0xd4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xd8>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000934:	230a      	movs	r3, #10
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000948:	2300      	movs	r3, #0
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800094c:	2310      	movs	r3, #16
 800094e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000950:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000956:	2304      	movs	r3, #4
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095a:	2307      	movs	r3, #7
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fe0e 	bl	8001584 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096e:	f000 f9cf 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f870 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800099a:	f000 f9b9 	bl	8000d10 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	; 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_RTC_Init+0x44>)
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <MX_RTC_Init+0x48>)
 80009b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_RTC_Init+0x44>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_RTC_Init+0x44>)
 80009c2:	227f      	movs	r2, #127	; 0x7f
 80009c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_RTC_Init+0x44>)
 80009c8:	22ff      	movs	r2, #255	; 0xff
 80009ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_RTC_Init+0x44>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_RTC_Init+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_RTC_Init+0x44>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_RTC_Init+0x44>)
 80009e0:	f001 fb74 	bl	80020cc <HAL_RTC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009ea:	f000 f991 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000038 	.word	0x20000038
 80009f8:	40002800 	.word	0x40002800

080009fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <MX_TIM1_Init+0x9c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a20:	2254      	movs	r2, #84	; 0x54
 8000a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a46:	f001 fc3b 	bl	80022c0 <HAL_TIM_Base_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 f95e 	bl	8000d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480c      	ldr	r0, [pc, #48]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a62:	f001 fe41 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a6c:	f000 f950 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_TIM1_Init+0x98>)
 8000a7e:	f002 f83d 	bl	8002afc <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a88:	f000 f942 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000058 	.word	0x20000058
 8000a98:	40010000 	.word	0x40010000

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a49      	ldr	r2, [pc, #292]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b47      	ldr	r3, [pc, #284]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a42      	ldr	r2, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a34      	ldr	r2, [pc, #208]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b32      	ldr	r3, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x144>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f240 4103 	movw	r1, #1027	; 0x403
 8000b28:	482e      	ldr	r0, [pc, #184]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b2a:	f000 fd11 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|LD2_Pin|E_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f248 0130 	movw	r1, #32816	; 0x8030
 8000b34:	482c      	ldr	r0, [pc, #176]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b36:	f000 fd0b 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2181      	movs	r1, #129	; 0x81
 8000b3e:	482b      	ldr	r0, [pc, #172]	; (8000bec <MX_GPIO_Init+0x150>)
 8000b40:	f000 fd06 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4822      	ldr	r0, [pc, #136]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b5c:	f000 fb74 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|GPIO_PIN_10;
 8000b60:	f240 4303 	movw	r3, #1027	; 0x403
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x148>)
 8000b7a:	f000 fb65 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000b9a:	f000 fb55 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin LD2_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|LD2_Pin|E_Pin;
 8000b9e:	f248 0330 	movw	r3, #32816	; 0x8030
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0x14c>)
 8000bb8:	f000 fb46 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000bbc:	2381      	movs	r3, #129	; 0x81
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_GPIO_Init+0x150>)
 8000bd4:	f000 fb38 	bl	8001248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020400 	.word	0x40020400

08000bf0 <printTaskHandler>:

/* USER CODE BEGIN 4 */

	void printTaskHandler(void *parameters){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b087      	sub	sp, #28
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	6078      	str	r0, [r7, #4]
		uint32_t *str;
		while(1){
			xTimerStop(rtcUpdateTimerHandle, portMAX_DELAY);
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <printTaskHandler+0x64>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	2200      	movs	r2, #0
 8000c06:	2103      	movs	r1, #3
 8000c08:	f003 ff6c 	bl	8004ae4 <xTimerGenericCommand>

			xQueueReceive(printQueueHandle, &str, portMAX_DELAY); /* msg points to a char, pass reference, make it point to queue item */
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <printTaskHandler+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f107 010c 	add.w	r1, r7, #12
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fb57 	bl	80032cc <xQueueReceive>

			lcdClear();
 8000c1e:	f7ff fd70 	bl	8000702 <lcdClear>
			lcdMoveCursor(0, 0);
 8000c22:	2100      	movs	r1, #0
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fd49 	bl	80006bc <lcdMoveCursor>
			HAL_Delay(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f000 fa06 	bl	800103c <HAL_Delay>

			lcdSendString("hello world");
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <printTaskHandler+0x6c>)
 8000c32:	f7ff fd71 	bl	8000718 <lcdSendString>

			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <printTaskHandler+0x64>)
 8000c38:	681c      	ldr	r4, [r3, #0]
 8000c3a:	f003 f95f 	bl	8003efc <xTaskGetTickCount>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f003 ff4a 	bl	8004ae4 <xTimerGenericCommand>
			xTimerStop(rtcUpdateTimerHandle, portMAX_DELAY);
 8000c50:	e7d2      	b.n	8000bf8 <printTaskHandler+0x8>
 8000c52:	bf00      	nop
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	200000a8 	.word	0x200000a8
 8000c5c:	08006dd4 	.word	0x08006dd4

08000c60 <startTimerTaskHandler>:
		}
	}

	void startTimerTaskHandler(void *parameters){
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	6078      	str	r0, [r7, #4]
		while(1){
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <startTimerTaskHandler+0x30>)
 8000c6a:	681c      	ldr	r4, [r3, #0]
 8000c6c:	f003 f946 	bl	8003efc <xTaskGetTickCount>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f003 ff31 	bl	8004ae4 <xTimerGenericCommand>
			vTaskSuspend(startTimerTaskHandle);
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <startTimerTaskHandler+0x34>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 ff1a 	bl	8003ac0 <vTaskSuspend>
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000c8c:	e7ec      	b.n	8000c68 <startTimerTaskHandler+0x8>
 8000c8e:	bf00      	nop
 8000c90:	200000ac 	.word	0x200000ac
 8000c94:	200000a4 	.word	0x200000a4

08000c98 <rtcUpdateTimerCallback>:
		}
	}

	void rtcUpdateTimerCallback(TimerHandle_t xTimer){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
		static int counter = 0;
		static const char* msg1 = "Hello";
		static const char* msg2 = "World";

		while (1){
			if (counter % 2 == 0){
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <rtcUpdateTimerCallback+0x44>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d108      	bne.n	8000cbe <rtcUpdateTimerCallback+0x26>
				xQueueSend(printQueueHandle, (void*) &msg1, portMAX_DELAY);
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <rtcUpdateTimerCallback+0x48>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb6:	490b      	ldr	r1, [pc, #44]	; (8000ce4 <rtcUpdateTimerCallback+0x4c>)
 8000cb8:	f002 f958 	bl	8002f6c <xQueueGenericSend>
 8000cbc:	e007      	b.n	8000cce <rtcUpdateTimerCallback+0x36>
			}
			else {
				xQueueSend(printQueueHandle, (void*) &msg2, portMAX_DELAY);
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <rtcUpdateTimerCallback+0x48>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <rtcUpdateTimerCallback+0x50>)
 8000cca:	f002 f94f 	bl	8002f6c <xQueueGenericSend>
			}
			counter++;
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <rtcUpdateTimerCallback+0x44>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a01      	ldr	r2, [pc, #4]	; (8000cdc <rtcUpdateTimerCallback+0x44>)
 8000cd6:	6013      	str	r3, [r2, #0]
			if (counter % 2 == 0){
 8000cd8:	e7e2      	b.n	8000ca0 <rtcUpdateTimerCallback+0x8>
 8000cda:	bf00      	nop
 8000cdc:	200000b0 	.word	0x200000b0
 8000ce0:	200000a8 	.word	0x200000a8
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d101      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfe:	f000 f97d 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40000c00 	.word	0x40000c00

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d5a:	f004 fa95 	bl	8005288 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <HAL_RTC_MspInit+0x50>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d111      	bne.n	8000db2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d96:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 f8a7 	bl	8001ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000da8:	f7ff ffb2 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_RTC_MspInit+0x54>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40002800 	.word	0x40002800
 8000dc0:	42470e3c 	.word	0x42470e3c

08000dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10d      	bne.n	8000df2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_TIM_Base_MspInit+0x40>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40023800 	.word	0x40023800

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	; (8000eec <HAL_InitTick+0xe4>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <HAL_InitTick+0xe4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 f824 	bl	8001e8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f001 f809 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	; 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f001 f805 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <HAL_InitTick+0xe8>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_InitTick+0xf0>)
 8000e72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000e94:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <HAL_InitTick+0xec>)
 8000e96:	f001 fa13 	bl	80022c0 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ea8:	4812      	ldr	r0, [pc, #72]	; (8000ef4 <HAL_InitTick+0xec>)
 8000eaa:	f001 fab3 	bl	8002414 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f000 f9b5 	bl	800122c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2032      	movs	r0, #50	; 0x32
 8000ece:	f000 f991 	bl	80011f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0xf4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200000b4 	.word	0x200000b4
 8000ef8:	40000c00 	.word	0x40000c00
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM5_IRQHandler+0x10>)
 8000f32:	f001 fad1 	bl	80024d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000b4 	.word	0x200000b4

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd7 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f005 fecb 	bl	8006d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fc1d 	bl	80007d4 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fa8:	08006eac 	.word	0x08006eac
  ldr r2, =_sbss
 8000fac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fb0:	20013530 	.word	0x20013530

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8fc 	bl	80011de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ff0e 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe96 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010
 8001020:	200000fc 	.word	0x200000fc

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200000fc 	.word	0x200000fc

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff4c 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001206:	f7ff ff61 	bl	80010cc <__NVIC_GetPriorityGrouping>
 800120a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff ffb1 	bl	8001178 <NVIC_EncodePriority>
 8001216:	4602      	mov	r2, r0
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff80 	bl	8001124 <__NVIC_SetPriority>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff54 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e159      	b.n	8001518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8148 	bne.w	8001512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a2 	beq.w	8001512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x202>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1fe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1fa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2fc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1f6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x300>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1f2>
 8001436:	2304      	movs	r3, #4
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143a:	2307      	movs	r3, #7
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x204>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_GPIO_Init+0x304>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x304>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x304>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x304>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_GPIO_Init+0x304>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f aea2 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e267      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d075      	beq.n	800168e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b82      	ldr	r3, [pc, #520]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d05b      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d157      	bne.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e242      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x74>
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a68      	ldr	r2, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcf2 	bl	8001024 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcee 	bl	8001024 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e207      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fcde 	bl	8001024 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fcda 	bl	8001024 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1f3      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c7      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4937      	ldr	r1, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fc93 	bl	8001024 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fc8f 	bl	8001024 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a8      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4925      	ldr	r1, [pc, #148]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc72 	bl	8001024 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fc6e 	bl	8001024 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e187      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d036      	beq.n	80017dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d016      	beq.n	80017a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fc52 	bl	8001024 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc4e 	bl	8001024 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e167      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x200>
 80017a2:	e01b      	b.n	80017dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fc3b 	bl	8001024 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e00e      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc37 	bl	8001024 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d907      	bls.n	80017d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e150      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ea      	bne.n	80017b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8097 	beq.w	8001918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a73      	ldr	r2, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fbf7 	bl	8001024 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff fbf3 	bl	8001024 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e10c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x2ea>
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x30c>
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5e      	ldr	r2, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fbb8 	bl	8001024 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fbb4 	bl	8001024 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0cb      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ee      	beq.n	80018b8 <HAL_RCC_OscConfig+0x334>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fba2 	bl	8001024 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb9e 	bl	8001024 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0b5      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ee      	bne.n	80018e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a1 	beq.w	8001a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d05c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d141      	bne.n	80019ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb72 	bl	8001024 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb6e 	bl	8001024 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e087      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	491b      	ldr	r1, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb47 	bl	8001024 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fb43 	bl	8001024 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e05c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x416>
 80019b8:	e054      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb30 	bl	8001024 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fb2c 	bl	8001024 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e045      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e038      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d028      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff fa5e 	bl	8001024 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff fa5a 	bl	8001024 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f8f4 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08006e78 	.word	0x08006e78
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	2000000c 	.word	0x2000000c

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b094      	sub	sp, #80	; 0x50
 8001c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c50:	2300      	movs	r3, #0
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d00d      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x40>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	f200 80e1 	bhi.w	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c72:	e0db      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c78:	e0db      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7e:	e0d8      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	462b      	mov	r3, r5
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0159      	lsls	r1, r3, #5
 8001cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc4:	0150      	lsls	r0, r2, #5
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4621      	mov	r1, r4
 8001ccc:	1a51      	subs	r1, r2, r1
 8001cce:	6139      	str	r1, [r7, #16]
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	018b      	lsls	r3, r1, #6
 8001ce8:	4651      	mov	r1, sl
 8001cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cee:	4651      	mov	r1, sl
 8001cf0:	018a      	lsls	r2, r1, #6
 8001cf2:	4651      	mov	r1, sl
 8001cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	eb18 0303 	adds.w	r3, r8, r3
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	462b      	mov	r3, r5
 8001d20:	eb49 0303 	adc.w	r3, r9, r3
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d32:	4629      	mov	r1, r5
 8001d34:	024b      	lsls	r3, r1, #9
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	024a      	lsls	r2, r1, #9
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d46:	2200      	movs	r2, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d50:	f7fe fa98 	bl	8000284 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	e058      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2200      	movs	r2, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	4611      	mov	r1, r2
 8001d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0159      	lsls	r1, r3, #5
 8001d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d8a:	0150      	lsls	r0, r2, #5
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4641      	mov	r1, r8
 8001d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d96:	4649      	mov	r1, r9
 8001d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db0:	ebb2 040a 	subs.w	r4, r2, sl
 8001db4:	eb63 050b 	sbc.w	r5, r3, fp
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	00eb      	lsls	r3, r5, #3
 8001dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc6:	00e2      	lsls	r2, r4, #3
 8001dc8:	4614      	mov	r4, r2
 8001dca:	461d      	mov	r5, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	18e3      	adds	r3, r4, r3
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	eb45 0303 	adc.w	r3, r5, r3
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de6:	4629      	mov	r1, r5
 8001de8:	028b      	lsls	r3, r1, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df0:	4621      	mov	r1, r4
 8001df2:	028a      	lsls	r2, r1, #10
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	61fa      	str	r2, [r7, #28]
 8001e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e04:	f7fe fa3e 	bl	8000284 <__aeabi_uldivmod>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3750      	adds	r7, #80	; 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08006e88 	.word	0x08006e88

08001e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_GetClockConfig+0x60>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d035      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f18:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f1e:	f7ff f881 	bl	8001024 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f26:	f7ff f87d 	bl	8001024 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ba      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f38:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	019a      	lsls	r2, r3, #6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	071b      	lsls	r3, r3, #28
 8001f50:	495a      	ldr	r1, [pc, #360]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f5e:	f7ff f861 	bl	8001024 <HAL_GetTick>
 8001f62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f66:	f7ff f85d 	bl	8001024 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e09a      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8083 	beq.w	8002098 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a48      	ldr	r2, [pc, #288]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a43      	ldr	r2, [pc, #268]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fba:	f7ff f833 	bl	8001024 <HAL_GetTick>
 8001fbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff f82f 	bl	8001024 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e06c      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02f      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d028      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200e:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d114      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fffd 	bl	8001024 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fff9 	bl	8001024 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e034      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800205c:	d10d      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800206e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002072:	4912      	ldr	r1, [pc, #72]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
 8002078:	e005      	b.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002080:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002084:	6093      	str	r3, [r2, #8]
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	490a      	ldr	r1, [pc, #40]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7c1a      	ldrb	r2, [r3, #16]
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020aa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	42470068 	.word	0x42470068
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42470e40 	.word	0x42470e40
 80020c8:	424711e0 	.word	0x424711e0

080020cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e066      	b.n	80021b0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7f5b      	ldrb	r3, [r3, #29]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fe3a 	bl	8000d6c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	22ca      	movs	r2, #202	; 0xca
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2253      	movs	r2, #83	; 0x53
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f87a 	bl	8002208 <RTC_EnterInitMode>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12c      	bne.n	8002178 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800212c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002130:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68d2      	ldr	r2, [r2, #12]
 8002158:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6919      	ldr	r1, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f881 	bl	8002276 <RTC_ExitInitMode>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d113      	bne.n	80021a6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7fe ff26 	bl	8001024 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021da:	e009      	b.n	80021f0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021dc:	f7fe ff22 	bl	8001024 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ea:	d901      	bls.n	80021f0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e007      	b.n	8002200 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d122      	bne.n	800226c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002234:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002236:	f7fe fef5 	bl	8001024 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800223c:	e00c      	b.n	8002258 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800223e:	f7fe fef1 	bl	8001024 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800224c:	d904      	bls.n	8002258 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <RTC_EnterInitMode+0x64>
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d1e8      	bne.n	800223e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff89 	bl	80021b8 <HAL_RTC_WaitForSynchro>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2204      	movs	r2, #4
 80022b0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e041      	b.n	8002356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fd6c 	bl	8000dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f000 fae2 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d001      	beq.n	8002378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e03c      	b.n	80023f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1e      	ldr	r2, [pc, #120]	; (8002400 <HAL_TIM_Base_Start+0xa0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d018      	beq.n	80023bc <HAL_TIM_Base_Start+0x5c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d013      	beq.n	80023bc <HAL_TIM_Base_Start+0x5c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_TIM_Base_Start+0xa4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00e      	beq.n	80023bc <HAL_TIM_Base_Start+0x5c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a19      	ldr	r2, [pc, #100]	; (8002408 <HAL_TIM_Base_Start+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_TIM_Base_Start+0x5c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <HAL_TIM_Base_Start+0xac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_TIM_Base_Start+0x5c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a16      	ldr	r2, [pc, #88]	; (8002410 <HAL_TIM_Base_Start+0xb0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d111      	bne.n	80023e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d010      	beq.n	80023f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023de:	e007      	b.n	80023f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40014000 	.word	0x40014000

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e044      	b.n	80024b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d018      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d013      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_TIM_Base_Start_IT+0x6c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d111      	bne.n	80024a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2b06      	cmp	r3, #6
 8002490:	d010      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a2:	e007      	b.n	80024b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800
 80024d0:	40000c00 	.word	0x40000c00
 80024d4:	40014000 	.word	0x40014000

080024d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0202 	mvn.w	r2, #2
 8002504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9b5 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9a7 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9b8 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0204 	mvn.w	r2, #4
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f98b 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f97d 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f98e 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0208 	mvn.w	r2, #8
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f961 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f953 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f964 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0210 	mvn.w	r2, #16
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2208      	movs	r2, #8
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f937 	bl	800288a <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f929 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f93a 	bl	800289e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0201 	mvn.w	r2, #1
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fb48 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fab2 	bl	8002bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8ff 	bl	80028b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa7c 	bl	8002bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_ConfigClockSource+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e0b4      	b.n	800286e <HAL_TIM_ConfigClockSource+0x186>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800272a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d03e      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xd4>
 800273e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002742:	f200 8087 	bhi.w	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	f000 8086 	beq.w	800285a <HAL_TIM_ConfigClockSource+0x172>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d87f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d01a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xa6>
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d87b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d050      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x11a>
 8002760:	2b60      	cmp	r3, #96	; 0x60
 8002762:	d877      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b50      	cmp	r3, #80	; 0x50
 8002766:	d03c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002768:	2b50      	cmp	r3, #80	; 0x50
 800276a:	d873      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d058      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x13a>
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d86f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b30      	cmp	r3, #48	; 0x30
 8002776:	d064      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d86b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d060      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d867      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d05a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	e062      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f000 f98d 	bl	8002abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e04f      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f000 f976 	bl	8002abc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8ea 	bl	80029c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2150      	movs	r1, #80	; 0x50
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f943 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002800:	e02c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f909 	bl	8002a26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2160      	movs	r1, #96	; 0x60
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f933 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002820:	e01c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8ca 	bl	80029c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	; 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f923 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002840:	e00c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 f91a 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002852:	e003      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e000      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a34      	ldr	r2, [pc, #208]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00f      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <TIM_Base_SetConfig+0xe8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <TIM_Base_SetConfig+0xec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x38>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a2f      	ldr	r2, [pc, #188]	; (80029b8 <TIM_Base_SetConfig+0xf0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d108      	bne.n	8002912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a25      	ldr	r2, [pc, #148]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01b      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d017      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <TIM_Base_SetConfig+0xe8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a21      	ldr	r2, [pc, #132]	; (80029b4 <TIM_Base_SetConfig+0xec>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00f      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <TIM_Base_SetConfig+0xf0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <TIM_Base_SetConfig+0xf4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <TIM_Base_SetConfig+0xf8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x8a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <TIM_Base_SetConfig+0xfc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <TIM_Base_SetConfig+0xe4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0201 	bic.w	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 030a 	bic.w	r3, r3, #10
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	621a      	str	r2, [r3, #32]
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0210 	bic.w	r2, r3, #16
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f043 0307 	orr.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	021a      	lsls	r2, r3, #8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	609a      	str	r2, [r3, #8]
}
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e050      	b.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d018      	beq.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b60:	d013      	beq.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a16      	ldr	r2, [pc, #88]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10c      	bne.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40014000 	.word	0x40014000

08002bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 0208 	add.w	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f103 0208 	add.w	r2, r3, #8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f103 0208 	add.w	r2, r3, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d103      	bne.n	8002cc2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e00c      	b.n	8002cdc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e002      	b.n	8002cd0 <vListInsert+0x2e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d2f6      	bcs.n	8002cca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6852      	ldr	r2, [r2, #4]
 8002d34:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d103      	bne.n	8002d48 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	1e5a      	subs	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d72:	2301      	movs	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xQueueGenericReset+0x2e>
        __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	60fb      	str	r3, [r7, #12]
    }
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05d      	beq.n	8002e58 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d059      	beq.n	8002e58 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	2100      	movs	r1, #0
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d000      	beq.n	8002db8 <xQueueGenericReset+0x50>
 8002db6:	2101      	movs	r1, #1
 8002db8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d14c      	bne.n	8002e58 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002dbe:	f002 fae1 	bl	8005384 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	6939      	ldr	r1, [r7, #16]
 8002dcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	441a      	add	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6939      	ldr	r1, [r7, #16]
 8002df2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	441a      	add	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	22ff      	movs	r2, #255	; 0xff
 8002e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	22ff      	movs	r2, #255	; 0xff
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d114      	bne.n	8002e3e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01a      	beq.n	8002e52 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	3310      	adds	r3, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 fa77 	bl	8004314 <xTaskRemoveFromEventList>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d012      	beq.n	8002e52 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <xQueueGenericReset+0x11c>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	e009      	b.n	8002e52 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3310      	adds	r3, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fedc 	bl	8002c00 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fed7 	bl	8002c00 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e52:	f002 fac7 	bl	80053e4 <vPortExitCritical>
 8002e56:	e001      	b.n	8002e5c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <xQueueGenericReset+0x110>
        __asm volatile
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	60bb      	str	r3, [r7, #8]
    }
 8002e74:	bf00      	nop
 8002e76:	e7fe      	b.n	8002e76 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e78:	697b      	ldr	r3, [r7, #20]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02e      	beq.n	8002efe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d000      	beq.n	8002eb0 <xQueueGenericCreate+0x28>
 8002eae:	2101      	movs	r1, #1
 8002eb0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d123      	bne.n	8002efe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ebe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ec2:	d81c      	bhi.n	8002efe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	3350      	adds	r3, #80	; 0x50
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 fb7a 	bl	80055cc <pvPortMalloc>
 8002ed8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3350      	adds	r3, #80	; 0x50
 8002ee8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002eea:	79fa      	ldrb	r2, [r7, #7]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f814 	bl	8002f24 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002efc:	e00d      	b.n	8002f1a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <xQueueGenericCreate+0x92>
        __asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	613b      	str	r3, [r7, #16]
    }
 8002f16:	bf00      	nop
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
    }
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e002      	b.n	8002f46 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f52:	2101      	movs	r1, #1
 8002f54:	69b8      	ldr	r0, [r7, #24]
 8002f56:	f7ff ff07 	bl	8002d68 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueGenericSend+0x32>
        __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <xQueueGenericSend+0x40>
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <xQueueGenericSend+0x44>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <xQueueGenericSend+0x46>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <xQueueGenericSend+0x60>
        __asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d103      	bne.n	8002fda <xQueueGenericSend+0x6e>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <xQueueGenericSend+0x72>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <xQueueGenericSend+0x74>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <xQueueGenericSend+0x8e>
        __asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	f383 8811 	msr	BASEPRI, r3
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	f3bf 8f4f 	dsb	sy
 8002ff4:	623b      	str	r3, [r7, #32]
    }
 8002ff6:	bf00      	nop
 8002ff8:	e7fe      	b.n	8002ff8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffa:	f001 fb9d 	bl	8004738 <xTaskGetSchedulerState>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <xQueueGenericSend+0x9e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <xQueueGenericSend+0xa2>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSend+0xa4>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <xQueueGenericSend+0xbe>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	61fb      	str	r3, [r7, #28]
    }
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800302a:	f002 f9ab 	bl	8005384 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <xQueueGenericSend+0xd4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d129      	bne.n	8003094 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003046:	f000 fa21 	bl	800348c <prvCopyDataToQueue>
 800304a:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	d010      	beq.n	8003076 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	3324      	adds	r3, #36	; 0x24
 8003058:	4618      	mov	r0, r3
 800305a:	f001 f95b 	bl	8004314 <xTaskRemoveFromEventList>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <xQueueGenericSend+0x1f8>)
 8003066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	e00a      	b.n	800308c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <xQueueGenericSend+0x1f8>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800308c:	f002 f9aa 	bl	80053e4 <vPortExitCritical>
                return pdPASS;
 8003090:	2301      	movs	r3, #1
 8003092:	e063      	b.n	800315c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800309a:	f002 f9a3 	bl	80053e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	e05c      	b.n	800315c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 fa09 	bl	80044c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030b2:	2301      	movs	r3, #1
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030b6:	f002 f995 	bl	80053e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030ba:	f000 fe11 	bl	8003ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030be:	f002 f961 	bl	8005384 <vPortEnterCritical>
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d103      	bne.n	80030d8 <xQueueGenericSend+0x16c>
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030de:	b25b      	sxtb	r3, r3
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d103      	bne.n	80030ee <xQueueGenericSend+0x182>
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030ee:	f002 f979 	bl	80053e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f2:	1d3a      	adds	r2, r7, #4
 80030f4:	f107 0314 	add.w	r3, r7, #20
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f9f8 	bl	80044f0 <xTaskCheckForTimeOut>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d124      	bne.n	8003150 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003108:	f000 fab8 	bl	800367c <prvIsQueueFull>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	3310      	adds	r3, #16
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f88e 	bl	800423c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003122:	f000 fa43 	bl	80035ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003126:	f000 fde9 	bl	8003cfc <xTaskResumeAll>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f af7c 	bne.w	800302a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <xQueueGenericSend+0x1f8>)
 8003134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	e772      	b.n	800302a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003146:	f000 fa31 	bl	80035ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800314a:	f000 fdd7 	bl	8003cfc <xTaskResumeAll>
 800314e:	e76c      	b.n	800302a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003152:	f000 fa2b 	bl	80035ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003156:	f000 fdd1 	bl	8003cfc <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800315a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800315c:	4618      	mov	r0, r3
 800315e:	3738      	adds	r7, #56	; 0x38
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b092      	sub	sp, #72	; 0x48
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <xQueueGenericSendFromISR+0x3c>
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueGenericSendFromISR+0x40>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueGenericSendFromISR+0x42>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <xQueueGenericSendFromISR+0x6a>
 80031ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <xQueueGenericSendFromISR+0x6e>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <xQueueGenericSendFromISR+0x70>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031f2:	f002 f9ab 	bl	800554c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80031f6:	f3ef 8211 	mrs	r2, BASEPRI
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	623a      	str	r2, [r7, #32]
 800320c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800320e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003210:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <xQueueGenericSendFromISR+0xbc>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d146      	bne.n	80032b2 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800322a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800322e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800323a:	f000 f927 	bl	800348c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800323e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d112      	bne.n	800326e <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003252:	3324      	adds	r3, #36	; 0x24
 8003254:	4618      	mov	r0, r3
 8003256:	f001 f85d 	bl	8004314 <xTaskRemoveFromEventList>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d025      	beq.n	80032ac <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d022      	beq.n	80032ac <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e01e      	b.n	80032ac <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800326e:	f000 fe55 	bl	8003f1c <uxTaskGetNumberOfTasks>
 8003272:	6338      	str	r0, [r7, #48]	; 0x30
 8003274:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327a:	429a      	cmp	r2, r3
 800327c:	d916      	bls.n	80032ac <xQueueGenericSendFromISR+0x144>
 800327e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003282:	2b7f      	cmp	r3, #127	; 0x7f
 8003284:	d10a      	bne.n	800329c <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	61bb      	str	r3, [r7, #24]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xQueueGenericSendFromISR+0x132>
 800329c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80032a0:	3301      	adds	r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	b25a      	sxtb	r2, r3
 80032a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80032ac:	2301      	movs	r3, #1
 80032ae:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80032b0:	e001      	b.n	80032b6 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	647b      	str	r3, [r7, #68]	; 0x44
 80032b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b8:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032c0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3748      	adds	r7, #72	; 0x48
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	; 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80032d8:	2300      	movs	r3, #0
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <xQueueReceive+0x30>
        __asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	623b      	str	r3, [r7, #32]
    }
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <xQueueReceive+0x3e>
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <xQueueReceive+0x42>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <xQueueReceive+0x44>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <xQueueReceive+0x5e>
        __asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	61fb      	str	r3, [r7, #28]
    }
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800332a:	f001 fa05 	bl	8004738 <xTaskGetSchedulerState>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <xQueueReceive+0x6e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <xQueueReceive+0x72>
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <xQueueReceive+0x74>
 800333e:	2300      	movs	r3, #0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <xQueueReceive+0x8e>
        __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	61bb      	str	r3, [r7, #24]
    }
 8003356:	bf00      	nop
 8003358:	e7fe      	b.n	8003358 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800335a:	f002 f813 	bl	8005384 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01f      	beq.n	80033aa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800336e:	f000 f8f7 	bl	8003560 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00f      	beq.n	80033a2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	3310      	adds	r3, #16
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ffc4 	bl	8004314 <xTaskRemoveFromEventList>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <xQueueReceive+0x1bc>)
 8003394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033a2:	f002 f81f 	bl	80053e4 <vPortExitCritical>
                return pdPASS;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e069      	b.n	800347e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80033b0:	f002 f818 	bl	80053e4 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e062      	b.n	800347e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80033be:	f107 0310 	add.w	r3, r7, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 f87e 	bl	80044c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80033cc:	f002 f80a 	bl	80053e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80033d0:	f000 fc86 	bl	8003ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033d4:	f001 ffd6 	bl	8005384 <vPortEnterCritical>
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033de:	b25b      	sxtb	r3, r3
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d103      	bne.n	80033ee <xQueueReceive+0x122>
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d103      	bne.n	8003404 <xQueueReceive+0x138>
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003404:	f001 ffee 	bl	80053e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003408:	1d3a      	adds	r2, r7, #4
 800340a:	f107 0310 	add.w	r3, r7, #16
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f86d 	bl	80044f0 <xTaskCheckForTimeOut>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d123      	bne.n	8003464 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341e:	f000 f917 	bl	8003650 <prvIsQueueEmpty>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d017      	beq.n	8003458 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	3324      	adds	r3, #36	; 0x24
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 ff03 	bl	800423c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003438:	f000 f8b8 	bl	80035ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800343c:	f000 fc5e 	bl	8003cfc <xTaskResumeAll>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d189      	bne.n	800335a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <xQueueReceive+0x1bc>)
 8003448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	e780      	b.n	800335a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800345a:	f000 f8a7 	bl	80035ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800345e:	f000 fc4d 	bl	8003cfc <xTaskResumeAll>
 8003462:	e77a      	b.n	800335a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003466:	f000 f8a1 	bl	80035ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800346a:	f000 fc47 	bl	8003cfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003470:	f000 f8ee 	bl	8003650 <prvIsQueueEmpty>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	f43f af6f 	beq.w	800335a <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800347c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800347e:	4618      	mov	r0, r3
 8003480:	3730      	adds	r7, #48	; 0x30
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14d      	bne.n	800354e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f95c 	bl	8004774 <xTaskPriorityDisinherit>
 80034bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	e043      	b.n	800354e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d119      	bne.n	8003500 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6858      	ldr	r0, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	461a      	mov	r2, r3
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	f003 fc4c 	bl	8006d74 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d32b      	bcc.n	800354e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e026      	b.n	800354e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	68d8      	ldr	r0, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	461a      	mov	r2, r3
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	f003 fc32 	bl	8006d74 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	425b      	negs	r3, r3
 800351a:	441a      	add	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d207      	bcs.n	800353c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	425b      	negs	r3, r3
 8003536:	441a      	add	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d105      	bne.n	800354e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	3b01      	subs	r3, #1
 800354c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003556:	697b      	ldr	r3, [r7, #20]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d018      	beq.n	80035a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d303      	bcc.n	8003594 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68d9      	ldr	r1, [r3, #12]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	461a      	mov	r2, r3
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	f003 fbe8 	bl	8006d74 <memcpy>
    }
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80035b4:	f001 fee6 	bl	8005384 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c0:	e011      	b.n	80035e6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d012      	beq.n	80035f0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3324      	adds	r3, #36	; 0x24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fea0 	bl	8004314 <xTaskRemoveFromEventList>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80035da:	f000 ffef 	bl	80045bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	dce9      	bgt.n	80035c2 <prvUnlockQueue+0x16>
 80035ee:	e000      	b.n	80035f2 <prvUnlockQueue+0x46>
                    break;
 80035f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80035fa:	f001 fef3 	bl	80053e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80035fe:	f001 fec1 	bl	8005384 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003608:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800360a:	e011      	b.n	8003630 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3310      	adds	r3, #16
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fe7b 	bl	8004314 <xTaskRemoveFromEventList>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003624:	f000 ffca 	bl	80045bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	3b01      	subs	r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003634:	2b00      	cmp	r3, #0
 8003636:	dce9      	bgt.n	800360c <prvUnlockQueue+0x60>
 8003638:	e000      	b.n	800363c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800363a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	22ff      	movs	r2, #255	; 0xff
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003644:	f001 fece 	bl	80053e4 <vPortExitCritical>
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003658:	f001 fe94 	bl	8005384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003664:	2301      	movs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e001      	b.n	800366e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800366e:	f001 feb9 	bl	80053e4 <vPortExitCritical>

    return xReturn;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003684:	f001 fe7e 	bl	8005384 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	429a      	cmp	r2, r3
 8003692:	d102      	bne.n	800369a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e001      	b.n	800369e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800369e:	f001 fea1 	bl	80053e4 <vPortExitCritical>

    return xReturn;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
    }
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d024      	beq.n	8003726 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e01e      	b.n	8003720 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <vQueueAddToRegistry+0x98>)
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d105      	bne.n	80036fe <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <vQueueAddToRegistry+0x98>)
 80036f8:	4413      	add	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
                    break;
 80036fc:	e013      	b.n	8003726 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <vQueueAddToRegistry+0x6e>
 8003704:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <vQueueAddToRegistry+0x98>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <vQueueAddToRegistry+0x98>)
 8003716:	4413      	add	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	3301      	adds	r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b07      	cmp	r3, #7
 8003724:	d9dd      	bls.n	80036e2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20000100 	.word	0x20000100

08003748 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003758:	f001 fe14 	bl	8005384 <vPortEnterCritical>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003762:	b25b      	sxtb	r3, r3
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d103      	bne.n	8003772 <vQueueWaitForMessageRestricted+0x2a>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003778:	b25b      	sxtb	r3, r3
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d103      	bne.n	8003788 <vQueueWaitForMessageRestricted+0x40>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003788:	f001 fe2c 	bl	80053e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fd71 	bl	8004284 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff02 	bl	80035ac <prvUnlockQueue>
    }
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af04      	add	r7, sp, #16
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 ff01 	bl	80055cc <pvPortMalloc>
 80037ca:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d013      	beq.n	80037fa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037d2:	2058      	movs	r0, #88	; 0x58
 80037d4:	f001 fefa 	bl	80055cc <pvPortMalloc>
 80037d8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80037e0:	2258      	movs	r2, #88	; 0x58
 80037e2:	2100      	movs	r1, #0
 80037e4:	69f8      	ldr	r0, [r7, #28]
 80037e6:	f003 fa99 	bl	8006d1c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
 80037f0:	e005      	b.n	80037fe <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80037f2:	6978      	ldr	r0, [r7, #20]
 80037f4:	f001 ffa4 	bl	8005740 <vPortFree>
 80037f8:	e001      	b.n	80037fe <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	2300      	movs	r3, #0
 8003808:	9303      	str	r3, [sp, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f80e 	bl	800383c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003820:	69f8      	ldr	r0, [r7, #28]
 8003822:	f000 f899 	bl	8003958 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003826:	2301      	movs	r3, #1
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e002      	b.n	8003832 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003832:	69bb      	ldr	r3, [r7, #24]
    }
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	461a      	mov	r2, r3
 8003854:	21a5      	movs	r1, #165	; 0xa5
 8003856:	f003 fa61 	bl	8006d1c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003864:	3b01      	subs	r3, #1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <prvInitialiseNewTask+0x58>
        __asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	617b      	str	r3, [r7, #20]
    }
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d01e      	beq.n	80038d8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e012      	b.n	80038c6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	7819      	ldrb	r1, [r3, #0]
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	3334      	adds	r3, #52	; 0x34
 80038b0:	460a      	mov	r2, r1
 80038b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3301      	adds	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d9e9      	bls.n	80038a0 <prvInitialiseNewTask+0x64>
 80038cc:	e000      	b.n	80038d0 <prvInitialiseNewTask+0x94>
            {
                break;
 80038ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d90a      	bls.n	80038f4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	613b      	str	r3, [r7, #16]
    }
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	2b05      	cmp	r3, #5
 80038f8:	d901      	bls.n	80038fe <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038fa:	2305      	movs	r3, #5
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003908:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f996 	bl	8002c40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003916:	3318      	adds	r3, #24
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff f991 	bl	8002c40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003922:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	f1c3 0206 	rsb	r2, r3, #6
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	69b8      	ldr	r0, [r7, #24]
 800393a:	f001 fb73 	bl	8005024 <pxPortInitialiseStack>
 800393e:	4602      	mov	r2, r0
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003950:	bf00      	nop
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003958:	b5b0      	push	{r4, r5, r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003960:	f001 fd10 	bl	8005384 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003964:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <prvAddNewTaskToReadyList+0x14c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	4a4e      	ldr	r2, [pc, #312]	; (8003aa4 <prvAddNewTaskToReadyList+0x14c>)
 800396c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800396e:	4b4e      	ldr	r3, [pc, #312]	; (8003aa8 <prvAddNewTaskToReadyList+0x150>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003976:	4a4c      	ldr	r2, [pc, #304]	; (8003aa8 <prvAddNewTaskToReadyList+0x150>)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800397c:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <prvAddNewTaskToReadyList+0x14c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d110      	bne.n	80039a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003984:	f000 fe3e 	bl	8004604 <prvInitialiseTaskLists>
 8003988:	e00d      	b.n	80039a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800398a:	4b48      	ldr	r3, [pc, #288]	; (8003aac <prvAddNewTaskToReadyList+0x154>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003992:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <prvAddNewTaskToReadyList+0x150>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	429a      	cmp	r2, r3
 800399e:	d802      	bhi.n	80039a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80039a0:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <prvAddNewTaskToReadyList+0x150>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <prvAddNewTaskToReadyList+0x158>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	4a40      	ldr	r2, [pc, #256]	; (8003ab0 <prvAddNewTaskToReadyList+0x158>)
 80039ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039b0:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <prvAddNewTaskToReadyList+0x158>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <prvAddNewTaskToReadyList+0x94>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 ff2d 	bl	8006820 <SEGGER_SYSVIEW_OnTaskCreate>
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	461d      	mov	r5, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461c      	mov	r4, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	1ae3      	subs	r3, r4, r3
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	462b      	mov	r3, r5
 80039e8:	f001 ffbc 	bl	8005964 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f002 ff9a 	bl	8006928 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <prvAddNewTaskToReadyList+0x15c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <prvAddNewTaskToReadyList+0x15c>)
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	492b      	ldr	r1, [pc, #172]	; (8003ab8 <prvAddNewTaskToReadyList+0x160>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3304      	adds	r3, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	3204      	adds	r2, #4
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <prvAddNewTaskToReadyList+0x160>)
 8003a4a:	441a      	add	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	615a      	str	r2, [r3, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4918      	ldr	r1, [pc, #96]	; (8003ab8 <prvAddNewTaskToReadyList+0x160>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <prvAddNewTaskToReadyList+0x160>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4403      	add	r3, r0
 8003a70:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a72:	f001 fcb7 	bl	80053e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <prvAddNewTaskToReadyList+0x154>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvAddNewTaskToReadyList+0x150>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d207      	bcs.n	8003a9c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <prvAddNewTaskToReadyList+0x164>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	2000022c 	.word	0x2000022c
 8003aa8:	20000140 	.word	0x20000140
 8003aac:	20000238 	.word	0x20000238
 8003ab0:	20000248 	.word	0x20000248
 8003ab4:	20000234 	.word	0x20000234
 8003ab8:	20000144 	.word	0x20000144
 8003abc:	e000ed04 	.word	0xe000ed04

08003ac0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003ac8:	f001 fc5c 	bl	8005384 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d102      	bne.n	8003ad8 <vTaskSuspend+0x18>
 8003ad2:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <vTaskSuspend+0x13c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	e000      	b.n	8003ada <vTaskSuspend+0x1a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 ffc4 	bl	8006a6c <SEGGER_SYSVIEW_ShrinkId>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	2029      	movs	r0, #41	; 0x29
 8003aea:	f002 fb41 	bl	8006170 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f90e 	bl	8002d14 <uxListRemove>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d115      	bne.n	8003b2a <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	493f      	ldr	r1, [pc, #252]	; (8003c00 <vTaskSuspend+0x140>)
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <vTaskSuspend+0x6a>
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	2201      	movs	r2, #1
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <vTaskSuspend+0x144>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4013      	ands	r3, r2
 8003b26:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <vTaskSuspend+0x144>)
 8003b28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	3318      	adds	r3, #24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff f8ec 	bl	8002d14 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	211b      	movs	r1, #27
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 ff33 	bl	80069ac <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	482e      	ldr	r0, [pc, #184]	; (8003c08 <vTaskSuspend+0x148>)
 8003b4e:	f7ff f884 	bl	8002c5a <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e010      	b.n	8003b7a <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3354      	adds	r3, #84	; 0x54
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3354      	adds	r3, #84	; 0x54
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	ddeb      	ble.n	8003b58 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003b80:	f001 fc30 	bl	80053e4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <vTaskSuspend+0x14c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003b8c:	f001 fbfa 	bl	8005384 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003b90:	f000 fdb6 	bl	8004700 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003b94:	f001 fc26 	bl	80053e4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <vTaskSuspend+0x13c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d127      	bne.n	8003bf2 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <vTaskSuspend+0x14c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <vTaskSuspend+0x150>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <vTaskSuspend+0x108>
        __asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60fb      	str	r3, [r7, #12]
    }
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <vTaskSuspend+0x154>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003bd8:	e00b      	b.n	8003bf2 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <vTaskSuspend+0x148>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <vTaskSuspend+0x158>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d103      	bne.n	8003bee <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <vTaskSuspend+0x13c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
    }
 8003bec:	e001      	b.n	8003bf2 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8003bee:	f000 fabb 	bl	8004168 <vTaskSwitchContext>
    }
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000140 	.word	0x20000140
 8003c00:	20000144 	.word	0x20000144
 8003c04:	20000234 	.word	0x20000234
 8003c08:	20000218 	.word	0x20000218
 8003c0c:	20000238 	.word	0x20000238
 8003c10:	20000254 	.word	0x20000254
 8003c14:	e000ed04 	.word	0xe000ed04
 8003c18:	2000022c 	.word	0x2000022c

08003c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <vTaskStartScheduler+0xa4>)
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2282      	movs	r2, #130	; 0x82
 8003c2e:	4925      	ldr	r1, [pc, #148]	; (8003cc4 <vTaskStartScheduler+0xa8>)
 8003c30:	4825      	ldr	r0, [pc, #148]	; (8003cc8 <vTaskStartScheduler+0xac>)
 8003c32:	f7ff fdbd 	bl	80037b0 <xTaskCreate>
 8003c36:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d102      	bne.n	8003c44 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003c3e:	f000 fec5 	bl	80049cc <xTimerCreateTimerTask>
 8003c42:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d124      	bne.n	8003c94 <vTaskStartScheduler+0x78>
        __asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60bb      	str	r3, [r7, #8]
    }
 8003c5c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <vTaskStartScheduler+0xb0>)
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <vTaskStartScheduler+0xb4>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <vTaskStartScheduler+0xb8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <vTaskStartScheduler+0xbc>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <vTaskStartScheduler+0xa4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d102      	bne.n	8003c84 <vTaskStartScheduler+0x68>
 8003c7e:	f002 fdb3 	bl	80067e8 <SEGGER_SYSVIEW_OnIdle>
 8003c82:	e004      	b.n	8003c8e <vTaskStartScheduler+0x72>
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <vTaskStartScheduler+0xbc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f002 fe0b 	bl	80068a4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003c8e:	f001 fa59 	bl	8005144 <xPortStartScheduler>
 8003c92:	e00e      	b.n	8003cb2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d10a      	bne.n	8003cb2 <vTaskStartScheduler+0x96>
        __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	607b      	str	r3, [r7, #4]
    }
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <vTaskStartScheduler+0xc0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000250 	.word	0x20000250
 8003cc4:	08006df0 	.word	0x08006df0
 8003cc8:	080045d5 	.word	0x080045d5
 8003ccc:	2000024c 	.word	0x2000024c
 8003cd0:	20000238 	.word	0x20000238
 8003cd4:	20000230 	.word	0x20000230
 8003cd8:	20000140 	.word	0x20000140
 8003cdc:	20000014 	.word	0x20000014

08003ce0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <vTaskSuspendAll+0x18>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <vTaskSuspendAll+0x18>)
 8003cec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000254 	.word	0x20000254

08003cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003d0a:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <xTaskResumeAll+0x1dc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <xTaskResumeAll+0x2c>
        __asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	607b      	str	r3, [r7, #4]
    }
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003d28:	f001 fb2c 	bl	8005384 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <xTaskResumeAll+0x1dc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4a69      	ldr	r2, [pc, #420]	; (8003ed8 <xTaskResumeAll+0x1dc>)
 8003d34:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d36:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <xTaskResumeAll+0x1dc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 80c4 	bne.w	8003ec8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d40:	4b66      	ldr	r3, [pc, #408]	; (8003edc <xTaskResumeAll+0x1e0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80bf 	beq.w	8003ec8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4a:	e08e      	b.n	8003e6a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <xTaskResumeAll+0x1e4>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	6a12      	ldr	r2, [r2, #32]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	69d2      	ldr	r2, [r2, #28]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3318      	adds	r3, #24
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d103      	bne.n	8003d82 <xTaskResumeAll+0x86>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2200      	movs	r2, #0
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1e5a      	subs	r2, r3, #1
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	68d2      	ldr	r2, [r2, #12]
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3304      	adds	r3, #4
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d103      	bne.n	8003dc0 <xTaskResumeAll+0xc4>
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	615a      	str	r2, [r3, #20]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	1e5a      	subs	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fda8 	bl	8006928 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	2201      	movs	r2, #1
 8003dde:	409a      	lsls	r2, r3
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <xTaskResumeAll+0x1e8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <xTaskResumeAll+0x1e8>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dee:	493e      	ldr	r1, [pc, #248]	; (8003ee8 <xTaskResumeAll+0x1ec>)
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	3204      	adds	r2, #4
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	1d1a      	adds	r2, r3, #4
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <xTaskResumeAll+0x1ec>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	492b      	ldr	r1, [pc, #172]	; (8003ee8 <xTaskResumeAll+0x1ec>)
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	4827      	ldr	r0, [pc, #156]	; (8003ee8 <xTaskResumeAll+0x1ec>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <xTaskResumeAll+0x1f0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d302      	bcc.n	8003e6a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <xTaskResumeAll+0x1f4>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <xTaskResumeAll+0x1e4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f47f af6c 	bne.w	8003d4c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003e7a:	f000 fc41 	bl	8004700 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <xTaskResumeAll+0x1f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003e8a:	f000 f853 	bl	8003f34 <xTaskIncrementTick>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <xTaskResumeAll+0x1f4>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f1      	bne.n	8003e8a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003ea6:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <xTaskResumeAll+0x1f8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <xTaskResumeAll+0x1f4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskResumeAll+0x1fc>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ec8:	f001 fa8c 	bl	80053e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000254 	.word	0x20000254
 8003edc:	2000022c 	.word	0x2000022c
 8003ee0:	200001ec 	.word	0x200001ec
 8003ee4:	20000234 	.word	0x20000234
 8003ee8:	20000144 	.word	0x20000144
 8003eec:	20000140 	.word	0x20000140
 8003ef0:	20000240 	.word	0x20000240
 8003ef4:	2000023c 	.word	0x2000023c
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <xTaskGetTickCount+0x1c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003f08:	687b      	ldr	r3, [r7, #4]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	20000230 	.word	0x20000230

08003f1c <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <uxTaskGetNumberOfTasks+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000022c 	.word	0x2000022c

08003f34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3e:	4b7f      	ldr	r3, [pc, #508]	; (800413c <xTaskIncrementTick+0x208>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80f0 	bne.w	8004128 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f48:	4b7d      	ldr	r3, [pc, #500]	; (8004140 <xTaskIncrementTick+0x20c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003f50:	4a7b      	ldr	r2, [pc, #492]	; (8004140 <xTaskIncrementTick+0x20c>)
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d120      	bne.n	8003f9e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f5c:	4b79      	ldr	r3, [pc, #484]	; (8004144 <xTaskIncrementTick+0x210>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <xTaskIncrementTick+0x48>
        __asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	607b      	str	r3, [r7, #4]
    }
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <xTaskIncrementTick+0x46>
 8003f7c:	4b71      	ldr	r3, [pc, #452]	; (8004144 <xTaskIncrementTick+0x210>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	4b71      	ldr	r3, [pc, #452]	; (8004148 <xTaskIncrementTick+0x214>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6f      	ldr	r2, [pc, #444]	; (8004144 <xTaskIncrementTick+0x210>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4a6f      	ldr	r2, [pc, #444]	; (8004148 <xTaskIncrementTick+0x214>)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b6e      	ldr	r3, [pc, #440]	; (800414c <xTaskIncrementTick+0x218>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a6d      	ldr	r2, [pc, #436]	; (800414c <xTaskIncrementTick+0x218>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	f000 fbb1 	bl	8004700 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <xTaskIncrementTick+0x21c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	f0c0 80aa 	bcc.w	80040fe <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003faa:	4b66      	ldr	r3, [pc, #408]	; (8004144 <xTaskIncrementTick+0x210>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb4:	4b66      	ldr	r3, [pc, #408]	; (8004150 <xTaskIncrementTick+0x21c>)
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	601a      	str	r2, [r3, #0]
                    break;
 8003fbc:	e09f      	b.n	80040fe <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbe:	4b61      	ldr	r3, [pc, #388]	; (8004144 <xTaskIncrementTick+0x210>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003fd6:	4a5e      	ldr	r2, [pc, #376]	; (8004150 <xTaskIncrementTick+0x21c>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003fdc:	e08f      	b.n	80040fe <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	68d2      	ldr	r2, [r2, #12]
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	6892      	ldr	r2, [r2, #8]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	3304      	adds	r3, #4
 8004000:	429a      	cmp	r2, r3
 8004002:	d103      	bne.n	800400c <xTaskIncrementTick+0xd8>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01e      	beq.n	8004062 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	6a12      	ldr	r2, [r2, #32]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	69d2      	ldr	r2, [r2, #28]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3318      	adds	r3, #24
 8004046:	429a      	cmp	r2, r3
 8004048:	d103      	bne.n	8004052 <xTaskIncrementTick+0x11e>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4618      	mov	r0, r3
 8004066:	f002 fc5f 	bl	8006928 <SEGGER_SYSVIEW_OnTaskStartReady>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	2201      	movs	r2, #1
 8004070:	409a      	lsls	r2, r3
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <xTaskIncrementTick+0x220>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	4a36      	ldr	r2, [pc, #216]	; (8004154 <xTaskIncrementTick+0x220>)
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004080:	4935      	ldr	r1, [pc, #212]	; (8004158 <xTaskIncrementTick+0x224>)
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3304      	adds	r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	3204      	adds	r2, #4
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	1d1a      	adds	r2, r3, #4
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <xTaskIncrementTick+0x224>)
 80040c0:	441a      	add	r2, r3
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	615a      	str	r2, [r3, #20]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	4923      	ldr	r1, [pc, #140]	; (8004158 <xTaskIncrementTick+0x224>)
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	481f      	ldr	r0, [pc, #124]	; (8004158 <xTaskIncrementTick+0x224>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <xTaskIncrementTick+0x228>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	f67f af59 	bls.w	8003faa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040fc:	e755      	b.n	8003faa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <xTaskIncrementTick+0x228>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <xTaskIncrementTick+0x224>)
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d901      	bls.n	800411a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <xTaskIncrementTick+0x22c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e004      	b.n	8004132 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <xTaskIncrementTick+0x230>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <xTaskIncrementTick+0x230>)
 8004130:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004134:	4618      	mov	r0, r3
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000254 	.word	0x20000254
 8004140:	20000230 	.word	0x20000230
 8004144:	200001e4 	.word	0x200001e4
 8004148:	200001e8 	.word	0x200001e8
 800414c:	20000244 	.word	0x20000244
 8004150:	2000024c 	.word	0x2000024c
 8004154:	20000234 	.word	0x20000234
 8004158:	20000144 	.word	0x20000144
 800415c:	20000140 	.word	0x20000140
 8004160:	20000240 	.word	0x20000240
 8004164:	2000023c 	.word	0x2000023c

08004168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416e:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <vTaskSwitchContext+0xbc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <vTaskSwitchContext+0xc0>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800417c:	e04d      	b.n	800421a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <vTaskSwitchContext+0xc0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004184:	4b29      	ldr	r3, [pc, #164]	; (800422c <vTaskSwitchContext+0xc4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	f1c3 031f 	rsb	r3, r3, #31
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	4925      	ldr	r1, [pc, #148]	; (8004230 <vTaskSwitchContext+0xc8>)
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	607b      	str	r3, [r7, #4]
    }
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <vTaskSwitchContext+0x5a>
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <vTaskSwitchContext+0xc8>)
 80041d0:	4413      	add	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3308      	adds	r3, #8
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d104      	bne.n	80041f4 <vTaskSwitchContext+0x8c>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <vTaskSwitchContext+0xcc>)
 80041fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <vTaskSwitchContext+0xcc>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <vTaskSwitchContext+0xd0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d102      	bne.n	8004210 <vTaskSwitchContext+0xa8>
 800420a:	f002 faed 	bl	80067e8 <SEGGER_SYSVIEW_OnIdle>
}
 800420e:	e004      	b.n	800421a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <vTaskSwitchContext+0xcc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f002 fb45 	bl	80068a4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000254 	.word	0x20000254
 8004228:	20000240 	.word	0x20000240
 800422c:	20000234 	.word	0x20000234
 8004230:	20000144 	.word	0x20000144
 8004234:	20000140 	.word	0x20000140
 8004238:	20000250 	.word	0x20000250

0800423c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
    }
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004262:	4b07      	ldr	r3, [pc, #28]	; (8004280 <vTaskPlaceOnEventList+0x44>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3318      	adds	r3, #24
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe fd19 	bl	8002ca2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004270:	2101      	movs	r1, #1
 8004272:	6838      	ldr	r0, [r7, #0]
 8004274:	f000 fb2a 	bl	80048cc <prvAddCurrentTaskToDelayedList>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000140 	.word	0x20000140

08004284 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10a      	bne.n	80042ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	613b      	str	r3, [r7, #16]
    }
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <vTaskPlaceOnEventListRestricted+0x8c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	61da      	str	r2, [r3, #28]
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <vTaskPlaceOnEventListRestricted+0x8c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	621a      	str	r2, [r3, #32]
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <vTaskPlaceOnEventListRestricted+0x8c>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	3218      	adds	r2, #24
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <vTaskPlaceOnEventListRestricted+0x8c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f103 0218 	add.w	r2, r3, #24
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <vTaskPlaceOnEventListRestricted+0x8c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295
 80042f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80042fa:	2024      	movs	r0, #36	; 0x24
 80042fc:	f001 ff1a 	bl	8006134 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	68b8      	ldr	r0, [r7, #8]
 8004304:	f000 fae2 	bl	80048cc <prvAddCurrentTaskToDelayedList>
    }
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000140 	.word	0x20000140

08004314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60fb      	str	r3, [r7, #12]
    }
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	6a12      	ldr	r2, [r2, #32]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	69d2      	ldr	r2, [r2, #28]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	3318      	adds	r3, #24
 8004362:	429a      	cmp	r2, r3
 8004364:	d103      	bne.n	800436e <xTaskRemoveFromEventList+0x5a>
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	2200      	movs	r2, #0
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	1e5a      	subs	r2, r3, #1
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800437e:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <xTaskRemoveFromEventList+0x198>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d162      	bne.n	800444c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	609a      	str	r2, [r3, #8]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	6a3a      	ldr	r2, [r7, #32]
 800439c:	6892      	ldr	r2, [r2, #8]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	3304      	adds	r3, #4
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d103      	bne.n	80043b4 <xTaskRemoveFromEventList+0xa0>
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2200      	movs	r2, #0
 80043b8:	615a      	str	r2, [r3, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f002 faae 	bl	8006928 <SEGGER_SYSVIEW_OnTaskStartReady>
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <xTaskRemoveFromEventList+0x19c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a35      	ldr	r2, [pc, #212]	; (80044b0 <xTaskRemoveFromEventList+0x19c>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <xTaskRemoveFromEventList+0x1a0>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	3304      	adds	r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	3204      	adds	r2, #4
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <xTaskRemoveFromEventList+0x1a0>)
 8004422:	441a      	add	r2, r3
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	615a      	str	r2, [r3, #20]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442c:	4921      	ldr	r1, [pc, #132]	; (80044b4 <xTaskRemoveFromEventList+0x1a0>)
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	481d      	ldr	r0, [pc, #116]	; (80044b4 <xTaskRemoveFromEventList+0x1a0>)
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4403      	add	r3, r0
 8004448:	6019      	str	r1, [r3, #0]
 800444a:	e01b      	b.n	8004484 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <xTaskRemoveFromEventList+0x1a4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	61da      	str	r2, [r3, #28]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	621a      	str	r2, [r3, #32]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	3218      	adds	r2, #24
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f103 0218 	add.w	r2, r3, #24
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <xTaskRemoveFromEventList+0x1a4>)
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <xTaskRemoveFromEventList+0x1a4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3301      	adds	r3, #1
 8004480:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <xTaskRemoveFromEventList+0x1a4>)
 8004482:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xTaskRemoveFromEventList+0x1a8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	429a      	cmp	r2, r3
 8004490:	d905      	bls.n	800449e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <xTaskRemoveFromEventList+0x1ac>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e001      	b.n	80044a2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000254 	.word	0x20000254
 80044b0:	20000234 	.word	0x20000234
 80044b4:	20000144 	.word	0x20000144
 80044b8:	200001ec 	.word	0x200001ec
 80044bc:	20000140 	.word	0x20000140
 80044c0:	20000240 	.word	0x20000240

080044c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <vTaskInternalSetTimeOutState+0x24>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <vTaskInternalSetTimeOutState+0x28>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000244 	.word	0x20000244
 80044ec:	20000230 	.word	0x20000230

080044f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	613b      	str	r3, [r7, #16]
    }
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
    }
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004532:	f000 ff27 	bl	8005384 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <xTaskCheckForTimeOut+0xc4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d102      	bne.n	8004556 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e026      	b.n	80045a4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <xTaskCheckForTimeOut+0xc8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d00a      	beq.n	8004578 <xTaskCheckForTimeOut+0x88>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	429a      	cmp	r2, r3
 800456a:	d305      	bcc.n	8004578 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e015      	b.n	80045a4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20b      	bcs.n	800459a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	1ad2      	subs	r2, r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff ff98 	bl	80044c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e004      	b.n	80045a4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045a4:	f000 ff1e 	bl	80053e4 <vPortExitCritical>

    return xReturn;
 80045a8:	69fb      	ldr	r3, [r7, #28]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000230 	.word	0x20000230
 80045b8:	20000244 	.word	0x20000244

080045bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <vTaskMissedYield+0x14>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000240 	.word	0x20000240

080045d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80045dc:	f000 f852 	bl	8004684 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <prvIdleTask+0x28>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d9f9      	bls.n	80045dc <prvIdleTask+0x8>
            {
                taskYIELD();
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <prvIdleTask+0x2c>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80045f8:	e7f0      	b.n	80045dc <prvIdleTask+0x8>
 80045fa:	bf00      	nop
 80045fc:	20000144 	.word	0x20000144
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e00c      	b.n	800462a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <prvInitialiseTaskLists+0x60>)
 800461c:	4413      	add	r3, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe faee 	bl	8002c00 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3301      	adds	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b05      	cmp	r3, #5
 800462e:	d9ef      	bls.n	8004610 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004630:	480d      	ldr	r0, [pc, #52]	; (8004668 <prvInitialiseTaskLists+0x64>)
 8004632:	f7fe fae5 	bl	8002c00 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004636:	480d      	ldr	r0, [pc, #52]	; (800466c <prvInitialiseTaskLists+0x68>)
 8004638:	f7fe fae2 	bl	8002c00 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800463c:	480c      	ldr	r0, [pc, #48]	; (8004670 <prvInitialiseTaskLists+0x6c>)
 800463e:	f7fe fadf 	bl	8002c00 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004642:	480c      	ldr	r0, [pc, #48]	; (8004674 <prvInitialiseTaskLists+0x70>)
 8004644:	f7fe fadc 	bl	8002c00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004648:	480b      	ldr	r0, [pc, #44]	; (8004678 <prvInitialiseTaskLists+0x74>)
 800464a:	f7fe fad9 	bl	8002c00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <prvInitialiseTaskLists+0x78>)
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <prvInitialiseTaskLists+0x64>)
 8004652:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <prvInitialiseTaskLists+0x7c>)
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <prvInitialiseTaskLists+0x68>)
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000144 	.word	0x20000144
 8004668:	200001bc 	.word	0x200001bc
 800466c:	200001d0 	.word	0x200001d0
 8004670:	200001ec 	.word	0x200001ec
 8004674:	20000200 	.word	0x20000200
 8004678:	20000218 	.word	0x20000218
 800467c:	200001e4 	.word	0x200001e4
 8004680:	200001e8 	.word	0x200001e8

08004684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800468a:	e019      	b.n	80046c0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800468c:	f000 fe7a 	bl	8005384 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <prvCheckTasksWaitingTermination+0x50>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fb39 	bl	8002d14 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <prvCheckTasksWaitingTermination+0x54>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <prvCheckTasksWaitingTermination+0x54>)
 80046aa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046b4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80046b6:	f000 fe95 	bl	80053e4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f810 	bl	80046e0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e1      	bne.n	800468c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000200 	.word	0x20000200
 80046d8:	2000022c 	.word	0x2000022c
 80046dc:	20000214 	.word	0x20000214

080046e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 f827 	bl	8005740 <vPortFree>
            vPortFree( pxTCB );
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 f824 	bl	8005740 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <prvResetNextTaskUnblockTime+0x30>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <prvResetNextTaskUnblockTime+0x34>)
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004716:	e005      	b.n	8004724 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <prvResetNextTaskUnblockTime+0x30>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <prvResetNextTaskUnblockTime+0x34>)
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	200001e4 	.word	0x200001e4
 8004734:	2000024c 	.word	0x2000024c

08004738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <xTaskGetSchedulerState+0x34>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004746:	2301      	movs	r3, #1
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	e008      	b.n	800475e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <xTaskGetSchedulerState+0x38>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004754:	2302      	movs	r3, #2
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e001      	b.n	800475e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800475e:	687b      	ldr	r3, [r7, #4]
    }
 8004760:	4618      	mov	r0, r3
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000238 	.word	0x20000238
 8004770:	20000254 	.word	0x20000254

08004774 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8095 	beq.w	80048b6 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <xTaskPriorityDisinherit+0x14c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	429a      	cmp	r2, r3
 8004794:	d00a      	beq.n	80047ac <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	613b      	str	r3, [r7, #16]
    }
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60fb      	str	r3, [r7, #12]
    }
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047dc:	429a      	cmp	r2, r3
 80047de:	d06a      	beq.n	80048b6 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d166      	bne.n	80048b6 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe fa91 	bl	8002d14 <uxListRemove>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	2201      	movs	r2, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <xTaskPriorityDisinherit+0x150>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	4a2e      	ldr	r2, [pc, #184]	; (80048c4 <xTaskPriorityDisinherit+0x150>)
 800480c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	204a      	movs	r0, #74	; 0x4a
 8004814:	f001 fcac 	bl	8006170 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f1c3 0206 	rsb	r2, r3, #6
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	4618      	mov	r0, r3
 8004830:	f002 f87a 	bl	8006928 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <xTaskPriorityDisinherit+0x150>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4313      	orrs	r3, r2
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <xTaskPriorityDisinherit+0x150>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	491f      	ldr	r1, [pc, #124]	; (80048c8 <xTaskPriorityDisinherit+0x154>)
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3304      	adds	r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	609a      	str	r2, [r3, #8]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	60da      	str	r2, [r3, #12]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	3204      	adds	r2, #4
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <xTaskPriorityDisinherit+0x154>)
 800488a:	441a      	add	r2, r3
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	615a      	str	r2, [r3, #20]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	490c      	ldr	r1, [pc, #48]	; (80048c8 <xTaskPriorityDisinherit+0x154>)
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1c59      	adds	r1, r3, #1
 80048a4:	4808      	ldr	r0, [pc, #32]	; (80048c8 <xTaskPriorityDisinherit+0x154>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4403      	add	r3, r0
 80048b0:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80048b6:	69fb      	ldr	r3, [r7, #28]
    }
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000140 	.word	0x20000140
 80048c4:	20000234 	.word	0x20000234
 80048c8:	20000144 	.word	0x20000144

080048cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80048d6:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048dc:	4b35      	ldr	r3, [pc, #212]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe fa16 	bl	8002d14 <uxListRemove>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048ee:	4b31      	ldr	r3, [pc, #196]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2201      	movs	r2, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4013      	ands	r3, r2
 8004902:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004904:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d124      	bne.n	8004958 <prvAddCurrentTaskToDelayedList+0x8c>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d021      	beq.n	8004958 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004914:	4b29      	ldr	r3, [pc, #164]	; (80049bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	609a      	str	r2, [r3, #8]
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	3204      	adds	r2, #4
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	4b1e      	ldr	r3, [pc, #120]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004948:	615a      	str	r2, [r3, #20]
 800494a:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004956:	e026      	b.n	80049a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004960:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	429a      	cmp	r2, r3
 800496e:	d209      	bcs.n	8004984 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f7fe f990 	bl	8002ca2 <vListInsert>
}
 8004982:	e010      	b.n	80049a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3304      	adds	r3, #4
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7fe f986 	bl	8002ca2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	429a      	cmp	r2, r3
 800499e:	d202      	bcs.n	80049a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80049a0:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6013      	str	r3, [r2, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000230 	.word	0x20000230
 80049b4:	20000140 	.word	0x20000140
 80049b8:	20000234 	.word	0x20000234
 80049bc:	20000218 	.word	0x20000218
 80049c0:	200001e8 	.word	0x200001e8
 80049c4:	200001e4 	.word	0x200001e4
 80049c8:	2000024c 	.word	0x2000024c

080049cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80049d6:	f000 faef 	bl	8004fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <xTimerCreateTimerTask+0x54>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <xTimerCreateTimerTask+0x58>)
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	2302      	movs	r3, #2
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	2300      	movs	r3, #0
 80049ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049f0:	490d      	ldr	r1, [pc, #52]	; (8004a28 <xTimerCreateTimerTask+0x5c>)
 80049f2:	480e      	ldr	r0, [pc, #56]	; (8004a2c <xTimerCreateTimerTask+0x60>)
 80049f4:	f7fe fedc 	bl	80037b0 <xTaskCreate>
 80049f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	603b      	str	r3, [r7, #0]
    }
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004a16:	687b      	ldr	r3, [r7, #4]
    }
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000288 	.word	0x20000288
 8004a24:	2000028c 	.word	0x2000028c
 8004a28:	08006df8 	.word	0x08006df8
 8004a2c:	08004c25 	.word	0x08004c25

08004a30 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004a3e:	202c      	movs	r0, #44	; 0x2c
 8004a40:	f000 fdc4 	bl	80055cc <pvPortMalloc>
 8004a44:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f805 	bl	8004a72 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004a68:	697b      	ldr	r3, [r7, #20]
        }
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	617b      	str	r3, [r7, #20]
    }
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8004a9c:	f000 fa8c 	bl	8004fb8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	3304      	adds	r3, #4
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fe f8bf 	bl	8002c40 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
	...

08004ae4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	623b      	str	r3, [r7, #32]
    }
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004b12:	4b1a      	ldr	r3, [pc, #104]	; (8004b7c <xTimerGenericCommand+0x98>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02a      	beq.n	8004b70 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	dc18      	bgt.n	8004b5e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b2c:	f7ff fe04 	bl	8004738 <xTaskGetSchedulerState>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d109      	bne.n	8004b4a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <xTimerGenericCommand+0x98>)
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	f107 0114 	add.w	r1, r7, #20
 8004b3e:	2300      	movs	r3, #0
 8004b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b42:	f7fe fa13 	bl	8002f6c <xQueueGenericSend>
 8004b46:	6278      	str	r0, [r7, #36]	; 0x24
 8004b48:	e012      	b.n	8004b70 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <xTimerGenericCommand+0x98>)
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	f107 0114 	add.w	r1, r7, #20
 8004b52:	2300      	movs	r3, #0
 8004b54:	2200      	movs	r2, #0
 8004b56:	f7fe fa09 	bl	8002f6c <xQueueGenericSend>
 8004b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004b5c:	e008      	b.n	8004b70 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <xTimerGenericCommand+0x98>)
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f107 0114 	add.w	r1, r7, #20
 8004b66:	2300      	movs	r3, #0
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	f7fe fafd 	bl	8003168 <xQueueGenericSendFromISR>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004b72:	4618      	mov	r0, r3
 8004b74:	3728      	adds	r7, #40	; 0x28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000288 	.word	0x20000288

08004b80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004b8c:	e008      	b.n	8004ba0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	18d1      	adds	r1, r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f8dd 	bl	8004d6c <prvInsertTimerInActiveList>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ea      	bne.n	8004b8e <prvReloadTimer+0xe>
        }
    }
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <prvProcessExpiredTimer+0x5c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fe f899 	bl	8002d14 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff ffc3 	bl	8004b80 <prvReloadTimer>
 8004bfa:	e008      	b.n	8004c0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	4798      	blx	r3
    }
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000280 	.word	0x20000280

08004c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f857 	bl	8004ce4 <prvGetNextExpireTime>
 8004c36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f803 	bl	8004c48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c42:	f000 f8d5 	bl	8004df0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c46:	e7f1      	b.n	8004c2c <prvTimerTask+0x8>

08004c48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c52:	f7ff f845 	bl	8003ce0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c56:	f107 0308 	add.w	r3, r7, #8
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f866 	bl	8004d2c <prvSampleTimeNow>
 8004c60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d130      	bne.n	8004cca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d806      	bhi.n	8004c84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c76:	f7ff f841 	bl	8003cfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ffa1 	bl	8004bc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c82:	e024      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <prvProcessTimerOrBlockTask+0x90>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <prvProcessTimerOrBlockTask+0x50>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <prvProcessTimerOrBlockTask+0x52>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <prvProcessTimerOrBlockTask+0x94>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f7fe fd4d 	bl	8003748 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004cae:	f7ff f825 	bl	8003cfc <xTaskResumeAll>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <prvProcessTimerOrBlockTask+0x98>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
    }
 8004cc8:	e001      	b.n	8004cce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004cca:	f7ff f817 	bl	8003cfc <xTaskResumeAll>
    }
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000284 	.word	0x20000284
 8004cdc:	20000288 	.word	0x20000288
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cec:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <prvGetNextExpireTime+0x44>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <prvGetNextExpireTime+0x16>
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	e000      	b.n	8004cfc <prvGetNextExpireTime+0x18>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d08:	4b07      	ldr	r3, [pc, #28]	; (8004d28 <prvGetNextExpireTime+0x44>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e001      	b.n	8004d18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d18:	68fb      	ldr	r3, [r7, #12]
    }
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000280 	.word	0x20000280

08004d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d34:	f7ff f8e2 	bl	8003efc <xTaskGetTickCount>
 8004d38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <prvSampleTimeNow+0x3c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d205      	bcs.n	8004d50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d44:	f000 f912 	bl	8004f6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <prvSampleTimeNow+0x3c>)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000290 	.word	0x20000290

08004d6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d812      	bhi.n	8004db8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad2      	subs	r2, r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e01b      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <prvInsertTimerInActiveList+0x7c>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7fd ff76 	bl	8002ca2 <vListInsert>
 8004db6:	e012      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d206      	bcs.n	8004dce <prvInsertTimerInActiveList+0x62>
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e007      	b.n	8004dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <prvInsertTimerInActiveList+0x80>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fd ff62 	bl	8002ca2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004dde:	697b      	ldr	r3, [r7, #20]
    }
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000284 	.word	0x20000284
 8004dec:	20000280 	.word	0x20000280

08004df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004df6:	e0a6      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f2c0 80a3 	blt.w	8004f46 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fd ff7f 	bl	8002d14 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff87 	bl	8004d2c <prvSampleTimeNow>
 8004e1e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	f200 808d 	bhi.w	8004f44 <prvProcessReceivedCommands+0x154>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <prvProcessReceivedCommands+0x40>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e55 	.word	0x08004e55
 8004e38:	08004ebd 	.word	0x08004ebd
 8004e3c:	08004ed1 	.word	0x08004ed1
 8004e40:	08004f1b 	.word	0x08004f1b
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e55 	.word	0x08004e55
 8004e4c:	08004ebd 	.word	0x08004ebd
 8004e50:	08004ed1 	.word	0x08004ed1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	18d1      	adds	r1, r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	69f8      	ldr	r0, [r7, #28]
 8004e74:	f7ff ff7a 	bl	8004d6c <prvInsertTimerInActiveList>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	4413      	add	r3, r2
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4619      	mov	r1, r3
 8004e98:	69f8      	ldr	r0, [r7, #28]
 8004e9a:	f7ff fe71 	bl	8004b80 <prvReloadTimer>
 8004e9e:	e008      	b.n	8004eb2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	69f8      	ldr	r0, [r7, #28]
 8004eb8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004eba:	e044      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ece:	e03a      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	617b      	str	r3, [r7, #20]
    }
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	18d1      	adds	r1, r2, r3
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	69f8      	ldr	r0, [r7, #28]
 8004f14:	f7ff ff2a 	bl	8004d6c <prvInsertTimerInActiveList>
                        break;
 8004f18:	e015      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004f28:	69f8      	ldr	r0, [r7, #28]
 8004f2a:	f000 fc09 	bl	8005740 <vPortFree>
 8004f2e:	e00a      	b.n	8004f46 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f42:	e000      	b.n	8004f46 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004f44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <prvProcessReceivedCommands+0x178>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f107 0108 	add.w	r1, r7, #8
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe f9bb 	bl	80032cc <xQueueReceive>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f af4d 	bne.w	8004df8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000288 	.word	0x20000288

08004f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f72:	e009      	b.n	8004f88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f7ff fe1e 	bl	8004bc4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
    }
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000280 	.word	0x20000280
 8004fb4:	20000284 	.word	0x20000284

08004fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004fbc:	f000 f9e2 	bl	8005384 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fca:	f7fd fe19 	bl	8002c00 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004fce:	4811      	ldr	r0, [pc, #68]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fd0:	f7fd fe16 	bl	8002c00 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fde:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	210c      	movs	r1, #12
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f7fd ff4f 	bl	8002e88 <xQueueGenericCreate>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4a07      	ldr	r2, [pc, #28]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fee:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4908      	ldr	r1, [pc, #32]	; (8005020 <prvCheckForValidListAndQueue+0x68>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fb54 	bl	80036ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005004:	f000 f9ee 	bl	80053e4 <vPortExitCritical>
    }
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000288 	.word	0x20000288
 8005010:	20000258 	.word	0x20000258
 8005014:	2000026c 	.word	0x2000026c
 8005018:	20000280 	.word	0x20000280
 800501c:	20000284 	.word	0x20000284
 8005020:	08006e00 	.word	0x08006e00

08005024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b04      	subs	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800503c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <pxPortInitialiseStack+0x64>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b14      	subs	r3, #20
 800505e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f06f 0202 	mvn.w	r2, #2
 8005072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b20      	subs	r3, #32
 8005078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	0800508d 	.word	0x0800508d

0800508c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <prvTaskExitError+0x54>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d00a      	beq.n	80050b6 <prvTaskExitError+0x2a>
        __asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
    }
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <prvTaskExitError+0x28>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60bb      	str	r3, [r7, #8]
    }
 80050c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80050ca:	bf00      	nop
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0fc      	beq.n	80050cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000018 	.word	0x20000018
	...

080050f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <pxCurrentTCBConst2>)
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	6808      	ldr	r0, [r1, #0]
 80050f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	f380 8809 	msr	PSP, r0
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8811 	msr	BASEPRI, r0
 800510a:	4770      	bx	lr
 800510c:	f3af 8000 	nop.w

08005110 <pxCurrentTCBConst2>:
 8005110:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <prvPortStartFirstTask+0x24>)
 800511a:	6800      	ldr	r0, [r0, #0]
 800511c:	6800      	ldr	r0, [r0, #0]
 800511e:	f380 8808 	msr	MSP, r0
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8814 	msr	CONTROL, r0
 800512a:	b662      	cpsie	i
 800512c:	b661      	cpsie	f
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	f3bf 8f6f 	isb	sy
 8005136:	df00      	svc	0
 8005138:	bf00      	nop
 800513a:	0000      	.short	0x0000
 800513c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop

08005144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800514a:	4b46      	ldr	r3, [pc, #280]	; (8005264 <xPortStartScheduler+0x120>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a46      	ldr	r2, [pc, #280]	; (8005268 <xPortStartScheduler+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10a      	bne.n	800516a <xPortStartScheduler+0x26>
        __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
    }
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800516a:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <xPortStartScheduler+0x120>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a3f      	ldr	r2, [pc, #252]	; (800526c <xPortStartScheduler+0x128>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10a      	bne.n	800518a <xPortStartScheduler+0x46>
        __asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	60fb      	str	r3, [r7, #12]
    }
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <xPortStartScheduler+0x12c>)
 800518c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	22ff      	movs	r2, #255	; 0xff
 800519a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <xPortStartScheduler+0x130>)
 80051b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051b2:	4b31      	ldr	r3, [pc, #196]	; (8005278 <xPortStartScheduler+0x134>)
 80051b4:	2207      	movs	r2, #7
 80051b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051b8:	e009      	b.n	80051ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <xPortStartScheduler+0x134>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	4a2d      	ldr	r2, [pc, #180]	; (8005278 <xPortStartScheduler+0x134>)
 80051c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d0ef      	beq.n	80051ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <xPortStartScheduler+0x134>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1c3 0307 	rsb	r3, r3, #7
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d00a      	beq.n	80051fc <xPortStartScheduler+0xb8>
        __asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60bb      	str	r3, [r7, #8]
    }
 80051f8:	bf00      	nop
 80051fa:	e7fe      	b.n	80051fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051fc:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <xPortStartScheduler+0x134>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <xPortStartScheduler+0x134>)
 8005204:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005206:	4b1c      	ldr	r3, [pc, #112]	; (8005278 <xPortStartScheduler+0x134>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800520e:	4a1a      	ldr	r2, [pc, #104]	; (8005278 <xPortStartScheduler+0x134>)
 8005210:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a17      	ldr	r2, [pc, #92]	; (800527c <xPortStartScheduler+0x138>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <xPortStartScheduler+0x138>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <xPortStartScheduler+0x138>)
 800522c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005232:	f000 f95b 	bl	80054ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <xPortStartScheduler+0x13c>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800523c:	f000 f97a 	bl	8005534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <xPortStartScheduler+0x140>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <xPortStartScheduler+0x140>)
 8005246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800524a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800524c:	f7ff ff64 	bl	8005118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005250:	f7fe ff8a 	bl	8004168 <vTaskSwitchContext>
    prvTaskExitError();
 8005254:	f7ff ff1a 	bl	800508c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	e000ed00 	.word	0xe000ed00
 8005268:	410fc271 	.word	0x410fc271
 800526c:	410fc270 	.word	0x410fc270
 8005270:	e000e400 	.word	0xe000e400
 8005274:	20000294 	.word	0x20000294
 8005278:	20000298 	.word	0x20000298
 800527c:	e000ed20 	.word	0xe000ed20
 8005280:	20000018 	.word	0x20000018
 8005284:	e000ef34 	.word	0xe000ef34

08005288 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800528e:	4b37      	ldr	r3, [pc, #220]	; (800536c <vInitPrioGroupValue+0xe4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a37      	ldr	r2, [pc, #220]	; (8005370 <vInitPrioGroupValue+0xe8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d10a      	bne.n	80052ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	613b      	str	r3, [r7, #16]
    }
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052ae:	4b2f      	ldr	r3, [pc, #188]	; (800536c <vInitPrioGroupValue+0xe4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a30      	ldr	r2, [pc, #192]	; (8005374 <vInitPrioGroupValue+0xec>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d10a      	bne.n	80052ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
    }
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ce:	4b2a      	ldr	r3, [pc, #168]	; (8005378 <vInitPrioGroupValue+0xf0>)
 80052d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <vInitPrioGroupValue+0xf4>)
 80052f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052f6:	4b22      	ldr	r3, [pc, #136]	; (8005380 <vInitPrioGroupValue+0xf8>)
 80052f8:	2207      	movs	r2, #7
 80052fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052fc:	e009      	b.n	8005312 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3b01      	subs	r3, #1
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	b2db      	uxtb	r3, r3
 8005310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d0ef      	beq.n	80052fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800531e:	4b18      	ldr	r3, [pc, #96]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1c3 0307 	rsb	r3, r3, #7
 8005326:	2b04      	cmp	r3, #4
 8005328:	d00a      	beq.n	8005340 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	60bb      	str	r3, [r7, #8]
    }
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	021b      	lsls	r3, r3, #8
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005348:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <vInitPrioGroupValue+0xf8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005352:	4a0b      	ldr	r2, [pc, #44]	; (8005380 <vInitPrioGroupValue+0xf8>)
 8005354:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000ed00 	.word	0xe000ed00
 8005370:	410fc271 	.word	0x410fc271
 8005374:	410fc270 	.word	0x410fc270
 8005378:	e000e400 	.word	0xe000e400
 800537c:	20000294 	.word	0x20000294
 8005380:	20000298 	.word	0x20000298

08005384 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
        __asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	607b      	str	r3, [r7, #4]
    }
 800539c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <vPortEnterCritical+0x58>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a0d      	ldr	r2, [pc, #52]	; (80053dc <vPortEnterCritical+0x58>)
 80053a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <vPortEnterCritical+0x58>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10f      	bne.n	80053d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortEnterCritical+0x5c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	603b      	str	r3, [r7, #0]
    }
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vPortEnterCritical+0x4a>
    }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000018 	.word	0x20000018
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <vPortExitCritical+0x50>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vPortExitCritical+0x24>
        __asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	607b      	str	r3, [r7, #4]
    }
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005408:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <vPortExitCritical+0x50>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3b01      	subs	r3, #1
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <vPortExitCritical+0x50>)
 8005410:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <vPortExitCritical+0x42>
 800541a:	2300      	movs	r3, #0
 800541c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f383 8811 	msr	BASEPRI, r3
    }
 8005424:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000018 	.word	0x20000018
	...

08005440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005440:	f3ef 8009 	mrs	r0, PSP
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <pxCurrentTCBConst>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f01e 0f10 	tst.w	lr, #16
 8005450:	bf08      	it	eq
 8005452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	6010      	str	r0, [r2, #0]
 800545c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005464:	f380 8811 	msr	BASEPRI, r0
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f7fe fe7a 	bl	8004168 <vTaskSwitchContext>
 8005474:	f04f 0000 	mov.w	r0, #0
 8005478:	f380 8811 	msr	BASEPRI, r0
 800547c:	bc09      	pop	{r0, r3}
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	6808      	ldr	r0, [r1, #0]
 8005482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005486:	f01e 0f10 	tst.w	lr, #16
 800548a:	bf08      	it	eq
 800548c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005490:	f380 8809 	msr	PSP, r0
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst>:
 80054a0:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
        __asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
    }
 80054c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80054c2:	f7fe fd37 	bl	8003f34 <xTaskIncrementTick>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <SysTick_Handler+0x40>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	f383 8811 	msr	BASEPRI, r3
    }
 80054de:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f6:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <vPortSetupTimerInterrupt+0x38>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <vPortSetupTimerInterrupt+0x3c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0a      	ldr	r2, [pc, #40]	; (800552c <vPortSetupTimerInterrupt+0x40>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	099b      	lsrs	r3, r3, #6
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <vPortSetupTimerInterrupt+0x44>)
 800550a:	3b01      	subs	r3, #1
 800550c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550e:	4b04      	ldr	r3, [pc, #16]	; (8005520 <vPortSetupTimerInterrupt+0x34>)
 8005510:	2207      	movs	r2, #7
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	e000e010 	.word	0xe000e010
 8005524:	e000e018 	.word	0xe000e018
 8005528:	20000008 	.word	0x20000008
 800552c:	10624dd3 	.word	0x10624dd3
 8005530:	e000e014 	.word	0xe000e014

08005534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005544 <vPortEnableVFP+0x10>
 8005538:	6801      	ldr	r1, [r0, #0]
 800553a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800553e:	6001      	str	r1, [r0, #0]
 8005540:	4770      	bx	lr
 8005542:	0000      	.short	0x0000
 8005544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop

0800554c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005552:	f3ef 8305 	mrs	r3, IPSR
 8005556:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d914      	bls.n	8005588 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <vPortValidateInterruptPriority+0x70>)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <vPortValidateInterruptPriority+0x74>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	7afa      	ldrb	r2, [r7, #11]
 800556e:	429a      	cmp	r2, r3
 8005570:	d20a      	bcs.n	8005588 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	607b      	str	r3, [r7, #4]
    }
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005588:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <vPortValidateInterruptPriority+0x78>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <vPortValidateInterruptPriority+0x7c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d90a      	bls.n	80055ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	603b      	str	r3, [r7, #0]
    }
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <vPortValidateInterruptPriority+0x60>
    }
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e3f0 	.word	0xe000e3f0
 80055c0:	20000294 	.word	0x20000294
 80055c4:	e000ed0c 	.word	0xe000ed0c
 80055c8:	20000298 	.word	0x20000298

080055cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80055d8:	f7fe fb82 	bl	8003ce0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055dc:	4b53      	ldr	r3, [pc, #332]	; (800572c <pvPortMalloc+0x160>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055e4:	f000 f908 	bl	80057f8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d012      	beq.n	8005614 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80055ee:	2208      	movs	r2, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	3308      	adds	r3, #8
 80055fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	43db      	mvns	r3, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d804      	bhi.n	8005610 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	4413      	add	r3, r2
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	e001      	b.n	8005614 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	db70      	blt.n	80056fc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d06d      	beq.n	80056fc <pvPortMalloc+0x130>
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <pvPortMalloc+0x164>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d868      	bhi.n	80056fc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800562a:	4b42      	ldr	r3, [pc, #264]	; (8005734 <pvPortMalloc+0x168>)
 800562c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <pvPortMalloc+0x168>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005634:	e004      	b.n	8005640 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	429a      	cmp	r2, r3
 8005648:	d903      	bls.n	8005652 <pvPortMalloc+0x86>
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f1      	bne.n	8005636 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005652:	4b36      	ldr	r3, [pc, #216]	; (800572c <pvPortMalloc+0x160>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005658:	429a      	cmp	r2, r3
 800565a:	d04f      	beq.n	80056fc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	4413      	add	r3, r2
 8005664:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1ad2      	subs	r2, r2, r3
 8005676:	2308      	movs	r3, #8
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	429a      	cmp	r2, r3
 800567c:	d91f      	bls.n	80056be <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4413      	add	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <pvPortMalloc+0xda>
        __asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
    }
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056b8:	6978      	ldr	r0, [r7, #20]
 80056ba:	f000 f8f9 	bl	80058b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <pvPortMalloc+0x164>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	4a19      	ldr	r2, [pc, #100]	; (8005730 <pvPortMalloc+0x164>)
 80056ca:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056cc:	4b18      	ldr	r3, [pc, #96]	; (8005730 <pvPortMalloc+0x164>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <pvPortMalloc+0x16c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d203      	bcs.n	80056e0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <pvPortMalloc+0x164>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <pvPortMalloc+0x16c>)
 80056de:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <pvPortMalloc+0x170>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a10      	ldr	r2, [pc, #64]	; (800573c <pvPortMalloc+0x170>)
 80056fa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80056fc:	f7fe fafe 	bl	8003cfc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <pvPortMalloc+0x154>
        __asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
    }
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <pvPortMalloc+0x152>
    return pvReturn;
 8005720:	69fb      	ldr	r3, [r7, #28]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3728      	adds	r7, #40	; 0x28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20012ea4 	.word	0x20012ea4
 8005730:	20012ea8 	.word	0x20012ea8
 8005734:	20012e9c 	.word	0x20012e9c
 8005738:	20012eac 	.word	0x20012eac
 800573c:	20012eb0 	.word	0x20012eb0

08005740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d049      	beq.n	80057e6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005752:	2308      	movs	r3, #8
 8005754:	425b      	negs	r3, r3
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	db0a      	blt.n	800577e <vPortFree+0x3e>
        __asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	60fb      	str	r3, [r7, #12]
    }
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <vPortFree+0x5c>
        __asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
    }
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	0fdb      	lsrs	r3, r3, #31
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01c      	beq.n	80057e6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d118      	bne.n	80057e6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80057c0:	f7fe fa8e 	bl	8003ce0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <vPortFree+0xb0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4413      	add	r3, r2
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <vPortFree+0xb0>)
 80057d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057d2:	6938      	ldr	r0, [r7, #16]
 80057d4:	f000 f86c 	bl	80058b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80057d8:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <vPortFree+0xb4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <vPortFree+0xb4>)
 80057e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80057e2:	f7fe fa8b 	bl	8003cfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80057e6:	bf00      	nop
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20012ea8 	.word	0x20012ea8
 80057f4:	20012eb4 	.word	0x20012eb4

080057f8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057fe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005802:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <prvHeapInit+0xa4>)
 8005806:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3307      	adds	r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0307 	bic.w	r3, r3, #7
 800581e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	4a1d      	ldr	r2, [pc, #116]	; (800589c <prvHeapInit+0xa4>)
 8005828:	4413      	add	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <prvHeapInit+0xa8>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005836:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <prvHeapInit+0xa8>)
 8005838:	2200      	movs	r2, #0
 800583a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005844:	2208      	movs	r2, #8
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1a9b      	subs	r3, r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0307 	bic.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <prvHeapInit+0xac>)
 8005858:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <prvHeapInit+0xac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <prvHeapInit+0xac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <prvHeapInit+0xac>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <prvHeapInit+0xb0>)
 8005886:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4a07      	ldr	r2, [pc, #28]	; (80058ac <prvHeapInit+0xb4>)
 800588e:	6013      	str	r3, [r2, #0]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	2000029c 	.word	0x2000029c
 80058a0:	20012e9c 	.word	0x20012e9c
 80058a4:	20012ea4 	.word	0x20012ea4
 80058a8:	20012eac 	.word	0x20012eac
 80058ac:	20012ea8 	.word	0x20012ea8

080058b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058b8:	4b28      	ldr	r3, [pc, #160]	; (800595c <prvInsertBlockIntoFreeList+0xac>)
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e002      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x14>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d8f7      	bhi.n	80058be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d108      	bne.n	80058f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d118      	bne.n	8005938 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d00d      	beq.n	800592e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	441a      	add	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e008      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800592e:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e003      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d002      	beq.n	800594e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20012e9c 	.word	0x20012e9c
 8005960:	20012ea4 	.word	0x20012ea4

08005964 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005972:	2205      	movs	r2, #5
 8005974:	492b      	ldr	r1, [pc, #172]	; (8005a24 <SYSVIEW_AddTask+0xc0>)
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f001 f9c0 	bl	8006cfc <memcmp>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d04b      	beq.n	8005a1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b07      	cmp	r3, #7
 8005988:	d903      	bls.n	8005992 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800598a:	4828      	ldr	r0, [pc, #160]	; (8005a2c <SYSVIEW_AddTask+0xc8>)
 800598c:	f001 f95a 	bl	8006c44 <SEGGER_SYSVIEW_Warn>
    return;
 8005990:	e044      	b.n	8005a1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005992:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4926      	ldr	r1, [pc, #152]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4921      	ldr	r1, [pc, #132]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3304      	adds	r3, #4
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	491b      	ldr	r1, [pc, #108]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3308      	adds	r3, #8
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4916      	ldr	r1, [pc, #88]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	330c      	adds	r3, #12
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4910      	ldr	r1, [pc, #64]	; (8005a30 <SYSVIEW_AddTask+0xcc>)
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	3310      	adds	r3, #16
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a08      	ldr	r2, [pc, #32]	; (8005a28 <SYSVIEW_AddTask+0xc4>)
 8005a06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 f80e 	bl	8005a34 <SYSVIEW_SendTaskInfo>
 8005a18:	e000      	b.n	8005a1c <SYSVIEW_AddTask+0xb8>
    return;
 8005a1a:	bf00      	nop

}
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	08006e08 	.word	0x08006e08
 8005a28:	20012f58 	.word	0x20012f58
 8005a2c:	08006e10 	.word	0x08006e10
 8005a30:	20012eb8 	.word	0x20012eb8

08005a34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a42:	f107 0314 	add.w	r3, r7, #20
 8005a46:	2214      	movs	r2, #20
 8005a48:	2100      	movs	r1, #0
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f966 	bl	8006d1c <memset>
  TaskInfo.TaskID     = TaskID;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fd93 	bl	8006594 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a6e:	bf00      	nop
 8005a70:	3728      	adds	r7, #40	; 0x28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005a7e:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <USART2_IRQHandler+0x80>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d011      	beq.n	8005ab2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <USART2_IRQHandler+0x84>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 030b 	and.w	r3, r3, #11
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d108      	bne.n	8005ab2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <USART2_IRQHandler+0x88>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <USART2_IRQHandler+0x88>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	79fa      	ldrb	r2, [r7, #7]
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01a      	beq.n	8005af2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005abc:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <USART2_IRQHandler+0x8c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d015      	beq.n	8005af0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <USART2_IRQHandler+0x8c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	1dfa      	adds	r2, r7, #7
 8005aca:	4610      	mov	r0, r2
 8005acc:	4798      	blx	r3
 8005ace:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005ad6:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <USART2_IRQHandler+0x90>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a0b      	ldr	r2, [pc, #44]	; (8005b08 <USART2_IRQHandler+0x90>)
 8005adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e006      	b.n	8005af2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <USART2_IRQHandler+0x80>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005ae8:	79fa      	ldrb	r2, [r7, #7]
 8005aea:	4b04      	ldr	r3, [pc, #16]	; (8005afc <USART2_IRQHandler+0x84>)
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e000      	b.n	8005af2 <USART2_IRQHandler+0x7a>
      return;
 8005af0:	bf00      	nop
    }
  }
}
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40011000 	.word	0x40011000
 8005afc:	40011004 	.word	0x40011004
 8005b00:	20012f5c 	.word	0x20012f5c
 8005b04:	20012f60 	.word	0x20012f60
 8005b08:	4001100c 	.word	0x4001100c

08005b0c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	4001100c 	.word	0x4001100c

08005b2c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <_DoInit+0x98>)
 8005b34:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2203      	movs	r2, #3
 8005b40:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <_DoInit+0x9c>)
 8005b46:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <_DoInit+0xa0>)
 8005b4c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b54:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <_DoInit+0x9c>)
 8005b6c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <_DoInit+0xa4>)
 8005b72:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2210      	movs	r2, #16
 8005b78:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3307      	adds	r3, #7
 8005b90:	4a10      	ldr	r2, [pc, #64]	; (8005bd4 <_DoInit+0xa8>)
 8005b92:	6810      	ldr	r0, [r2, #0]
 8005b94:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005b96:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <_DoInit+0xac>)
 8005b9e:	6810      	ldr	r0, [r2, #0]
 8005ba0:	6018      	str	r0, [r3, #0]
 8005ba2:	8891      	ldrh	r1, [r2, #4]
 8005ba4:	7992      	ldrb	r2, [r2, #6]
 8005ba6:	8099      	strh	r1, [r3, #4]
 8005ba8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005baa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005bb4:	f3bf 8f5f 	dmb	sy
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20012f64 	.word	0x20012f64
 8005bc8:	08006e60 	.word	0x08006e60
 8005bcc:	2001300c 	.word	0x2001300c
 8005bd0:	2001340c 	.word	0x2001340c
 8005bd4:	08006e6c 	.word	0x08006e6c
 8005bd8:	08006e70 	.word	0x08006e70

08005bdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	; 0x30
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005be8:	4b3e      	ldr	r3, [pc, #248]	; (8005ce4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bea:	623b      	str	r3, [r7, #32]
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <SEGGER_RTT_ReadNoLock+0x1e>
 8005bf6:	f7ff ff99 	bl	8005b2c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	3360      	adds	r3, #96	; 0x60
 8005c06:	4a37      	ldr	r2, [pc, #220]	; (8005ce4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d92b      	bls.n	8005c80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bf28      	it	cs
 8005c3a:	4613      	movcs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	4413      	add	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	6939      	ldr	r1, [r7, #16]
 8005c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c4e:	f001 f891 	bl	8006d74 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4413      	add	r3, r2
 8005c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d101      	bne.n	8005c80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	bf28      	it	cs
 8005c90:	4613      	movcs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d019      	beq.n	8005cce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	4413      	add	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005caa:	f001 f863 	bl	8006d74 <memcpy>
    NumBytesRead += NumBytesRem;
 8005cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3730      	adds	r7, #48	; 0x30
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20012f64 	.word	0x20012f64

08005ce8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005cf8:	e002      	b.n	8005d00 <_EncodeStr+0x18>
    Len++;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f6      	bne.n	8005cfa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d901      	bls.n	8005d18 <_EncodeStr+0x30>
    Len = Limit;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2bfe      	cmp	r3, #254	; 0xfe
 8005d1c:	d806      	bhi.n	8005d2c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	60fa      	str	r2, [r7, #12]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e011      	b.n	8005d50 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	60fa      	str	r2, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	60fa      	str	r2, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	0a19      	lsrs	r1, r3, #8
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	60fa      	str	r2, [r7, #12]
 8005d4c:	b2ca      	uxtb	r2, r1
 8005d4e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005d54:	e00a      	b.n	8005d6c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	1c53      	adds	r3, r2, #1
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	60f9      	str	r1, [r7, #12]
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	701a      	strb	r2, [r3, #0]
    n++;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d3f0      	bcc.n	8005d56 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <_HandleIncomingPacket+0xdc>)
 8005da4:	7e1b      	ldrb	r3, [r3, #24]
 8005da6:	4618      	mov	r0, r3
 8005da8:	1cfb      	adds	r3, r7, #3
 8005daa:	2201      	movs	r2, #1
 8005dac:	4619      	mov	r1, r3
 8005dae:	f7ff ff15 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
 8005db2:	4603      	mov	r3, r0
 8005db4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dd59      	ble.n	8005e70 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d032      	beq.n	8005e28 <_HandleIncomingPacket+0x8c>
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	dc42      	bgt.n	8005e4c <_HandleIncomingPacket+0xb0>
 8005dc6:	2b07      	cmp	r3, #7
 8005dc8:	dc16      	bgt.n	8005df8 <_HandleIncomingPacket+0x5c>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	dd3e      	ble.n	8005e4c <_HandleIncomingPacket+0xb0>
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	d83b      	bhi.n	8005e4c <_HandleIncomingPacket+0xb0>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <_HandleIncomingPacket+0x40>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005dff 	.word	0x08005dff
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0b 	.word	0x08005e0b
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	08005e23 	.word	0x08005e23
 8005df8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfa:	d034      	beq.n	8005e66 <_HandleIncomingPacket+0xca>
 8005dfc:	e026      	b.n	8005e4c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005dfe:	f000 fa4d 	bl	800629c <SEGGER_SYSVIEW_Start>
      break;
 8005e02:	e035      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005e04:	f000 fb06 	bl	8006414 <SEGGER_SYSVIEW_Stop>
      break;
 8005e08:	e032      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005e0a:	f000 fcbb 	bl	8006784 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005e0e:	e02f      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005e10:	f000 fca4 	bl	800675c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005e14:	e02c      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005e16:	f000 fb23 	bl	8006460 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005e1a:	e029      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005e1c:	f000 fed4 	bl	8006bc8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005e20:	e026      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005e22:	f000 feb3 	bl	8006b8c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005e26:	e023      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <_HandleIncomingPacket+0xdc>)
 8005e2a:	7e1b      	ldrb	r3, [r3, #24]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	1cfb      	adds	r3, r7, #3
 8005e30:	2201      	movs	r2, #1
 8005e32:	4619      	mov	r1, r3
 8005e34:	f7ff fed2 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd13      	ble.n	8005e6a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fe21 	bl	8006a8c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005e4a:	e00e      	b.n	8005e6a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	b25b      	sxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da0c      	bge.n	8005e6e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <_HandleIncomingPacket+0xdc>)
 8005e56:	7e1b      	ldrb	r3, [r3, #24]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	1cfb      	adds	r3, r7, #3
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7ff febc 	bl	8005bdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005e64:	e003      	b.n	8005e6e <_HandleIncomingPacket+0xd2>
      break;
 8005e66:	bf00      	nop
 8005e68:	e002      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e000      	b.n	8005e70 <_HandleIncomingPacket+0xd4>
      break;
 8005e6e:	bf00      	nop
    }
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	2001341c 	.word	0x2001341c

08005e7c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08c      	sub	sp, #48	; 0x30
 8005e80:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005e82:	2301      	movs	r3, #1
 8005e84:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e90:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e96:	e00b      	b.n	8005eb0 <_TrySendOverflowPacket+0x34>
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	09db      	lsrs	r3, r3, #7
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb4:	d8f0      	bhi.n	8005e98 <_TrySendOverflowPacket+0x1c>
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <_TrySendOverflowPacket+0xe4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ecc:	4b23      	ldr	r3, [pc, #140]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	e00b      	b.n	8005ef8 <_TrySendOverflowPacket+0x7c>
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	6279      	str	r1, [r7, #36]	; 0x24
 8005eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	623b      	str	r3, [r7, #32]
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b7f      	cmp	r3, #127	; 0x7f
 8005efc:	d8f0      	bhi.n	8005ee0 <_TrySendOverflowPacket+0x64>
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	627a      	str	r2, [r7, #36]	; 0x24
 8005f04:	6a3a      	ldr	r2, [r7, #32]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f10:	785b      	ldrb	r3, [r3, #1]
 8005f12:	4618      	mov	r0, r3
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	1d3b      	adds	r3, r7, #4
 8005f1e:	4619      	mov	r1, r3
 8005f20:	f7fa f95e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f24:	4603      	mov	r3, r0
 8005f26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005f28:	f7ff fdf0 	bl	8005b0c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005f38:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e004      	b.n	8005f50 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005f46:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	4a03      	ldr	r2, [pc, #12]	; (8005f5c <_TrySendOverflowPacket+0xe0>)
 8005f4e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005f50:	693b      	ldr	r3, [r7, #16]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3730      	adds	r7, #48	; 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2001341c 	.word	0x2001341c
 8005f60:	e0001004 	.word	0xe0001004

08005f64 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	; 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005f70:	4b6d      	ldr	r3, [pc, #436]	; (8006128 <_SendPacket+0x1c4>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d010      	beq.n	8005f9a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005f78:	4b6b      	ldr	r3, [pc, #428]	; (8006128 <_SendPacket+0x1c4>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80a5 	beq.w	80060cc <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005f82:	4b69      	ldr	r3, [pc, #420]	; (8006128 <_SendPacket+0x1c4>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d109      	bne.n	8005f9e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005f8a:	f7ff ff77 	bl	8005e7c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005f8e:	4b66      	ldr	r3, [pc, #408]	; (8006128 <_SendPacket+0x1c4>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	f040 809c 	bne.w	80060d0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005f98:	e001      	b.n	8005f9e <_SendPacket+0x3a>
    goto Send;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <_SendPacket+0x3c>
Send:
 8005f9e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b1f      	cmp	r3, #31
 8005fa4:	d809      	bhi.n	8005fba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005fa6:	4b60      	ldr	r3, [pc, #384]	; (8006128 <_SendPacket+0x1c4>)
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 808d 	bne.w	80060d4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b17      	cmp	r3, #23
 8005fbe:	d807      	bhi.n	8005fd0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	e03d      	b.n	800604c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b7f      	cmp	r3, #127	; 0x7f
 8005fdc:	d912      	bls.n	8006004 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	09da      	lsrs	r2, r3, #7
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	3a01      	subs	r2, #1
 8005ff6:	60fa      	str	r2, [r7, #12]
 8005ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e006      	b.n	8006012 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3b01      	subs	r3, #1
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b7f      	cmp	r3, #127	; 0x7f
 8006016:	d912      	bls.n	800603e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	09da      	lsrs	r2, r3, #7
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3b01      	subs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	3a01      	subs	r2, #1
 8006030:	60fa      	str	r2, [r7, #12]
 8006032:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e006      	b.n	800604c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3b01      	subs	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800604c:	4b37      	ldr	r3, [pc, #220]	; (800612c <_SendPacket+0x1c8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006052:	4b35      	ldr	r3, [pc, #212]	; (8006128 <_SendPacket+0x1c4>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	623b      	str	r3, [r7, #32]
 8006064:	e00b      	b.n	800607e <_SendPacket+0x11a>
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	6279      	str	r1, [r7, #36]	; 0x24
 8006070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	09db      	lsrs	r3, r3, #7
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	2b7f      	cmp	r3, #127	; 0x7f
 8006082:	d8f0      	bhi.n	8006066 <_SendPacket+0x102>
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	627a      	str	r2, [r7, #36]	; 0x24
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <_SendPacket+0x1c4>)
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	4618      	mov	r0, r3
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	68f9      	ldr	r1, [r7, #12]
 80060a4:	f7fa f89c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060a8:	4603      	mov	r3, r0
 80060aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80060ac:	f7ff fd2e 	bl	8005b0c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060b6:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <_SendPacket+0x1c4>)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	60d3      	str	r3, [r2, #12]
 80060bc:	e00b      	b.n	80060d6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <_SendPacket+0x1c4>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <_SendPacket+0x1c4>)
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e004      	b.n	80060d6 <_SendPacket+0x172>
    goto SendDone;
 80060cc:	bf00      	nop
 80060ce:	e002      	b.n	80060d6 <_SendPacket+0x172>
      goto SendDone;
 80060d0:	bf00      	nop
 80060d2:	e000      	b.n	80060d6 <_SendPacket+0x172>
      goto SendDone;
 80060d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <_SendPacket+0x1c4>)
 80060d8:	7e1b      	ldrb	r3, [r3, #24]
 80060da:	4619      	mov	r1, r3
 80060dc:	4a14      	ldr	r2, [pc, #80]	; (8006130 <_SendPacket+0x1cc>)
 80060de:	460b      	mov	r3, r1
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	440b      	add	r3, r1
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	336c      	adds	r3, #108	; 0x6c
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <_SendPacket+0x1c4>)
 80060ee:	7e1b      	ldrb	r3, [r3, #24]
 80060f0:	4618      	mov	r0, r3
 80060f2:	490f      	ldr	r1, [pc, #60]	; (8006130 <_SendPacket+0x1cc>)
 80060f4:	4603      	mov	r3, r0
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	4403      	add	r3, r0
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	3370      	adds	r3, #112	; 0x70
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d00b      	beq.n	800611e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <_SendPacket+0x1c4>)
 8006108:	789b      	ldrb	r3, [r3, #2]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d107      	bne.n	800611e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <_SendPacket+0x1c4>)
 8006110:	2201      	movs	r2, #1
 8006112:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006114:	f7ff fe42 	bl	8005d9c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006118:	4b03      	ldr	r3, [pc, #12]	; (8006128 <_SendPacket+0x1c4>)
 800611a:	2200      	movs	r2, #0
 800611c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800611e:	bf00      	nop
 8006120:	3728      	adds	r7, #40	; 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	2001341c 	.word	0x2001341c
 800612c:	e0001004 	.word	0xe0001004
 8006130:	20012f64 	.word	0x20012f64

08006134 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800613c:	f3ef 8311 	mrs	r3, BASEPRI
 8006140:	f04f 0120 	mov.w	r1, #32
 8006144:	f381 8811 	msr	BASEPRI, r1
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800614c:	f7ff fe19 	bl	8005d82 <_PreparePacket>
 8006150:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68b8      	ldr	r0, [r7, #8]
 8006158:	f7ff ff04 	bl	8005f64 <_SendPacket>
  RECORD_END();
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	2001344c 	.word	0x2001344c

08006170 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800617a:	f3ef 8311 	mrs	r3, BASEPRI
 800617e:	f04f 0120 	mov.w	r1, #32
 8006182:	f381 8811 	msr	BASEPRI, r1
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	4816      	ldr	r0, [pc, #88]	; (80061e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800618a:	f7ff fdfa 	bl	8005d82 <_PreparePacket>
 800618e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e00b      	b.n	80061b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	1c59      	adds	r1, r3, #1
 80061a6:	61f9      	str	r1, [r7, #28]
 80061a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	09db      	lsrs	r3, r3, #7
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ba:	d8f0      	bhi.n	800619e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	61fa      	str	r2, [r7, #28]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6938      	ldr	r0, [r7, #16]
 80061d2:	f7ff fec7 	bl	8005f64 <_SendPacket>
  RECORD_END();
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f383 8811 	msr	BASEPRI, r3
}
 80061dc:	bf00      	nop
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	2001344c 	.word	0x2001344c

080061e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08c      	sub	sp, #48	; 0x30
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f4:	f3ef 8311 	mrs	r3, BASEPRI
 80061f8:	f04f 0120 	mov.w	r1, #32
 80061fc:	f381 8811 	msr	BASEPRI, r1
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	4825      	ldr	r0, [pc, #148]	; (8006298 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006204:	f7ff fdbd 	bl	8005d82 <_PreparePacket>
 8006208:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
 8006216:	e00b      	b.n	8006230 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	1c59      	adds	r1, r3, #1
 8006220:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	09db      	lsrs	r3, r3, #7
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	2b7f      	cmp	r3, #127	; 0x7f
 8006234:	d8f0      	bhi.n	8006218 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	1c5a      	adds	r2, r3, #1
 800623a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800623c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	e00b      	b.n	8006268 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	6279      	str	r1, [r7, #36]	; 0x24
 800625a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	09db      	lsrs	r3, r3, #7
 8006266:	623b      	str	r3, [r7, #32]
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b7f      	cmp	r3, #127	; 0x7f
 800626c:	d8f0      	bhi.n	8006250 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	627a      	str	r2, [r7, #36]	; 0x24
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6979      	ldr	r1, [r7, #20]
 8006282:	69b8      	ldr	r0, [r7, #24]
 8006284:	f7ff fe6e 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f383 8811 	msr	BASEPRI, r3
}
 800628e:	bf00      	nop
 8006290:	3730      	adds	r7, #48	; 0x30
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	2001344c 	.word	0x2001344c

0800629c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062a2:	4b59      	ldr	r3, [pc, #356]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062a8:	f3ef 8311 	mrs	r3, BASEPRI
 80062ac:	f04f 0120 	mov.w	r1, #32
 80062b0:	f381 8811 	msr	BASEPRI, r1
 80062b4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062b6:	4b54      	ldr	r3, [pc, #336]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	220a      	movs	r2, #10
 80062bc:	4953      	ldr	r1, [pc, #332]	; (800640c <SEGGER_SYSVIEW_Start+0x170>)
 80062be:	4618      	mov	r0, r3
 80062c0:	f7f9 ff8e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80062ca:	f7ff fc1f 	bl	8005b0c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80062ce:	200a      	movs	r0, #10
 80062d0:	f7ff ff30 	bl	8006134 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d4:	f3ef 8311 	mrs	r3, BASEPRI
 80062d8:	f04f 0120 	mov.w	r1, #32
 80062dc:	f381 8811 	msr	BASEPRI, r1
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	484b      	ldr	r0, [pc, #300]	; (8006410 <SEGGER_SYSVIEW_Start+0x174>)
 80062e4:	f7ff fd4d 	bl	8005d82 <_PreparePacket>
 80062e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f2:	4b45      	ldr	r3, [pc, #276]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f8:	e00b      	b.n	8006312 <SEGGER_SYSVIEW_Start+0x76>
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	09db      	lsrs	r3, r3, #7
 8006310:	62bb      	str	r3, [r7, #40]	; 0x28
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	2b7f      	cmp	r3, #127	; 0x7f
 8006316:	d8f0      	bhi.n	80062fa <SEGGER_SYSVIEW_Start+0x5e>
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800631e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	e00b      	b.n	800634c <SEGGER_SYSVIEW_Start+0xb0>
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	6279      	str	r1, [r7, #36]	; 0x24
 800633e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	2b7f      	cmp	r3, #127	; 0x7f
 8006350:	d8f0      	bhi.n	8006334 <SEGGER_SYSVIEW_Start+0x98>
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	627a      	str	r2, [r7, #36]	; 0x24
 8006358:	6a3a      	ldr	r2, [r7, #32]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	4b28      	ldr	r3, [pc, #160]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_Start+0xea>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	61f9      	str	r1, [r7, #28]
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_Start+0xd2>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e00b      	b.n	80063be <SEGGER_SYSVIEW_Start+0x122>
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	6179      	str	r1, [r7, #20]
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <SEGGER_SYSVIEW_Start+0x10a>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	617a      	str	r2, [r7, #20]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80063d4:	2218      	movs	r2, #24
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fdc3 	bl	8005f64 <_SendPacket>
      RECORD_END();
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <SEGGER_SYSVIEW_Start+0x16c>)
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80063f2:	f000 f9c7 	bl	8006784 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80063f6:	f000 f9b1 	bl	800675c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80063fa:	f000 fbe5 	bl	8006bc8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80063fe:	bf00      	nop
 8006400:	3730      	adds	r7, #48	; 0x30
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	2001341c 	.word	0x2001341c
 800640c:	08006e90 	.word	0x08006e90
 8006410:	2001344c 	.word	0x2001344c

08006414 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800641a:	f3ef 8311 	mrs	r3, BASEPRI
 800641e:	f04f 0120 	mov.w	r1, #32
 8006422:	f381 8811 	msr	BASEPRI, r1
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	480b      	ldr	r0, [pc, #44]	; (8006458 <SEGGER_SYSVIEW_Stop+0x44>)
 800642a:	f7ff fcaa 	bl	8005d82 <_PreparePacket>
 800642e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <SEGGER_SYSVIEW_Stop+0x48>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006438:	220b      	movs	r2, #11
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6838      	ldr	r0, [r7, #0]
 800643e:	f7ff fd91 	bl	8005f64 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <SEGGER_SYSVIEW_Stop+0x48>)
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f383 8811 	msr	BASEPRI, r3
}
 800644e:	bf00      	nop
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	2001344c 	.word	0x2001344c
 800645c:	2001341c 	.word	0x2001341c

08006460 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b08c      	sub	sp, #48	; 0x30
 8006464:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006466:	f3ef 8311 	mrs	r3, BASEPRI
 800646a:	f04f 0120 	mov.w	r1, #32
 800646e:	f381 8811 	msr	BASEPRI, r1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	4845      	ldr	r0, [pc, #276]	; (800658c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006476:	f7ff fc84 	bl	8005d82 <_PreparePacket>
 800647a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006484:	4b42      	ldr	r3, [pc, #264]	; (8006590 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
 800648a:	e00b      	b.n	80064a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006496:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	09db      	lsrs	r3, r3, #7
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	2b7f      	cmp	r3, #127	; 0x7f
 80064a8:	d8f0      	bhi.n	800648c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
 80064be:	4b34      	ldr	r3, [pc, #208]	; (8006590 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	e00b      	b.n	80064de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1c59      	adds	r1, r3, #1
 80064ce:	6279      	str	r1, [r7, #36]	; 0x24
 80064d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	623b      	str	r3, [r7, #32]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b7f      	cmp	r3, #127	; 0x7f
 80064e2:	d8f0      	bhi.n	80064c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	627a      	str	r2, [r7, #36]	; 0x24
 80064ea:	6a3a      	ldr	r2, [r7, #32]
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e00b      	b.n	8006518 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	61f9      	str	r1, [r7, #28]
 800650a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	09db      	lsrs	r3, r3, #7
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b7f      	cmp	r3, #127	; 0x7f
 800651c:	d8f0      	bhi.n	8006500 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	61fa      	str	r2, [r7, #28]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e00b      	b.n	8006550 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	6179      	str	r1, [r7, #20]
 8006542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b7f      	cmp	r3, #127	; 0x7f
 8006554:	d8f0      	bhi.n	8006538 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	617a      	str	r2, [r7, #20]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006566:	2218      	movs	r2, #24
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	68b8      	ldr	r0, [r7, #8]
 800656c:	f7ff fcfa 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	4798      	blx	r3
  }
}
 8006584:	bf00      	nop
 8006586:	3730      	adds	r7, #48	; 0x30
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	2001344c 	.word	0x2001344c
 8006590:	2001341c 	.word	0x2001341c

08006594 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b092      	sub	sp, #72	; 0x48
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800659c:	f3ef 8311 	mrs	r3, BASEPRI
 80065a0:	f04f 0120 	mov.w	r1, #32
 80065a4:	f381 8811 	msr	BASEPRI, r1
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	486a      	ldr	r0, [pc, #424]	; (8006754 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065ac:	f7ff fbe9 	bl	8005d82 <_PreparePacket>
 80065b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	647b      	str	r3, [r7, #68]	; 0x44
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b66      	ldr	r3, [pc, #408]	; (8006758 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	643b      	str	r3, [r7, #64]	; 0x40
 80065c6:	e00b      	b.n	80065e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80065c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	6479      	str	r1, [r7, #68]	; 0x44
 80065d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065dc:	09db      	lsrs	r3, r3, #7
 80065de:	643b      	str	r3, [r7, #64]	; 0x40
 80065e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e2:	2b7f      	cmp	r3, #127	; 0x7f
 80065e4:	d8f0      	bhi.n	80065c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80065e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	647a      	str	r2, [r7, #68]	; 0x44
 80065ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006600:	e00b      	b.n	800661a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	1c59      	adds	r1, r3, #1
 800660a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800660c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	09db      	lsrs	r3, r3, #7
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b7f      	cmp	r3, #127	; 0x7f
 800661e:	d8f0      	bhi.n	8006602 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	4619      	mov	r1, r3
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff fb55 	bl	8005ce8 <_EncodeStr>
 800663e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006640:	2209      	movs	r2, #9
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6938      	ldr	r0, [r7, #16]
 8006646:	f7ff fc8d 	bl	8005f64 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b40      	ldr	r3, [pc, #256]	; (8006758 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	633b      	str	r3, [r7, #48]	; 0x30
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	6379      	str	r1, [r7, #52]	; 0x34
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800667e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	637a      	str	r2, [r7, #52]	; 0x34
 8006684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
 8006698:	e00b      	b.n	80066b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669c:	b2da      	uxtb	r2, r3
 800669e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2b7f      	cmp	r3, #127	; 0x7f
 80066b6:	d8f0      	bhi.n	800669a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	e00b      	b.n	80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	6279      	str	r1, [r7, #36]	; 0x24
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	627a      	str	r2, [r7, #36]	; 0x24
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e00b      	b.n	8006724 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	61f9      	str	r1, [r7, #28]
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	61fa      	str	r2, [r7, #28]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800673a:	2215      	movs	r2, #21
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	6938      	ldr	r0, [r7, #16]
 8006740:	f7ff fc10 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f383 8811 	msr	BASEPRI, r3
}
 800674a:	bf00      	nop
 800674c:	3748      	adds	r7, #72	; 0x48
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2001344c 	.word	0x2001344c
 8006758:	2001341c 	.word	0x2001341c

0800675c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006772:	4b03      	ldr	r3, [pc, #12]	; (8006780 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4798      	blx	r3
  }
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	2001341c 	.word	0x2001341c

08006784 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d01a      	beq.n	80067c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d015      	beq.n	80067c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4798      	blx	r3
 80067a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80067aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	000a      	movs	r2, r1
 80067b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067ba:	4613      	mov	r3, r2
 80067bc:	461a      	mov	r2, r3
 80067be:	4621      	mov	r1, r4
 80067c0:	200d      	movs	r0, #13
 80067c2:	f7ff fd11 	bl	80061e8 <SEGGER_SYSVIEW_RecordU32x2>
 80067c6:	e006      	b.n	80067d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	200c      	movs	r0, #12
 80067d0:	f7ff fcce 	bl	8006170 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	bf00      	nop
 80067e0:	2001341c 	.word	0x2001341c
 80067e4:	e0001004 	.word	0xe0001004

080067e8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067ee:	f3ef 8311 	mrs	r3, BASEPRI
 80067f2:	f04f 0120 	mov.w	r1, #32
 80067f6:	f381 8811 	msr	BASEPRI, r1
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	4807      	ldr	r0, [pc, #28]	; (800681c <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067fe:	f7ff fac0 	bl	8005d82 <_PreparePacket>
 8006802:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006804:	2211      	movs	r2, #17
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6838      	ldr	r0, [r7, #0]
 800680a:	f7ff fbab 	bl	8005f64 <_SendPacket>
  RECORD_END();
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f383 8811 	msr	BASEPRI, r3
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	2001344c 	.word	0x2001344c

08006820 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006828:	f3ef 8311 	mrs	r3, BASEPRI
 800682c:	f04f 0120 	mov.w	r1, #32
 8006830:	f381 8811 	msr	BASEPRI, r1
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	4819      	ldr	r0, [pc, #100]	; (800689c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006838:	f7ff faa3 	bl	8005d82 <_PreparePacket>
 800683c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	61f9      	str	r1, [r7, #28]
 8006860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b7f      	cmp	r3, #127	; 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	61fa      	str	r2, [r7, #28]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006884:	2208      	movs	r2, #8
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff fb6b 	bl	8005f64 <_SendPacket>
  RECORD_END();
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	2001344c 	.word	0x2001344c
 80068a0:	2001341c 	.word	0x2001341c

080068a4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068ac:	f3ef 8311 	mrs	r3, BASEPRI
 80068b0:	f04f 0120 	mov.w	r1, #32
 80068b4:	f381 8811 	msr	BASEPRI, r1
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	4819      	ldr	r0, [pc, #100]	; (8006920 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80068bc:	f7ff fa61 	bl	8005d82 <_PreparePacket>
 80068c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068c6:	4b17      	ldr	r3, [pc, #92]	; (8006924 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	61bb      	str	r3, [r7, #24]
 80068d8:	e00b      	b.n	80068f2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	1c59      	adds	r1, r3, #1
 80068e2:	61f9      	str	r1, [r7, #28]
 80068e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	09db      	lsrs	r3, r3, #7
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b7f      	cmp	r3, #127	; 0x7f
 80068f6:	d8f0      	bhi.n	80068da <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	61fa      	str	r2, [r7, #28]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006908:	2204      	movs	r2, #4
 800690a:	68f9      	ldr	r1, [r7, #12]
 800690c:	6938      	ldr	r0, [r7, #16]
 800690e:	f7ff fb29 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f383 8811 	msr	BASEPRI, r3
}
 8006918:	bf00      	nop
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	2001344c 	.word	0x2001344c
 8006924:	2001341c 	.word	0x2001341c

08006928 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006930:	f3ef 8311 	mrs	r3, BASEPRI
 8006934:	f04f 0120 	mov.w	r1, #32
 8006938:	f381 8811 	msr	BASEPRI, r1
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	4819      	ldr	r0, [pc, #100]	; (80069a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006940:	f7ff fa1f 	bl	8005d82 <_PreparePacket>
 8006944:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800694a:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	61fb      	str	r3, [r7, #28]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	e00b      	b.n	8006976 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1c59      	adds	r1, r3, #1
 8006966:	61f9      	str	r1, [r7, #28]
 8006968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b7f      	cmp	r3, #127	; 0x7f
 800697a:	d8f0      	bhi.n	800695e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800698c:	2206      	movs	r2, #6
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6938      	ldr	r0, [r7, #16]
 8006992:	f7ff fae7 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f383 8811 	msr	BASEPRI, r3
}
 800699c:	bf00      	nop
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	2001344c 	.word	0x2001344c
 80069a8:	2001341c 	.word	0x2001341c

080069ac <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069b6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ba:	f04f 0120 	mov.w	r1, #32
 80069be:	f381 8811 	msr	BASEPRI, r1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	4827      	ldr	r0, [pc, #156]	; (8006a64 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80069c6:	f7ff f9dc 	bl	8005d82 <_PreparePacket>
 80069ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d0:	4b25      	ldr	r3, [pc, #148]	; (8006a68 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	e00b      	b.n	80069fc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	1c59      	adds	r1, r3, #1
 80069ec:	6279      	str	r1, [r7, #36]	; 0x24
 80069ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	09db      	lsrs	r3, r3, #7
 80069fa:	623b      	str	r3, [r7, #32]
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006a00:	d8f0      	bhi.n	80069e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	627a      	str	r2, [r7, #36]	; 0x24
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e00b      	b.n	8006a34 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	1c59      	adds	r1, r3, #1
 8006a24:	61f9      	str	r1, [r7, #28]
 8006a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	09db      	lsrs	r3, r3, #7
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	2b7f      	cmp	r3, #127	; 0x7f
 8006a38:	d8f0      	bhi.n	8006a1c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	61fa      	str	r2, [r7, #28]
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006a4a:	2207      	movs	r2, #7
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f7ff fa88 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f383 8811 	msr	BASEPRI, r3
}
 8006a5a:	bf00      	nop
 8006a5c:	3728      	adds	r7, #40	; 0x28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	2001344c 	.word	0x2001344c
 8006a68:	2001341c 	.word	0x2001341c

08006a6c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a74:	4b04      	ldr	r3, [pc, #16]	; (8006a88 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	1ad3      	subs	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	2001341c 	.word	0x2001341c

08006a8c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08c      	sub	sp, #48	; 0x30
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a96:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d06d      	beq.n	8006b7a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006a9e:	4b39      	ldr	r3, [pc, #228]	; (8006b84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa8:	e008      	b.n	8006abc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d007      	beq.n	8006ac6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	3301      	adds	r3, #1
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d3f2      	bcc.n	8006aaa <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ac4:	e000      	b.n	8006ac8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ac6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d055      	beq.n	8006b7a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ace:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad2:	f04f 0120 	mov.w	r1, #32
 8006ad6:	f381 8811 	msr	BASEPRI, r1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	482a      	ldr	r0, [pc, #168]	; (8006b88 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ade:	f7ff f950 	bl	8005d82 <_PreparePacket>
 8006ae2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	623b      	str	r3, [r7, #32]
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	6279      	str	r1, [r7, #36]	; 0x24
 8006afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	627a      	str	r2, [r7, #36]	; 0x24
 8006b16:	6a3a      	ldr	r2, [r7, #32]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	e00b      	b.n	8006b44 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	1c59      	adds	r1, r3, #1
 8006b34:	61f9      	str	r1, [r7, #28]
 8006b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	09db      	lsrs	r3, r3, #7
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	d8f0      	bhi.n	8006b2c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	61fa      	str	r2, [r7, #28]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2280      	movs	r2, #128	; 0x80
 8006b60:	4619      	mov	r1, r3
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff f8c0 	bl	8005ce8 <_EncodeStr>
 8006b68:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b6a:	2216      	movs	r2, #22
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff f9f8 	bl	8005f64 <_SendPacket>
      RECORD_END();
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b7a:	bf00      	nop
 8006b7c:	3730      	adds	r7, #48	; 0x30
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20013444 	.word	0x20013444
 8006b88:	2001344c 	.word	0x2001344c

08006b8c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1f2      	bne.n	8006ba0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20013444 	.word	0x20013444

08006bc8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	f04f 0120 	mov.w	r1, #32
 8006bd6:	f381 8811 	msr	BASEPRI, r1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	4817      	ldr	r0, [pc, #92]	; (8006c3c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006bde:	f7ff f8d0 	bl	8005d82 <_PreparePacket>
 8006be2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6179      	str	r1, [r7, #20]
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	617a      	str	r2, [r7, #20]
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c22:	221b      	movs	r2, #27
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	68b8      	ldr	r0, [r7, #8]
 8006c28:	f7ff f99c 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f383 8811 	msr	BASEPRI, r3
}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2001344c 	.word	0x2001344c
 8006c40:	20013448 	.word	0x20013448

08006c44 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c50:	f04f 0120 	mov.w	r1, #32
 8006c54:	f381 8811 	msr	BASEPRI, r1
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	4827      	ldr	r0, [pc, #156]	; (8006cf8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c5c:	f7ff f891 	bl	8005d82 <_PreparePacket>
 8006c60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f7ff f83e 	bl	8005ce8 <_EncodeStr>
 8006c6c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
 8006c72:	2301      	movs	r3, #1
 8006c74:	623b      	str	r3, [r7, #32]
 8006c76:	e00b      	b.n	8006c90 <SEGGER_SYSVIEW_Warn+0x4c>
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	6279      	str	r1, [r7, #36]	; 0x24
 8006c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	09db      	lsrs	r3, r3, #7
 8006c8e:	623b      	str	r3, [r7, #32]
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b7f      	cmp	r3, #127	; 0x7f
 8006c94:	d8f0      	bhi.n	8006c78 <SEGGER_SYSVIEW_Warn+0x34>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c9c:	6a3a      	ldr	r2, [r7, #32]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	2300      	movs	r3, #0
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e00b      	b.n	8006cc8 <SEGGER_SYSVIEW_Warn+0x84>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	1c59      	adds	r1, r3, #1
 8006cb8:	61f9      	str	r1, [r7, #28]
 8006cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	09db      	lsrs	r3, r3, #7
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ccc:	d8f0      	bhi.n	8006cb0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cde:	221a      	movs	r2, #26
 8006ce0:	68f9      	ldr	r1, [r7, #12]
 8006ce2:	6938      	ldr	r0, [r7, #16]
 8006ce4:	f7ff f93e 	bl	8005f64 <_SendPacket>
  RECORD_END();
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f383 8811 	msr	BASEPRI, r3
}
 8006cee:	bf00      	nop
 8006cf0:	3728      	adds	r7, #40	; 0x28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	2001344c 	.word	0x2001344c

08006cfc <memcmp>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	3901      	subs	r1, #1
 8006d00:	4402      	add	r2, r0
 8006d02:	4290      	cmp	r0, r2
 8006d04:	d101      	bne.n	8006d0a <memcmp+0xe>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e005      	b.n	8006d16 <memcmp+0x1a>
 8006d0a:	7803      	ldrb	r3, [r0, #0]
 8006d0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d10:	42a3      	cmp	r3, r4
 8006d12:	d001      	beq.n	8006d18 <memcmp+0x1c>
 8006d14:	1b18      	subs	r0, r3, r4
 8006d16:	bd10      	pop	{r4, pc}
 8006d18:	3001      	adds	r0, #1
 8006d1a:	e7f2      	b.n	8006d02 <memcmp+0x6>

08006d1c <memset>:
 8006d1c:	4402      	add	r2, r0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d100      	bne.n	8006d26 <memset+0xa>
 8006d24:	4770      	bx	lr
 8006d26:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2a:	e7f9      	b.n	8006d20 <memset+0x4>

08006d2c <__libc_init_array>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4d0d      	ldr	r5, [pc, #52]	; (8006d64 <__libc_init_array+0x38>)
 8006d30:	4c0d      	ldr	r4, [pc, #52]	; (8006d68 <__libc_init_array+0x3c>)
 8006d32:	1b64      	subs	r4, r4, r5
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	2600      	movs	r6, #0
 8006d38:	42a6      	cmp	r6, r4
 8006d3a:	d109      	bne.n	8006d50 <__libc_init_array+0x24>
 8006d3c:	4d0b      	ldr	r5, [pc, #44]	; (8006d6c <__libc_init_array+0x40>)
 8006d3e:	4c0c      	ldr	r4, [pc, #48]	; (8006d70 <__libc_init_array+0x44>)
 8006d40:	f000 f826 	bl	8006d90 <_init>
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	2600      	movs	r6, #0
 8006d4a:	42a6      	cmp	r6, r4
 8006d4c:	d105      	bne.n	8006d5a <__libc_init_array+0x2e>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d54:	4798      	blx	r3
 8006d56:	3601      	adds	r6, #1
 8006d58:	e7ee      	b.n	8006d38 <__libc_init_array+0xc>
 8006d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d5e:	4798      	blx	r3
 8006d60:	3601      	adds	r6, #1
 8006d62:	e7f2      	b.n	8006d4a <__libc_init_array+0x1e>
 8006d64:	08006ea4 	.word	0x08006ea4
 8006d68:	08006ea4 	.word	0x08006ea4
 8006d6c:	08006ea4 	.word	0x08006ea4
 8006d70:	08006ea8 	.word	0x08006ea8

08006d74 <memcpy>:
 8006d74:	440a      	add	r2, r1
 8006d76:	4291      	cmp	r1, r2
 8006d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d7c:	d100      	bne.n	8006d80 <memcpy+0xc>
 8006d7e:	4770      	bx	lr
 8006d80:	b510      	push	{r4, lr}
 8006d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8a:	4291      	cmp	r1, r2
 8006d8c:	d1f9      	bne.n	8006d82 <memcpy+0xe>
 8006d8e:	bd10      	pop	{r4, pc}

08006d90 <_init>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	bf00      	nop
 8006d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d96:	bc08      	pop	{r3}
 8006d98:	469e      	mov	lr, r3
 8006d9a:	4770      	bx	lr

08006d9c <_fini>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr
