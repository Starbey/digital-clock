
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08009e04  08009e04  00019e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a020  0800a020  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a028  0800a028  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001479c  20000074  0800a0a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014810  0800a0a4  00024810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ecc  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e72  00000000  00000000  00038fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118e  00000000  00000000  0003e510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b361  00000000  00000000  0003f69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba4b  00000000  00000000  0005a9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1c17  00000000  00000000  0007644a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006408  00000000  00000000  00118064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0011e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009dec 	.word	0x08009dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08009dec 	.word	0x08009dec

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200130f4 	.word	0x200130f4

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000b0 	.word	0x200000b0

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 fd54 	bl	8002124 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 fd49 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 fd3e 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 fd33 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 fd2a 	bl	8002124 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 fd24 	bl	8002124 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 fd1b 	bl	8002124 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f001 f9e9 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f001 f9e3 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f001 f9dd 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f001 f9d7 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f001 f9d1 	bl	8001be0 <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f9cb 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f001 f9c5 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 f9bf 	bl	8001be0 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f001 f9bc 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f001 f9b6 	bl	8001be0 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f001 f969 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f933 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fab5 	bl	8000dfc <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f99b 	bl	8000bcc <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 fa27 	bl	8000ce8 <MX_TIM1_Init>
  MX_TIM9_Init();
 800089a:	f000 fa75 	bl	8000d88 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)
 800089e:	4b73      	ldr	r3, [pc, #460]	; (8000a6c <main+0x1ec>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a72      	ldr	r2, [pc, #456]	; (8000a6c <main+0x1ec>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start(&htim1);
 80008aa:	4871      	ldr	r0, [pc, #452]	; (8000a70 <main+0x1f0>)
 80008ac:	f002 ff82 	bl	80037b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim9);
 80008b0:	4870      	ldr	r0, [pc, #448]	; (8000a74 <main+0x1f4>)
 80008b2:	f002 ff7f 	bl	80037b4 <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008b6:	f006 fdcb 	bl	8007450 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008ba:	f008 f87b 	bl	80089b4 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	200a      	movs	r0, #10
 80008c4:	f003 fd0a 	bl	80042dc <xQueueGenericCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <main+0x1f8>)
 80008cc:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008ce:	4b6a      	ldr	r3, [pc, #424]	; (8000a78 <main+0x1f8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10a      	bne.n	80008ec <main+0x6c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008e8:	bf00      	nop
 80008ea:	e7fe      	b.n	80008ea <main+0x6a>

  /*create timers */
  printTimerHandle = xTimerCreate("Print_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, printTimerCallback);
 80008ec:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <main+0x1fc>)
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f8:	4861      	ldr	r0, [pc, #388]	; (8000a80 <main+0x200>)
 80008fa:	f005 fe03 	bl	8006504 <xTimerCreate>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <main+0x204>)
 8000902:	6013      	str	r3, [r2, #0]

  alarmTimerHandle = xTimerCreate("Alarm_Timer", pdMS_TO_TICKS(ALARM_LEN), pdFALSE, NULL, alarmTimerCallback);
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <main+0x208>)
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2300      	movs	r3, #0
 800090a:	2200      	movs	r2, #0
 800090c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000910:	485e      	ldr	r0, [pc, #376]	; (8000a8c <main+0x20c>)
 8000912:	f005 fdf7 	bl	8006504 <xTimerCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a5d      	ldr	r2, [pc, #372]	; (8000a90 <main+0x210>)
 800091a:	6013      	str	r3, [r2, #0]
  alarmLedTimerHandle = xTimerCreate("LED_Timer", pdMS_TO_TICKS(ALARM_LED_PERIOD), pdTRUE, NULL, alarmLedTimerCallback);
 800091c:	4b5d      	ldr	r3, [pc, #372]	; (8000a94 <main+0x214>)
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000928:	485b      	ldr	r0, [pc, #364]	; (8000a98 <main+0x218>)
 800092a:	f005 fdeb 	bl	8006504 <xTimerCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a5a      	ldr	r2, [pc, #360]	; (8000a9c <main+0x21c>)
 8000932:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <main+0x220>)
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2302      	movs	r3, #2
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	22fa      	movs	r2, #250	; 0xfa
 8000940:	4958      	ldr	r1, [pc, #352]	; (8000aa4 <main+0x224>)
 8000942:	4859      	ldr	r0, [pc, #356]	; (8000aa8 <main+0x228>)
 8000944:	f004 f95e 	bl	8004c04 <xTaskCreate>
 8000948:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00a      	beq.n	8000966 <main+0xe6>
        __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	617b      	str	r3, [r7, #20]
    }
 8000962:	bf00      	nop
 8000964:	e7fe      	b.n	8000964 <main+0xe4>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000966:	4b51      	ldr	r3, [pc, #324]	; (8000aac <main+0x22c>)
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	2303      	movs	r3, #3
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	22fa      	movs	r2, #250	; 0xfa
 8000972:	494f      	ldr	r1, [pc, #316]	; (8000ab0 <main+0x230>)
 8000974:	484f      	ldr	r0, [pc, #316]	; (8000ab4 <main+0x234>)
 8000976:	f004 f945 	bl	8004c04 <xTaskCreate>
 800097a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00a      	beq.n	8000998 <main+0x118>
        __asm volatile
 8000982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	613b      	str	r3, [r7, #16]
    }
 8000994:	bf00      	nop
 8000996:	e7fe      	b.n	8000996 <main+0x116>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 8000998:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <main+0x238>)
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2302      	movs	r3, #2
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	22fa      	movs	r2, #250	; 0xfa
 80009a4:	4945      	ldr	r1, [pc, #276]	; (8000abc <main+0x23c>)
 80009a6:	4846      	ldr	r0, [pc, #280]	; (8000ac0 <main+0x240>)
 80009a8:	f004 f92c 	bl	8004c04 <xTaskCreate>
 80009ac:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00a      	beq.n	80009ca <main+0x14a>
        __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	60fb      	str	r3, [r7, #12]
    }
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <main+0x148>

  status = xTaskCreate(rtcSetTaskHandler, "RTC_Set_Task", 250, NULL, 2, &rtcSetTaskHandle);
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <main+0x244>)
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	2302      	movs	r3, #2
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	22fa      	movs	r2, #250	; 0xfa
 80009d6:	493c      	ldr	r1, [pc, #240]	; (8000ac8 <main+0x248>)
 80009d8:	483c      	ldr	r0, [pc, #240]	; (8000acc <main+0x24c>)
 80009da:	f004 f913 	bl	8004c04 <xTaskCreate>
 80009de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d00a      	beq.n	80009fc <main+0x17c>
        __asm volatile
 80009e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ea:	f383 8811 	msr	BASEPRI, r3
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	60bb      	str	r3, [r7, #8]
    }
 80009f8:	bf00      	nop
 80009fa:	e7fe      	b.n	80009fa <main+0x17a>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 80009fc:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <main+0x250>)
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	2302      	movs	r3, #2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	22fa      	movs	r2, #250	; 0xfa
 8000a08:	4932      	ldr	r1, [pc, #200]	; (8000ad4 <main+0x254>)
 8000a0a:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <main+0x258>)
 8000a0c:	f004 f8fa 	bl	8004c04 <xTaskCreate>
 8000a10:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d00a      	beq.n	8000a2e <main+0x1ae>
        __asm volatile
 8000a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1c:	f383 8811 	msr	BASEPRI, r3
 8000a20:	f3bf 8f6f 	isb	sy
 8000a24:	f3bf 8f4f 	dsb	sy
 8000a28:	607b      	str	r3, [r7, #4]
    }
 8000a2a:	bf00      	nop
 8000a2c:	e7fe      	b.n	8000a2c <main+0x1ac>

  status = xTaskCreate(alarmStartTaskHandler, "Alarm_Start_Task", 250, NULL, 3, &alarmStartTaskHandle);
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <main+0x25c>)
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2303      	movs	r3, #3
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	22fa      	movs	r2, #250	; 0xfa
 8000a3a:	4929      	ldr	r1, [pc, #164]	; (8000ae0 <main+0x260>)
 8000a3c:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <main+0x264>)
 8000a3e:	f004 f8e1 	bl	8004c04 <xTaskCreate>
 8000a42:	61f8      	str	r0, [r7, #28]
  configASSERT(status = pdPASS);
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]

  status = xTaskCreate(alarmBuzzerTaskHandler, "Alarm_Buzzer_Task", 250, NULL, 2, &alarmBuzzerTaskHandle);
 8000a48:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <main+0x268>)
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	22fa      	movs	r2, #250	; 0xfa
 8000a54:	4925      	ldr	r1, [pc, #148]	; (8000aec <main+0x26c>)
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <main+0x270>)
 8000a58:	f004 f8d4 	bl	8004c04 <xTaskCreate>
 8000a5c:	61f8      	str	r0, [r7, #28]
  configASSERT(status = pdPASS);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]

  lcdInit();
 8000a62:	f7ff fecf 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 8000a66:	f004 fc73 	bl	8005350 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <main+0x1ea>
 8000a6c:	e0001000 	.word	0xe0001000
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	200000f8 	.word	0x200000f8
 8000a78:	2000015c 	.word	0x2000015c
 8000a7c:	080013e9 	.word	0x080013e9
 8000a80:	08009e04 	.word	0x08009e04
 8000a84:	20000160 	.word	0x20000160
 8000a88:	08001a75 	.word	0x08001a75
 8000a8c:	08009e10 	.word	0x08009e10
 8000a90:	20000168 	.word	0x20000168
 8000a94:	08001ac9 	.word	0x08001ac9
 8000a98:	08009e1c 	.word	0x08009e1c
 8000a9c:	20000164 	.word	0x20000164
 8000aa0:	20000144 	.word	0x20000144
 8000aa4:	08009e28 	.word	0x08009e28
 8000aa8:	0800138d 	.word	0x0800138d
 8000aac:	20000140 	.word	0x20000140
 8000ab0:	08009e3c 	.word	0x08009e3c
 8000ab4:	08001335 	.word	0x08001335
 8000ab8:	20000148 	.word	0x20000148
 8000abc:	08009e48 	.word	0x08009e48
 8000ac0:	08001791 	.word	0x08001791
 8000ac4:	2000014c 	.word	0x2000014c
 8000ac8:	08009e58 	.word	0x08009e58
 8000acc:	08001895 	.word	0x08001895
 8000ad0:	20000150 	.word	0x20000150
 8000ad4:	08009e68 	.word	0x08009e68
 8000ad8:	08001955 	.word	0x08001955
 8000adc:	20000154 	.word	0x20000154
 8000ae0:	08009e78 	.word	0x08009e78
 8000ae4:	08001a09 	.word	0x08001a09
 8000ae8:	20000158 	.word	0x20000158
 8000aec:	08009e8c 	.word	0x08009e8c
 8000af0:	08001ae9 	.word	0x08001ae9

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 fcee 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <SystemClock_Config+0xd4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b54:	2309      	movs	r3, #9
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b70:	2354      	movs	r3, #84	; 0x54
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fb03 	bl	800218c <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b8c:	f000 fa48 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fd65 	bl	800267c <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000bb8:	f000 fa32 	bl	8001020 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b090      	sub	sp, #64	; 0x40
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000bd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2228      	movs	r2, #40	; 0x28
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 fc79 	bl	80094e4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000bf4:	4a3b      	ldr	r2, [pc, #236]	; (8000ce4 <MX_RTC_Init+0x118>)
 8000bf6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bf8:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bfe:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c00:	227f      	movs	r2, #127	; 0x7f
 8000c02:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c04:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c0a:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c1c:	4830      	ldr	r0, [pc, #192]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c1e:	f002 f859 	bl	8002cd4 <HAL_RTC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c28:	f000 f9fa 	bl	8001020 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4824      	ldr	r0, [pc, #144]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c50:	f002 f8b6 	bl	8002dc0 <HAL_RTC_SetTime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c5a:	f000 f9e1 	bl	8001020 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000c64:	2301      	movs	r3, #1
 8000c66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000c80:	f002 f996 	bl	8002fb0 <HAL_RTC_SetDate>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000c8a:	f000 f9c9 	bl	8001020 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 5;
 8000c96:	2305      	movs	r3, #5
 8000c98:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000ca6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000caa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000cac:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000cb0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_RTC_Init+0x114>)
 8000cca:	f002 fa45 	bl	8003158 <HAL_RTC_SetAlarm_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000cd4:	f000 f9a4 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3740      	adds	r7, #64	; 0x40
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000090 	.word	0x20000090
 8000ce4:	40002800 	.word	0x40002800

08000ce8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <MX_TIM1_Init+0x9c>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d0c:	2254      	movs	r2, #84	; 0x54
 8000d0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d30:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d32:	f002 fcf0 	bl	8003716 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f970 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d4e:	f002 fef5 	bl	8003b3c <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d58:	f000 f962 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_TIM1_Init+0x98>)
 8000d6a:	f003 f8f1 	bl	8003f50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d74:	f000 f954 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200000b0 	.word	0x200000b0
 8000d84:	40010000 	.word	0x40010000

08000d88 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000d9c:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <MX_TIM9_Init+0x70>)
 8000d9e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000da2:	2254      	movs	r2, #84	; 0x54
 8000da4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000dc2:	f002 fca8 	bl	8003716 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000dcc:	f000 f928 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_TIM9_Init+0x6c>)
 8000ddc:	f002 feae 	bl	8003b3c <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000de6:	f000 f91b 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000f8 	.word	0x200000f8
 8000df8:	40014000 	.word	0x40014000

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b53      	ldr	r3, [pc, #332]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b45      	ldr	r3, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b3e      	ldr	r3, [pc, #248]	; (8000f70 <MX_GPIO_Init+0x174>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|RED_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f240 6103 	movw	r1, #1539	; 0x603
 8000e88:	483a      	ldr	r0, [pc, #232]	; (8000f74 <MX_GPIO_Init+0x178>)
 8000e8a:	f001 f94b 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|BUZZER_Pin|E_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f248 0190 	movw	r1, #32912	; 0x8090
 8000e94:	4838      	ldr	r0, [pc, #224]	; (8000f78 <MX_GPIO_Init+0x17c>)
 8000e96:	f001 f945 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2181      	movs	r1, #129	; 0x81
 8000e9e:	4837      	ldr	r0, [pc, #220]	; (8000f7c <MX_GPIO_Init+0x180>)
 8000ea0:	f001 f940 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALARM_TOGGLE_Pin */
  GPIO_InitStruct.Pin = ALARM_TOGGLE_Pin;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALARM_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <MX_GPIO_Init+0x178>)
 8000eba:	f000 ff97 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin RED_LED_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|RED_LED_Pin|GPIO_PIN_10;
 8000ebe:	f240 6303 	movw	r3, #1539	; 0x603
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4827      	ldr	r0, [pc, #156]	; (8000f74 <MX_GPIO_Init+0x178>)
 8000ed8:	f000 ff88 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000edc:	230c      	movs	r3, #12
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eec:	2307      	movs	r3, #7
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <MX_GPIO_Init+0x17c>)
 8000ef8:	f000 ff78 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin BUZZER_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|BUZZER_Pin|E_Pin;
 8000efc:	f248 0390 	movw	r3, #32912	; 0x8090
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <MX_GPIO_Init+0x17c>)
 8000f16:	f000 ff69 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|DEC_Pin;
 8000f1a:	2360      	movs	r3, #96	; 0x60
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_GPIO_Init+0x17c>)
 8000f2e:	f000 ff5d 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000f32:	2381      	movs	r3, #129	; 0x81
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_GPIO_Init+0x180>)
 8000f4a:	f000 ff4f 	bl	8001dec <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SELECT_Pin;
 8000f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_GPIO_Init+0x180>)
 8000f64:	f000 ff42 	bl	8001dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400

08000f80 <delayUs>:

/* USER CODE BEGIN 4 */

void delayUs(uint16_t us){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <delayUs+0x30>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim9) < us);
 8000f92:	bf00      	nop
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <delayUs+0x30>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3f9      	bcc.n	8000f94 <delayUs+0x14>
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200000f8 	.word	0x200000f8

08000fb4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if (alarmOn){
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d010      	beq.n	8000fe6 <HAL_RTC_AlarmAEventCallback+0x32>
		BaseType_t isYieldRequired;
		isYieldRequired = xTaskResumeFromISR(alarmStartTaskHandle);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f915 	bl	80051f8 <xTaskResumeFromISR>
 8000fce:	60f8      	str	r0, [r7, #12]
		portYIELD_FROM_ISR(isYieldRequired);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_RTC_AlarmAEventCallback+0x32>
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_RTC_AlarmAEventCallback+0x44>)
 8000fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	f3bf 8f6f 	isb	sy
	}

}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000154 	.word	0x20000154
 8000ff8:	e000ed04 	.word	0xe000ed04

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fdc7 	bl	8001ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000c00 	.word	0x40000c00

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_MspInit+0x50>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_MspInit+0x50>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_MspInit+0x50>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_MspInit+0x50>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_MspInit+0x50>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <HAL_MspInit+0x50>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	2003      	movs	r0, #3
 800106c:	f000 fe89 	bl	8001d82 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8001070:	f005 fe72 	bl	8006d58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_RTC_MspInit+0x60>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d119      	bne.n	80010d6 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010a2:	2302      	movs	r3, #2
 80010a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010aa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fd21 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010bc:	f7ff ffb0 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_RTC_MspInit+0x64>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	210f      	movs	r1, #15
 80010ca:	2029      	movs	r0, #41	; 0x29
 80010cc:	f000 fe64 	bl	8001d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010d0:	2029      	movs	r0, #41	; 0x29
 80010d2:	f000 fe7d 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
    /* enable RTC alarm IRQ in NVIC */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010d6:	bf00      	nop
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40002800 	.word	0x40002800
 80010e4:	42470e3c 	.word	0x42470e3c

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <HAL_TIM_Base_MspInit+0x64>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10e      	bne.n	8001118 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001116:	e012      	b.n	800113e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x6c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10d      	bne.n	800113e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0x68>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40023800 	.word	0x40023800
 8001154:	40014000 	.word	0x40014000

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4b33      	ldr	r3, [pc, #204]	; (800123c <HAL_InitTick+0xe4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a32      	ldr	r2, [pc, #200]	; (800123c <HAL_InitTick+0xe4>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <HAL_InitTick+0xe4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001184:	f107 0210 	add.w	r2, r7, #16
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fc80 	bl	8002a94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	2b00      	cmp	r3, #0
 800119c:	d103      	bne.n	80011a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119e:	f001 fc65 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80011a2:	6378      	str	r0, [r7, #52]	; 0x34
 80011a4:	e004      	b.n	80011b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a6:	f001 fc61 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 80011aa:	4603      	mov	r3, r0
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_InitTick+0xe8>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3b01      	subs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_InitTick+0xec>)
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_InitTick+0xf0>)
 80011c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_InitTick+0xec>)
 80011c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ca:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_InitTick+0xec>)
 80011ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <HAL_InitTick+0xec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_InitTick+0xec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_InitTick+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80011e4:	4817      	ldr	r0, [pc, #92]	; (8001244 <HAL_InitTick+0xec>)
 80011e6:	f002 fa96 	bl	8003716 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d11b      	bne.n	8001230 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <HAL_InitTick+0xec>)
 80011fa:	f002 fb35 	bl	8003868 <HAL_TIM_Base_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001208:	2b00      	cmp	r3, #0
 800120a:	d111      	bne.n	8001230 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f000 fddf 	bl	8001dd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d808      	bhi.n	800122a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f000 fdbb 	bl	8001d98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_InitTick+0xf4>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e002      	b.n	8001230 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001230:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001234:	4618      	mov	r0, r3
 8001236:	3738      	adds	r7, #56	; 0x38
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	431bde83 	.word	0x431bde83
 8001244:	200001c8 	.word	0x200001c8
 8001248:	40000c00 	.word	0x40000c00
 800124c:	20000014 	.word	0x20000014

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <RTC_Alarm_IRQHandler+0x10>)
 8001282:	f002 f93b 	bl	80034fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000090 	.word	0x20000090

08001290 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM5_IRQHandler+0x10>)
 8001296:	f002 fb49 	bl	800392c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001c8 	.word	0x200001c8

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f008 f90e 	bl	80094f4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20018000 	.word	0x20018000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000210 	.word	0x20000210
 800130c:	20014810 	.word	0x20014810

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <printTaskHandler>:

static void handleSetTime(RTC_TimeTypeDef *setTime);
static void handleSetDate(RTC_DateTypeDef *setDate);
static void handleSelect(uint8_t numOptions);

void printTaskHandler(void *parameters){
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	uint32_t *str;

	while(1){
		/* print top row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <printTaskHandler+0x54>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f107 010c 	add.w	r1, r7, #12
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	4618      	mov	r0, r3
 800134a:	f003 f9e9 	bl	8004720 <xQueueReceive>
		lcdClear();
 800134e:	f7ff fa2e 	bl	80007ae <lcdClear>
		lcdMoveCursor(0, 0);
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fa07 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fa31 	bl	80007c4 <lcdSendString>

		/* print bottom row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <printTaskHandler+0x54>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f107 010c 	add.w	r1, r7, #12
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f9d6 	bl	8004720 <xQueueReceive>
		lcdMoveCursor(1, 0);
 8001374:	2100      	movs	r1, #0
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff f9f6 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fa20 	bl	80007c4 <lcdSendString>
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001384:	e7da      	b.n	800133c <printTaskHandler+0x8>
 8001386:	bf00      	nop
 8001388:	2000015c 	.word	0x2000015c

0800138c <startTimerTaskHandler>:
	}
}

void startTimerTaskHandler(void *parameters){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b085      	sub	sp, #20
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
	while(1){
		xTimerStart(printTimerHandle, portMAX_DELAY);
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <startTimerTaskHandler+0x48>)
 8001396:	681c      	ldr	r4, [r3, #0]
 8001398:	f004 f94a 	bl	8005630 <xTaskGetTickCount>
 800139c:	4602      	mov	r2, r0
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	2101      	movs	r1, #1
 80013a8:	4620      	mov	r0, r4
 80013aa:	f005 f905 	bl	80065b8 <xTimerGenericCommand>
		HAL_RTC_GetAlarm(&hrtc, &rtcAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 80013ae:	2300      	movs	r3, #0
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	4908      	ldr	r1, [pc, #32]	; (80013d8 <startTimerTaskHandler+0x4c>)
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <startTimerTaskHandler+0x50>)
 80013b8:	f002 f810 	bl	80033dc <HAL_RTC_GetAlarm>
		vTaskSuspend(alarmBuzzerTaskHandle);
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <startTimerTaskHandler+0x54>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fda7 	bl	8004f14 <vTaskSuspend>
		vTaskSuspend(startTimerTaskHandle);
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <startTimerTaskHandler+0x58>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fda2 	bl	8004f14 <vTaskSuspend>
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80013d0:	e7e0      	b.n	8001394 <startTimerTaskHandler+0x8>
 80013d2:	bf00      	nop
 80013d4:	20000160 	.word	0x20000160
 80013d8:	200001a0 	.word	0x200001a0
 80013dc:	20000090 	.word	0x20000090
 80013e0:	20000158 	.word	0x20000158
 80013e4:	20000144 	.word	0x20000144

080013e8 <printTimerCallback>:
	}
}

void printTimerCallback(TimerHandle_t xTimer){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	6078      	str	r0, [r7, #4]
	switch(currMode){
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <printTimerCallback+0x64>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d01a      	beq.n	800142e <printTimerCallback+0x46>
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	dc22      	bgt.n	8001442 <printTimerCallback+0x5a>
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <printTimerCallback+0x1e>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d00a      	beq.n	800141a <printTimerCallback+0x32>

	case mSetAlarm:
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
		break;
	}
}
 8001404:	e01d      	b.n	8001442 <printTimerCallback+0x5a>
		xTaskNotify(rtcUpdateTaskHandle, 0, eNoAction);
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <printTimerCallback+0x68>)
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	f004 fe90 	bl	8006138 <xTaskGenericNotify>
		break;
 8001418:	e013      	b.n	8001442 <printTimerCallback+0x5a>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <printTimerCallback+0x6c>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2300      	movs	r3, #0
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	f004 fe86 	bl	8006138 <xTaskGenericNotify>
		break;
 800142c:	e009      	b.n	8001442 <printTimerCallback+0x5a>
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <printTimerCallback+0x70>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	f004 fe7c 	bl	8006138 <xTaskGenericNotify>
		break;
 8001440:	bf00      	nop
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000016c 	.word	0x2000016c
 8001450:	20000148 	.word	0x20000148
 8001454:	2000014c 	.word	0x2000014c
 8001458:	20000150 	.word	0x20000150

0800145c <vApplicationIdleHook>:

void vApplicationIdleHook(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	4829      	ldr	r0, [pc, #164]	; (800150c <vApplicationIdleHook+0xb0>)
 8001466:	f000 fe45 	bl	80020f4 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d11a      	bne.n	80014a6 <vApplicationIdleHook+0x4a>
		currSet = sHour;
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <vApplicationIdleHook+0xb4>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]

		currMode++;
 8001476:	4b27      	ldr	r3, [pc, #156]	; (8001514 <vApplicationIdleHook+0xb8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <vApplicationIdleHook+0xb8>)
 8001480:	701a      	strb	r2, [r3, #0]
		currMode = currMode % 3;
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <vApplicationIdleHook+0xb8>)
 8001484:	781a      	ldrb	r2, [r3, #0]
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <vApplicationIdleHook+0xbc>)
 8001488:	fba3 1302 	umull	r1, r3, r3, r2
 800148c:	0859      	lsrs	r1, r3, #1
 800148e:	460b      	mov	r3, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	440b      	add	r3, r1
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <vApplicationIdleHook+0xb8>)
 800149a:	701a      	strb	r2, [r3, #0]

		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 800149c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014a0:	f000 fb9e 	bl	8001be0 <HAL_Delay>
 80014a4:	e01c      	b.n	80014e0 <vApplicationIdleHook+0x84>
	}

	else if (currMode == mSetRtc) {
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <vApplicationIdleHook+0xb8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10e      	bne.n	80014cc <vApplicationIdleHook+0x70>
		if(currSet <= 2){
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <vApplicationIdleHook+0xb4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d803      	bhi.n	80014be <vApplicationIdleHook+0x62>
			handleSetTime(&setTime);
 80014b6:	4819      	ldr	r0, [pc, #100]	; (800151c <vApplicationIdleHook+0xc0>)
 80014b8:	f000 f83a 	bl	8001530 <handleSetTime>
 80014bc:	e002      	b.n	80014c4 <vApplicationIdleHook+0x68>
		}
		else {
			handleSetDate(&setDate);
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <vApplicationIdleHook+0xc4>)
 80014c0:	f000 f8bc 	bl	800163c <handleSetDate>
		}
		handleSelect(6);
 80014c4:	2006      	movs	r0, #6
 80014c6:	f000 f939 	bl	800173c <handleSelect>
 80014ca:	e009      	b.n	80014e0 <vApplicationIdleHook+0x84>
	}

	else if (currMode == mSetAlarm){
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <vApplicationIdleHook+0xb8>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d105      	bne.n	80014e0 <vApplicationIdleHook+0x84>
		handleSetTime(& (rtcAlarm.AlarmTime) );
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <vApplicationIdleHook+0xc8>)
 80014d6:	f000 f82b 	bl	8001530 <handleSetTime>
		handleSelect(3);
 80014da:	2003      	movs	r0, #3
 80014dc:	f000 f92e 	bl	800173c <handleSelect>
	}

	if (HAL_GPIO_ReadPin(ALARM_TOGGLE_GPIO_Port, ALARM_TOGGLE_Pin) == GPIO_PIN_RESET){
 80014e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <vApplicationIdleHook+0xcc>)
 80014e6:	f000 fe05 	bl	80020f4 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10a      	bne.n	8001506 <vApplicationIdleHook+0xaa>
		alarmOn ^= 0x1; // flip first bit
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <vApplicationIdleHook+0xd0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <vApplicationIdleHook+0xd0>)
 80014fc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 80014fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001502:	f000 fb6d 	bl	8001be0 <HAL_Delay>
	}
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40020400 	.word	0x40020400
 8001510:	2000016d 	.word	0x2000016d
 8001514:	2000016c 	.word	0x2000016c
 8001518:	aaaaaaab 	.word	0xaaaaaaab
 800151c:	2000018c 	.word	0x2000018c
 8001520:	20000188 	.word	0x20000188
 8001524:	200001a0 	.word	0x200001a0
 8001528:	40020800 	.word	0x40020800
 800152c:	20000000 	.word	0x20000000

08001530 <handleSetTime>:

static void handleSetTime(RTC_TimeTypeDef *setTime){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 8001538:	2120      	movs	r1, #32
 800153a:	483e      	ldr	r0, [pc, #248]	; (8001634 <handleSetTime+0x104>)
 800153c:	f000 fdda 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d135      	bne.n	80015b2 <handleSetTime+0x82>
		switch(currSet){
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <handleSetTime+0x108>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d01c      	beq.n	8001588 <handleSetTime+0x58>
 800154e:	2b02      	cmp	r3, #2
 8001550:	dc2a      	bgt.n	80015a8 <handleSetTime+0x78>
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <handleSetTime+0x2c>
 8001556:	2b01      	cmp	r3, #1
 8001558:	d00b      	beq.n	8001572 <handleSetTime+0x42>
 800155a:	e025      	b.n	80015a8 <handleSetTime+0x78>
		case sHour:
			if(setTime->Hours < 23) setTime->Hours++;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b16      	cmp	r3, #22
 8001562:	d81c      	bhi.n	800159e <handleSetTime+0x6e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	701a      	strb	r2, [r3, #0]
			break;
 8001570:	e015      	b.n	800159e <handleSetTime+0x6e>

		case sMin:
			if(setTime->Minutes < 59) setTime->Minutes++;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	2b3a      	cmp	r3, #58	; 0x3a
 8001578:	d813      	bhi.n	80015a2 <handleSetTime+0x72>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	3301      	adds	r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	705a      	strb	r2, [r3, #1]
			break;
 8001586:	e00c      	b.n	80015a2 <handleSetTime+0x72>

		case sSec:
			if(setTime->Seconds < 59) setTime->Seconds++;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	2b3a      	cmp	r3, #58	; 0x3a
 800158e:	d80a      	bhi.n	80015a6 <handleSetTime+0x76>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	3301      	adds	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	709a      	strb	r2, [r3, #2]
			break;
 800159c:	e003      	b.n	80015a6 <handleSetTime+0x76>
			break;
 800159e:	bf00      	nop
 80015a0:	e002      	b.n	80015a8 <handleSetTime+0x78>
			break;
 80015a2:	bf00      	nop
 80015a4:	e000      	b.n	80015a8 <handleSetTime+0x78>
			break;
 80015a6:	bf00      	nop
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80015a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015ac:	f000 fb18 	bl	8001be0 <HAL_Delay>
			break;
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 80015b0:	e03b      	b.n	800162a <handleSetTime+0xfa>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	481f      	ldr	r0, [pc, #124]	; (8001634 <handleSetTime+0x104>)
 80015b6:	f000 fd9d 	bl	80020f4 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d134      	bne.n	800162a <handleSetTime+0xfa>
		switch (currSet){
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <handleSetTime+0x108>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d01c      	beq.n	8001602 <handleSetTime+0xd2>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc2a      	bgt.n	8001622 <handleSetTime+0xf2>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <handleSetTime+0xa6>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d00b      	beq.n	80015ec <handleSetTime+0xbc>
 80015d4:	e025      	b.n	8001622 <handleSetTime+0xf2>
			if(setTime->Hours > 0) setTime->Hours--;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01c      	beq.n	8001618 <handleSetTime+0xe8>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	701a      	strb	r2, [r3, #0]
			break;
 80015ea:	e015      	b.n	8001618 <handleSetTime+0xe8>
			if(setTime->Minutes > 0) setTime->Minutes--;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <handleSetTime+0xec>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	705a      	strb	r2, [r3, #1]
			break;
 8001600:	e00c      	b.n	800161c <handleSetTime+0xec>
			if(setTime->Seconds > 0) setTime->Seconds--;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	789b      	ldrb	r3, [r3, #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00a      	beq.n	8001620 <handleSetTime+0xf0>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	3b01      	subs	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	709a      	strb	r2, [r3, #2]
			break;
 8001616:	e003      	b.n	8001620 <handleSetTime+0xf0>
			break;
 8001618:	bf00      	nop
 800161a:	e002      	b.n	8001622 <handleSetTime+0xf2>
			break;
 800161c:	bf00      	nop
 800161e:	e000      	b.n	8001622 <handleSetTime+0xf2>
			break;
 8001620:	bf00      	nop
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 8001622:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001626:	f000 fadb 	bl	8001be0 <HAL_Delay>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000
 8001638:	2000016d 	.word	0x2000016d

0800163c <handleSetDate>:

static void handleSetDate(RTC_DateTypeDef *setDate){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 8001644:	2120      	movs	r1, #32
 8001646:	483b      	ldr	r0, [pc, #236]	; (8001734 <handleSetDate+0xf8>)
 8001648:	f000 fd54 	bl	80020f4 <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	2b01      	cmp	r3, #1
 8001650:	d12f      	bne.n	80016b2 <handleSetDate+0x76>
		switch (currSet){
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <handleSetDate+0xfc>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d01c      	beq.n	8001694 <handleSetDate+0x58>
 800165a:	2b05      	cmp	r3, #5
 800165c:	dc24      	bgt.n	80016a8 <handleSetDate+0x6c>
 800165e:	2b03      	cmp	r3, #3
 8001660:	d002      	beq.n	8001668 <handleSetDate+0x2c>
 8001662:	2b04      	cmp	r3, #4
 8001664:	d00b      	beq.n	800167e <handleSetDate+0x42>
 8001666:	e01f      	b.n	80016a8 <handleSetDate+0x6c>
		case sMonth:
			if(setDate->Month < 11) setDate->Month++;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	2b0a      	cmp	r3, #10
 800166e:	d818      	bhi.n	80016a2 <handleSetDate+0x66>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	785b      	ldrb	r3, [r3, #1]
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	705a      	strb	r2, [r3, #1]
			break;
 800167c:	e011      	b.n	80016a2 <handleSetDate+0x66>

		case sDay:
			if(setDate->Date < 30) setDate->Date++;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	789b      	ldrb	r3, [r3, #2]
 8001682:	2b1d      	cmp	r3, #29
 8001684:	d80f      	bhi.n	80016a6 <handleSetDate+0x6a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	789b      	ldrb	r3, [r3, #2]
 800168a:	3301      	adds	r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	709a      	strb	r2, [r3, #2]
			break;
 8001692:	e008      	b.n	80016a6 <handleSetDate+0x6a>

		case sYear:
			if(setDate->Year < 998) setDate->Year++;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	3301      	adds	r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	70da      	strb	r2, [r3, #3]
			break;
 80016a0:	e002      	b.n	80016a8 <handleSetDate+0x6c>
			break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <handleSetDate+0x6c>
			break;
 80016a6:	bf00      	nop
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80016a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ac:	f000 fa98 	bl	8001be0 <HAL_Delay>
			break;
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 80016b0:	e03b      	b.n	800172a <handleSetDate+0xee>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <handleSetDate+0xf8>)
 80016b6:	f000 fd1d 	bl	80020f4 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d134      	bne.n	800172a <handleSetDate+0xee>
		switch(currSet){
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <handleSetDate+0xfc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d01c      	beq.n	8001702 <handleSetDate+0xc6>
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	dc2a      	bgt.n	8001722 <handleSetDate+0xe6>
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d002      	beq.n	80016d6 <handleSetDate+0x9a>
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00b      	beq.n	80016ec <handleSetDate+0xb0>
 80016d4:	e025      	b.n	8001722 <handleSetDate+0xe6>
			if(setDate->Month > 1) setDate->Month--;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d91c      	bls.n	8001718 <handleSetDate+0xdc>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	705a      	strb	r2, [r3, #1]
			break;
 80016ea:	e015      	b.n	8001718 <handleSetDate+0xdc>
			if(setDate->Date > 1) setDate->Date--;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d913      	bls.n	800171c <handleSetDate+0xe0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	709a      	strb	r2, [r3, #2]
			break;
 8001700:	e00c      	b.n	800171c <handleSetDate+0xe0>
			if(setDate->Year > 0) setDate->Year--;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <handleSetDate+0xe4>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	3b01      	subs	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	70da      	strb	r2, [r3, #3]
			break;
 8001716:	e003      	b.n	8001720 <handleSetDate+0xe4>
			break;
 8001718:	bf00      	nop
 800171a:	e002      	b.n	8001722 <handleSetDate+0xe6>
			break;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <handleSetDate+0xe6>
			break;
 8001720:	bf00      	nop
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 8001722:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001726:	f000 fa5b 	bl	8001be0 <HAL_Delay>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020000 	.word	0x40020000
 8001738:	2000016d 	.word	0x2000016d

0800173c <handleSelect>:

static void handleSelect(uint8_t numOptions){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET){
 8001746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <handleSelect+0x4c>)
 800174c:	f000 fcd2 	bl	80020f4 <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d114      	bne.n	8001780 <handleSelect+0x44>
		currSet++;
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <handleSelect+0x50>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <handleSelect+0x50>)
 8001760:	701a      	strb	r2, [r3, #0]
		currSet = currSet % numOptions;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <handleSelect+0x50>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	fbb3 f1f2 	udiv	r1, r3, r2
 800176c:	fb01 f202 	mul.w	r2, r1, r2
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <handleSelect+0x50>)
 8001776:	701a      	strb	r2, [r3, #0]

		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001778:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800177c:	f000 fa30 	bl	8001be0 <HAL_Delay>
	}
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020400 	.word	0x40020400
 800178c:	2000016d 	.word	0x2000016d

08001790 <rtcUpdateTaskHandler>:

void rtcUpdateTaskHandler(void *parameters){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af02      	add	r7, sp, #8
 8001796:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f004 fc3f 	bl	8006028 <xTaskGenericNotifyWait>

		memset( &rtcDate,0,sizeof(rtcDate) );
 80017aa:	2204      	movs	r2, #4
 80017ac:	2100      	movs	r1, #0
 80017ae:	482f      	ldr	r0, [pc, #188]	; (800186c <rtcUpdateTaskHandler+0xdc>)
 80017b0:	f007 fe98 	bl	80094e4 <memset>
		memset( &rtcTime,0,sizeof(rtcTime) );
 80017b4:	2214      	movs	r2, #20
 80017b6:	2100      	movs	r1, #0
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <rtcUpdateTaskHandler+0xe0>)
 80017ba:	f007 fe93 	bl	80094e4 <memset>

		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80017be:	2200      	movs	r2, #0
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <rtcUpdateTaskHandler+0xe0>)
 80017c2:	482c      	ldr	r0, [pc, #176]	; (8001874 <rtcUpdateTaskHandler+0xe4>)
 80017c4:	f001 fb96 	bl	8002ef4 <HAL_RTC_GetTime>
		HAL_RTC_GetTime(&hrtc, &setTime, RTC_FORMAT_BIN); // sets time for "set" mode
 80017c8:	2200      	movs	r2, #0
 80017ca:	492b      	ldr	r1, [pc, #172]	; (8001878 <rtcUpdateTaskHandler+0xe8>)
 80017cc:	4829      	ldr	r0, [pc, #164]	; (8001874 <rtcUpdateTaskHandler+0xe4>)
 80017ce:	f001 fb91 	bl	8002ef4 <HAL_RTC_GetTime>

		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80017d2:	2200      	movs	r2, #0
 80017d4:	4925      	ldr	r1, [pc, #148]	; (800186c <rtcUpdateTaskHandler+0xdc>)
 80017d6:	4827      	ldr	r0, [pc, #156]	; (8001874 <rtcUpdateTaskHandler+0xe4>)
 80017d8:	f001 fc6e 	bl	80030b8 <HAL_RTC_GetDate>
		HAL_RTC_GetDate(&hrtc, &setDate, RTC_FORMAT_BIN); // sets date for "set" mode
 80017dc:	2200      	movs	r2, #0
 80017de:	4927      	ldr	r1, [pc, #156]	; (800187c <rtcUpdateTaskHandler+0xec>)
 80017e0:	4824      	ldr	r0, [pc, #144]	; (8001874 <rtcUpdateTaskHandler+0xe4>)
 80017e2:	f001 fc69 	bl	80030b8 <HAL_RTC_GetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80017e6:	2228      	movs	r2, #40	; 0x28
 80017e8:	2100      	movs	r1, #0
 80017ea:	4825      	ldr	r0, [pc, #148]	; (8001880 <rtcUpdateTaskHandler+0xf0>)
 80017ec:	f007 fe7a 	bl	80094e4 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <rtcUpdateTaskHandler+0xe0>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <rtcUpdateTaskHandler+0xe0>)
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <rtcUpdateTaskHandler+0xe0>)
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	460b      	mov	r3, r1
 8001804:	491f      	ldr	r1, [pc, #124]	; (8001884 <rtcUpdateTaskHandler+0xf4>)
 8001806:	481e      	ldr	r0, [pc, #120]	; (8001880 <rtcUpdateTaskHandler+0xf0>)
 8001808:	f007 fe3c 	bl	8009484 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <rtcUpdateTaskHandler+0xf8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f007 fdc7 	bl	80093a4 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <rtcUpdateTaskHandler+0xfc>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	4919      	ldr	r1, [pc, #100]	; (8001888 <rtcUpdateTaskHandler+0xf8>)
 8001822:	f002 fdcd 	bl	80043c0 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001826:	2228      	movs	r2, #40	; 0x28
 8001828:	2100      	movs	r1, #0
 800182a:	4815      	ldr	r0, [pc, #84]	; (8001880 <rtcUpdateTaskHandler+0xf0>)
 800182c:	f007 fe5a 	bl	80094e4 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <rtcUpdateTaskHandler+0xdc>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	461a      	mov	r2, r3
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <rtcUpdateTaskHandler+0xdc>)
 8001838:	789b      	ldrb	r3, [r3, #2]
 800183a:	4619      	mov	r1, r3
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <rtcUpdateTaskHandler+0xdc>)
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	4911      	ldr	r1, [pc, #68]	; (8001890 <rtcUpdateTaskHandler+0x100>)
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <rtcUpdateTaskHandler+0xf0>)
 800184c:	f007 fe1a 	bl	8009484 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <rtcUpdateTaskHandler+0xf8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f007 fda5 	bl	80093a4 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <rtcUpdateTaskHandler+0xfc>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	4908      	ldr	r1, [pc, #32]	; (8001888 <rtcUpdateTaskHandler+0xf8>)
 8001866:	f002 fdab 	bl	80043c0 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800186a:	e795      	b.n	8001798 <rtcUpdateTaskHandler+0x8>
 800186c:	20000170 	.word	0x20000170
 8001870:	20000174 	.word	0x20000174
 8001874:	20000090 	.word	0x20000090
 8001878:	2000018c 	.word	0x2000018c
 800187c:	20000188 	.word	0x20000188
 8001880:	20000214 	.word	0x20000214
 8001884:	08009ea0 	.word	0x08009ea0
 8001888:	20000008 	.word	0x20000008
 800188c:	2000015c 	.word	0x2000015c
 8001890:	08009eb0 	.word	0x08009eb0

08001894 <rtcSetTaskHandler>:

	}
}

void rtcSetTaskHandler(void *parameters){
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af02      	add	r7, sp, #8
 800189a:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2300      	movs	r3, #0
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2000      	movs	r0, #0
 80018aa:	f004 fbbd 	bl	8006028 <xTaskGenericNotifyWait>

		HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 80018ae:	2200      	movs	r2, #0
 80018b0:	4920      	ldr	r1, [pc, #128]	; (8001934 <rtcSetTaskHandler+0xa0>)
 80018b2:	4821      	ldr	r0, [pc, #132]	; (8001938 <rtcSetTaskHandler+0xa4>)
 80018b4:	f001 fa84 	bl	8002dc0 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN);
 80018b8:	2200      	movs	r2, #0
 80018ba:	4920      	ldr	r1, [pc, #128]	; (800193c <rtcSetTaskHandler+0xa8>)
 80018bc:	481e      	ldr	r0, [pc, #120]	; (8001938 <rtcSetTaskHandler+0xa4>)
 80018be:	f001 fb77 	bl	8002fb0 <HAL_RTC_SetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80018c2:	2228      	movs	r2, #40	; 0x28
 80018c4:	2100      	movs	r1, #0
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <rtcSetTaskHandler+0xac>)
 80018c8:	f007 fe0c 	bl	80094e4 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",setTime.Hours, setTime.Minutes, setTime.Seconds);
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <rtcSetTaskHandler+0xa0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <rtcSetTaskHandler+0xa0>)
 80018d4:	785b      	ldrb	r3, [r3, #1]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <rtcSetTaskHandler+0xa0>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	460b      	mov	r3, r1
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <rtcSetTaskHandler+0xb0>)
 80018e2:	4817      	ldr	r0, [pc, #92]	; (8001940 <rtcSetTaskHandler+0xac>)
 80018e4:	f007 fdce 	bl	8009484 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <rtcSetTaskHandler+0xb4>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	4916      	ldr	r1, [pc, #88]	; (800194c <rtcSetTaskHandler+0xb8>)
 80018f4:	f002 fd64 	bl	80043c0 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80018f8:	2228      	movs	r2, #40	; 0x28
 80018fa:	2100      	movs	r1, #0
 80018fc:	4810      	ldr	r0, [pc, #64]	; (8001940 <rtcSetTaskHandler+0xac>)
 80018fe:	f007 fdf1 	bl	80094e4 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", setDate.Month, setDate.Date, 2000 + setDate.Year);
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <rtcSetTaskHandler+0xa8>)
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	461a      	mov	r2, r3
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <rtcSetTaskHandler+0xa8>)
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	4619      	mov	r1, r3
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <rtcSetTaskHandler+0xa8>)
 8001910:	78db      	ldrb	r3, [r3, #3]
 8001912:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	460b      	mov	r3, r1
 800191a:	490d      	ldr	r1, [pc, #52]	; (8001950 <rtcSetTaskHandler+0xbc>)
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <rtcSetTaskHandler+0xac>)
 800191e:	f007 fdb1 	bl	8009484 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <rtcSetTaskHandler+0xb4>)
 8001924:	6818      	ldr	r0, [r3, #0]
 8001926:	2300      	movs	r3, #0
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <rtcSetTaskHandler+0xb8>)
 800192e:	f002 fd47 	bl	80043c0 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001932:	e7b3      	b.n	800189c <rtcSetTaskHandler+0x8>
 8001934:	2000018c 	.word	0x2000018c
 8001938:	20000090 	.word	0x20000090
 800193c:	20000188 	.word	0x20000188
 8001940:	2000023c 	.word	0x2000023c
 8001944:	08009ea0 	.word	0x08009ea0
 8001948:	2000015c 	.word	0x2000015c
 800194c:	2000000c 	.word	0x2000000c
 8001950:	08009eb0 	.word	0x08009eb0

08001954 <alarmSetTaskHandler>:

	}
}

void alarmSetTaskHandler(void *parameters){
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af02      	add	r7, sp, #8
 800195a:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	2000      	movs	r0, #0
 800196a:	f004 fb5d 	bl	8006028 <xTaskGenericNotifyWait>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <alarmSetTaskHandler+0x90>)
 8001974:	f007 fdb6 	bl	80094e4 <memset>

		HAL_RTC_SetAlarm_IT(&hrtc, &rtcAlarm, RTC_FORMAT_BIN); // update alarm
 8001978:	2200      	movs	r2, #0
 800197a:	491b      	ldr	r1, [pc, #108]	; (80019e8 <alarmSetTaskHandler+0x94>)
 800197c:	481b      	ldr	r0, [pc, #108]	; (80019ec <alarmSetTaskHandler+0x98>)
 800197e:	f001 fbeb 	bl	8003158 <HAL_RTC_SetAlarm_IT>

		if (alarmOn){
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <alarmSetTaskHandler+0x9c>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <alarmSetTaskHandler+0x40>
			sprintf( (char*) strBuffer, "Alarm ON" );
 800198a:	491a      	ldr	r1, [pc, #104]	; (80019f4 <alarmSetTaskHandler+0xa0>)
 800198c:	4815      	ldr	r0, [pc, #84]	; (80019e4 <alarmSetTaskHandler+0x90>)
 800198e:	f007 fd79 	bl	8009484 <siprintf>
 8001992:	e003      	b.n	800199c <alarmSetTaskHandler+0x48>
		}
		else {
			sprintf( (char*) strBuffer, "Alarm OFF" );
 8001994:	4918      	ldr	r1, [pc, #96]	; (80019f8 <alarmSetTaskHandler+0xa4>)
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <alarmSetTaskHandler+0x90>)
 8001998:	f007 fd74 	bl	8009484 <siprintf>
		}

		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <alarmSetTaskHandler+0xa8>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295
 80019a6:	4916      	ldr	r1, [pc, #88]	; (8001a00 <alarmSetTaskHandler+0xac>)
 80019a8:	f002 fd0a 	bl	80043c0 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80019ac:	2228      	movs	r2, #40	; 0x28
 80019ae:	2100      	movs	r1, #0
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <alarmSetTaskHandler+0x90>)
 80019b2:	f007 fd97 	bl	80094e4 <memset>
		sprintf( (char*) strBuffer, "%02d:%02d:%02d", rtcAlarm.AlarmTime.Hours, rtcAlarm.AlarmTime.Minutes, rtcAlarm.AlarmTime.Seconds);
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <alarmSetTaskHandler+0x94>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <alarmSetTaskHandler+0x94>)
 80019be:	785b      	ldrb	r3, [r3, #1]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <alarmSetTaskHandler+0x94>)
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	460b      	mov	r3, r1
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <alarmSetTaskHandler+0xb0>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <alarmSetTaskHandler+0x90>)
 80019ce:	f007 fd59 	bl	8009484 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <alarmSetTaskHandler+0xa8>)
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	4908      	ldr	r1, [pc, #32]	; (8001a00 <alarmSetTaskHandler+0xac>)
 80019de:	f002 fcef 	bl	80043c0 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80019e2:	e7bb      	b.n	800195c <alarmSetTaskHandler+0x8>
 80019e4:	20000264 	.word	0x20000264
 80019e8:	200001a0 	.word	0x200001a0
 80019ec:	20000090 	.word	0x20000090
 80019f0:	20000000 	.word	0x20000000
 80019f4:	08009ec0 	.word	0x08009ec0
 80019f8:	08009ecc 	.word	0x08009ecc
 80019fc:	2000015c 	.word	0x2000015c
 8001a00:	20000010 	.word	0x20000010
 8001a04:	08009ea0 	.word	0x08009ea0

08001a08 <alarmStartTaskHandler>:

	}
}

/* starts buzzer */
void alarmStartTaskHandler(void *parameters){
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	6078      	str	r0, [r7, #4]
	while(1){
		vTaskSuspend(NULL);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f003 fa7f 	bl	8004f14 <vTaskSuspend>

		xTimerStart(alarmTimerHandle, portMAX_DELAY);
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <alarmStartTaskHandler+0x5c>)
 8001a18:	681c      	ldr	r4, [r3, #0]
 8001a1a:	f003 fe09 	bl	8005630 <xTaskGetTickCount>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f004 fdc4 	bl	80065b8 <xTimerGenericCommand>
		xTimerStart(alarmLedTimerHandle, portMAX_DELAY);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <alarmStartTaskHandler+0x60>)
 8001a32:	681c      	ldr	r4, [r3, #0]
 8001a34:	f003 fdfc 	bl	8005630 <xTaskGetTickCount>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	2101      	movs	r1, #1
 8001a44:	4620      	mov	r0, r4
 8001a46:	f004 fdb7 	bl	80065b8 <xTimerGenericCommand>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // ensure LED is on as soon as alarm starts
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a50:	4806      	ldr	r0, [pc, #24]	; (8001a6c <alarmStartTaskHandler+0x64>)
 8001a52:	f000 fb67 	bl	8002124 <HAL_GPIO_WritePin>
		vTaskResume(alarmBuzzerTaskHandle);
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <alarmStartTaskHandler+0x68>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fb3a 	bl	80050d4 <vTaskResume>
		vTaskSuspend(NULL);
 8001a60:	e7d6      	b.n	8001a10 <alarmStartTaskHandler+0x8>
 8001a62:	bf00      	nop
 8001a64:	20000168 	.word	0x20000168
 8001a68:	20000164 	.word	0x20000164
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	20000158 	.word	0x20000158

08001a74 <alarmTimerCallback>:
	}
}

/* determines length of alarm, not auto-reload */
void alarmTimerCallback(TimerHandle_t xTimer){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
	xTimerStop(alarmLedTimerHandle, portMAX_DELAY);
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <alarmTimerCallback+0x44>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2103      	movs	r1, #3
 8001a8c:	f004 fd94 	bl	80065b8 <xTimerGenericCommand>
	vTaskSuspend(alarmBuzzerTaskHandle);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <alarmTimerCallback+0x48>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f003 fa3d 	bl	8004f14 <vTaskSuspend>

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <alarmTimerCallback+0x4c>)
 8001aa0:	f000 fb40 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <alarmTimerCallback+0x50>)
 8001aac:	f000 fb3a 	bl	8002124 <HAL_GPIO_WritePin>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000164 	.word	0x20000164
 8001abc:	20000158 	.word	0x20000158
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020800 	.word	0x40020800

08001ac8 <alarmLedTimerCallback>:

/* determines LED frequency */
void alarmLedTimerCallback(TimerHandle_t xTimer){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <alarmLedTimerCallback+0x1c>)
 8001ad6:	f000 fb3e 	bl	8002156 <HAL_GPIO_TogglePin>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <alarmBuzzerTaskHandler>:

/* determines buzzer frequency */
void alarmBuzzerTaskHandler(void *parameters){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <alarmBuzzerTaskHandler+0x1c>)
 8001af4:	f000 fb2f 	bl	8002156 <HAL_GPIO_TogglePin>
		delayUs(ALARM_BUZZ_PERIOD);
 8001af8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001afc:	f7ff fa40 	bl	8000f80 <delayUs>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001b00:	e7f6      	b.n	8001af0 <alarmBuzzerTaskHandler+0x8>
 8001b02:	bf00      	nop
 8001b04:	40020000 	.word	0x40020000

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b32:	f7ff fbed 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f007 fce3 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7fe fea1 	bl	8000880 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b4c:	0800a030 	.word	0x0800a030
  ldr r2, =_sbss
 8001b50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b54:	20014810 	.word	0x20014810

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f8fc 	bl	8001d82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fae4 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fa4c 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	2000028c 	.word	0x2000028c

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2000028c 	.word	0x2000028c

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000018 	.word	0x20000018

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <__NVIC_EnableIRQ+0x38>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000e100 	.word	0xe000e100

08001cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	db0a      	blt.n	8001cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	490c      	ldr	r1, [pc, #48]	; (8001d14 <__NVIC_SetPriority+0x4c>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	440b      	add	r3, r1
 8001cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf0:	e00a      	b.n	8001d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4908      	ldr	r1, [pc, #32]	; (8001d18 <__NVIC_SetPriority+0x50>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	3b04      	subs	r3, #4
 8001d00:	0112      	lsls	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	440b      	add	r3, r1
 8001d06:	761a      	strb	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f1c3 0307 	rsb	r3, r3, #7
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	bf28      	it	cs
 8001d3a:	2304      	movcs	r3, #4
 8001d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3304      	adds	r3, #4
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d902      	bls.n	8001d4c <NVIC_EncodePriority+0x30>
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3b03      	subs	r3, #3
 8001d4a:	e000      	b.n	8001d4e <NVIC_EncodePriority+0x32>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43da      	mvns	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	401a      	ands	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d74:	4313      	orrs	r3, r2
         );
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff4c 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001daa:	f7ff ff61 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001dae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7ff ffb1 	bl	8001d1c <NVIC_EncodePriority>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff80 	bl	8001cc8 <__NVIC_SetPriority>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff54 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e159      	b.n	80020bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f040 8148 	bne.w	80020b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d005      	beq.n	8001e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d130      	bne.n	8001ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d017      	beq.n	8001edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d123      	bne.n	8001f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0203 	and.w	r2, r3, #3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a2 	beq.w	80020b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <HAL_GPIO_Init+0x2e8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8e:	4a52      	ldr	r2, [pc, #328]	; (80020d8 <HAL_GPIO_Init+0x2ec>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a49      	ldr	r2, [pc, #292]	; (80020dc <HAL_GPIO_Init+0x2f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x202>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_GPIO_Init+0x2f4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x1fe>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <HAL_GPIO_Init+0x2f8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x1fa>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_GPIO_Init+0x2fc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x1f6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a45      	ldr	r2, [pc, #276]	; (80020ec <HAL_GPIO_Init+0x300>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x1f2>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x204>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x2ec>)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_GPIO_Init+0x304>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002032:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x304>)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x304>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <HAL_GPIO_Init+0x304>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x304>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002086:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x304>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x304>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020b0:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_GPIO_Init+0x304>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b0f      	cmp	r3, #15
 80020c0:	f67f aea2 	bls.w	8001e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020800 	.word	0x40020800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002168:	887a      	ldrh	r2, [r7, #2]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	041a      	lsls	r2, r3, #16
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43d9      	mvns	r1, r3
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	400b      	ands	r3, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	619a      	str	r2, [r3, #24]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e267      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d075      	beq.n	8002296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d157      	bne.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e242      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x74>
 80021f2:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a75      	ldr	r2, [pc, #468]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e01d      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x98>
 800220a:	4b70      	ldr	r3, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6f      	ldr	r2, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6c      	ldr	r2, [pc, #432]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0xb0>
 8002224:	4b69      	ldr	r3, [pc, #420]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a68      	ldr	r2, [pc, #416]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b66      	ldr	r3, [pc, #408]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d013      	beq.n	800226c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fcc0 	bl	8001bc8 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fcbc 	bl	8001bc8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e207      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0xc0>
 800226a:	e014      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fcac 	bl	8001bc8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fca8 	bl	8001bc8 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1f3      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d063      	beq.n	800236a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a2:	4b4a      	ldr	r3, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d11c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d116      	bne.n	80022f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1c7      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4937      	ldr	r1, [pc, #220]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	e03a      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fc:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_RCC_OscConfig+0x244>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7ff fc61 	bl	8001bc8 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fc5d 	bl	8001bc8 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1a8      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4925      	ldr	r1, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_OscConfig+0x244>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7ff fc40 	bl	8001bc8 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234c:	f7ff fc3c 	bl	8001bc8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e187      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d036      	beq.n	80023e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCC_OscConfig+0x248>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff fc20 	bl	8001bc8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fc1c 	bl	8001bc8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e167      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x240>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x200>
 80023aa:	e01b      	b.n	80023e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x248>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff fc09 	bl	8001bc8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b8:	e00e      	b.n	80023d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc05 	bl	8001bc8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d907      	bls.n	80023d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e150      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	42470000 	.word	0x42470000
 80023d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d8:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ea      	bne.n	80023ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8097 	beq.w	8002520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f6:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b7d      	ldr	r3, [pc, #500]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a7c      	ldr	r2, [pc, #496]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	4b77      	ldr	r3, [pc, #476]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242e:	4b74      	ldr	r3, [pc, #464]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a73      	ldr	r2, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7ff fbc5 	bl	8001bc8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7ff fbc1 	bl	8001bc8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e10c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x474>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x2ea>
 8002468:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a63      	ldr	r2, [pc, #396]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e01c      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b05      	cmp	r3, #5
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x30c>
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800248c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248e:	4a5b      	ldr	r2, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6713      	str	r3, [r2, #112]	; 0x70
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
 8002498:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0301 	bic.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
 80024a4:	4b55      	ldr	r3, [pc, #340]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a8:	4a54      	ldr	r2, [pc, #336]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024aa:	f023 0304 	bic.w	r3, r3, #4
 80024ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7ff fb86 	bl	8001bc8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7ff fb82 	bl	8001bc8 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0cb      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ee      	beq.n	80024c0 <HAL_RCC_OscConfig+0x334>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7ff fb70 	bl	8001bc8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7ff fb6c 	bl	8001bc8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e0b5      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ee      	bne.n	80024ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d105      	bne.n	8002520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002514:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a38      	ldr	r2, [pc, #224]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a1 	beq.w	800266c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d05c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d141      	bne.n	80025c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fb40 	bl	8001bc8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff fb3c 	bl	8001bc8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e087      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b27      	ldr	r3, [pc, #156]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	491b      	ldr	r1, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fb15 	bl	8001bc8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff fb11 	bl	8001bc8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e05c      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x416>
 80025c0:	e054      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_RCC_OscConfig+0x478>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fafe 	bl	8001bc8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fafa 	bl	8001bc8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e045      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_OscConfig+0x470>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x444>
 80025ee:	e03d      	b.n	800266c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e038      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
 8002604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x4ec>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d028      	beq.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d121      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d11a      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0cc      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d90c      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d044      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d003      	beq.n	800273a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e067      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4934      	ldr	r1, [pc, #208]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7ff fa2c 	bl	8001bc8 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff fa28 	bl	8001bc8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20c      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002802:	f000 f821 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fc98 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08009fb0 	.word	0x08009fb0
 8002840:	20000004 	.word	0x20000004
 8002844:	20000014 	.word	0x20000014

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b094      	sub	sp, #80	; 0x50
 800284e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
 8002854:	2300      	movs	r3, #0
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002858:	2300      	movs	r3, #0
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002860:	4b79      	ldr	r3, [pc, #484]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d00d      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x40>
 800286c:	2b08      	cmp	r3, #8
 800286e:	f200 80e1 	bhi.w	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x34>
 8002876:	2b04      	cmp	r3, #4
 8002878:	d003      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x3a>
 800287a:	e0db      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002880:	e0db      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002882:	4b73      	ldr	r3, [pc, #460]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002886:	e0d8      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4b6f      	ldr	r3, [pc, #444]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d063      	beq.n	8002966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
 80028b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	6139      	str	r1, [r7, #16]
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4651      	mov	r1, sl
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	4651      	mov	r1, sl
 80028fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002900:	4659      	mov	r1, fp
 8002902:	eb63 0901 	sbc.w	r9, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb18 0303 	adds.w	r3, r8, r3
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	462b      	mov	r3, r5
 8002928:	eb49 0303 	adc.w	r3, r9, r3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800293a:	4629      	mov	r1, r5
 800293c:	024b      	lsls	r3, r1, #9
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002944:	4621      	mov	r1, r4
 8002946:	024a      	lsls	r2, r1, #9
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
 8002952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002958:	f7fd fcea 	bl	8000330 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002964:	e058      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	2200      	movs	r2, #0
 800296e:	4618      	mov	r0, r3
 8002970:	4611      	mov	r1, r2
 8002972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002976:	623b      	str	r3, [r7, #32]
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0159      	lsls	r1, r3, #5
 800298e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002992:	0150      	lsls	r0, r2, #5
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4641      	mov	r1, r8
 800299a:	ebb2 0a01 	subs.w	sl, r2, r1
 800299e:	4649      	mov	r1, r9
 80029a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b8:	ebb2 040a 	subs.w	r4, r2, sl
 80029bc:	eb63 050b 	sbc.w	r5, r3, fp
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	00eb      	lsls	r3, r5, #3
 80029ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ce:	00e2      	lsls	r2, r4, #3
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	4643      	mov	r3, r8
 80029d6:	18e3      	adds	r3, r4, r3
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	464b      	mov	r3, r9
 80029dc:	eb45 0303 	adc.w	r3, r5, r3
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ee:	4629      	mov	r1, r5
 80029f0:	028b      	lsls	r3, r1, #10
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f8:	4621      	mov	r1, r4
 80029fa:	028a      	lsls	r2, r1, #10
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	61fa      	str	r2, [r7, #28]
 8002a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a0c:	f7fd fc90 	bl	8000330 <__aeabi_uldivmod>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4613      	mov	r3, r2
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	3301      	adds	r3, #1
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3750      	adds	r7, #80	; 0x50
 8002a40:	46bd      	mov	sp, r7
 8002a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	00f42400 	.word	0x00f42400
 8002a50:	007a1200 	.word	0x007a1200

08002a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff0 	bl	8002a54 <HAL_RCC_GetHCLKFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	0a9b      	lsrs	r3, r3, #10
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08009fc0 	.word	0x08009fc0

08002a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCC_GetClockConfig+0x60>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0207 	and.w	r2, r3, #7
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40023c00 	.word	0x40023c00

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d035      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b20:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b26:	f7ff f84f 	bl	8001bc8 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b2e:	f7ff f84b 	bl	8001bc8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0ba      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b40:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	019a      	lsls	r2, r3, #6
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	071b      	lsls	r3, r3, #28
 8002b58:	495a      	ldr	r1, [pc, #360]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b60:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b66:	f7ff f82f 	bl	8001bc8 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b6e:	f7ff f82b 	bl	8001bc8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e09a      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8083 	beq.w	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a48      	ldr	r2, [pc, #288]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bb6:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc2:	f7ff f801 	bl	8001bc8 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bca:	f7fe fffd 	bl	8001bc8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e06c      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d028      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d114      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7fe ffcb 	bl	8001bc8 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7fe ffc7 	bl	8001bc8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e034      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ee      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c64:	d10d      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	4912      	ldr	r1, [pc, #72]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	608b      	str	r3, [r1, #8]
 8002c80:	e005      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	490a      	ldr	r1, [pc, #40]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7c1a      	ldrb	r2, [r3, #16]
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cb2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	42470068 	.word	0x42470068
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470e40 	.word	0x42470e40
 8002cd0:	424711e0 	.word	0x424711e0

08002cd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e066      	b.n	8002db8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7f5b      	ldrb	r3, [r3, #29]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f9c0 	bl	8001080 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	22ca      	movs	r2, #202	; 0xca
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2253      	movs	r2, #83	; 0x53
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fc5e 	bl	80035d8 <RTC_EnterInitMode>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12c      	bne.n	8002d80 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d38:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6919      	ldr	r1, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fc65 	bl	8003646 <RTC_ExitInitMode>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d113      	bne.n	8002dae <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	22ff      	movs	r2, #255	; 0xff
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	7f1b      	ldrb	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_RTC_SetTime+0x1c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e087      	b.n	8002eec <HAL_RTC_SetTime+0x12c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2202      	movs	r2, #2
 8002de6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d126      	bne.n	8002e3c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fc42 	bl	8003690 <RTC_ByteToBcd2>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fc3b 	bl	8003690 <RTC_ByteToBcd2>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e1e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	789b      	ldrb	r3, [r3, #2]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fc33 	bl	8003690 <RTC_ByteToBcd2>
 8002e2a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e2c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e018      	b.n	8002e6e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e5c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e62:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	22ca      	movs	r2, #202	; 0xca
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2253      	movs	r2, #83	; 0x53
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fbaa 	bl	80035d8 <RTC_EnterInitMode>
 8002e84:	4603      	mov	r3, r0
 8002e86:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d120      	bne.n	8002ed0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e9c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6899      	ldr	r1, [r3, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fbbd 	bl	8003646 <RTC_ExitInitMode>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	771a      	strb	r2, [r3, #28]

  return status;
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd90      	pop	{r4, r7, pc}

08002ef4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	0d9b      	lsrs	r3, r3, #22
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11a      	bne.n	8002fa6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fba8 	bl	80036ca <RTC_Bcd2ToByte>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fb9f 	bl	80036ca <RTC_Bcd2ToByte>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fb96 	bl	80036ca <RTC_Bcd2ToByte>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	7f1b      	ldrb	r3, [r3, #28]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_RTC_SetDate+0x1c>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e071      	b.n	80030b0 <HAL_RTC_SetDate+0x100>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_RTC_SetDate+0x4c>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	f023 0310 	bic.w	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	330a      	adds	r3, #10
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11c      	bne.n	800303c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	78db      	ldrb	r3, [r3, #3]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb42 	bl	8003690 <RTC_ByteToBcd2>
 800300c:	4603      	mov	r3, r0
 800300e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fb3b 	bl	8003690 <RTC_ByteToBcd2>
 800301a:	4603      	mov	r3, r0
 800301c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800301e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	789b      	ldrb	r3, [r3, #2]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fb33 	bl	8003690 <RTC_ByteToBcd2>
 800302a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800302c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e00e      	b.n	800305a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	78db      	ldrb	r3, [r3, #3]
 8003040:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003048:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800304e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	22ca      	movs	r2, #202	; 0xca
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2253      	movs	r2, #83	; 0x53
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fab4 	bl	80035d8 <RTC_EnterInitMode>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003084:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003088:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fadb 	bl	8003646 <RTC_ExitInitMode>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	771a      	strb	r2, [r3, #28]

  return status;
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd90      	pop	{r4, r7, pc}

080030b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	0b5b      	lsrs	r3, r3, #13
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11a      	bne.n	800314c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fad5 	bl	80036ca <RTC_Bcd2ToByte>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 facc 	bl	80036ca <RTC_Bcd2ToByte>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fac3 	bl	80036ca <RTC_Bcd2ToByte>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003164:	4b9a      	ldr	r3, [pc, #616]	; (80033d0 <HAL_RTC_SetAlarm_IT+0x278>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a9a      	ldr	r2, [pc, #616]	; (80033d4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0adb      	lsrs	r3, r3, #11
 8003170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003174:	fb02 f303 	mul.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	7f1b      	ldrb	r3, [r3, #28]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_RTC_SetAlarm_IT+0x36>
 800318a:	2302      	movs	r3, #2
 800318c:	e11c      	b.n	80033c8 <HAL_RTC_SetAlarm_IT+0x270>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2202      	movs	r2, #2
 8003198:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d137      	bne.n	8003210 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2200      	movs	r2, #0
 80031b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa69 	bl	8003690 <RTC_ByteToBcd2>
 80031be:	4603      	mov	r3, r0
 80031c0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa62 	bl	8003690 <RTC_ByteToBcd2>
 80031cc:	4603      	mov	r3, r0
 80031ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80031d0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	789b      	ldrb	r3, [r3, #2]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fa5a 	bl	8003690 <RTC_ByteToBcd2>
 80031dc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80031de:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	78db      	ldrb	r3, [r3, #3]
 80031e6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80031e8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fa4c 	bl	8003690 <RTC_ByteToBcd2>
 80031f8:	4603      	mov	r3, r0
 80031fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80031fc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003204:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800320a:	4313      	orrs	r3, r2
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e023      	b.n	8003258 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2200      	movs	r2, #0
 8003222:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003230:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003236:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800323e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003246:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003248:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800324e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003254:	4313      	orrs	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	22ca      	movs	r2, #202	; 0xca
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2253      	movs	r2, #83	; 0x53
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327c:	d141      	bne.n	8003302 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800328c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800329e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	617a      	str	r2, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2203      	movs	r2, #3
 80032b6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e082      	b.n	80033c8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0e7      	beq.n	80032a0 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ee:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	e04b      	b.n	800339a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003310:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003322:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_RTC_SetAlarm_IT+0x278>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0adb      	lsrs	r3, r3, #11
 8003330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	617a      	str	r2, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	22ff      	movs	r2, #255	; 0xff
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2203      	movs	r2, #3
 8003350:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e035      	b.n	80033c8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0e7      	beq.n	800333a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RTC_SetAlarm_IT+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_RTC_SetAlarm_IT+0x280>)
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RTC_SetAlarm_IT+0x280>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_RTC_SetAlarm_IT+0x280>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	22ff      	movs	r2, #255	; 0xff
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3724      	adds	r7, #36	; 0x24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	20000004 	.word	0x20000004
 80033d4:	10624dd3 	.word	0x10624dd3
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f8:	d10e      	bne.n	8003418 <HAL_RTC_GetAlarm+0x3c>
  {
    sAlarm->Alarm = RTC_ALARM_A;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	e00d      	b.n	8003434 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341e:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003432:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	0d9b      	lsrs	r3, r3, #22
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	0e1b      	lsrs	r3, r3, #24
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d125      	bne.n	80034f0 <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 f90e 	bl	80036ca <RTC_Bcd2ToByte>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f905 	bl	80036ca <RTC_Bcd2ToByte>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	789b      	ldrb	r3, [r3, #2]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f8fc 	bl	80036ca <RTC_Bcd2ToByte>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f8f2 	bl	80036ca <RTC_Bcd2ToByte>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fd fd47 	bl	8000fb4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003536:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d012      	beq.n	800356c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8d4 	bl	8003702 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f462 7220 	orn	r2, r2, #640	; 0x280
 800356a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RTC_AlarmIRQHandler+0x88>)
 800356e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003572:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	775a      	strb	r2, [r3, #29]
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a4:	f7fe fb10 	bl	8001bc8 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035aa:	e009      	b.n	80035c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035ac:	f7fe fb0c 	bl	8001bc8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ba:	d901      	bls.n	80035c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e007      	b.n	80035d0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ee      	beq.n	80035ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d122      	bne.n	800363c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003604:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003606:	f7fe fadf 	bl	8001bc8 <HAL_GetTick>
 800360a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800360c:	e00c      	b.n	8003628 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800360e:	f7fe fadb 	bl	8001bc8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800361c:	d904      	bls.n	8003628 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <RTC_EnterInitMode+0x64>
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d1e8      	bne.n	800360e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff89 	bl	8003588 <HAL_RTC_WaitForSynchro>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2204      	movs	r2, #4
 8003680:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800369e:	e005      	b.n	80036ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	3301      	adds	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	3b0a      	subs	r3, #10
 80036aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	2b09      	cmp	r3, #9
 80036b0:	d8f6      	bhi.n	80036a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b2db      	uxtb	r3, r3
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	0092      	lsls	r2, r2, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	4413      	add	r3, r2
 80036f4:	b2db      	uxtb	r3, r3
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e041      	b.n	80037ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd fcd3 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fae1 	bl	8003d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e03c      	b.n	8003846 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_TIM_Base_Start+0xa0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_TIM_Base_Start+0x5c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d013      	beq.n	8003810 <HAL_TIM_Base_Start+0x5c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <HAL_TIM_Base_Start+0xa4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_TIM_Base_Start+0x5c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a19      	ldr	r2, [pc, #100]	; (800385c <HAL_TIM_Base_Start+0xa8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_TIM_Base_Start+0x5c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_TIM_Base_Start+0xac>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_Base_Start+0x5c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_TIM_Base_Start+0xb0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d010      	beq.n	8003844 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	e007      	b.n	8003844 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40014000 	.word	0x40014000

08003868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d001      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e044      	b.n	800390a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_TIM_Base_Start_IT+0xb0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d018      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d013      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_TIM_Base_Start_IT+0xb4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00e      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_TIM_Base_Start_IT+0xb8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d009      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_TIM_Base_Start_IT+0xbc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIM_Base_Start_IT+0x6c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIM_Base_Start_IT+0xc0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d010      	beq.n	8003908 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	e007      	b.n	8003908 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40010000 	.word	0x40010000
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00
 8003928:	40014000 	.word	0x40014000

0800392c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d122      	bne.n	8003988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d11b      	bne.n	8003988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0202 	mvn.w	r2, #2
 8003958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9b5 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9a7 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f9b8 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d122      	bne.n	80039dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d11b      	bne.n	80039dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0204 	mvn.w	r2, #4
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f98b 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f97d 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f98e 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0208 	mvn.w	r2, #8
 8003a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f961 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f953 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f964 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0210 	mvn.w	r2, #16
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f937 	bl	8003cde <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f929 	bl	8003cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f93a 	bl	8003cf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0201 	mvn.w	r2, #1
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd faa6 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fab2 	bl	8004040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8ff 	bl	8003d06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0220 	mvn.w	r2, #32
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa7c 	bl	800402c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_ConfigClockSource+0x1c>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0b4      	b.n	8003cc2 <HAL_TIM_ConfigClockSource+0x186>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d03e      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xd4>
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	f200 8087 	bhi.w	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	f000 8086 	beq.w	8003cae <HAL_TIM_ConfigClockSource+0x172>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d87f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b70      	cmp	r3, #112	; 0x70
 8003baa:	d01a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xa6>
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d87b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b60      	cmp	r3, #96	; 0x60
 8003bb2:	d050      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x11a>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d877      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b50      	cmp	r3, #80	; 0x50
 8003bba:	d03c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xfa>
 8003bbc:	2b50      	cmp	r3, #80	; 0x50
 8003bbe:	d873      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d058      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x13a>
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d86f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b30      	cmp	r3, #48	; 0x30
 8003bca:	d064      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d86b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d060      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d867      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d05a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	e062      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 f98d 	bl	8003f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	609a      	str	r2, [r3, #8]
      break;
 8003c0e:	e04f      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 f976 	bl	8003f10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e03c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 f8ea 	bl	8003e1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2150      	movs	r1, #80	; 0x50
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f943 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003c54:	e02c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 f909 	bl	8003e7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2160      	movs	r1, #96	; 0x60
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f933 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003c74:	e01c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 f8ca 	bl	8003e1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f923 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003c94:	e00c      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f000 f91a 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003ca6:	e003      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cac:	e000      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <TIM_Base_SetConfig+0xe4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00f      	beq.n	8003d54 <TIM_Base_SetConfig+0x38>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3a:	d00b      	beq.n	8003d54 <TIM_Base_SetConfig+0x38>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <TIM_Base_SetConfig+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <TIM_Base_SetConfig+0x38>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a30      	ldr	r2, [pc, #192]	; (8003e08 <TIM_Base_SetConfig+0xec>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_Base_SetConfig+0x38>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a2f      	ldr	r2, [pc, #188]	; (8003e0c <TIM_Base_SetConfig+0xf0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d108      	bne.n	8003d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <TIM_Base_SetConfig+0xe4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01b      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d017      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a22      	ldr	r2, [pc, #136]	; (8003e04 <TIM_Base_SetConfig+0xe8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <TIM_Base_SetConfig+0xec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <TIM_Base_SetConfig+0xf0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <TIM_Base_SetConfig+0xf4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <TIM_Base_SetConfig+0xf8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <TIM_Base_SetConfig+0xfc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <TIM_Base_SetConfig+0xe4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800

08003e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f023 030a 	bic.w	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	621a      	str	r2, [r3, #32]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b087      	sub	sp, #28
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f023 0210 	bic.w	r2, r3, #16
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	031b      	lsls	r3, r3, #12
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f043 0307 	orr.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	021a      	lsls	r2, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e050      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb4:	d013      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40014000 	.word	0x40014000

0800402c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f103 0208 	add.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f04f 32ff 	mov.w	r2, #4294967295
 800406c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f103 0208 	add.w	r2, r3, #8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f103 0208 	add.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d103      	bne.n	8004116 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e00c      	b.n	8004130 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3308      	adds	r3, #8
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e002      	b.n	8004124 <vListInsert+0x2e>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	d2f6      	bcs.n	800411e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6892      	ldr	r2, [r2, #8]
 800417e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6852      	ldr	r2, [r2, #4]
 8004188:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	429a      	cmp	r2, r3
 8004192:	d103      	bne.n	800419c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericReset+0x2e>
        __asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	60fb      	str	r3, [r7, #12]
    }
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05d      	beq.n	80042ac <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d059      	beq.n	80042ac <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	2100      	movs	r1, #0
 8004202:	fba3 2302 	umull	r2, r3, r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d000      	beq.n	800420c <xQueueGenericReset+0x50>
 800420a:	2101      	movs	r1, #1
 800420c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800420e:	2b00      	cmp	r3, #0
 8004210:	d14c      	bne.n	80042ac <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004212:	f002 fe1f 	bl	8006e54 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	441a      	add	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2200      	movs	r2, #0
 8004230:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	3b01      	subs	r3, #1
 8004244:	6939      	ldr	r1, [r7, #16]
 8004246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	441a      	add	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	22ff      	movs	r2, #255	; 0xff
 800425e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d114      	bne.n	8004292 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01a      	beq.n	80042a6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3310      	adds	r3, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fbf9 	bl	8005a6c <xTaskRemoveFromEventList>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d012      	beq.n	80042a6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <xQueueGenericReset+0x11c>)
 8004282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	e009      	b.n	80042a6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3310      	adds	r3, #16
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fedc 	bl	8004054 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fed7 	bl	8004054 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80042a6:	f002 fe05 	bl	8006eb4 <vPortExitCritical>
 80042aa:	e001      	b.n	80042b0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <xQueueGenericReset+0x110>
        __asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	60bb      	str	r3, [r7, #8]
    }
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80042cc:	697b      	ldr	r3, [r7, #20]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000ed04 	.word	0xe000ed04

080042dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02e      	beq.n	8004352 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80042f4:	2100      	movs	r1, #0
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	fba3 2302 	umull	r2, r3, r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d000      	beq.n	8004304 <xQueueGenericCreate+0x28>
 8004302:	2101      	movs	r1, #1
 8004304:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d123      	bne.n	8004352 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004312:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004316:	d81c      	bhi.n	8004352 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3350      	adds	r3, #80	; 0x50
 8004326:	4618      	mov	r0, r3
 8004328:	f002 feb8 	bl	800709c <pvPortMalloc>
 800432c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01c      	beq.n	800436e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3350      	adds	r3, #80	; 0x50
 800433c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800433e:	79fa      	ldrb	r2, [r7, #7]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f814 	bl	8004378 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004350:	e00d      	b.n	800436e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xQueueGenericCreate+0x92>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	613b      	str	r3, [r7, #16]
    }
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800436e:	69fb      	ldr	r3, [r7, #28]
    }
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e002      	b.n	800439a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043a6:	2101      	movs	r1, #1
 80043a8:	69b8      	ldr	r0, [r7, #24]
 80043aa:	f7ff ff07 	bl	80041bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <xQueueGenericSend+0x32>
        __asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <xQueueGenericSend+0x40>
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <xQueueGenericSend+0x44>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <xQueueGenericSend+0x46>
 8004404:	2300      	movs	r3, #0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <xQueueGenericSend+0x60>
        __asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d103      	bne.n	800442e <xQueueGenericSend+0x6e>
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <xQueueGenericSend+0x72>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xQueueGenericSend+0x74>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xQueueGenericSend+0x8e>
        __asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
    }
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800444e:	f001 fd21 	bl	8005e94 <xTaskGetSchedulerState>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <xQueueGenericSend+0x9e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <xQueueGenericSend+0xa2>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <xQueueGenericSend+0xa4>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <xQueueGenericSend+0xbe>
        __asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	61fb      	str	r3, [r7, #28]
    }
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800447e:	f002 fce9 	bl	8006e54 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <xQueueGenericSend+0xd4>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d129      	bne.n	80044e8 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449a:	f000 fa21 	bl	80048e0 <prvCopyDataToQueue>
 800449e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	3324      	adds	r3, #36	; 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 fadd 	bl	8005a6c <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80044b8:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <xQueueGenericSend+0x1f8>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e00a      	b.n	80044e0 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80044d0:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <xQueueGenericSend+0x1f8>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80044e0:	f002 fce8 	bl	8006eb4 <vPortExitCritical>
                return pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e063      	b.n	80045b0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80044ee:	f002 fce1 	bl	8006eb4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e05c      	b.n	80045b0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	4618      	mov	r0, r3
 8004502:	f001 fb8b 	bl	8005c1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004506:	2301      	movs	r3, #1
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800450a:	f002 fcd3 	bl	8006eb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800450e:	f000 ff81 	bl	8005414 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004512:	f002 fc9f 	bl	8006e54 <vPortEnterCritical>
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800451c:	b25b      	sxtb	r3, r3
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d103      	bne.n	800452c <xQueueGenericSend+0x16c>
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x182>
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004542:	f002 fcb7 	bl	8006eb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004546:	1d3a      	adds	r2, r7, #4
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fb7a 	bl	8005c48 <xTaskCheckForTimeOut>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d124      	bne.n	80045a4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800455a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800455c:	f000 fab8 	bl	8004ad0 <prvIsQueueFull>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3310      	adds	r3, #16
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fa10 	bl	8005994 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004576:	f000 fa43 	bl	8004a00 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800457a:	f000 ff59 	bl	8005430 <xTaskResumeAll>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f af7c 	bne.w	800447e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <xQueueGenericSend+0x1f8>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	e772      	b.n	800447e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800459a:	f000 fa31 	bl	8004a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800459e:	f000 ff47 	bl	8005430 <xTaskResumeAll>
 80045a2:	e76c      	b.n	800447e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80045a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a6:	f000 fa2b 	bl	8004a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045aa:	f000 ff41 	bl	8005430 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80045ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3738      	adds	r7, #56	; 0x38
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b092      	sub	sp, #72	; 0x48
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 80045ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d103      	bne.n	80045f8 <xQueueGenericSendFromISR+0x3c>
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <xQueueGenericSendFromISR+0x40>
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <xQueueGenericSendFromISR+0x42>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d103      	bne.n	8004626 <xQueueGenericSendFromISR+0x6a>
 800461e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <xQueueGenericSendFromISR+0x6e>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSendFromISR+0x70>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004646:	f002 fce9 	bl	800701c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800464a:	f3ef 8211 	mrs	r2, BASEPRI
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	623a      	str	r2, [r7, #32]
 8004660:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004662:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	429a      	cmp	r2, r3
 8004670:	d302      	bcc.n	8004678 <xQueueGenericSendFromISR+0xbc>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d146      	bne.n	8004706 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800467e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800468e:	f000 f927 	bl	80048e0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004692:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d112      	bne.n	80046c2 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02d      	beq.n	8004700 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f9df 	bl	8005a6c <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d025      	beq.n	8004700 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d022      	beq.n	8004700 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e01e      	b.n	8004700 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80046c2:	f000 ffd7 	bl	8005674 <uxTaskGetNumberOfTasks>
 80046c6:	6338      	str	r0, [r7, #48]	; 0x30
 80046c8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d916      	bls.n	8004700 <xQueueGenericSendFromISR+0x144>
 80046d2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80046d6:	2b7f      	cmp	r3, #127	; 0x7f
 80046d8:	d10a      	bne.n	80046f0 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	61bb      	str	r3, [r7, #24]
    }
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <xQueueGenericSendFromISR+0x132>
 80046f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80046f4:	3301      	adds	r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	b25a      	sxtb	r2, r3
 80046fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004700:	2301      	movs	r3, #1
 8004702:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004704:	e001      	b.n	800470a <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004706:	2300      	movs	r3, #0
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004714:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004718:	4618      	mov	r0, r3
 800471a:	3748      	adds	r7, #72	; 0x48
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	; 0x30
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <xQueueReceive+0x30>
        __asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	623b      	str	r3, [r7, #32]
    }
 800474c:	bf00      	nop
 800474e:	e7fe      	b.n	800474e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <xQueueReceive+0x3e>
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <xQueueReceive+0x42>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <xQueueReceive+0x44>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <xQueueReceive+0x5e>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	61fb      	str	r3, [r7, #28]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800477e:	f001 fb89 	bl	8005e94 <xTaskGetSchedulerState>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <xQueueReceive+0x6e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <xQueueReceive+0x72>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <xQueueReceive+0x74>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueReceive+0x8e>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	61bb      	str	r3, [r7, #24]
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80047ae:	f002 fb51 	bl	8006e54 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01f      	beq.n	80047fe <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c2:	f000 f8f7 	bl	80049b4 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1e5a      	subs	r2, r3, #1
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00f      	beq.n	80047f6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d8:	3310      	adds	r3, #16
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 f946 	bl	8005a6c <xTaskRemoveFromEventList>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <xQueueReceive+0x1bc>)
 80047e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80047f6:	f002 fb5d 	bl	8006eb4 <vPortExitCritical>
                return pdPASS;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e069      	b.n	80048d2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004804:	f002 fb56 	bl	8006eb4 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004808:	2300      	movs	r3, #0
 800480a:	e062      	b.n	80048d2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004812:	f107 0310 	add.w	r3, r7, #16
 8004816:	4618      	mov	r0, r3
 8004818:	f001 fa00 	bl	8005c1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800481c:	2301      	movs	r3, #1
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004820:	f002 fb48 	bl	8006eb4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004824:	f000 fdf6 	bl	8005414 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004828:	f002 fb14 	bl	8006e54 <vPortEnterCritical>
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004832:	b25b      	sxtb	r3, r3
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d103      	bne.n	8004842 <xQueueReceive+0x122>
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004848:	b25b      	sxtb	r3, r3
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d103      	bne.n	8004858 <xQueueReceive+0x138>
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004858:	f002 fb2c 	bl	8006eb4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800485c:	1d3a      	adds	r2, r7, #4
 800485e:	f107 0310 	add.w	r3, r7, #16
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f001 f9ef 	bl	8005c48 <xTaskCheckForTimeOut>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d123      	bne.n	80048b8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004872:	f000 f917 	bl	8004aa4 <prvIsQueueEmpty>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d017      	beq.n	80048ac <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	3324      	adds	r3, #36	; 0x24
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f885 	bl	8005994 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800488a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800488c:	f000 f8b8 	bl	8004a00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004890:	f000 fdce 	bl	8005430 <xTaskResumeAll>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d189      	bne.n	80047ae <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <xQueueReceive+0x1bc>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	e780      	b.n	80047ae <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ae:	f000 f8a7 	bl	8004a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80048b2:	f000 fdbd 	bl	8005430 <xTaskResumeAll>
 80048b6:	e77a      	b.n	80047ae <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80048b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ba:	f000 f8a1 	bl	8004a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80048be:	f000 fdb7 	bl	8005430 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048c4:	f000 f8ee 	bl	8004aa4 <prvIsQueueEmpty>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f43f af6f 	beq.w	80047ae <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80048d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3730      	adds	r7, #48	; 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10d      	bne.n	800491a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d14d      	bne.n	80049a2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f001 fae0 	bl	8005ed0 <xTaskPriorityDisinherit>
 8004910:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	e043      	b.n	80049a2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d119      	bne.n	8004954 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6858      	ldr	r0, [r3, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	461a      	mov	r2, r3
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	f004 fe0e 	bl	800954c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	441a      	add	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	429a      	cmp	r2, r3
 8004948:	d32b      	bcc.n	80049a2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e026      	b.n	80049a2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68d8      	ldr	r0, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	461a      	mov	r2, r3
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	f004 fdf4 	bl	800954c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	425b      	negs	r3, r3
 800496e:	441a      	add	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d207      	bcs.n	8004990 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	425b      	negs	r3, r3
 800498a:	441a      	add	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d105      	bne.n	80049a2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	3b01      	subs	r3, #1
 80049a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80049aa:	697b      	ldr	r3, [r7, #20]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d018      	beq.n	80049f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	441a      	add	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d303      	bcc.n	80049e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68d9      	ldr	r1, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	461a      	mov	r2, r3
 80049f2:	6838      	ldr	r0, [r7, #0]
 80049f4:	f004 fdaa 	bl	800954c <memcpy>
    }
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004a08:	f002 fa24 	bl	8006e54 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a14:	e011      	b.n	8004a3a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3324      	adds	r3, #36	; 0x24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 f822 	bl	8005a6c <xTaskRemoveFromEventList>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004a2e:	f001 f971 	bl	8005d14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dce9      	bgt.n	8004a16 <prvUnlockQueue+0x16>
 8004a42:	e000      	b.n	8004a46 <prvUnlockQueue+0x46>
                    break;
 8004a44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	22ff      	movs	r2, #255	; 0xff
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004a4e:	f002 fa31 	bl	8006eb4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004a52:	f002 f9ff 	bl	8006e54 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a5e:	e011      	b.n	8004a84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fffd 	bl	8005a6c <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004a78:	f001 f94c 	bl	8005d14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004a7c:	7bbb      	ldrb	r3, [r7, #14]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dce9      	bgt.n	8004a60 <prvUnlockQueue+0x60>
 8004a8c:	e000      	b.n	8004a90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004a8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	22ff      	movs	r2, #255	; 0xff
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004a98:	f002 fa0c 	bl	8006eb4 <vPortExitCritical>
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004aac:	f002 f9d2 	bl	8006e54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e001      	b.n	8004ac2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004ac2:	f002 f9f7 	bl	8006eb4 <vPortExitCritical>

    return xReturn;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004ad8:	f002 f9bc 	bl	8006e54 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d102      	bne.n	8004aee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e001      	b.n	8004af2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004af2:	f002 f9df 	bl	8006eb4 <vPortExitCritical>

    return xReturn;
 8004af6:	68fb      	ldr	r3, [r7, #12]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	60fb      	str	r3, [r7, #12]
    }
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d024      	beq.n	8004b7a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e01e      	b.n	8004b74 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <vQueueAddToRegistry+0x98>)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d105      	bne.n	8004b52 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <vQueueAddToRegistry+0x98>)
 8004b4c:	4413      	add	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
                    break;
 8004b50:	e013      	b.n	8004b7a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <vQueueAddToRegistry+0x6e>
 8004b58:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <vQueueAddToRegistry+0x98>)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <vQueueAddToRegistry+0x98>)
 8004b6a:	4413      	add	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	3301      	adds	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	d9dd      	bls.n	8004b36 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	20000290 	.word	0x20000290

08004b9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004bac:	f002 f952 	bl	8006e54 <vPortEnterCritical>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb6:	b25b      	sxtb	r3, r3
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d103      	bne.n	8004bc6 <vQueueWaitForMessageRestricted+0x2a>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d103      	bne.n	8004bdc <vQueueWaitForMessageRestricted+0x40>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bdc:	f002 f96a 	bl	8006eb4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	3324      	adds	r3, #36	; 0x24
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fef3 	bl	80059dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004bf6:	6978      	ldr	r0, [r7, #20]
 8004bf8:	f7ff ff02 	bl	8004a00 <prvUnlockQueue>
    }
 8004bfc:	bf00      	nop
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	; 0x30
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f002 fa3f 	bl	800709c <pvPortMalloc>
 8004c1e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c26:	2058      	movs	r0, #88	; 0x58
 8004c28:	f002 fa38 	bl	800709c <pvPortMalloc>
 8004c2c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004c34:	2258      	movs	r2, #88	; 0x58
 8004c36:	2100      	movs	r1, #0
 8004c38:	69f8      	ldr	r0, [r7, #28]
 8004c3a:	f004 fc53 	bl	80094e4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
 8004c44:	e005      	b.n	8004c52 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f002 fae2 	bl	8007210 <vPortFree>
 8004c4c:	e001      	b.n	8004c52 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	9303      	str	r3, [sp, #12]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	9302      	str	r3, [sp, #8]
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f80e 	bl	8004c90 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004c74:	69f8      	ldr	r0, [r7, #28]
 8004c76:	f000 f899 	bl	8004dac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e002      	b.n	8004c86 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004c86:	69bb      	ldr	r3, [r7, #24]
    }
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	21a5      	movs	r1, #165	; 0xa5
 8004caa:	f004 fc1b 	bl	80094e4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	617b      	str	r3, [r7, #20]
    }
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01e      	beq.n	8004d2c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e012      	b.n	8004d1a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	7819      	ldrb	r1, [r3, #0]
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	3334      	adds	r3, #52	; 0x34
 8004d04:	460a      	mov	r2, r1
 8004d06:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	3301      	adds	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2b09      	cmp	r3, #9
 8004d1e:	d9e9      	bls.n	8004cf4 <prvInitialiseNewTask+0x64>
 8004d20:	e000      	b.n	8004d24 <prvInitialiseNewTask+0x94>
            {
                break;
 8004d22:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d90a      	bls.n	8004d48 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	613b      	str	r3, [r7, #16]
    }
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d901      	bls.n	8004d52 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d4e:	2305      	movs	r3, #5
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f996 	bl	8004094 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	3318      	adds	r3, #24
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff f991 	bl	8004094 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f1c3 0206 	rsb	r2, r3, #6
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	69b8      	ldr	r0, [r7, #24]
 8004d8e:	f001 feb3 	bl	8006af8 <pxPortInitialiseStack>
 8004d92:	4602      	mov	r2, r0
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004da4:	bf00      	nop
 8004da6:	3720      	adds	r7, #32
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004dac:	b5b0      	push	{r4, r5, r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004db4:	f002 f84e 	bl	8006e54 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004db8:	4b4f      	ldr	r3, [pc, #316]	; (8004ef8 <prvAddNewTaskToReadyList+0x14c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <prvAddNewTaskToReadyList+0x14c>)
 8004dc0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004dc2:	4b4e      	ldr	r3, [pc, #312]	; (8004efc <prvAddNewTaskToReadyList+0x150>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004dca:	4a4c      	ldr	r2, [pc, #304]	; (8004efc <prvAddNewTaskToReadyList+0x150>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dd0:	4b49      	ldr	r3, [pc, #292]	; (8004ef8 <prvAddNewTaskToReadyList+0x14c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d110      	bne.n	8004dfa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004dd8:	f000 ffc2 	bl	8005d60 <prvInitialiseTaskLists>
 8004ddc:	e00d      	b.n	8004dfa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004dde:	4b48      	ldr	r3, [pc, #288]	; (8004f00 <prvAddNewTaskToReadyList+0x154>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004de6:	4b45      	ldr	r3, [pc, #276]	; (8004efc <prvAddNewTaskToReadyList+0x150>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d802      	bhi.n	8004dfa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004df4:	4a41      	ldr	r2, [pc, #260]	; (8004efc <prvAddNewTaskToReadyList+0x150>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004dfa:	4b42      	ldr	r3, [pc, #264]	; (8004f04 <prvAddNewTaskToReadyList+0x158>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	4a40      	ldr	r2, [pc, #256]	; (8004f04 <prvAddNewTaskToReadyList+0x158>)
 8004e02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <prvAddNewTaskToReadyList+0x158>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <prvAddNewTaskToReadyList+0x94>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f004 f8b3 	bl	8008f80 <SEGGER_SYSVIEW_OnTaskCreate>
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	461d      	mov	r5, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461c      	mov	r4, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	1ae3      	subs	r3, r4, r3
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	f002 fbaa 	bl	8007594 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f004 f920 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <prvAddNewTaskToReadyList+0x15c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	4a2c      	ldr	r2, [pc, #176]	; (8004f08 <prvAddNewTaskToReadyList+0x15c>)
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	492b      	ldr	r1, [pc, #172]	; (8004f0c <prvAddNewTaskToReadyList+0x160>)
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	3204      	adds	r2, #4
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <prvAddNewTaskToReadyList+0x160>)
 8004e9e:	441a      	add	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	615a      	str	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4918      	ldr	r1, [pc, #96]	; (8004f0c <prvAddNewTaskToReadyList+0x160>)
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	1c59      	adds	r1, r3, #1
 8004eb8:	4814      	ldr	r0, [pc, #80]	; (8004f0c <prvAddNewTaskToReadyList+0x160>)
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4403      	add	r3, r0
 8004ec4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004ec6:	f001 fff5 	bl	8006eb4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <prvAddNewTaskToReadyList+0x154>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00e      	beq.n	8004ef0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvAddNewTaskToReadyList+0x150>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvAddNewTaskToReadyList+0x164>)
 8004ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ef8:	200003bc 	.word	0x200003bc
 8004efc:	200002d0 	.word	0x200002d0
 8004f00:	200003c8 	.word	0x200003c8
 8004f04:	200003d8 	.word	0x200003d8
 8004f08:	200003c4 	.word	0x200003c4
 8004f0c:	200002d4 	.word	0x200002d4
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004f1c:	f001 ff9a 	bl	8006e54 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <vTaskSuspend+0x18>
 8004f26:	4b4a      	ldr	r3, [pc, #296]	; (8005050 <vTaskSuspend+0x13c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	e000      	b.n	8004f2e <vTaskSuspend+0x1a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f004 f94a 	bl	80091cc <SEGGER_SYSVIEW_ShrinkId>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	2029      	movs	r0, #41	; 0x29
 8004f3e:	f003 fc11 	bl	8008764 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f90e 	bl	8004168 <uxListRemove>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d115      	bne.n	8004f7e <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	493f      	ldr	r1, [pc, #252]	; (8005054 <vTaskSuspend+0x140>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <vTaskSuspend+0x6a>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43da      	mvns	r2, r3
 8004f74:	4b38      	ldr	r3, [pc, #224]	; (8005058 <vTaskSuspend+0x144>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	4a37      	ldr	r2, [pc, #220]	; (8005058 <vTaskSuspend+0x144>)
 8004f7c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	3318      	adds	r3, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f8ec 	bl	8004168 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	211b      	movs	r1, #27
 8004f94:	4618      	mov	r0, r3
 8004f96:	f004 f8b9 	bl	800910c <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	482e      	ldr	r0, [pc, #184]	; (800505c <vTaskSuspend+0x148>)
 8004fa2:	f7ff f884 	bl	80040ae <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e010      	b.n	8004fce <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3354      	adds	r3, #84	; 0x54
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d105      	bne.n	8004fc8 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3354      	adds	r3, #84	; 0x54
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	ddeb      	ble.n	8004fac <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004fd4:	f001 ff6e 	bl	8006eb4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <vTaskSuspend+0x14c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004fe0:	f001 ff38 	bl	8006e54 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004fe4:	f000 ff3a 	bl	8005e5c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004fe8:	f001 ff64 	bl	8006eb4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004fec:	4b18      	ldr	r3, [pc, #96]	; (8005050 <vTaskSuspend+0x13c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d127      	bne.n	8005046 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <vTaskSuspend+0x14c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d017      	beq.n	800502e <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <vTaskSuspend+0x150>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <vTaskSuspend+0x108>
        __asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
    }
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <vTaskSuspend+0x154>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800502c:	e00b      	b.n	8005046 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800502e:	4b0b      	ldr	r3, [pc, #44]	; (800505c <vTaskSuspend+0x148>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <vTaskSuspend+0x158>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d103      	bne.n	8005042 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800503a:	4b05      	ldr	r3, [pc, #20]	; (8005050 <vTaskSuspend+0x13c>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
    }
 8005040:	e001      	b.n	8005046 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8005042:	f000 fc3d 	bl	80058c0 <vTaskSwitchContext>
    }
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200002d0 	.word	0x200002d0
 8005054:	200002d4 	.word	0x200002d4
 8005058:	200003c4 	.word	0x200003c4
 800505c:	200003a8 	.word	0x200003a8
 8005060:	200003c8 	.word	0x200003c8
 8005064:	200003e4 	.word	0x200003e4
 8005068:	e000ed04 	.word	0xe000ed04
 800506c:	200003bc 	.word	0x200003bc

08005070 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60fb      	str	r3, [r7, #12]
    }
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <prvTaskIsTaskSuspended+0x5c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10a      	bne.n	80050bc <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <prvTaskIsTaskSuspended+0x60>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d005      	beq.n	80050bc <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	200003a8 	.word	0x200003a8
 80050d0:	2000037c 	.word	0x2000037c

080050d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <vTaskResume+0x28>
        __asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60fb      	str	r3, [r7, #12]
    }
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80050fc:	4b3a      	ldr	r3, [pc, #232]	; (80051e8 <vTaskResume+0x114>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	429a      	cmp	r2, r3
 8005104:	d06c      	beq.n	80051e0 <vTaskResume+0x10c>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d069      	beq.n	80051e0 <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 800510c:	f001 fea2 	bl	8006e54 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f7ff ffad 	bl	8005070 <prvTaskIsTaskSuspended>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05f      	beq.n	80051dc <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4618      	mov	r0, r3
 8005120:	f004 f854 	bl	80091cc <SEGGER_SYSVIEW_ShrinkId>
 8005124:	4603      	mov	r3, r0
 8005126:	4619      	mov	r1, r3
 8005128:	202a      	movs	r0, #42	; 0x2a
 800512a:	f003 fb1b 	bl	8008764 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f818 	bl	8004168 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4618      	mov	r0, r3
 800513c:	f003 ffa4 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	2201      	movs	r2, #1
 8005146:	409a      	lsls	r2, r3
 8005148:	4b28      	ldr	r3, [pc, #160]	; (80051ec <vTaskResume+0x118>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	4a27      	ldr	r2, [pc, #156]	; (80051ec <vTaskResume+0x118>)
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005156:	4926      	ldr	r1, [pc, #152]	; (80051f0 <vTaskResume+0x11c>)
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3304      	adds	r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	3204      	adds	r2, #4
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <vTaskResume+0x11c>)
 8005196:	441a      	add	r2, r3
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	615a      	str	r2, [r3, #20]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a0:	4913      	ldr	r1, [pc, #76]	; (80051f0 <vTaskResume+0x11c>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	480f      	ldr	r0, [pc, #60]	; (80051f0 <vTaskResume+0x11c>)
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4403      	add	r3, r0
 80051bc:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <vTaskResume+0x114>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d307      	bcc.n	80051dc <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <vTaskResume+0x120>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80051dc:	f001 fe6a 	bl	8006eb4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80051e0:	bf00      	nop
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200002d0 	.word	0x200002d0
 80051ec:	200003c4 	.word	0x200003c4
 80051f0:	200002d4 	.word	0x200002d4
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xTaskResumeFromISR+0x2c>
        __asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	617b      	str	r3, [r7, #20]
    }
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005224:	f001 fefa 	bl	800701c <vPortValidateInterruptPriority>
        __asm volatile
 8005228:	f3ef 8211 	mrs	r2, BASEPRI
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	613a      	str	r2, [r7, #16]
 800523e:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8005240:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005242:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005244:	6a38      	ldr	r0, [r7, #32]
 8005246:	f7ff ff13 	bl	8005070 <prvTaskIsTaskSuspended>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d067      	beq.n	8005320 <xTaskResumeFromISR+0x128>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	4618      	mov	r0, r3
 8005254:	f003 ffba 	bl	80091cc <SEGGER_SYSVIEW_ShrinkId>
 8005258:	4603      	mov	r3, r0
 800525a:	4619      	mov	r1, r3
 800525c:	202b      	movs	r0, #43	; 0x2b
 800525e:	f003 fa81 	bl	8008764 <SEGGER_SYSVIEW_RecordU32>

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005262:	4b35      	ldr	r3, [pc, #212]	; (8005338 <xTaskResumeFromISR+0x140>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d154      	bne.n	8005314 <xTaskResumeFromISR+0x11c>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <xTaskResumeFromISR+0x144>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	429a      	cmp	r2, r3
 8005276:	d304      	bcc.n	8005282 <xTaskResumeFromISR+0x8a>
                    {
                        xYieldRequired = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 800527c:	4b30      	ldr	r3, [pc, #192]	; (8005340 <xTaskResumeFromISR+0x148>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe ff6e 	bl	8004168 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 fefa 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	4b29      	ldr	r3, [pc, #164]	; (8005344 <xTaskResumeFromISR+0x14c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <xTaskResumeFromISR+0x14c>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	4927      	ldr	r1, [pc, #156]	; (8005348 <xTaskResumeFromISR+0x150>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3304      	adds	r3, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	3204      	adds	r2, #4
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a17      	ldr	r2, [pc, #92]	; (8005348 <xTaskResumeFromISR+0x150>)
 80052ea:	441a      	add	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	615a      	str	r2, [r3, #20]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4914      	ldr	r1, [pc, #80]	; (8005348 <xTaskResumeFromISR+0x150>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	4810      	ldr	r0, [pc, #64]	; (8005348 <xTaskResumeFromISR+0x150>)
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4403      	add	r3, r0
 8005310:	6019      	str	r1, [r3, #0]
 8005312:	e005      	b.n	8005320 <xTaskResumeFromISR+0x128>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	3318      	adds	r3, #24
 8005318:	4619      	mov	r1, r3
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <xTaskResumeFromISR+0x154>)
 800531c:	f7fe fec7 	bl	80040ae <vListInsertEnd>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f383 8811 	msr	BASEPRI, r3
    }
 800532a:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200003e4 	.word	0x200003e4
 800533c:	200002d0 	.word	0x200002d0
 8005340:	200003d0 	.word	0x200003d0
 8005344:	200003c4 	.word	0x200003c4
 8005348:	200002d4 	.word	0x200002d4
 800534c:	2000037c 	.word	0x2000037c

08005350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005356:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <vTaskStartScheduler+0xa4>)
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	2282      	movs	r2, #130	; 0x82
 8005362:	4925      	ldr	r1, [pc, #148]	; (80053f8 <vTaskStartScheduler+0xa8>)
 8005364:	4825      	ldr	r0, [pc, #148]	; (80053fc <vTaskStartScheduler+0xac>)
 8005366:	f7ff fc4d 	bl	8004c04 <xTaskCreate>
 800536a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d102      	bne.n	8005378 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005372:	f001 f895 	bl	80064a0 <xTimerCreateTimerTask>
 8005376:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d124      	bne.n	80053c8 <vTaskStartScheduler+0x78>
        __asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60bb      	str	r3, [r7, #8]
    }
 8005390:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <vTaskStartScheduler+0xb0>)
 8005394:	f04f 32ff 	mov.w	r2, #4294967295
 8005398:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800539a:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <vTaskStartScheduler+0xb4>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053a0:	4b19      	ldr	r3, [pc, #100]	; (8005408 <vTaskStartScheduler+0xb8>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <vTaskStartScheduler+0xbc>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <vTaskStartScheduler+0xa4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d102      	bne.n	80053b8 <vTaskStartScheduler+0x68>
 80053b2:	f003 fdc9 	bl	8008f48 <SEGGER_SYSVIEW_OnIdle>
 80053b6:	e004      	b.n	80053c2 <vTaskStartScheduler+0x72>
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <vTaskStartScheduler+0xbc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f003 fe21 	bl	8009004 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80053c2:	f001 fc27 	bl	8006c14 <xPortStartScheduler>
 80053c6:	e00e      	b.n	80053e6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d10a      	bne.n	80053e6 <vTaskStartScheduler+0x96>
        __asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	607b      	str	r3, [r7, #4]
    }
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <vTaskStartScheduler+0xc0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	200003e0 	.word	0x200003e0
 80053f8:	08009ed8 	.word	0x08009ed8
 80053fc:	08005d2d 	.word	0x08005d2d
 8005400:	200003dc 	.word	0x200003dc
 8005404:	200003c8 	.word	0x200003c8
 8005408:	200003c0 	.word	0x200003c0
 800540c:	200002d0 	.word	0x200002d0
 8005410:	2000001c 	.word	0x2000001c

08005414 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <vTaskSuspendAll+0x18>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a03      	ldr	r2, [pc, #12]	; (800542c <vTaskSuspendAll+0x18>)
 8005420:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	200003e4 	.word	0x200003e4

08005430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800543e:	4b73      	ldr	r3, [pc, #460]	; (800560c <xTaskResumeAll+0x1dc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xTaskResumeAll+0x2c>
        __asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	607b      	str	r3, [r7, #4]
    }
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800545c:	f001 fcfa 	bl	8006e54 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005460:	4b6a      	ldr	r3, [pc, #424]	; (800560c <xTaskResumeAll+0x1dc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a69      	ldr	r2, [pc, #420]	; (800560c <xTaskResumeAll+0x1dc>)
 8005468:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b68      	ldr	r3, [pc, #416]	; (800560c <xTaskResumeAll+0x1dc>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 80c4 	bne.w	80055fc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005474:	4b66      	ldr	r3, [pc, #408]	; (8005610 <xTaskResumeAll+0x1e0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80bf 	beq.w	80055fc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800547e:	e08e      	b.n	800559e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005480:	4b64      	ldr	r3, [pc, #400]	; (8005614 <xTaskResumeAll+0x1e4>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	6a12      	ldr	r2, [r2, #32]
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	69d2      	ldr	r2, [r2, #28]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3318      	adds	r3, #24
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d103      	bne.n	80054b6 <xTaskResumeAll+0x86>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2200      	movs	r2, #0
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	68d2      	ldr	r2, [r2, #12]
 80054d4:	609a      	str	r2, [r3, #8]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	6892      	ldr	r2, [r2, #8]
 80054de:	605a      	str	r2, [r3, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3304      	adds	r3, #4
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d103      	bne.n	80054f4 <xTaskResumeAll+0xc4>
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	605a      	str	r2, [r3, #4]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2200      	movs	r2, #0
 80054f8:	615a      	str	r2, [r3, #20]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4618      	mov	r0, r3
 8005508:	f003 fdbe 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005510:	2201      	movs	r2, #1
 8005512:	409a      	lsls	r2, r3
 8005514:	4b40      	ldr	r3, [pc, #256]	; (8005618 <xTaskResumeAll+0x1e8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	4a3f      	ldr	r2, [pc, #252]	; (8005618 <xTaskResumeAll+0x1e8>)
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005522:	493e      	ldr	r1, [pc, #248]	; (800561c <xTaskResumeAll+0x1ec>)
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	3304      	adds	r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60bb      	str	r3, [r7, #8]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	3204      	adds	r2, #4
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	609a      	str	r2, [r3, #8]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a2e      	ldr	r2, [pc, #184]	; (800561c <xTaskResumeAll+0x1ec>)
 8005562:	441a      	add	r2, r3
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	615a      	str	r2, [r3, #20]
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	492b      	ldr	r1, [pc, #172]	; (800561c <xTaskResumeAll+0x1ec>)
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	4827      	ldr	r0, [pc, #156]	; (800561c <xTaskResumeAll+0x1ec>)
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4403      	add	r3, r0
 8005588:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <xTaskResumeAll+0x1f0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8005598:	4b22      	ldr	r3, [pc, #136]	; (8005624 <xTaskResumeAll+0x1f4>)
 800559a:	2201      	movs	r2, #1
 800559c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <xTaskResumeAll+0x1e4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f af6c 	bne.w	8005480 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80055ae:	f000 fc55 	bl	8005e5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <xTaskResumeAll+0x1f8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d010      	beq.n	80055e0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80055be:	f000 f865 	bl	800568c <xTaskIncrementTick>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80055c8:	4b16      	ldr	r3, [pc, #88]	; (8005624 <xTaskResumeAll+0x1f4>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f1      	bne.n	80055be <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80055da:	4b13      	ldr	r3, [pc, #76]	; (8005628 <xTaskResumeAll+0x1f8>)
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <xTaskResumeAll+0x1f4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <xTaskResumeAll+0x1fc>)
 80055ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80055fc:	f001 fc5a 	bl	8006eb4 <vPortExitCritical>

    return xAlreadyYielded;
 8005600:	69bb      	ldr	r3, [r7, #24]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	200003e4 	.word	0x200003e4
 8005610:	200003bc 	.word	0x200003bc
 8005614:	2000037c 	.word	0x2000037c
 8005618:	200003c4 	.word	0x200003c4
 800561c:	200002d4 	.word	0x200002d4
 8005620:	200002d0 	.word	0x200002d0
 8005624:	200003d0 	.word	0x200003d0
 8005628:	200003cc 	.word	0x200003cc
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <xTaskGetTickCount+0x1c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800563c:	687b      	ldr	r3, [r7, #4]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	200003c0 	.word	0x200003c0

08005650 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005656:	f001 fce1 	bl	800701c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <xTaskGetTickCountFromISR+0x20>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005664:	683b      	ldr	r3, [r7, #0]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200003c0 	.word	0x200003c0

08005674 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <uxTaskGetNumberOfTasks+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	200003bc 	.word	0x200003bc

0800568c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005696:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <xTaskIncrementTick+0x208>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	f040 80f0 	bne.w	8005880 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056a0:	4b7d      	ldr	r3, [pc, #500]	; (8005898 <xTaskIncrementTick+0x20c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80056a8:	4a7b      	ldr	r2, [pc, #492]	; (8005898 <xTaskIncrementTick+0x20c>)
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d120      	bne.n	80056f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80056b4:	4b79      	ldr	r3, [pc, #484]	; (800589c <xTaskIncrementTick+0x210>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	607b      	str	r3, [r7, #4]
    }
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <xTaskIncrementTick+0x46>
 80056d4:	4b71      	ldr	r3, [pc, #452]	; (800589c <xTaskIncrementTick+0x210>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	4b71      	ldr	r3, [pc, #452]	; (80058a0 <xTaskIncrementTick+0x214>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6f      	ldr	r2, [pc, #444]	; (800589c <xTaskIncrementTick+0x210>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	; (80058a0 <xTaskIncrementTick+0x214>)
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	4b6e      	ldr	r3, [pc, #440]	; (80058a4 <xTaskIncrementTick+0x218>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	4a6d      	ldr	r2, [pc, #436]	; (80058a4 <xTaskIncrementTick+0x218>)
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	f000 fbb3 	bl	8005e5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80056f6:	4b6c      	ldr	r3, [pc, #432]	; (80058a8 <xTaskIncrementTick+0x21c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6a3a      	ldr	r2, [r7, #32]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	f0c0 80aa 	bcc.w	8005856 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005702:	4b66      	ldr	r3, [pc, #408]	; (800589c <xTaskIncrementTick+0x210>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	4b66      	ldr	r3, [pc, #408]	; (80058a8 <xTaskIncrementTick+0x21c>)
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	601a      	str	r2, [r3, #0]
                    break;
 8005714:	e09f      	b.n	8005856 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005716:	4b61      	ldr	r3, [pc, #388]	; (800589c <xTaskIncrementTick+0x210>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005726:	6a3a      	ldr	r2, [r7, #32]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	429a      	cmp	r2, r3
 800572c:	d203      	bcs.n	8005736 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800572e:	4a5e      	ldr	r2, [pc, #376]	; (80058a8 <xTaskIncrementTick+0x21c>)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005734:	e08f      	b.n	8005856 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	68d2      	ldr	r2, [r2, #12]
 8005744:	609a      	str	r2, [r3, #8]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	6892      	ldr	r2, [r2, #8]
 800574e:	605a      	str	r2, [r3, #4]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	3304      	adds	r3, #4
 8005758:	429a      	cmp	r2, r3
 800575a:	d103      	bne.n	8005764 <xTaskIncrementTick+0xd8>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	2200      	movs	r2, #0
 8005768:	615a      	str	r2, [r3, #20]
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	6a12      	ldr	r2, [r2, #32]
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	69d2      	ldr	r2, [r2, #28]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	3318      	adds	r3, #24
 800579e:	429a      	cmp	r2, r3
 80057a0:	d103      	bne.n	80057aa <xTaskIncrementTick+0x11e>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2200      	movs	r2, #0
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	1e5a      	subs	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	4618      	mov	r0, r3
 80057be:	f003 fc63 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	2201      	movs	r2, #1
 80057c8:	409a      	lsls	r2, r3
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <xTaskIncrementTick+0x220>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	4a36      	ldr	r2, [pc, #216]	; (80058ac <xTaskIncrementTick+0x220>)
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	4935      	ldr	r1, [pc, #212]	; (80058b0 <xTaskIncrementTick+0x224>)
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	3304      	adds	r3, #4
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	3204      	adds	r2, #4
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	609a      	str	r2, [r3, #8]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <xTaskIncrementTick+0x224>)
 8005818:	441a      	add	r2, r3
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	615a      	str	r2, [r3, #20]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005822:	4923      	ldr	r1, [pc, #140]	; (80058b0 <xTaskIncrementTick+0x224>)
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	481f      	ldr	r0, [pc, #124]	; (80058b0 <xTaskIncrementTick+0x224>)
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4403      	add	r3, r0
 800583e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <xTaskIncrementTick+0x228>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	f67f af59 	bls.w	8005702 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005854:	e755      	b.n	8005702 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <xTaskIncrementTick+0x228>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	4914      	ldr	r1, [pc, #80]	; (80058b0 <xTaskIncrementTick+0x224>)
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d901      	bls.n	8005872 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800586e:	2301      	movs	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <xTaskIncrementTick+0x22c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	e004      	b.n	800588a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005880:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <xTaskIncrementTick+0x230>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <xTaskIncrementTick+0x230>)
 8005888:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800588c:	4618      	mov	r0, r3
 800588e:	3728      	adds	r7, #40	; 0x28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200003e4 	.word	0x200003e4
 8005898:	200003c0 	.word	0x200003c0
 800589c:	20000374 	.word	0x20000374
 80058a0:	20000378 	.word	0x20000378
 80058a4:	200003d4 	.word	0x200003d4
 80058a8:	200003dc 	.word	0x200003dc
 80058ac:	200003c4 	.word	0x200003c4
 80058b0:	200002d4 	.word	0x200002d4
 80058b4:	200002d0 	.word	0x200002d0
 80058b8:	200003d0 	.word	0x200003d0
 80058bc:	200003cc 	.word	0x200003cc

080058c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058c6:	4b2d      	ldr	r3, [pc, #180]	; (800597c <vTaskSwitchContext+0xbc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80058ce:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <vTaskSwitchContext+0xc0>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80058d4:	e04d      	b.n	8005972 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80058d6:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <vTaskSwitchContext+0xc0>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058dc:	4b29      	ldr	r3, [pc, #164]	; (8005984 <vTaskSwitchContext+0xc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	f1c3 031f 	rsb	r3, r3, #31
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	4925      	ldr	r1, [pc, #148]	; (8005988 <vTaskSwitchContext+0xc8>)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	607b      	str	r3, [r7, #4]
    }
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <vTaskSwitchContext+0x5a>
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a18      	ldr	r2, [pc, #96]	; (8005988 <vTaskSwitchContext+0xc8>)
 8005928:	4413      	add	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3308      	adds	r3, #8
 800593e:	429a      	cmp	r2, r3
 8005940:	d104      	bne.n	800594c <vTaskSwitchContext+0x8c>
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <vTaskSwitchContext+0xcc>)
 8005954:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <vTaskSwitchContext+0xcc>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <vTaskSwitchContext+0xd0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d102      	bne.n	8005968 <vTaskSwitchContext+0xa8>
 8005962:	f003 faf1 	bl	8008f48 <SEGGER_SYSVIEW_OnIdle>
}
 8005966:	e004      	b.n	8005972 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <vTaskSwitchContext+0xcc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f003 fb49 	bl	8009004 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200003e4 	.word	0x200003e4
 8005980:	200003d0 	.word	0x200003d0
 8005984:	200003c4 	.word	0x200003c4
 8005988:	200002d4 	.word	0x200002d4
 800598c:	200002d0 	.word	0x200002d0
 8005990:	200003e0 	.word	0x200003e0

08005994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
    }
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <vTaskPlaceOnEventList+0x44>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3318      	adds	r3, #24
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fe fb97 	bl	80040f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059c8:	2101      	movs	r1, #1
 80059ca:	6838      	ldr	r0, [r7, #0]
 80059cc:	f000 fce8 	bl	80063a0 <prvAddCurrentTaskToDelayedList>
}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200002d0 	.word	0x200002d0

080059dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	613b      	str	r3, [r7, #16]
    }
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	61da      	str	r2, [r3, #28]
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	6892      	ldr	r2, [r2, #8]
 8005a1a:	621a      	str	r2, [r3, #32]
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	3218      	adds	r2, #24
 8005a26:	605a      	str	r2, [r3, #4]
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f103 0218 	add.w	r2, r3, #24
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005a52:	2024      	movs	r0, #36	; 0x24
 8005a54:	f002 fe68 	bl	8008728 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f000 fca0 	bl	80063a0 <prvAddCurrentTaskToDelayedList>
    }
 8005a60:	bf00      	nop
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	200002d0 	.word	0x200002d0

08005a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60fb      	str	r3, [r7, #12]
    }
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	6a3a      	ldr	r2, [r7, #32]
 8005aa4:	6a12      	ldr	r2, [r2, #32]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	69d2      	ldr	r2, [r2, #28]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d103      	bne.n	8005ac6 <xTaskRemoveFromEventList+0x5a>
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	629a      	str	r2, [r3, #40]	; 0x28
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1e5a      	subs	r2, r3, #1
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <xTaskRemoveFromEventList+0x198>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d162      	bne.n	8005ba4 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	68d2      	ldr	r2, [r2, #12]
 8005aec:	609a      	str	r2, [r3, #8]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	6892      	ldr	r2, [r2, #8]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	3304      	adds	r3, #4
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d103      	bne.n	8005b0c <xTaskRemoveFromEventList+0xa0>
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	605a      	str	r2, [r3, #4]
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	615a      	str	r2, [r3, #20]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1e5a      	subs	r2, r3, #1
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f003 fab2 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <xTaskRemoveFromEventList+0x19c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	4a35      	ldr	r2, [pc, #212]	; (8005c08 <xTaskRemoveFromEventList+0x19c>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3a:	4934      	ldr	r1, [pc, #208]	; (8005c0c <xTaskRemoveFromEventList+0x1a0>)
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	3304      	adds	r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	613b      	str	r3, [r7, #16]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	609a      	str	r2, [r3, #8]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	3204      	adds	r2, #4
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <xTaskRemoveFromEventList+0x1a0>)
 8005b7a:	441a      	add	r2, r3
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	615a      	str	r2, [r3, #20]
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	4921      	ldr	r1, [pc, #132]	; (8005c0c <xTaskRemoveFromEventList+0x1a0>)
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	481d      	ldr	r0, [pc, #116]	; (8005c0c <xTaskRemoveFromEventList+0x1a0>)
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4403      	add	r3, r0
 8005ba0:	6019      	str	r1, [r3, #0]
 8005ba2:	e01b      	b.n	8005bdc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <xTaskRemoveFromEventList+0x1a4>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	61da      	str	r2, [r3, #28]
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	621a      	str	r2, [r3, #32]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	6a3a      	ldr	r2, [r7, #32]
 8005bbe:	3218      	adds	r2, #24
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	f103 0218 	add.w	r2, r3, #24
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <xTaskRemoveFromEventList+0x1a4>)
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <xTaskRemoveFromEventList+0x1a4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <xTaskRemoveFromEventList+0x1a4>)
 8005bda:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <xTaskRemoveFromEventList+0x1a8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d905      	bls.n	8005bf6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <xTaskRemoveFromEventList+0x1ac>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e001      	b.n	8005bfa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3728      	adds	r7, #40	; 0x28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200003e4 	.word	0x200003e4
 8005c08:	200003c4 	.word	0x200003c4
 8005c0c:	200002d4 	.word	0x200002d4
 8005c10:	2000037c 	.word	0x2000037c
 8005c14:	200002d0 	.word	0x200002d0
 8005c18:	200003d0 	.word	0x200003d0

08005c1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <vTaskInternalSetTimeOutState+0x24>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <vTaskInternalSetTimeOutState+0x28>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	200003d4 	.word	0x200003d4
 8005c44:	200003c0 	.word	0x200003c0

08005c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	613b      	str	r3, [r7, #16]
    }
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
    }
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005c8a:	f001 f8e3 	bl	8006e54 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <xTaskCheckForTimeOut+0xc4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d102      	bne.n	8005cae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e026      	b.n	8005cfc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <xTaskCheckForTimeOut+0xc8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d00a      	beq.n	8005cd0 <xTaskCheckForTimeOut+0x88>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d305      	bcc.n	8005cd0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e015      	b.n	8005cfc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d20b      	bcs.n	8005cf2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ff98 	bl	8005c1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e004      	b.n	8005cfc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005cfc:	f001 f8da 	bl	8006eb4 <vPortExitCritical>

    return xReturn;
 8005d00:	69fb      	ldr	r3, [r7, #28]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200003c0 	.word	0x200003c0
 8005d10:	200003d4 	.word	0x200003d4

08005d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <vTaskMissedYield+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	200003d0 	.word	0x200003d0

08005d2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d34:	f000 f854 	bl	8005de0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d38:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <prvIdleTask+0x2c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d907      	bls.n	8005d50 <prvIdleTask+0x24>
            {
                taskYIELD();
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <prvIdleTask+0x30>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8005d50:	f7fb fb84 	bl	800145c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8005d54:	e7ee      	b.n	8005d34 <prvIdleTask+0x8>
 8005d56:	bf00      	nop
 8005d58:	200002d4 	.word	0x200002d4
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	e00c      	b.n	8005d86 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <prvInitialiseTaskLists+0x60>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fe f96a 	bl	8004054 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3301      	adds	r3, #1
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d9ef      	bls.n	8005d6c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005d8c:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005d8e:	f7fe f961 	bl	8004054 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005d92:	480d      	ldr	r0, [pc, #52]	; (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005d94:	f7fe f95e 	bl	8004054 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005d98:	480c      	ldr	r0, [pc, #48]	; (8005dcc <prvInitialiseTaskLists+0x6c>)
 8005d9a:	f7fe f95b 	bl	8004054 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005d9e:	480c      	ldr	r0, [pc, #48]	; (8005dd0 <prvInitialiseTaskLists+0x70>)
 8005da0:	f7fe f958 	bl	8004054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005da4:	480b      	ldr	r0, [pc, #44]	; (8005dd4 <prvInitialiseTaskLists+0x74>)
 8005da6:	f7fe f955 	bl	8004054 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <prvInitialiseTaskLists+0x78>)
 8005dac:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <prvInitialiseTaskLists+0x64>)
 8005dae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <prvInitialiseTaskLists+0x7c>)
 8005db2:	4a05      	ldr	r2, [pc, #20]	; (8005dc8 <prvInitialiseTaskLists+0x68>)
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200002d4 	.word	0x200002d4
 8005dc4:	2000034c 	.word	0x2000034c
 8005dc8:	20000360 	.word	0x20000360
 8005dcc:	2000037c 	.word	0x2000037c
 8005dd0:	20000390 	.word	0x20000390
 8005dd4:	200003a8 	.word	0x200003a8
 8005dd8:	20000374 	.word	0x20000374
 8005ddc:	20000378 	.word	0x20000378

08005de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de6:	e019      	b.n	8005e1c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005de8:	f001 f834 	bl	8006e54 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <prvCheckTasksWaitingTermination+0x50>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe f9b5 	bl	8004168 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4a0b      	ldr	r2, [pc, #44]	; (8005e34 <prvCheckTasksWaitingTermination+0x54>)
 8005e06:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e10:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005e12:	f001 f84f 	bl	8006eb4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f810 	bl	8005e3c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <prvCheckTasksWaitingTermination+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e1      	bne.n	8005de8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000390 	.word	0x20000390
 8005e34:	200003bc 	.word	0x200003bc
 8005e38:	200003a4 	.word	0x200003a4

08005e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 f9e1 	bl	8007210 <vPortFree>
            vPortFree( pxTCB );
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 f9de 	bl	8007210 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <prvResetNextTaskUnblockTime+0x30>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <prvResetNextTaskUnblockTime+0x34>)
 8005e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005e72:	e005      	b.n	8005e80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e74:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <prvResetNextTaskUnblockTime+0x30>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <prvResetNextTaskUnblockTime+0x34>)
 8005e7e:	6013      	str	r3, [r2, #0]
}
 8005e80:	bf00      	nop
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000374 	.word	0x20000374
 8005e90:	200003dc 	.word	0x200003dc

08005e94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <xTaskGetSchedulerState+0x34>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	e008      	b.n	8005eba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <xTaskGetSchedulerState+0x38>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	e001      	b.n	8005eba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005eba:	687b      	ldr	r3, [r7, #4]
    }
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	200003c8 	.word	0x200003c8
 8005ecc:	200003e4 	.word	0x200003e4

08005ed0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8095 	beq.w	8006012 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	; (800601c <xTaskPriorityDisinherit+0x14c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d00a      	beq.n	8005f08 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	613b      	str	r3, [r7, #16]
    }
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
    }
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	1e5a      	subs	r2, r3, #1
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d06a      	beq.n	8006012 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d166      	bne.n	8006012 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe f90d 	bl	8004168 <uxListRemove>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	2201      	movs	r2, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	43da      	mvns	r2, r3
 8005f60:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <xTaskPriorityDisinherit+0x150>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4013      	ands	r3, r2
 8005f66:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <xTaskPriorityDisinherit+0x150>)
 8005f68:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	204a      	movs	r0, #74	; 0x4a
 8005f70:	f002 fbf8 	bl	8008764 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f1c3 0206 	rsb	r2, r3, #6
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f003 f87c 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	2201      	movs	r2, #1
 8005f96:	409a      	lsls	r2, r3
 8005f98:	4b21      	ldr	r3, [pc, #132]	; (8006020 <xTaskPriorityDisinherit+0x150>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <xTaskPriorityDisinherit+0x150>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	491f      	ldr	r1, [pc, #124]	; (8006024 <xTaskPriorityDisinherit+0x154>)
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	609a      	str	r2, [r3, #8]
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	3204      	adds	r2, #4
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1d1a      	adds	r2, r3, #4
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4a0f      	ldr	r2, [pc, #60]	; (8006024 <xTaskPriorityDisinherit+0x154>)
 8005fe6:	441a      	add	r2, r3
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	615a      	str	r2, [r3, #20]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	490c      	ldr	r1, [pc, #48]	; (8006024 <xTaskPriorityDisinherit+0x154>)
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1c59      	adds	r1, r3, #1
 8006000:	4808      	ldr	r0, [pc, #32]	; (8006024 <xTaskPriorityDisinherit+0x154>)
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4403      	add	r3, r0
 800600c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800600e:	2301      	movs	r3, #1
 8006010:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006012:	69fb      	ldr	r3, [r7, #28]
    }
 8006014:	4618      	mov	r0, r3
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200002d0 	.word	0x200002d0
 8006020:	200003c4 	.word	0x200003c4
 8006024:	200002d4 	.word	0x200002d4

08006028 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	613b      	str	r3, [r7, #16]
    }
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006052:	f000 feff 	bl	8006e54 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	3354      	adds	r3, #84	; 0x54
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d022      	beq.n	80060ae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	3214      	adds	r2, #20
 8006070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	43d2      	mvns	r2, r2
 8006078:	4011      	ands	r1, r2
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	3214      	adds	r2, #20
 800607e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006082:	4b2b      	ldr	r3, [pc, #172]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	3354      	adds	r3, #84	; 0x54
 800608c:	2201      	movs	r2, #1
 800608e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006096:	2101      	movs	r1, #1
 8006098:	6a38      	ldr	r0, [r7, #32]
 800609a:	f000 f981 	bl	80063a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800609e:	4b25      	ldr	r3, [pc, #148]	; (8006134 <xTaskGenericNotifyWait+0x10c>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80060ae:	f000 ff01 	bl	8006eb4 <vPortExitCritical>

        taskENTER_CRITICAL();
 80060b2:	f000 fecf 	bl	8006e54 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	2040      	movs	r0, #64	; 0x40
 80060c4:	f002 fbe4 	bl	8008890 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	3214      	adds	r2, #20
 80060d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80060de:	4b14      	ldr	r3, [pc, #80]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	3354      	adds	r3, #84	; 0x54
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d002      	beq.n	80060f6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	e00e      	b.n	8006114 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	3214      	adds	r2, #20
 80060fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	43d2      	mvns	r2, r2
 8006106:	4011      	ands	r1, r2
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	3214      	adds	r2, #20
 800610c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <xTaskGenericNotifyWait+0x108>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	3354      	adds	r3, #84	; 0x54
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006122:	f000 fec7 	bl	8006eb4 <vPortExitCritical>

        return xReturn;
 8006126:	697b      	ldr	r3, [r7, #20]
    }
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200002d0 	.word	0x200002d0
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006138:	b580      	push	{r7, lr}
 800613a:	b090      	sub	sp, #64	; 0x40
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006146:	2301      	movs	r3, #1
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
    }
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xTaskGenericNotify+0x4a>
        __asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61fb      	str	r3, [r7, #28]
    }
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8006186:	f000 fe65 	bl	8006e54 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	3214      	adds	r2, #20
 8006196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800619e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4413      	add	r3, r2
 80061a4:	3354      	adds	r3, #84	; 0x54
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	3354      	adds	r3, #84	; 0x54
 80061b4:	2202      	movs	r2, #2
 80061b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d83b      	bhi.n	8006236 <xTaskGenericNotify+0xfe>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <xTaskGenericNotify+0x8c>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	08006255 	.word	0x08006255
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	0800620d 	.word	0x0800620d
 80061d4:	0800621b 	.word	0x0800621b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	3214      	adds	r2, #20
 80061de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	ea42 0103 	orr.w	r1, r2, r3
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	3214      	adds	r2, #20
 80061ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061f2:	e032      	b.n	800625a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	3214      	adds	r2, #20
 80061fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	3214      	adds	r2, #20
 8006206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800620a:	e026      	b.n	800625a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	3214      	adds	r2, #20
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006218:	e01f      	b.n	800625a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800621a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800621e:	2b02      	cmp	r3, #2
 8006220:	d006      	beq.n	8006230 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	3214      	adds	r2, #20
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800622e:	e014      	b.n	800625a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006230:	2300      	movs	r3, #0
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8006234:	e011      	b.n	800625a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006236:	4b55      	ldr	r3, [pc, #340]	; (800638c <xTaskGenericNotify+0x254>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <xTaskGenericNotify+0x120>
        __asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	61bb      	str	r3, [r7, #24]
    }
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <xTaskGenericNotify+0x11a>
                    break;
 8006254:	bf00      	nop
 8006256:	e000      	b.n	800625a <xTaskGenericNotify+0x122>

                    break;
 8006258:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	4618      	mov	r0, r3
 800625e:	f002 ffb5 	bl	80091cc <SEGGER_SYSVIEW_ShrinkId>
 8006262:	4601      	mov	r1, r0
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4613      	mov	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	203e      	movs	r0, #62	; 0x3e
 8006270:	f002 fb0e 	bl	8008890 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006278:	2b01      	cmp	r3, #1
 800627a:	d17f      	bne.n	800637c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006288:	68d2      	ldr	r2, [r2, #12]
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006292:	6892      	ldr	r2, [r2, #8]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	3304      	adds	r3, #4
 800629e:	429a      	cmp	r2, r3
 80062a0:	d103      	bne.n	80062aa <xTaskGenericNotify+0x172>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2200      	movs	r2, #0
 80062ae:	615a      	str	r2, [r3, #20]
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	1e5a      	subs	r2, r3, #1
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 fee3 	bl	8009088 <SEGGER_SYSVIEW_OnTaskStartReady>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	2201      	movs	r2, #1
 80062c8:	409a      	lsls	r2, r3
 80062ca:	4b31      	ldr	r3, [pc, #196]	; (8006390 <xTaskGenericNotify+0x258>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <xTaskGenericNotify+0x258>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	492e      	ldr	r1, [pc, #184]	; (8006394 <xTaskGenericNotify+0x25c>)
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	3304      	adds	r3, #4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	609a      	str	r2, [r3, #8]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	3204      	adds	r2, #4
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	1d1a      	adds	r2, r3, #4
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <xTaskGenericNotify+0x25c>)
 8006318:	441a      	add	r2, r3
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	615a      	str	r2, [r3, #20]
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	491c      	ldr	r1, [pc, #112]	; (8006394 <xTaskGenericNotify+0x25c>)
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	4818      	ldr	r0, [pc, #96]	; (8006394 <xTaskGenericNotify+0x25c>)
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4403      	add	r3, r0
 800633e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <xTaskGenericNotify+0x226>
        __asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	617b      	str	r3, [r7, #20]
    }
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <xTaskGenericNotify+0x260>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	429a      	cmp	r2, r3
 800636a:	d907      	bls.n	800637c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <xTaskGenericNotify+0x264>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800637c:	f000 fd9a 	bl	8006eb4 <vPortExitCritical>

        return xReturn;
 8006380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006382:	4618      	mov	r0, r3
 8006384:	3738      	adds	r7, #56	; 0x38
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200003c0 	.word	0x200003c0
 8006390:	200003c4 	.word	0x200003c4
 8006394:	200002d4 	.word	0x200002d4
 8006398:	200002d0 	.word	0x200002d0
 800639c:	e000ed04 	.word	0xe000ed04

080063a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80063aa:	4b36      	ldr	r3, [pc, #216]	; (8006484 <prvAddCurrentTaskToDelayedList+0xe4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063b0:	4b35      	ldr	r3, [pc, #212]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3304      	adds	r3, #4
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd fed6 	bl	8004168 <uxListRemove>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063c2:	4b31      	ldr	r3, [pc, #196]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2201      	movs	r2, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	43da      	mvns	r2, r3
 80063d0:	4b2e      	ldr	r3, [pc, #184]	; (800648c <prvAddCurrentTaskToDelayedList+0xec>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4013      	ands	r3, r2
 80063d6:	4a2d      	ldr	r2, [pc, #180]	; (800648c <prvAddCurrentTaskToDelayedList+0xec>)
 80063d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d124      	bne.n	800642c <prvAddCurrentTaskToDelayedList+0x8c>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d021      	beq.n	800642c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <prvAddCurrentTaskToDelayedList+0xf0>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	6892      	ldr	r2, [r2, #8]
 80063fe:	60da      	str	r2, [r3, #12]
 8006400:	4b21      	ldr	r3, [pc, #132]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	3204      	adds	r2, #4
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	1d1a      	adds	r2, r3, #4
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <prvAddCurrentTaskToDelayedList+0xf0>)
 800641c:	615a      	str	r2, [r3, #20]
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800642a:	e026      	b.n	800647a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006434:	4b14      	ldr	r3, [pc, #80]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	429a      	cmp	r2, r3
 8006442:	d209      	bcs.n	8006458 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006444:	4b13      	ldr	r3, [pc, #76]	; (8006494 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3304      	adds	r3, #4
 800644e:	4619      	mov	r1, r3
 8006450:	4610      	mov	r0, r2
 8006452:	f7fd fe50 	bl	80040f6 <vListInsert>
}
 8006456:	e010      	b.n	800647a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006458:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <prvAddCurrentTaskToDelayedList+0xf8>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <prvAddCurrentTaskToDelayedList+0xe8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3304      	adds	r3, #4
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f7fd fe46 	bl	80040f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800646a:	4b0c      	ldr	r3, [pc, #48]	; (800649c <prvAddCurrentTaskToDelayedList+0xfc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	429a      	cmp	r2, r3
 8006472:	d202      	bcs.n	800647a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006474:	4a09      	ldr	r2, [pc, #36]	; (800649c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6013      	str	r3, [r2, #0]
}
 800647a:	bf00      	nop
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	200003c0 	.word	0x200003c0
 8006488:	200002d0 	.word	0x200002d0
 800648c:	200003c4 	.word	0x200003c4
 8006490:	200003a8 	.word	0x200003a8
 8006494:	20000378 	.word	0x20000378
 8006498:	20000374 	.word	0x20000374
 800649c:	200003dc 	.word	0x200003dc

080064a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80064aa:	f000 faef 	bl	8006a8c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <xTimerCreateTimerTask+0x54>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <xTimerCreateTimerTask+0x58>)
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	2302      	movs	r3, #2
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2300      	movs	r3, #0
 80064c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80064c4:	490d      	ldr	r1, [pc, #52]	; (80064fc <xTimerCreateTimerTask+0x5c>)
 80064c6:	480e      	ldr	r0, [pc, #56]	; (8006500 <xTimerCreateTimerTask+0x60>)
 80064c8:	f7fe fb9c 	bl	8004c04 <xTaskCreate>
 80064cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	603b      	str	r3, [r7, #0]
    }
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80064ea:	687b      	ldr	r3, [r7, #4]
    }
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000418 	.word	0x20000418
 80064f8:	2000041c 	.word	0x2000041c
 80064fc:	08009ee0 	.word	0x08009ee0
 8006500:	080066f9 	.word	0x080066f9

08006504 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006512:	202c      	movs	r0, #44	; 0x2c
 8006514:	f000 fdc2 	bl	800709c <pvPortMalloc>
 8006518:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f805 	bl	8006546 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800653c:	697b      	ldr	r3, [r7, #20]
        }
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
 8006552:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	617b      	str	r3, [r7, #20]
    }
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006570:	f000 fa8c 	bl	8006a8c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3304      	adds	r3, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f7fd fd7f 	bl	8004094 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a2:	f043 0304 	orr.w	r3, r3, #4
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	623b      	str	r3, [r7, #32]
    }
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80065e6:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <xTimerGenericCommand+0x98>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d02a      	beq.n	8006644 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b05      	cmp	r3, #5
 80065fe:	dc18      	bgt.n	8006632 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006600:	f7ff fc48 	bl	8005e94 <xTaskGetSchedulerState>
 8006604:	4603      	mov	r3, r0
 8006606:	2b02      	cmp	r3, #2
 8006608:	d109      	bne.n	800661e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <xTimerGenericCommand+0x98>)
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f107 0114 	add.w	r1, r7, #20
 8006612:	2300      	movs	r3, #0
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	f7fd fed3 	bl	80043c0 <xQueueGenericSend>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24
 800661c:	e012      	b.n	8006644 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <xTimerGenericCommand+0x98>)
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	f107 0114 	add.w	r1, r7, #20
 8006626:	2300      	movs	r3, #0
 8006628:	2200      	movs	r2, #0
 800662a:	f7fd fec9 	bl	80043c0 <xQueueGenericSend>
 800662e:	6278      	str	r0, [r7, #36]	; 0x24
 8006630:	e008      	b.n	8006644 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <xTimerGenericCommand+0x98>)
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	f107 0114 	add.w	r1, r7, #20
 800663a:	2300      	movs	r3, #0
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	f7fd ffbd 	bl	80045bc <xQueueGenericSendFromISR>
 8006642:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006646:	4618      	mov	r0, r3
 8006648:	3728      	adds	r7, #40	; 0x28
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000418 	.word	0x20000418

08006654 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006660:	e008      	b.n	8006674 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	18d1      	adds	r1, r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f8dd 	bl	8006840 <prvInsertTimerInActiveList>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1ea      	bne.n	8006662 <prvReloadTimer+0xe>
        }
    }
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066a2:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <prvProcessExpiredTimer+0x5c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3304      	adds	r3, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd fd59 	bl	8004168 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f7ff ffc3 	bl	8006654 <prvReloadTimer>
 80066ce:	e008      	b.n	80066e2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	4798      	blx	r3
    }
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000410 	.word	0x20000410

080066f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f857 	bl	80067b8 <prvGetNextExpireTime>
 800670a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4619      	mov	r1, r3
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f803 	bl	800671c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006716:	f000 f8d5 	bl	80068c4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800671a:	e7f1      	b.n	8006700 <prvTimerTask+0x8>

0800671c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006726:	f7fe fe75 	bl	8005414 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f866 	bl	8006800 <prvSampleTimeNow>
 8006734:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d130      	bne.n	800679e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <prvProcessTimerOrBlockTask+0x3c>
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	429a      	cmp	r2, r3
 8006748:	d806      	bhi.n	8006758 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800674a:	f7fe fe71 	bl	8005430 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7ff ffa1 	bl	8006698 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006756:	e024      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <prvProcessTimerOrBlockTask+0x90>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <prvProcessTimerOrBlockTask+0x50>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <prvProcessTimerOrBlockTask+0x52>
 800676c:	2300      	movs	r3, #0
 800676e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <prvProcessTimerOrBlockTask+0x94>)
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	f7fe fa0d 	bl	8004b9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006782:	f7fe fe55 	bl	8005430 <xTaskResumeAll>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <prvProcessTimerOrBlockTask+0x98>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
    }
 800679c:	e001      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800679e:	f7fe fe47 	bl	8005430 <xTaskResumeAll>
    }
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000414 	.word	0x20000414
 80067b0:	20000418 	.word	0x20000418
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <prvGetNextExpireTime+0x44>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <prvGetNextExpireTime+0x16>
 80067ca:	2201      	movs	r2, #1
 80067cc:	e000      	b.n	80067d0 <prvGetNextExpireTime+0x18>
 80067ce:	2200      	movs	r2, #0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067dc:	4b07      	ldr	r3, [pc, #28]	; (80067fc <prvGetNextExpireTime+0x44>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e001      	b.n	80067ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80067ec:	68fb      	ldr	r3, [r7, #12]
    }
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000410 	.word	0x20000410

08006800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006808:	f7fe ff12 	bl	8005630 <xTaskGetTickCount>
 800680c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <prvSampleTimeNow+0x3c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	429a      	cmp	r2, r3
 8006816:	d205      	bcs.n	8006824 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006818:	f000 f912 	bl	8006a40 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e002      	b.n	800682a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <prvSampleTimeNow+0x3c>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006830:	68fb      	ldr	r3, [r7, #12]
    }
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20000420 	.word	0x20000420

08006840 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d812      	bhi.n	800688c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	1ad2      	subs	r2, r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	429a      	cmp	r2, r3
 8006872:	d302      	bcc.n	800687a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e01b      	b.n	80068b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <prvInsertTimerInActiveList+0x7c>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fd fc36 	bl	80040f6 <vListInsert>
 800688a:	e012      	b.n	80068b2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d206      	bcs.n	80068a2 <prvInsertTimerInActiveList+0x62>
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d302      	bcc.n	80068a2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e007      	b.n	80068b2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <prvInsertTimerInActiveList+0x80>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f7fd fc22 	bl	80040f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80068b2:	697b      	ldr	r3, [r7, #20]
    }
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000414 	.word	0x20000414
 80068c0:	20000410 	.word	0x20000410

080068c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068ca:	e0a6      	b.n	8006a1a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f2c0 80a3 	blt.w	8006a1a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fd fc3f 	bl	8004168 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ff87 	bl	8006800 <prvSampleTimeNow>
 80068f2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	f200 808d 	bhi.w	8006a18 <prvProcessReceivedCommands+0x154>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <prvProcessReceivedCommands+0x40>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006929 	.word	0x08006929
 8006908:	08006929 	.word	0x08006929
 800690c:	08006991 	.word	0x08006991
 8006910:	080069a5 	.word	0x080069a5
 8006914:	080069ef 	.word	0x080069ef
 8006918:	08006929 	.word	0x08006929
 800691c:	08006929 	.word	0x08006929
 8006920:	08006991 	.word	0x08006991
 8006924:	080069a5 	.word	0x080069a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	18d1      	adds	r1, r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	69f8      	ldr	r0, [r7, #28]
 8006948:	f7ff ff7a 	bl	8006840 <prvInsertTimerInActiveList>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d063      	beq.n	8006a1a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	4413      	add	r3, r2
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4619      	mov	r1, r3
 800696c:	69f8      	ldr	r0, [r7, #28]
 800696e:	f7ff fe71 	bl	8006654 <prvReloadTimer>
 8006972:	e008      	b.n	8006986 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	69f8      	ldr	r0, [r7, #28]
 800698c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800698e:	e044      	b.n	8006a1a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80069a2:	e03a      	b.n	8006a1a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <prvProcessReceivedCommands+0x116>
        __asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	617b      	str	r3, [r7, #20]
    }
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	18d1      	adds	r1, r2, r3
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	69f8      	ldr	r0, [r7, #28]
 80069e8:	f7ff ff2a 	bl	8006840 <prvInsertTimerInActiveList>
                        break;
 80069ec:	e015      	b.n	8006a1a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80069fc:	69f8      	ldr	r0, [r7, #28]
 80069fe:	f000 fc07 	bl	8007210 <vPortFree>
 8006a02:	e00a      	b.n	8006a1a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a0a:	f023 0301 	bic.w	r3, r3, #1
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006a16:	e000      	b.n	8006a1a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006a18:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <prvProcessReceivedCommands+0x178>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f107 0108 	add.w	r1, r7, #8
 8006a22:	2200      	movs	r2, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd fe7b 	bl	8004720 <xQueueReceive>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f af4d 	bne.w	80068cc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000418 	.word	0x20000418

08006a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a46:	e009      	b.n	8006a5c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a48:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <prvSwitchTimerLists+0x44>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006a52:	f04f 31ff 	mov.w	r1, #4294967295
 8006a56:	6838      	ldr	r0, [r7, #0]
 8006a58:	f7ff fe1e 	bl	8006698 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <prvSwitchTimerLists+0x44>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006a66:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvSwitchTimerLists+0x44>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <prvSwitchTimerLists+0x48>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <prvSwitchTimerLists+0x44>)
 8006a72:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0x48>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6013      	str	r3, [r2, #0]
    }
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000410 	.word	0x20000410
 8006a88:	20000414 	.word	0x20000414

08006a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006a90:	f000 f9e0 	bl	8006e54 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006a94:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <prvCheckForValidListAndQueue+0x54>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11d      	bne.n	8006ad8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006a9c:	4811      	ldr	r0, [pc, #68]	; (8006ae4 <prvCheckForValidListAndQueue+0x58>)
 8006a9e:	f7fd fad9 	bl	8004054 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006aa2:	4811      	ldr	r0, [pc, #68]	; (8006ae8 <prvCheckForValidListAndQueue+0x5c>)
 8006aa4:	f7fd fad6 	bl	8004054 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006aa8:	4b10      	ldr	r3, [pc, #64]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ae4 <prvCheckForValidListAndQueue+0x58>)
 8006aac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006aae:	4b10      	ldr	r3, [pc, #64]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <prvCheckForValidListAndQueue+0x5c>)
 8006ab2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	210c      	movs	r1, #12
 8006ab8:	200a      	movs	r0, #10
 8006aba:	f7fd fc0f 	bl	80042dc <xQueueGenericCreate>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4a07      	ldr	r2, [pc, #28]	; (8006ae0 <prvCheckForValidListAndQueue+0x54>)
 8006ac2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <prvCheckForValidListAndQueue+0x54>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006acc:	4b04      	ldr	r3, [pc, #16]	; (8006ae0 <prvCheckForValidListAndQueue+0x54>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4908      	ldr	r1, [pc, #32]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe f814 	bl	8004b00 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ad8:	f000 f9ec 	bl	8006eb4 <vPortExitCritical>
    }
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000418 	.word	0x20000418
 8006ae4:	200003e8 	.word	0x200003e8
 8006ae8:	200003fc 	.word	0x200003fc
 8006aec:	20000410 	.word	0x20000410
 8006af0:	20000414 	.word	0x20000414
 8006af4:	08009ee8 	.word	0x08009ee8

08006af8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3b04      	subs	r3, #4
 8006b08:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b04      	subs	r3, #4
 8006b26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006b28:	4a0c      	ldr	r2, [pc, #48]	; (8006b5c <pxPortInitialiseStack+0x64>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b14      	subs	r3, #20
 8006b32:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f06f 0202 	mvn.w	r2, #2
 8006b46:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3b20      	subs	r3, #32
 8006b4c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	08006b61 	.word	0x08006b61

08006b60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <prvTaskExitError+0x54>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	d00a      	beq.n	8006b8a <prvTaskExitError+0x2a>
        __asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	60fb      	str	r3, [r7, #12]
    }
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <prvTaskExitError+0x28>
        __asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60bb      	str	r3, [r7, #8]
    }
 8006b9c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006b9e:	bf00      	nop
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0fc      	beq.n	8006ba0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000020 	.word	0x20000020
	...

08006bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <pxCurrentTCBConst2>)
 8006bc2:	6819      	ldr	r1, [r3, #0]
 8006bc4:	6808      	ldr	r0, [r1, #0]
 8006bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	f380 8809 	msr	PSP, r0
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8811 	msr	BASEPRI, r0
 8006bda:	4770      	bx	lr
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst2>:
 8006be0:	200002d0 	.word	0x200002d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006be8:	4808      	ldr	r0, [pc, #32]	; (8006c0c <prvPortStartFirstTask+0x24>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8814 	msr	CONTROL, r0
 8006bfa:	b662      	cpsie	i
 8006bfc:	b661      	cpsie	f
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	df00      	svc	0
 8006c08:	bf00      	nop
 8006c0a:	0000      	.short	0x0000
 8006c0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop

08006c14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c1a:	4b46      	ldr	r3, [pc, #280]	; (8006d34 <xPortStartScheduler+0x120>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a46      	ldr	r2, [pc, #280]	; (8006d38 <xPortStartScheduler+0x124>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10a      	bne.n	8006c3a <xPortStartScheduler+0x26>
        __asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	613b      	str	r3, [r7, #16]
    }
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c3a:	4b3e      	ldr	r3, [pc, #248]	; (8006d34 <xPortStartScheduler+0x120>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a3f      	ldr	r2, [pc, #252]	; (8006d3c <xPortStartScheduler+0x128>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10a      	bne.n	8006c5a <xPortStartScheduler+0x46>
        __asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	60fb      	str	r3, [r7, #12]
    }
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <xPortStartScheduler+0x12c>)
 8006c5c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	22ff      	movs	r2, #255	; 0xff
 8006c6a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <xPortStartScheduler+0x130>)
 8006c80:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <xPortStartScheduler+0x134>)
 8006c84:	2207      	movs	r2, #7
 8006c86:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c88:	e009      	b.n	8006c9e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <xPortStartScheduler+0x134>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	4a2d      	ldr	r2, [pc, #180]	; (8006d48 <xPortStartScheduler+0x134>)
 8006c92:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	d0ef      	beq.n	8006c8a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006caa:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <xPortStartScheduler+0x134>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1c3 0307 	rsb	r3, r3, #7
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d00a      	beq.n	8006ccc <xPortStartScheduler+0xb8>
        __asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
    }
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <xPortStartScheduler+0x134>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <xPortStartScheduler+0x134>)
 8006cd4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <xPortStartScheduler+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cde:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <xPortStartScheduler+0x134>)
 8006ce0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006cea:	4b18      	ldr	r3, [pc, #96]	; (8006d4c <xPortStartScheduler+0x138>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <xPortStartScheduler+0x138>)
 8006cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cf4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006cf6:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <xPortStartScheduler+0x138>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <xPortStartScheduler+0x138>)
 8006cfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006d02:	f000 f95b 	bl	8006fbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006d06:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <xPortStartScheduler+0x13c>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006d0c:	f000 f97a 	bl	8007004 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <xPortStartScheduler+0x140>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <xPortStartScheduler+0x140>)
 8006d16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006d1c:	f7ff ff64 	bl	8006be8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006d20:	f7fe fdce 	bl	80058c0 <vTaskSwitchContext>
    prvTaskExitError();
 8006d24:	f7ff ff1c 	bl	8006b60 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	e000ed00 	.word	0xe000ed00
 8006d38:	410fc271 	.word	0x410fc271
 8006d3c:	410fc270 	.word	0x410fc270
 8006d40:	e000e400 	.word	0xe000e400
 8006d44:	20000424 	.word	0x20000424
 8006d48:	20000428 	.word	0x20000428
 8006d4c:	e000ed20 	.word	0xe000ed20
 8006d50:	20000020 	.word	0x20000020
 8006d54:	e000ef34 	.word	0xe000ef34

08006d58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d5e:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <vInitPrioGroupValue+0xe4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <vInitPrioGroupValue+0xe8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10a      	bne.n	8006d7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
    }
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <vInitPrioGroupValue+0xe4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a30      	ldr	r2, [pc, #192]	; (8006e44 <vInitPrioGroupValue+0xec>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d10a      	bne.n	8006d9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60fb      	str	r3, [r7, #12]
    }
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <vInitPrioGroupValue+0xf0>)
 8006da0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <vInitPrioGroupValue+0xf4>)
 8006dc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006dc8:	2207      	movs	r2, #7
 8006dca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dcc:	e009      	b.n	8006de2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006dd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d0ef      	beq.n	8006dce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dee:	4b18      	ldr	r3, [pc, #96]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1c3 0307 	rsb	r3, r3, #7
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00a      	beq.n	8006e10 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
    }
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e10:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006e18:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e22:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <vInitPrioGroupValue+0xf8>)
 8006e24:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	e000ed00 	.word	0xe000ed00
 8006e40:	410fc271 	.word	0x410fc271
 8006e44:	410fc270 	.word	0x410fc270
 8006e48:	e000e400 	.word	0xe000e400
 8006e4c:	20000424 	.word	0x20000424
 8006e50:	20000428 	.word	0x20000428

08006e54 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
        __asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	607b      	str	r3, [r7, #4]
    }
 8006e6c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006e6e:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <vPortEnterCritical+0x58>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <vPortEnterCritical+0x58>)
 8006e76:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006e78:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <vPortEnterCritical+0x58>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d10f      	bne.n	8006ea0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <vPortEnterCritical+0x5c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <vPortEnterCritical+0x4c>
        __asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	603b      	str	r3, [r7, #0]
    }
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vPortEnterCritical+0x4a>
    }
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000020 	.word	0x20000020
 8006eb0:	e000ed04 	.word	0xe000ed04

08006eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006eba:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <vPortExitCritical+0x50>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <vPortExitCritical+0x24>
        __asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	607b      	str	r3, [r7, #4]
    }
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <vPortExitCritical+0x50>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <vPortExitCritical+0x50>)
 8006ee0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <vPortExitCritical+0x50>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <vPortExitCritical+0x42>
 8006eea:	2300      	movs	r3, #0
 8006eec:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f383 8811 	msr	BASEPRI, r3
    }
 8006ef4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000020 	.word	0x20000020
	...

08006f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006f10:	f3ef 8009 	mrs	r0, PSP
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <pxCurrentTCBConst>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f01e 0f10 	tst.w	lr, #16
 8006f20:	bf08      	it	eq
 8006f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2a:	6010      	str	r0, [r2, #0]
 8006f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f34:	f380 8811 	msr	BASEPRI, r0
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f7fe fcbe 	bl	80058c0 <vTaskSwitchContext>
 8006f44:	f04f 0000 	mov.w	r0, #0
 8006f48:	f380 8811 	msr	BASEPRI, r0
 8006f4c:	bc09      	pop	{r0, r3}
 8006f4e:	6819      	ldr	r1, [r3, #0]
 8006f50:	6808      	ldr	r0, [r1, #0]
 8006f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f56:	f01e 0f10 	tst.w	lr, #16
 8006f5a:	bf08      	it	eq
 8006f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f60:	f380 8809 	msr	PSP, r0
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst>:
 8006f70:	200002d0 	.word	0x200002d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
        __asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	607b      	str	r3, [r7, #4]
    }
 8006f90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006f92:	f7fe fb7b 	bl	800568c <xTaskIncrementTick>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <SysTick_Handler+0x40>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f383 8811 	msr	BASEPRI, r3
    }
 8006fae:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <vPortSetupTimerInterrupt+0x34>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <vPortSetupTimerInterrupt+0x38>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <vPortSetupTimerInterrupt+0x3c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	; (8006ffc <vPortSetupTimerInterrupt+0x40>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	4a09      	ldr	r2, [pc, #36]	; (8007000 <vPortSetupTimerInterrupt+0x44>)
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <vPortSetupTimerInterrupt+0x34>)
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	601a      	str	r2, [r3, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	e000e010 	.word	0xe000e010
 8006ff4:	e000e018 	.word	0xe000e018
 8006ff8:	20000004 	.word	0x20000004
 8006ffc:	10624dd3 	.word	0x10624dd3
 8007000:	e000e014 	.word	0xe000e014

08007004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007014 <vPortEnableVFP+0x10>
 8007008:	6801      	ldr	r1, [r0, #0]
 800700a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800700e:	6001      	str	r1, [r0, #0]
 8007010:	4770      	bx	lr
 8007012:	0000      	.short	0x0000
 8007014:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007018:	bf00      	nop
 800701a:	bf00      	nop

0800701c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007022:	f3ef 8305 	mrs	r3, IPSR
 8007026:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b0f      	cmp	r3, #15
 800702c:	d914      	bls.n	8007058 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800702e:	4a17      	ldr	r2, [pc, #92]	; (800708c <vPortValidateInterruptPriority+0x70>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007038:	4b15      	ldr	r3, [pc, #84]	; (8007090 <vPortValidateInterruptPriority+0x74>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	7afa      	ldrb	r2, [r7, #11]
 800703e:	429a      	cmp	r2, r3
 8007040:	d20a      	bcs.n	8007058 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	607b      	str	r3, [r7, #4]
    }
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <vPortValidateInterruptPriority+0x78>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007060:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <vPortValidateInterruptPriority+0x7c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d90a      	bls.n	800707e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	603b      	str	r3, [r7, #0]
    }
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <vPortValidateInterruptPriority+0x60>
    }
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	e000e3f0 	.word	0xe000e3f0
 8007090:	20000424 	.word	0x20000424
 8007094:	e000ed0c 	.word	0xe000ed0c
 8007098:	20000428 	.word	0x20000428

0800709c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80070a8:	f7fe f9b4 	bl	8005414 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80070ac:	4b53      	ldr	r3, [pc, #332]	; (80071fc <pvPortMalloc+0x160>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80070b4:	f000 f908 	bl	80072c8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d012      	beq.n	80070e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80070be:	2208      	movs	r2, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	3308      	adds	r3, #8
 80070ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d804      	bhi.n	80070e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	4413      	add	r3, r2
 80070dc:	607b      	str	r3, [r7, #4]
 80070de:	e001      	b.n	80070e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	db70      	blt.n	80071cc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d06d      	beq.n	80071cc <pvPortMalloc+0x130>
 80070f0:	4b43      	ldr	r3, [pc, #268]	; (8007200 <pvPortMalloc+0x164>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d868      	bhi.n	80071cc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80070fa:	4b42      	ldr	r3, [pc, #264]	; (8007204 <pvPortMalloc+0x168>)
 80070fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80070fe:	4b41      	ldr	r3, [pc, #260]	; (8007204 <pvPortMalloc+0x168>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007104:	e004      	b.n	8007110 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d903      	bls.n	8007122 <pvPortMalloc+0x86>
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f1      	bne.n	8007106 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007122:	4b36      	ldr	r3, [pc, #216]	; (80071fc <pvPortMalloc+0x160>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007128:	429a      	cmp	r2, r3
 800712a:	d04f      	beq.n	80071cc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2208      	movs	r2, #8
 8007132:	4413      	add	r3, r2
 8007134:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	2308      	movs	r3, #8
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	429a      	cmp	r2, r3
 800714c:	d91f      	bls.n	800718e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800714e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <pvPortMalloc+0xda>
        __asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	613b      	str	r3, [r7, #16]
    }
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007188:	6978      	ldr	r0, [r7, #20]
 800718a:	f000 f8f9 	bl	8007380 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800718e:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <pvPortMalloc+0x164>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	4a19      	ldr	r2, [pc, #100]	; (8007200 <pvPortMalloc+0x164>)
 800719a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800719c:	4b18      	ldr	r3, [pc, #96]	; (8007200 <pvPortMalloc+0x164>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b19      	ldr	r3, [pc, #100]	; (8007208 <pvPortMalloc+0x16c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d203      	bcs.n	80071b0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pvPortMalloc+0x164>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <pvPortMalloc+0x16c>)
 80071ae:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <pvPortMalloc+0x170>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	4a10      	ldr	r2, [pc, #64]	; (800720c <pvPortMalloc+0x170>)
 80071ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80071cc:	f7fe f930 	bl	8005430 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <pvPortMalloc+0x154>
        __asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	60fb      	str	r3, [r7, #12]
    }
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <pvPortMalloc+0x152>
    return pvReturn;
 80071f0:	69fb      	ldr	r3, [r7, #28]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3728      	adds	r7, #40	; 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20013034 	.word	0x20013034
 8007200:	20013038 	.word	0x20013038
 8007204:	2001302c 	.word	0x2001302c
 8007208:	2001303c 	.word	0x2001303c
 800720c:	20013040 	.word	0x20013040

08007210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d049      	beq.n	80072b6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007222:	2308      	movs	r3, #8
 8007224:	425b      	negs	r3, r3
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4413      	add	r3, r2
 800722a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	db0a      	blt.n	800724e <vPortFree+0x3e>
        __asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	60fb      	str	r3, [r7, #12]
    }
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <vPortFree+0x5c>
        __asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
    }
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	0fdb      	lsrs	r3, r3, #31
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01c      	beq.n	80072b6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d118      	bne.n	80072b6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007290:	f7fe f8c0 	bl	8005414 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <vPortFree+0xb0>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4413      	add	r3, r2
 800729e:	4a08      	ldr	r2, [pc, #32]	; (80072c0 <vPortFree+0xb0>)
 80072a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072a2:	6938      	ldr	r0, [r7, #16]
 80072a4:	f000 f86c 	bl	8007380 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80072a8:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <vPortFree+0xb4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	4a05      	ldr	r2, [pc, #20]	; (80072c4 <vPortFree+0xb4>)
 80072b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80072b2:	f7fe f8bd 	bl	8005430 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80072b6:	bf00      	nop
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20013038 	.word	0x20013038
 80072c4:	20013044 	.word	0x20013044

080072c8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ce:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80072d4:	4b25      	ldr	r3, [pc, #148]	; (800736c <prvHeapInit+0xa4>)
 80072d6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00c      	beq.n	80072fc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3307      	adds	r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0307 	bic.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <prvHeapInit+0xa4>)
 80072f8:	4413      	add	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <prvHeapInit+0xa8>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <prvHeapInit+0xa8>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	4413      	add	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007314:	2208      	movs	r2, #8
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0307 	bic.w	r3, r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4a13      	ldr	r2, [pc, #76]	; (8007374 <prvHeapInit+0xac>)
 8007328:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <prvHeapInit+0xac>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2200      	movs	r2, #0
 8007330:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <prvHeapInit+0xac>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	1ad2      	subs	r2, r2, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvHeapInit+0xac>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	4a08      	ldr	r2, [pc, #32]	; (8007378 <prvHeapInit+0xb0>)
 8007356:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a07      	ldr	r2, [pc, #28]	; (800737c <prvHeapInit+0xb4>)
 800735e:	6013      	str	r3, [r2, #0]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	2000042c 	.word	0x2000042c
 8007370:	2001302c 	.word	0x2001302c
 8007374:	20013034 	.word	0x20013034
 8007378:	2001303c 	.word	0x2001303c
 800737c:	20013038 	.word	0x20013038

08007380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007388:	4b28      	ldr	r3, [pc, #160]	; (800742c <prvInsertBlockIntoFreeList+0xac>)
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e002      	b.n	8007394 <prvInsertBlockIntoFreeList+0x14>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d8f7      	bhi.n	800738e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d108      	bne.n	80073c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	441a      	add	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d118      	bne.n	8007408 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	4b15      	ldr	r3, [pc, #84]	; (8007430 <prvInsertBlockIntoFreeList+0xb0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d00d      	beq.n	80073fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	441a      	add	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	e008      	b.n	8007410 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073fe:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <prvInsertBlockIntoFreeList+0xb0>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e003      	b.n	8007410 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d002      	beq.n	800741e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800741e:	bf00      	nop
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	2001302c 	.word	0x2001302c
 8007430:	20013034 	.word	0x20013034

08007434 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007438:	4803      	ldr	r0, [pc, #12]	; (8007448 <_cbSendSystemDesc+0x14>)
 800743a:	f001 fd2f 	bl	8008e9c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800743e:	4803      	ldr	r0, [pc, #12]	; (800744c <_cbSendSystemDesc+0x18>)
 8007440:	f001 fd2c 	bl	8008e9c <SEGGER_SYSVIEW_SendSysDesc>
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}
 8007448:	08009ef0 	.word	0x08009ef0
 800744c:	08009f28 	.word	0x08009f28

08007450 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007454:	4b06      	ldr	r3, [pc, #24]	; (8007470 <SEGGER_SYSVIEW_Conf+0x20>)
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <SEGGER_SYSVIEW_Conf+0x20>)
 800745a:	6819      	ldr	r1, [r3, #0]
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <SEGGER_SYSVIEW_Conf+0x24>)
 800745e:	4a06      	ldr	r2, [pc, #24]	; (8007478 <SEGGER_SYSVIEW_Conf+0x28>)
 8007460:	f001 f90e 	bl	8008680 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007464:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007468:	f001 f94e 	bl	8008708 <SEGGER_SYSVIEW_SetRAMBase>
}
 800746c:	bf00      	nop
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000004 	.word	0x20000004
 8007474:	08007435 	.word	0x08007435
 8007478:	08009fc8 	.word	0x08009fc8

0800747c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800747c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800747e:	b085      	sub	sp, #20
 8007480:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007482:	2300      	movs	r3, #0
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	e033      	b.n	80074f0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007488:	491e      	ldr	r1, [pc, #120]	; (8007504 <_cbSendTaskList+0x88>)
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	491a      	ldr	r1, [pc, #104]	; (8007504 <_cbSendTaskList+0x88>)
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	440b      	add	r3, r1
 80074a6:	3304      	adds	r3, #4
 80074a8:	6819      	ldr	r1, [r3, #0]
 80074aa:	4c16      	ldr	r4, [pc, #88]	; (8007504 <_cbSendTaskList+0x88>)
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4423      	add	r3, r4
 80074b8:	3308      	adds	r3, #8
 80074ba:	681c      	ldr	r4, [r3, #0]
 80074bc:	4d11      	ldr	r5, [pc, #68]	; (8007504 <_cbSendTaskList+0x88>)
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	442b      	add	r3, r5
 80074ca:	330c      	adds	r3, #12
 80074cc:	681d      	ldr	r5, [r3, #0]
 80074ce:	4e0d      	ldr	r6, [pc, #52]	; (8007504 <_cbSendTaskList+0x88>)
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4433      	add	r3, r6
 80074dc:	3310      	adds	r3, #16
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	462b      	mov	r3, r5
 80074e4:	4622      	mov	r2, r4
 80074e6:	f000 f8bd 	bl	8007664 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3301      	adds	r3, #1
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <_cbSendTaskList+0x8c>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3c6      	bcc.n	8007488 <_cbSendTaskList+0xc>
  }
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	20013048 	.word	0x20013048
 8007508:	200130e8 	.word	0x200130e8

0800750c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800750c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007514:	f7fe f89c 	bl	8005650 <xTaskGetTickCountFromISR>
 8007518:	4603      	mov	r3, r0
 800751a:	2200      	movs	r2, #0
 800751c:	469a      	mov	sl, r3
 800751e:	4693      	mov	fp, r2
 8007520:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007524:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	f04f 0a00 	mov.w	sl, #0
 8007530:	f04f 0b00 	mov.w	fp, #0
 8007534:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007538:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800753c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007540:	4652      	mov	r2, sl
 8007542:	465b      	mov	r3, fp
 8007544:	1a14      	subs	r4, r2, r0
 8007546:	eb63 0501 	sbc.w	r5, r3, r1
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	00ab      	lsls	r3, r5, #2
 8007554:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007558:	00a2      	lsls	r2, r4, #2
 800755a:	4614      	mov	r4, r2
 800755c:	461d      	mov	r5, r3
 800755e:	eb14 0800 	adds.w	r8, r4, r0
 8007562:	eb45 0901 	adc.w	r9, r5, r1
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800757a:	4690      	mov	r8, r2
 800757c:	4699      	mov	r9, r3
 800757e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007582:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007586:	4610      	mov	r0, r2
 8007588:	4619      	mov	r1, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007594 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80075a2:	2205      	movs	r2, #5
 80075a4:	492b      	ldr	r1, [pc, #172]	; (8007654 <SYSVIEW_AddTask+0xc0>)
 80075a6:	68b8      	ldr	r0, [r7, #8]
 80075a8:	f001 ff8c 	bl	80094c4 <memcmp>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d04b      	beq.n	800764a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80075b2:	4b29      	ldr	r3, [pc, #164]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b07      	cmp	r3, #7
 80075b8:	d903      	bls.n	80075c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80075ba:	4828      	ldr	r0, [pc, #160]	; (800765c <SYSVIEW_AddTask+0xc8>)
 80075bc:	f001 ff06 	bl	80093cc <SEGGER_SYSVIEW_Warn>
    return;
 80075c0:	e044      	b.n	800764c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80075c2:	4b25      	ldr	r3, [pc, #148]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4926      	ldr	r1, [pc, #152]	; (8007660 <SYSVIEW_AddTask+0xcc>)
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80075d6:	4b20      	ldr	r3, [pc, #128]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4921      	ldr	r1, [pc, #132]	; (8007660 <SYSVIEW_AddTask+0xcc>)
 80075dc:	4613      	mov	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	3304      	adds	r3, #4
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80075ec:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	491b      	ldr	r1, [pc, #108]	; (8007660 <SYSVIEW_AddTask+0xcc>)
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	440b      	add	r3, r1
 80075fc:	3308      	adds	r3, #8
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4916      	ldr	r1, [pc, #88]	; (8007660 <SYSVIEW_AddTask+0xcc>)
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	330c      	adds	r3, #12
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4910      	ldr	r1, [pc, #64]	; (8007660 <SYSVIEW_AddTask+0xcc>)
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	3310      	adds	r3, #16
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800762e:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	4a08      	ldr	r2, [pc, #32]	; (8007658 <SYSVIEW_AddTask+0xc4>)
 8007636:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f80e 	bl	8007664 <SYSVIEW_SendTaskInfo>
 8007648:	e000      	b.n	800764c <SYSVIEW_AddTask+0xb8>
    return;
 800764a:	bf00      	nop

}
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	08009f38 	.word	0x08009f38
 8007658:	200130e8 	.word	0x200130e8
 800765c:	08009f40 	.word	0x08009f40
 8007660:	20013048 	.word	0x20013048

08007664 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007672:	f107 0314 	add.w	r3, r7, #20
 8007676:	2214      	movs	r2, #20
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f001 ff32 	bl	80094e4 <memset>
  TaskInfo.TaskID     = TaskID;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007694:	f107 0314 	add.w	r3, r7, #20
 8007698:	4618      	mov	r0, r3
 800769a:	f001 fb07 	bl	8008cac <SEGGER_SYSVIEW_SendTaskInfo>
}
 800769e:	bf00      	nop
 80076a0:	3728      	adds	r7, #40	; 0x28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80076ae:	4b1e      	ldr	r3, [pc, #120]	; (8007728 <USART2_IRQHandler+0x80>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80076be:	4b1b      	ldr	r3, [pc, #108]	; (800772c <USART2_IRQHandler+0x84>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 030b 	and.w	r3, r3, #11
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d108      	bne.n	80076e2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80076d0:	4b17      	ldr	r3, [pc, #92]	; (8007730 <USART2_IRQHandler+0x88>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d004      	beq.n	80076e2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <USART2_IRQHandler+0x88>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	79fa      	ldrb	r2, [r7, #7]
 80076de:	4610      	mov	r0, r2
 80076e0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80076ec:	4b11      	ldr	r3, [pc, #68]	; (8007734 <USART2_IRQHandler+0x8c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d015      	beq.n	8007720 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <USART2_IRQHandler+0x8c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	1dfa      	adds	r2, r7, #7
 80076fa:	4610      	mov	r0, r2
 80076fc:	4798      	blx	r3
 80076fe:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <USART2_IRQHandler+0x90>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a0b      	ldr	r2, [pc, #44]	; (8007738 <USART2_IRQHandler+0x90>)
 800770c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	e006      	b.n	8007722 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007714:	4b04      	ldr	r3, [pc, #16]	; (8007728 <USART2_IRQHandler+0x80>)
 8007716:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007718:	79fa      	ldrb	r2, [r7, #7]
 800771a:	4b04      	ldr	r3, [pc, #16]	; (800772c <USART2_IRQHandler+0x84>)
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	e000      	b.n	8007722 <USART2_IRQHandler+0x7a>
      return;
 8007720:	bf00      	nop
    }
  }
}
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40011000 	.word	0x40011000
 800772c:	40011004 	.word	0x40011004
 8007730:	200130ec 	.word	0x200130ec
 8007734:	200130f0 	.word	0x200130f0
 8007738:	4001100c 	.word	0x4001100c

0800773c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a04      	ldr	r2, [pc, #16]	; (8007758 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774a:	6013      	str	r3, [r2, #0]
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	4001100c 	.word	0x4001100c

0800775c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <_DoInit+0x98>)
 8007764:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <_DoInit+0x9c>)
 8007776:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a20      	ldr	r2, [pc, #128]	; (80077fc <_DoInit+0xa0>)
 800777c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007784:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <_DoInit+0x9c>)
 800779c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a17      	ldr	r2, [pc, #92]	; (8007800 <_DoInit+0xa4>)
 80077a2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2210      	movs	r2, #16
 80077a8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3307      	adds	r3, #7
 80077c0:	4a10      	ldr	r2, [pc, #64]	; (8007804 <_DoInit+0xa8>)
 80077c2:	6810      	ldr	r0, [r2, #0]
 80077c4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077c6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a0e      	ldr	r2, [pc, #56]	; (8007808 <_DoInit+0xac>)
 80077ce:	6810      	ldr	r0, [r2, #0]
 80077d0:	6018      	str	r0, [r3, #0]
 80077d2:	8891      	ldrh	r1, [r2, #4]
 80077d4:	7992      	ldrb	r2, [r2, #6]
 80077d6:	8099      	strh	r1, [r3, #4]
 80077d8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077da:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077e4:	f3bf 8f5f 	dmb	sy
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	200130f4 	.word	0x200130f4
 80077f8:	08009f90 	.word	0x08009f90
 80077fc:	2001319c 	.word	0x2001319c
 8007800:	2001359c 	.word	0x2001359c
 8007804:	08009f9c 	.word	0x08009f9c
 8007808:	08009fa0 	.word	0x08009fa0

0800780c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007818:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <SEGGER_RTT_ReadNoLock+0x108>)
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <SEGGER_RTT_ReadNoLock+0x1e>
 8007826:	f7ff ff99 	bl	800775c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	3360      	adds	r3, #96	; 0x60
 8007836:	4a37      	ldr	r2, [pc, #220]	; (8007914 <SEGGER_RTT_ReadNoLock+0x108>)
 8007838:	4413      	add	r3, r2
 800783a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800784c:	2300      	movs	r3, #0
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	429a      	cmp	r2, r3
 8007856:	d92b      	bls.n	80078b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4293      	cmp	r3, r2
 8007868:	bf28      	it	cs
 800786a:	4613      	movcs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007874:	4413      	add	r3, r2
 8007876:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	6939      	ldr	r1, [r7, #16]
 800787c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800787e:	f001 fe65 	bl	800954c <memcpy>
    NumBytesRead += NumBytesRem;
 8007882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	4413      	add	r3, r2
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800788a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800789a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	4413      	add	r3, r2
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d101      	bne.n	80078b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4293      	cmp	r3, r2
 80078be:	bf28      	it	cs
 80078c0:	4613      	movcs	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d019      	beq.n	80078fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	4413      	add	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	6939      	ldr	r1, [r7, #16]
 80078d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078da:	f001 fe37 	bl	800954c <memcpy>
    NumBytesRead += NumBytesRem;
 80078de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	4413      	add	r3, r2
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80078e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4413      	add	r3, r2
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80078f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007908:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800790c:	4618      	mov	r0, r3
 800790e:	3730      	adds	r7, #48	; 0x30
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200130f4 	.word	0x200130f4

08007918 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007926:	4b3d      	ldr	r3, [pc, #244]	; (8007a1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007928:	61bb      	str	r3, [r7, #24]
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007934:	f7ff ff12 	bl	800775c <_DoInit>
  SEGGER_RTT_LOCK();
 8007938:	f3ef 8311 	mrs	r3, BASEPRI
 800793c:	f04f 0120 	mov.w	r1, #32
 8007940:	f381 8811 	msr	BASEPRI, r1
 8007944:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007946:	4b35      	ldr	r3, [pc, #212]	; (8007a1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007948:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800794e:	6939      	ldr	r1, [r7, #16]
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	4613      	mov	r3, r2
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	4413      	add	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	440b      	add	r3, r1
 800795e:	3304      	adds	r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3301      	adds	r3, #1
 800796a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	429a      	cmp	r2, r3
 8007974:	dbeb      	blt.n	800794e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007976:	e000      	b.n	800797a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007978:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	429a      	cmp	r2, r3
 8007982:	da3f      	bge.n	8007a04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007984:	6939      	ldr	r1, [r7, #16]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	4613      	mov	r3, r2
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	4413      	add	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	440b      	add	r3, r1
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007998:	6939      	ldr	r1, [r7, #16]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	440b      	add	r3, r1
 80079a8:	3304      	adds	r3, #4
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80079ae:	6939      	ldr	r1, [r7, #16]
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	4613      	mov	r3, r2
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	4413      	add	r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	440b      	add	r3, r1
 80079bc:	3320      	adds	r3, #32
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80079c2:	6939      	ldr	r1, [r7, #16]
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	4613      	mov	r3, r2
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	440b      	add	r3, r1
 80079d0:	3328      	adds	r3, #40	; 0x28
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80079d6:	6939      	ldr	r1, [r7, #16]
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	4613      	mov	r3, r2
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	4413      	add	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	440b      	add	r3, r1
 80079e4:	3324      	adds	r3, #36	; 0x24
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80079ea:	6939      	ldr	r1, [r7, #16]
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	4613      	mov	r3, r2
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4413      	add	r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	440b      	add	r3, r1
 80079f8:	332c      	adds	r3, #44	; 0x2c
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80079fe:	f3bf 8f5f 	dmb	sy
 8007a02:	e002      	b.n	8007a0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007a04:	f04f 33ff 	mov.w	r3, #4294967295
 8007a08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007a10:	69fb      	ldr	r3, [r7, #28]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200130f4 	.word	0x200130f4

08007a20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b088      	sub	sp, #32
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007a2e:	4b33      	ldr	r3, [pc, #204]	; (8007afc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007a3c:	f7ff fe8e 	bl	800775c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007a40:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007a42:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d24d      	bcs.n	8007aec <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8007a50:	f3ef 8311 	mrs	r3, BASEPRI
 8007a54:	f04f 0120 	mov.w	r1, #32
 8007a58:	f381 8811 	msr	BASEPRI, r1
 8007a5c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d031      	beq.n	8007ac8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007a64:	6979      	ldr	r1, [r7, #20]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	4413      	add	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	440b      	add	r3, r1
 8007a72:	3360      	adds	r3, #96	; 0x60
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007a78:	6979      	ldr	r1, [r7, #20]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	440b      	add	r3, r1
 8007a86:	3364      	adds	r3, #100	; 0x64
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4613      	mov	r3, r2
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	4413      	add	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	440b      	add	r3, r1
 8007a9a:	3368      	adds	r3, #104	; 0x68
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	4413      	add	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	440b      	add	r3, r1
 8007aae:	3370      	adds	r3, #112	; 0x70
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007ab4:	6979      	ldr	r1, [r7, #20]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	4413      	add	r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	440b      	add	r3, r1
 8007ac2:	336c      	adds	r3, #108	; 0x6c
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007ac8:	6979      	ldr	r1, [r7, #20]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4613      	mov	r3, r2
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	4413      	add	r3, r2
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3374      	adds	r3, #116	; 0x74
 8007ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ada:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007adc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61fb      	str	r3, [r7, #28]
 8007aea:	e002      	b.n	8007af2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295
 8007af0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8007af2:	69fb      	ldr	r3, [r7, #28]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	200130f4 	.word	0x200130f4

08007b00 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007b10:	e002      	b.n	8007b18 <_EncodeStr+0x18>
    Len++;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3301      	adds	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1f6      	bne.n	8007b12 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d901      	bls.n	8007b30 <_EncodeStr+0x30>
    Len = Limit;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2bfe      	cmp	r3, #254	; 0xfe
 8007b34:	d806      	bhi.n	8007b44 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	60fa      	str	r2, [r7, #12]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e011      	b.n	8007b68 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	60fa      	str	r2, [r7, #12]
 8007b4a:	22ff      	movs	r2, #255	; 0xff
 8007b4c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	60fa      	str	r2, [r7, #12]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	0a19      	lsrs	r1, r3, #8
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	60fa      	str	r2, [r7, #12]
 8007b64:	b2ca      	uxtb	r2, r1
 8007b66:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007b6c:	e00a      	b.n	8007b84 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	1c53      	adds	r3, r2, #1
 8007b72:	60bb      	str	r3, [r7, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	1c59      	adds	r1, r3, #1
 8007b78:	60f9      	str	r1, [r7, #12]
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	701a      	strb	r2, [r3, #0]
    n++;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	3301      	adds	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d3f0      	bcc.n	8007b6e <_EncodeStr+0x6e>
  }
  return pPayload;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007bba:	4b35      	ldr	r3, [pc, #212]	; (8007c90 <_HandleIncomingPacket+0xdc>)
 8007bbc:	7e1b      	ldrb	r3, [r3, #24]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	1cfb      	adds	r3, r7, #3
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f7ff fe21 	bl	800780c <SEGGER_RTT_ReadNoLock>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dd59      	ble.n	8007c88 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	2b80      	cmp	r3, #128	; 0x80
 8007bd8:	d032      	beq.n	8007c40 <_HandleIncomingPacket+0x8c>
 8007bda:	2b80      	cmp	r3, #128	; 0x80
 8007bdc:	dc42      	bgt.n	8007c64 <_HandleIncomingPacket+0xb0>
 8007bde:	2b07      	cmp	r3, #7
 8007be0:	dc16      	bgt.n	8007c10 <_HandleIncomingPacket+0x5c>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dd3e      	ble.n	8007c64 <_HandleIncomingPacket+0xb0>
 8007be6:	3b01      	subs	r3, #1
 8007be8:	2b06      	cmp	r3, #6
 8007bea:	d83b      	bhi.n	8007c64 <_HandleIncomingPacket+0xb0>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <_HandleIncomingPacket+0x40>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c17 	.word	0x08007c17
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c23 	.word	0x08007c23
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c35 	.word	0x08007c35
 8007c0c:	08007c3b 	.word	0x08007c3b
 8007c10:	2b7f      	cmp	r3, #127	; 0x7f
 8007c12:	d034      	beq.n	8007c7e <_HandleIncomingPacket+0xca>
 8007c14:	e026      	b.n	8007c64 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007c16:	f000 fecd 	bl	80089b4 <SEGGER_SYSVIEW_Start>
      break;
 8007c1a:	e035      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007c1c:	f000 ff86 	bl	8008b2c <SEGGER_SYSVIEW_Stop>
      break;
 8007c20:	e032      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007c22:	f001 f95f 	bl	8008ee4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007c26:	e02f      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007c28:	f001 f924 	bl	8008e74 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007c2c:	e02c      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007c2e:	f000 ffa3 	bl	8008b78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007c32:	e029      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007c34:	f001 fb78 	bl	8009328 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007c38:	e026      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007c3a:	f001 fb57 	bl	80092ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007c3e:	e023      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c40:	4b13      	ldr	r3, [pc, #76]	; (8007c90 <_HandleIncomingPacket+0xdc>)
 8007c42:	7e1b      	ldrb	r3, [r3, #24]
 8007c44:	4618      	mov	r0, r3
 8007c46:	1cfb      	adds	r3, r7, #3
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f7ff fdde 	bl	800780c <SEGGER_RTT_ReadNoLock>
 8007c50:	4603      	mov	r3, r0
 8007c52:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd13      	ble.n	8007c82 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 fac5 	bl	80091ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007c62:	e00e      	b.n	8007c82 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0c      	bge.n	8007c86 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c6c:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <_HandleIncomingPacket+0xdc>)
 8007c6e:	7e1b      	ldrb	r3, [r3, #24]
 8007c70:	4618      	mov	r0, r3
 8007c72:	1cfb      	adds	r3, r7, #3
 8007c74:	2201      	movs	r2, #1
 8007c76:	4619      	mov	r1, r3
 8007c78:	f7ff fdc8 	bl	800780c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007c7c:	e003      	b.n	8007c86 <_HandleIncomingPacket+0xd2>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e002      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
      break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <_HandleIncomingPacket+0xd4>
      break;
 8007c86:	bf00      	nop
    }
  }
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200145b4 	.word	0x200145b4

08007c94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08c      	sub	sp, #48	; 0x30
 8007c98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007c9e:	1d3b      	adds	r3, r7, #4
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca8:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cae:	e00b      	b.n	8007cc8 <_TrySendOverflowPacket+0x34>
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	1c59      	adds	r1, r3, #1
 8007cb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	09db      	lsrs	r3, r3, #7
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	2b7f      	cmp	r3, #127	; 0x7f
 8007ccc:	d8f0      	bhi.n	8007cb0 <_TrySendOverflowPacket+0x1c>
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007cde:	4b26      	ldr	r3, [pc, #152]	; (8007d78 <_TrySendOverflowPacket+0xe4>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ce4:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	e00b      	b.n	8007d10 <_TrySendOverflowPacket+0x7c>
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	6279      	str	r1, [r7, #36]	; 0x24
 8007d02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	09db      	lsrs	r3, r3, #7
 8007d0e:	623b      	str	r3, [r7, #32]
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	2b7f      	cmp	r3, #127	; 0x7f
 8007d14:	d8f0      	bhi.n	8007cf8 <_TrySendOverflowPacket+0x64>
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007d1c:	6a3a      	ldr	r2, [r7, #32]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007d26:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d28:	785b      	ldrb	r3, [r3, #1]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	1d3b      	adds	r3, r7, #4
 8007d2e:	69fa      	ldr	r2, [r7, #28]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	1d3b      	adds	r3, r7, #4
 8007d36:	4619      	mov	r1, r3
 8007d38:	f7f8 fa52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007d40:	f7ff fcfc 	bl	800773c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007d50:	4b08      	ldr	r3, [pc, #32]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	e004      	b.n	8007d68 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	3301      	adds	r3, #1
 8007d64:	4a03      	ldr	r2, [pc, #12]	; (8007d74 <_TrySendOverflowPacket+0xe0>)
 8007d66:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007d68:	693b      	ldr	r3, [r7, #16]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3730      	adds	r7, #48	; 0x30
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200145b4 	.word	0x200145b4
 8007d78:	e0001004 	.word	0xe0001004

08007d7c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007d88:	4b6d      	ldr	r3, [pc, #436]	; (8007f40 <_SendPacket+0x1c4>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d010      	beq.n	8007db2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007d90:	4b6b      	ldr	r3, [pc, #428]	; (8007f40 <_SendPacket+0x1c4>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80a5 	beq.w	8007ee4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007d9a:	4b69      	ldr	r3, [pc, #420]	; (8007f40 <_SendPacket+0x1c4>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d109      	bne.n	8007db6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007da2:	f7ff ff77 	bl	8007c94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007da6:	4b66      	ldr	r3, [pc, #408]	; (8007f40 <_SendPacket+0x1c4>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	f040 809c 	bne.w	8007ee8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007db0:	e001      	b.n	8007db6 <_SendPacket+0x3a>
    goto Send;
 8007db2:	bf00      	nop
 8007db4:	e000      	b.n	8007db8 <_SendPacket+0x3c>
Send:
 8007db6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b1f      	cmp	r3, #31
 8007dbc:	d809      	bhi.n	8007dd2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007dbe:	4b60      	ldr	r3, [pc, #384]	; (8007f40 <_SendPacket+0x1c4>)
 8007dc0:	69da      	ldr	r2, [r3, #28]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 808d 	bne.w	8007eec <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b17      	cmp	r3, #23
 8007dd6:	d807      	bhi.n	8007de8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e03d      	b.n	8007e64 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b7f      	cmp	r3, #127	; 0x7f
 8007df4:	d912      	bls.n	8007e1c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	09da      	lsrs	r2, r3, #7
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	3a01      	subs	r2, #1
 8007e0e:	60fa      	str	r2, [r7, #12]
 8007e10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	e006      	b.n	8007e2a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e2e:	d912      	bls.n	8007e56 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	09da      	lsrs	r2, r3, #7
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	3a01      	subs	r2, #1
 8007e48:	60fa      	str	r2, [r7, #12]
 8007e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e006      	b.n	8007e64 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007e64:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <_SendPacket+0x1c8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007e6a:	4b35      	ldr	r3, [pc, #212]	; (8007f40 <_SendPacket+0x1c4>)
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	e00b      	b.n	8007e96 <_SendPacket+0x11a>
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	1c59      	adds	r1, r3, #1
 8007e86:	6279      	str	r1, [r7, #36]	; 0x24
 8007e88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	09db      	lsrs	r3, r3, #7
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9a:	d8f0      	bhi.n	8007e7e <_SendPacket+0x102>
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <_SendPacket+0x1c4>)
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f7f8 f990 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007ec4:	f7ff fc3a 	bl	800773c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007ece:	4a1c      	ldr	r2, [pc, #112]	; (8007f40 <_SendPacket+0x1c4>)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	60d3      	str	r3, [r2, #12]
 8007ed4:	e00b      	b.n	8007eee <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <_SendPacket+0x1c4>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b18      	ldr	r3, [pc, #96]	; (8007f40 <_SendPacket+0x1c4>)
 8007ee0:	701a      	strb	r2, [r3, #0]
 8007ee2:	e004      	b.n	8007eee <_SendPacket+0x172>
    goto SendDone;
 8007ee4:	bf00      	nop
 8007ee6:	e002      	b.n	8007eee <_SendPacket+0x172>
      goto SendDone;
 8007ee8:	bf00      	nop
 8007eea:	e000      	b.n	8007eee <_SendPacket+0x172>
      goto SendDone;
 8007eec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <_SendPacket+0x1c4>)
 8007ef0:	7e1b      	ldrb	r3, [r3, #24]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <_SendPacket+0x1cc>)
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	440b      	add	r3, r1
 8007efc:	00db      	lsls	r3, r3, #3
 8007efe:	4413      	add	r3, r2
 8007f00:	336c      	adds	r3, #108	; 0x6c
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <_SendPacket+0x1c4>)
 8007f06:	7e1b      	ldrb	r3, [r3, #24]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	490f      	ldr	r1, [pc, #60]	; (8007f48 <_SendPacket+0x1cc>)
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	4403      	add	r3, r0
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	440b      	add	r3, r1
 8007f16:	3370      	adds	r3, #112	; 0x70
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d00b      	beq.n	8007f36 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <_SendPacket+0x1c4>)
 8007f20:	789b      	ldrb	r3, [r3, #2]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007f26:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <_SendPacket+0x1c4>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007f2c:	f7ff fe42 	bl	8007bb4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <_SendPacket+0x1c4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007f36:	bf00      	nop
 8007f38:	3728      	adds	r7, #40	; 0x28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200145b4 	.word	0x200145b4
 8007f44:	e0001004 	.word	0xe0001004
 8007f48:	200130f4 	.word	0x200130f4

08007f4c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	3301      	adds	r3, #1
 8007f62:	2b80      	cmp	r3, #128	; 0x80
 8007f64:	d80a      	bhi.n	8007f7c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	1c59      	adds	r1, r3, #1
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6051      	str	r1, [r2, #4]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b80      	cmp	r3, #128	; 0x80
 8007f82:	d15a      	bne.n	800803a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691a      	ldr	r2, [r3, #16]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	b2d2      	uxtb	r2, r2
 8007f8e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	623b      	str	r3, [r7, #32]
 8007fa4:	e00b      	b.n	8007fbe <_StoreChar+0x72>
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	1c59      	adds	r1, r3, #1
 8007fae:	6279      	str	r1, [r7, #36]	; 0x24
 8007fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	09db      	lsrs	r3, r3, #7
 8007fbc:	623b      	str	r3, [r7, #32]
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8007fc2:	d8f0      	bhi.n	8007fa6 <_StoreChar+0x5a>
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8007fca:	6a3a      	ldr	r2, [r7, #32]
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	61fb      	str	r3, [r7, #28]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61bb      	str	r3, [r7, #24]
 8007fdc:	e00b      	b.n	8007ff6 <_StoreChar+0xaa>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	1c59      	adds	r1, r3, #1
 8007fe6:	61f9      	str	r1, [r7, #28]
 8007fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	09db      	lsrs	r3, r3, #7
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8007ffa:	d8f0      	bhi.n	8007fde <_StoreChar+0x92>
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	61fa      	str	r2, [r7, #28]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	701a      	strb	r2, [r3, #0]
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	221a      	movs	r2, #26
 8008012:	6939      	ldr	r1, [r7, #16]
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff feb1 	bl	8007d7c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fdbb 	bl	8007b9a <_PreparePacket>
 8008024:	4602      	mov	r2, r0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	611a      	str	r2, [r3, #16]
  }
}
 800803a:	bf00      	nop
 800803c:	3728      	adds	r7, #40	; 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8008056:	2301      	movs	r3, #1
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800805a:	2301      	movs	r3, #1
 800805c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800805e:	e007      	b.n	8008070 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
 8008068:	623b      	str	r3, [r7, #32]
    Width++;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3301      	adds	r3, #1
 800806e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008070:	6a3a      	ldr	r2, [r7, #32]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d2f3      	bcs.n	8008060 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	429a      	cmp	r2, r3
 800807e:	d901      	bls.n	8008084 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d11f      	bne.n	80080ce <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01c      	beq.n	80080ce <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <_PrintUnsigned+0x66>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <_PrintUnsigned+0x66>
        c = '0';
 80080a4:	2330      	movs	r3, #48	; 0x30
 80080a6:	76fb      	strb	r3, [r7, #27]
 80080a8:	e001      	b.n	80080ae <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80080aa:	2320      	movs	r3, #32
 80080ac:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80080ae:	e007      	b.n	80080c0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	3b01      	subs	r3, #1
 80080b4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80080b6:	7efb      	ldrb	r3, [r7, #27]
 80080b8:	4619      	mov	r1, r3
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ff46 	bl	8007f4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <_PrintUnsigned+0x8a>
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d3f0      	bcc.n	80080b0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d903      	bls.n	80080dc <_PrintUnsigned+0x98>
      NumDigits--;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	e009      	b.n	80080f0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d200      	bcs.n	80080f0 <_PrintUnsigned+0xac>
        break;
 80080ee:	e005      	b.n	80080fc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80080fa:	e7e8      	b.n	80080ce <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810a:	fb02 f303 	mul.w	r3, r2, r3
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8008114:	4a15      	ldr	r2, [pc, #84]	; (800816c <_PrintUnsigned+0x128>)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff ff14 	bl	8007f4c <_StoreChar>
    Digit /= Base;
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	fbb2 f3f3 	udiv	r3, r2, r3
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e3      	bne.n	80080fc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d011      	beq.n	8008162 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00e      	beq.n	8008162 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008144:	e006      	b.n	8008154 <_PrintUnsigned+0x110>
        FieldWidth--;
 8008146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008148:	3b01      	subs	r3, #1
 800814a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800814c:	2120      	movs	r1, #32
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fefc 	bl	8007f4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <_PrintUnsigned+0x11e>
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	429a      	cmp	r2, r3
 8008160:	d3f1      	bcc.n	8008146 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8008162:	bf00      	nop
 8008164:	3728      	adds	r7, #40	; 0x28
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	08009fdc 	.word	0x08009fdc

08008170 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfb8      	it	lt
 8008184:	425b      	neglt	r3, r3
 8008186:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8008188:	2301      	movs	r3, #1
 800818a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800818c:	e007      	b.n	800819e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	fb92 f3f3 	sdiv	r3, r2, r3
 8008196:	613b      	str	r3, [r7, #16]
    Width++;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	3301      	adds	r3, #1
 800819c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	daf3      	bge.n	800818e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d901      	bls.n	80081b2 <_PrintInt+0x42>
    Width = NumDigits;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <_PrintInt+0x5e>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	db04      	blt.n	80081c8 <_PrintInt+0x58>
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <_PrintInt+0x5e>
    FieldWidth--;
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <_PrintInt+0x6e>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d016      	beq.n	800820c <_PrintInt+0x9c>
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d111      	bne.n	800820c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00e      	beq.n	800820c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80081ee:	e006      	b.n	80081fe <_PrintInt+0x8e>
        FieldWidth--;
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80081f6:	2120      	movs	r1, #32
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff fea7 	bl	8007f4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <_PrintInt+0x9c>
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	429a      	cmp	r2, r3
 800820a:	d3f1      	bcc.n	80081f0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	da07      	bge.n	8008222 <_PrintInt+0xb2>
    v = -v;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	425b      	negs	r3, r3
 8008216:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8008218:	212d      	movs	r1, #45	; 0x2d
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f7ff fe96 	bl	8007f4c <_StoreChar>
 8008220:	e008      	b.n	8008234 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	f003 0304 	and.w	r3, r3, #4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800822c:	212b      	movs	r1, #43	; 0x2b
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff fe8c 	bl	8007f4c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	f003 0302 	and.w	r3, r3, #2
 800823a:	2b00      	cmp	r3, #0
 800823c:	d019      	beq.n	8008272 <_PrintInt+0x102>
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d114      	bne.n	8008272 <_PrintInt+0x102>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d111      	bne.n	8008272 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008254:	e006      	b.n	8008264 <_PrintInt+0xf4>
        FieldWidth--;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	3b01      	subs	r3, #1
 800825a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800825c:	2130      	movs	r1, #48	; 0x30
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fe74 	bl	8007f4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <_PrintInt+0x102>
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	429a      	cmp	r2, r3
 8008270:	d3f1      	bcc.n	8008256 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	9300      	str	r3, [sp, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff fedf 	bl	8008044 <_PrintUnsigned>
}
 8008286:	bf00      	nop
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b098      	sub	sp, #96	; 0x60
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800829c:	f3ef 8311 	mrs	r3, BASEPRI
 80082a0:	f04f 0120 	mov.w	r1, #32
 80082a4:	f381 8811 	msr	BASEPRI, r1
 80082a8:	633b      	str	r3, [r7, #48]	; 0x30
 80082aa:	48b7      	ldr	r0, [pc, #732]	; (8008588 <_VPrintTarget+0x2f8>)
 80082ac:	f7ff fc75 	bl	8007b9a <_PreparePacket>
 80082b0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80082b2:	4bb5      	ldr	r3, [pc, #724]	; (8008588 <_VPrintTarget+0x2f8>)
 80082b4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80082b6:	2300      	movs	r3, #0
 80082b8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	3301      	adds	r3, #1
 80082c2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80082d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 8183 	beq.w	80085e6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80082e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082e4:	2b25      	cmp	r3, #37	; 0x25
 80082e6:	f040 8170 	bne.w	80085ca <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80082ea:	2300      	movs	r3, #0
 80082ec:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80082ee:	2301      	movs	r3, #1
 80082f0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80082fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082fe:	3b23      	subs	r3, #35	; 0x23
 8008300:	2b0d      	cmp	r3, #13
 8008302:	d83f      	bhi.n	8008384 <_VPrintTarget+0xf4>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <_VPrintTarget+0x7c>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	08008375 	.word	0x08008375
 8008310:	08008385 	.word	0x08008385
 8008314:	08008385 	.word	0x08008385
 8008318:	08008385 	.word	0x08008385
 800831c:	08008385 	.word	0x08008385
 8008320:	08008385 	.word	0x08008385
 8008324:	08008385 	.word	0x08008385
 8008328:	08008385 	.word	0x08008385
 800832c:	08008365 	.word	0x08008365
 8008330:	08008385 	.word	0x08008385
 8008334:	08008345 	.word	0x08008345
 8008338:	08008385 	.word	0x08008385
 800833c:	08008385 	.word	0x08008385
 8008340:	08008355 	.word	0x08008355
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8008344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008346:	f043 0301 	orr.w	r3, r3, #1
 800834a:	64bb      	str	r3, [r7, #72]	; 0x48
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	e01a      	b.n	800838a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8008354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	64bb      	str	r3, [r7, #72]	; 0x48
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e012      	b.n	800838a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8008364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008366:	f043 0304 	orr.w	r3, r3, #4
 800836a:	64bb      	str	r3, [r7, #72]	; 0x48
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e00a      	b.n	800838a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8008374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008376:	f043 0308 	orr.w	r3, r3, #8
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	e002      	b.n	800838a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8008384:	2300      	movs	r3, #0
 8008386:	653b      	str	r3, [r7, #80]	; 0x50
 8008388:	bf00      	nop
        }
      } while (v);
 800838a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1b0      	bne.n	80082f2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8008390:	2300      	movs	r3, #0
 8008392:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800839c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a0:	2b2f      	cmp	r3, #47	; 0x2f
 80083a2:	d912      	bls.n	80083ca <_VPrintTarget+0x13a>
 80083a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a8:	2b39      	cmp	r3, #57	; 0x39
 80083aa:	d80e      	bhi.n	80083ca <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80083b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	461a      	mov	r2, r3
 80083be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083c2:	4413      	add	r3, r2
 80083c4:	3b30      	subs	r3, #48	; 0x30
 80083c6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80083c8:	e7e4      	b.n	8008394 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80083ca:	2300      	movs	r3, #0
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80083d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083da:	2b2e      	cmp	r3, #46	; 0x2e
 80083dc:	d11d      	bne.n	800841a <_VPrintTarget+0x18a>
        sFormat++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80083ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083f0:	2b2f      	cmp	r3, #47	; 0x2f
 80083f2:	d912      	bls.n	800841a <_VPrintTarget+0x18a>
 80083f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083f8:	2b39      	cmp	r3, #57	; 0x39
 80083fa:	d80e      	bhi.n	800841a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8008402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	461a      	mov	r2, r3
 800840e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008412:	4413      	add	r3, r2
 8008414:	3b30      	subs	r3, #48	; 0x30
 8008416:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8008418:	e7e4      	b.n	80083e4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8008422:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008426:	2b6c      	cmp	r3, #108	; 0x6c
 8008428:	d003      	beq.n	8008432 <_VPrintTarget+0x1a2>
 800842a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800842e:	2b68      	cmp	r3, #104	; 0x68
 8008430:	d107      	bne.n	8008442 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3301      	adds	r3, #1
 800843e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8008440:	e7ef      	b.n	8008422 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8008442:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008446:	2b25      	cmp	r3, #37	; 0x25
 8008448:	f000 80b3 	beq.w	80085b2 <_VPrintTarget+0x322>
 800844c:	2b25      	cmp	r3, #37	; 0x25
 800844e:	f2c0 80b7 	blt.w	80085c0 <_VPrintTarget+0x330>
 8008452:	2b78      	cmp	r3, #120	; 0x78
 8008454:	f300 80b4 	bgt.w	80085c0 <_VPrintTarget+0x330>
 8008458:	2b58      	cmp	r3, #88	; 0x58
 800845a:	f2c0 80b1 	blt.w	80085c0 <_VPrintTarget+0x330>
 800845e:	3b58      	subs	r3, #88	; 0x58
 8008460:	2b20      	cmp	r3, #32
 8008462:	f200 80ad 	bhi.w	80085c0 <_VPrintTarget+0x330>
 8008466:	a201      	add	r2, pc, #4	; (adr r2, 800846c <_VPrintTarget+0x1dc>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	08008563 	.word	0x08008563
 8008470:	080085c1 	.word	0x080085c1
 8008474:	080085c1 	.word	0x080085c1
 8008478:	080085c1 	.word	0x080085c1
 800847c:	080085c1 	.word	0x080085c1
 8008480:	080085c1 	.word	0x080085c1
 8008484:	080085c1 	.word	0x080085c1
 8008488:	080085c1 	.word	0x080085c1
 800848c:	080085c1 	.word	0x080085c1
 8008490:	080085c1 	.word	0x080085c1
 8008494:	080085c1 	.word	0x080085c1
 8008498:	080084f1 	.word	0x080084f1
 800849c:	08008517 	.word	0x08008517
 80084a0:	080085c1 	.word	0x080085c1
 80084a4:	080085c1 	.word	0x080085c1
 80084a8:	080085c1 	.word	0x080085c1
 80084ac:	080085c1 	.word	0x080085c1
 80084b0:	080085c1 	.word	0x080085c1
 80084b4:	080085c1 	.word	0x080085c1
 80084b8:	080085c1 	.word	0x080085c1
 80084bc:	080085c1 	.word	0x080085c1
 80084c0:	080085c1 	.word	0x080085c1
 80084c4:	080085c1 	.word	0x080085c1
 80084c8:	080085c1 	.word	0x080085c1
 80084cc:	0800858d 	.word	0x0800858d
 80084d0:	080085c1 	.word	0x080085c1
 80084d4:	080085c1 	.word	0x080085c1
 80084d8:	080085c1 	.word	0x080085c1
 80084dc:	080085c1 	.word	0x080085c1
 80084e0:	0800853d 	.word	0x0800853d
 80084e4:	080085c1 	.word	0x080085c1
 80084e8:	080085c1 	.word	0x080085c1
 80084ec:	08008563 	.word	0x08008563
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6011      	str	r1, [r2, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80084fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8008504:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008508:	f107 0314 	add.w	r3, r7, #20
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fd1c 	bl	8007f4c <_StoreChar>
        break;
 8008514:	e055      	b.n	80085c2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	1d19      	adds	r1, r3, #4
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6011      	str	r1, [r2, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8008524:	f107 0014 	add.w	r0, r7, #20
 8008528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	220a      	movs	r2, #10
 8008534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008536:	f7ff fe1b 	bl	8008170 <_PrintInt>
        break;
 800853a:	e042      	b.n	80085c2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6011      	str	r1, [r2, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800854a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800854c:	f107 0014 	add.w	r0, r7, #20
 8008550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	220a      	movs	r2, #10
 800855c:	f7ff fd72 	bl	8008044 <_PrintUnsigned>
        break;
 8008560:	e02f      	b.n	80085c2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	1d19      	adds	r1, r3, #4
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6011      	str	r1, [r2, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8008570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008572:	f107 0014 	add.w	r0, r7, #20
 8008576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008580:	2210      	movs	r2, #16
 8008582:	f7ff fd5f 	bl	8008044 <_PrintUnsigned>
        break;
 8008586:	e01c      	b.n	80085c2 <_VPrintTarget+0x332>
 8008588:	200145e4 	.word	0x200145e4
      case 'p':
        v = va_arg(*pParamList, int);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	1d19      	adds	r1, r3, #4
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800859a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800859c:	f107 0014 	add.w	r0, r7, #20
 80085a0:	2300      	movs	r3, #0
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	2308      	movs	r3, #8
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	2308      	movs	r3, #8
 80085aa:	2210      	movs	r2, #16
 80085ac:	f7ff fd4a 	bl	8008044 <_PrintUnsigned>
        break;
 80085b0:	e007      	b.n	80085c2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80085b2:	f107 0314 	add.w	r3, r7, #20
 80085b6:	2125      	movs	r1, #37	; 0x25
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff fcc7 	bl	8007f4c <_StoreChar>
        break;
 80085be:	e000      	b.n	80085c2 <_VPrintTarget+0x332>
      default:
        break;
 80085c0:	bf00      	nop
      }
      sFormat++;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3301      	adds	r3, #1
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e007      	b.n	80085da <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80085ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff fcb9 	bl	8007f4c <_StoreChar>
    }
  } while (*sFormat);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f47f ae72 	bne.w	80082c8 <_VPrintTarget+0x38>
 80085e4:	e000      	b.n	80085e8 <_VPrintTarget+0x358>
      break;
 80085e6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d041      	beq.n	8008672 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80085ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085fe:	e00b      	b.n	8008618 <_VPrintTarget+0x388>
 8008600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008602:	b2da      	uxtb	r2, r3
 8008604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008606:	1c59      	adds	r1, r3, #1
 8008608:	6439      	str	r1, [r7, #64]	; 0x40
 800860a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008614:	09db      	lsrs	r3, r3, #7
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861a:	2b7f      	cmp	r3, #127	; 0x7f
 800861c:	d8f0      	bhi.n	8008600 <_VPrintTarget+0x370>
 800861e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008620:	1c5a      	adds	r2, r3, #1
 8008622:	643a      	str	r2, [r7, #64]	; 0x40
 8008624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	63bb      	str	r3, [r7, #56]	; 0x38
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
 8008636:	e00b      	b.n	8008650 <_VPrintTarget+0x3c0>
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	b2da      	uxtb	r2, r3
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	63b9      	str	r1, [r7, #56]	; 0x38
 8008642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864c:	09db      	lsrs	r3, r3, #7
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
 8008650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008652:	2b7f      	cmp	r3, #127	; 0x7f
 8008654:	d8f0      	bhi.n	8008638 <_VPrintTarget+0x3a8>
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	1c5a      	adds	r2, r3, #1
 800865a:	63ba      	str	r2, [r7, #56]	; 0x38
 800865c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]
 8008662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008664:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	69b9      	ldr	r1, [r7, #24]
 800866a:	221a      	movs	r2, #26
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff fb85 	bl	8007d7c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8008678:	bf00      	nop
 800867a:	3758      	adds	r7, #88	; 0x58
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800868e:	2300      	movs	r3, #0
 8008690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008694:	4917      	ldr	r1, [pc, #92]	; (80086f4 <SEGGER_SYSVIEW_Init+0x74>)
 8008696:	4818      	ldr	r0, [pc, #96]	; (80086f8 <SEGGER_SYSVIEW_Init+0x78>)
 8008698:	f7ff f93e 	bl	8007918 <SEGGER_RTT_AllocUpBuffer>
 800869c:	4603      	mov	r3, r0
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	4b16      	ldr	r3, [pc, #88]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80086a4:	4b15      	ldr	r3, [pc, #84]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086a6:	785a      	ldrb	r2, [r3, #1]
 80086a8:	4b14      	ldr	r3, [pc, #80]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80086ac:	4b13      	ldr	r3, [pc, #76]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086ae:	7e1b      	ldrb	r3, [r3, #24]
 80086b0:	4618      	mov	r0, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	2308      	movs	r3, #8
 80086b8:	4a11      	ldr	r2, [pc, #68]	; (8008700 <SEGGER_SYSVIEW_Init+0x80>)
 80086ba:	490f      	ldr	r1, [pc, #60]	; (80086f8 <SEGGER_SYSVIEW_Init+0x78>)
 80086bc:	f7ff f9b0 	bl	8007a20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80086c0:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <SEGGER_SYSVIEW_Init+0x84>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80086ce:	4a0b      	ldr	r2, [pc, #44]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80086d4:	4a09      	ldr	r2, [pc, #36]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80086da:	4a08      	ldr	r2, [pc, #32]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80086e0:	4a06      	ldr	r2, [pc, #24]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80086e6:	4b05      	ldr	r3, [pc, #20]	; (80086fc <SEGGER_SYSVIEW_Init+0x7c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80086ec:	bf00      	nop
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	200135ac 	.word	0x200135ac
 80086f8:	08009fa8 	.word	0x08009fa8
 80086fc:	200145b4 	.word	0x200145b4
 8008700:	200145ac 	.word	0x200145ac
 8008704:	e0001004 	.word	0xe0001004

08008708 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008710:	4a04      	ldr	r2, [pc, #16]	; (8008724 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6113      	str	r3, [r2, #16]
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	200145b4 	.word	0x200145b4

08008728 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008730:	f3ef 8311 	mrs	r3, BASEPRI
 8008734:	f04f 0120 	mov.w	r1, #32
 8008738:	f381 8811 	msr	BASEPRI, r1
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	4808      	ldr	r0, [pc, #32]	; (8008760 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008740:	f7ff fa2b 	bl	8007b9a <_PreparePacket>
 8008744:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	68b9      	ldr	r1, [r7, #8]
 800874a:	68b8      	ldr	r0, [r7, #8]
 800874c:	f7ff fb16 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f383 8811 	msr	BASEPRI, r3
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200145e4 	.word	0x200145e4

08008764 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800876e:	f3ef 8311 	mrs	r3, BASEPRI
 8008772:	f04f 0120 	mov.w	r1, #32
 8008776:	f381 8811 	msr	BASEPRI, r1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	4816      	ldr	r0, [pc, #88]	; (80087d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800877e:	f7ff fa0c 	bl	8007b9a <_PreparePacket>
 8008782:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	61bb      	str	r3, [r7, #24]
 8008790:	e00b      	b.n	80087aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	b2da      	uxtb	r2, r3
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	1c59      	adds	r1, r3, #1
 800879a:	61f9      	str	r1, [r7, #28]
 800879c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	09db      	lsrs	r3, r3, #7
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	2b7f      	cmp	r3, #127	; 0x7f
 80087ae:	d8f0      	bhi.n	8008792 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	61fa      	str	r2, [r7, #28]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	68f9      	ldr	r1, [r7, #12]
 80087c4:	6938      	ldr	r0, [r7, #16]
 80087c6:	f7ff fad9 	bl	8007d7c <_SendPacket>
  RECORD_END();
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f383 8811 	msr	BASEPRI, r3
}
 80087d0:	bf00      	nop
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	200145e4 	.word	0x200145e4

080087dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08c      	sub	sp, #48	; 0x30
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80087e8:	f3ef 8311 	mrs	r3, BASEPRI
 80087ec:	f04f 0120 	mov.w	r1, #32
 80087f0:	f381 8811 	msr	BASEPRI, r1
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	4825      	ldr	r0, [pc, #148]	; (800888c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80087f8:	f7ff f9cf 	bl	8007b9a <_PreparePacket>
 80087fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
 800880a:	e00b      	b.n	8008824 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	b2da      	uxtb	r2, r3
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	09db      	lsrs	r3, r3, #7
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	2b7f      	cmp	r3, #127	; 0x7f
 8008828:	d8f0      	bhi.n	800880c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	623b      	str	r3, [r7, #32]
 8008842:	e00b      	b.n	800885c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	1c59      	adds	r1, r3, #1
 800884c:	6279      	str	r1, [r7, #36]	; 0x24
 800884e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	09db      	lsrs	r3, r3, #7
 800885a:	623b      	str	r3, [r7, #32]
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b7f      	cmp	r3, #127	; 0x7f
 8008860:	d8f0      	bhi.n	8008844 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	627a      	str	r2, [r7, #36]	; 0x24
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	b2d2      	uxtb	r2, r2
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	69b8      	ldr	r0, [r7, #24]
 8008878:	f7ff fa80 	bl	8007d7c <_SendPacket>
  RECORD_END();
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f383 8811 	msr	BASEPRI, r3
}
 8008882:	bf00      	nop
 8008884:	3730      	adds	r7, #48	; 0x30
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	200145e4 	.word	0x200145e4

08008890 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008890:	b580      	push	{r7, lr}
 8008892:	b090      	sub	sp, #64	; 0x40
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800889e:	f3ef 8311 	mrs	r3, BASEPRI
 80088a2:	f04f 0120 	mov.w	r1, #32
 80088a6:	f381 8811 	msr	BASEPRI, r1
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	4840      	ldr	r0, [pc, #256]	; (80089b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80088ae:	f7ff f974 	bl	8007b9a <_PreparePacket>
 80088b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
 80088c0:	e00b      	b.n	80088da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80088c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c8:	1c59      	adds	r1, r3, #1
 80088ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80088cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	09db      	lsrs	r3, r3, #7
 80088d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	2b7f      	cmp	r3, #127	; 0x7f
 80088de:	d8f0      	bhi.n	80088c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80088e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30
 80088f8:	e00b      	b.n	8008912 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008900:	1c59      	adds	r1, r3, #1
 8008902:	6379      	str	r1, [r7, #52]	; 0x34
 8008904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890e:	09db      	lsrs	r3, r3, #7
 8008910:	633b      	str	r3, [r7, #48]	; 0x30
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	2b7f      	cmp	r3, #127	; 0x7f
 8008916:	d8f0      	bhi.n	80088fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	637a      	str	r2, [r7, #52]	; 0x34
 800891e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008920:	b2d2      	uxtb	r2, r2
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008930:	e00b      	b.n	800894a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800893c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008940:	b2d2      	uxtb	r2, r2
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	09db      	lsrs	r3, r3, #7
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	2b7f      	cmp	r3, #127	; 0x7f
 800894e:	d8f0      	bhi.n	8008932 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008958:	b2d2      	uxtb	r2, r2
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
 8008964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008966:	623b      	str	r3, [r7, #32]
 8008968:	e00b      	b.n	8008982 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	1c59      	adds	r1, r3, #1
 8008972:	6279      	str	r1, [r7, #36]	; 0x24
 8008974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	09db      	lsrs	r3, r3, #7
 8008980:	623b      	str	r3, [r7, #32]
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	2b7f      	cmp	r3, #127	; 0x7f
 8008986:	d8f0      	bhi.n	800896a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	627a      	str	r2, [r7, #36]	; 0x24
 800898e:	6a3a      	ldr	r2, [r7, #32]
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	701a      	strb	r2, [r3, #0]
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	69b8      	ldr	r0, [r7, #24]
 800899e:	f7ff f9ed 	bl	8007d7c <_SendPacket>
  RECORD_END();
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f383 8811 	msr	BASEPRI, r3
}
 80089a8:	bf00      	nop
 80089aa:	3740      	adds	r7, #64	; 0x40
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	200145e4 	.word	0x200145e4

080089b4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80089ba:	4b59      	ldr	r3, [pc, #356]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 80089bc:	2201      	movs	r2, #1
 80089be:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80089c0:	f3ef 8311 	mrs	r3, BASEPRI
 80089c4:	f04f 0120 	mov.w	r1, #32
 80089c8:	f381 8811 	msr	BASEPRI, r1
 80089cc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80089ce:	4b54      	ldr	r3, [pc, #336]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	220a      	movs	r2, #10
 80089d4:	4953      	ldr	r1, [pc, #332]	; (8008b24 <SEGGER_SYSVIEW_Start+0x170>)
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fc02 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80089e2:	f7fe feab 	bl	800773c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80089e6:	200a      	movs	r0, #10
 80089e8:	f7ff fe9e 	bl	8008728 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80089ec:	f3ef 8311 	mrs	r3, BASEPRI
 80089f0:	f04f 0120 	mov.w	r1, #32
 80089f4:	f381 8811 	msr	BASEPRI, r1
 80089f8:	60bb      	str	r3, [r7, #8]
 80089fa:	484b      	ldr	r0, [pc, #300]	; (8008b28 <SEGGER_SYSVIEW_Start+0x174>)
 80089fc:	f7ff f8cd 	bl	8007b9a <_PreparePacket>
 8008a00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0a:	4b45      	ldr	r3, [pc, #276]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a10:	e00b      	b.n	8008a2a <SEGGER_SYSVIEW_Start+0x76>
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	1c59      	adds	r1, r3, #1
 8008a1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	09db      	lsrs	r3, r3, #7
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a2e:	d8f0      	bhi.n	8008a12 <SEGGER_SYSVIEW_Start+0x5e>
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
 8008a44:	4b36      	ldr	r3, [pc, #216]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	623b      	str	r3, [r7, #32]
 8008a4a:	e00b      	b.n	8008a64 <SEGGER_SYSVIEW_Start+0xb0>
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	1c59      	adds	r1, r3, #1
 8008a54:	6279      	str	r1, [r7, #36]	; 0x24
 8008a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	09db      	lsrs	r3, r3, #7
 8008a62:	623b      	str	r3, [r7, #32]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	2b7f      	cmp	r3, #127	; 0x7f
 8008a68:	d8f0      	bhi.n	8008a4c <SEGGER_SYSVIEW_Start+0x98>
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8008a70:	6a3a      	ldr	r2, [r7, #32]
 8008a72:	b2d2      	uxtb	r2, r2
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	4b28      	ldr	r3, [pc, #160]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	61bb      	str	r3, [r7, #24]
 8008a84:	e00b      	b.n	8008a9e <SEGGER_SYSVIEW_Start+0xea>
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	1c59      	adds	r1, r3, #1
 8008a8e:	61f9      	str	r1, [r7, #28]
 8008a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	09db      	lsrs	r3, r3, #7
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa2:	d8f0      	bhi.n	8008a86 <SEGGER_SYSVIEW_Start+0xd2>
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	61fa      	str	r2, [r7, #28]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	e00b      	b.n	8008ad6 <SEGGER_SYSVIEW_Start+0x122>
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	1c59      	adds	r1, r3, #1
 8008ac6:	6179      	str	r1, [r7, #20]
 8008ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	09db      	lsrs	r3, r3, #7
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8008ada:	d8f0      	bhi.n	8008abe <SEGGER_SYSVIEW_Start+0x10a>
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	617a      	str	r2, [r7, #20]
 8008ae2:	693a      	ldr	r2, [r7, #16]
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008aec:	2218      	movs	r2, #24
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff f943 	bl	8007d7c <_SendPacket>
      RECORD_END();
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008afc:	4b08      	ldr	r3, [pc, #32]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008b04:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <SEGGER_SYSVIEW_Start+0x16c>)
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008b0a:	f000 f9eb 	bl	8008ee4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008b0e:	f000 f9b1 	bl	8008e74 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008b12:	f000 fc09 	bl	8009328 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008b16:	bf00      	nop
 8008b18:	3730      	adds	r7, #48	; 0x30
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	200145b4 	.word	0x200145b4
 8008b24:	08009fd0 	.word	0x08009fd0
 8008b28:	200145e4 	.word	0x200145e4

08008b2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008b32:	f3ef 8311 	mrs	r3, BASEPRI
 8008b36:	f04f 0120 	mov.w	r1, #32
 8008b3a:	f381 8811 	msr	BASEPRI, r1
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	480b      	ldr	r0, [pc, #44]	; (8008b70 <SEGGER_SYSVIEW_Stop+0x44>)
 8008b42:	f7ff f82a 	bl	8007b9a <_PreparePacket>
 8008b46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <SEGGER_SYSVIEW_Stop+0x48>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008b50:	220b      	movs	r2, #11
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	f7ff f911 	bl	8007d7c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <SEGGER_SYSVIEW_Stop+0x48>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f383 8811 	msr	BASEPRI, r3
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200145e4 	.word	0x200145e4
 8008b74:	200145b4 	.word	0x200145b4

08008b78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	; 0x30
 8008b7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b82:	f04f 0120 	mov.w	r1, #32
 8008b86:	f381 8811 	msr	BASEPRI, r1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	4845      	ldr	r0, [pc, #276]	; (8008ca4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008b8e:	f7ff f804 	bl	8007b9a <_PreparePacket>
 8008b92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b9c:	4b42      	ldr	r3, [pc, #264]	; (8008ca8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba2:	e00b      	b.n	8008bbc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	1c59      	adds	r1, r3, #1
 8008bac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	09db      	lsrs	r3, r3, #7
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8008bc0:	d8f0      	bhi.n	8008ba4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	1c5a      	adds	r2, r3, #1
 8008bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd6:	4b34      	ldr	r3, [pc, #208]	; (8008ca8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	623b      	str	r3, [r7, #32]
 8008bdc:	e00b      	b.n	8008bf6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	1c59      	adds	r1, r3, #1
 8008be6:	6279      	str	r1, [r7, #36]	; 0x24
 8008be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	09db      	lsrs	r3, r3, #7
 8008bf4:	623b      	str	r3, [r7, #32]
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8008bfa:	d8f0      	bhi.n	8008bde <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	627a      	str	r2, [r7, #36]	; 0x24
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	e00b      	b.n	8008c30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	1c59      	adds	r1, r3, #1
 8008c20:	61f9      	str	r1, [r7, #28]
 8008c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	09db      	lsrs	r3, r3, #7
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b7f      	cmp	r3, #127	; 0x7f
 8008c34:	d8f0      	bhi.n	8008c18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	61fa      	str	r2, [r7, #28]
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	e00b      	b.n	8008c68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	6179      	str	r1, [r7, #20]
 8008c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	09db      	lsrs	r3, r3, #7
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c6c:	d8f0      	bhi.n	8008c50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	617a      	str	r2, [r7, #20]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008c7e:	2218      	movs	r2, #24
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	68b8      	ldr	r0, [r7, #8]
 8008c84:	f7ff f87a 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008c8e:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008c96:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	4798      	blx	r3
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	3730      	adds	r7, #48	; 0x30
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	200145e4 	.word	0x200145e4
 8008ca8:	200145b4 	.word	0x200145b4

08008cac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b092      	sub	sp, #72	; 0x48
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb8:	f04f 0120 	mov.w	r1, #32
 8008cbc:	f381 8811 	msr	BASEPRI, r1
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	486a      	ldr	r0, [pc, #424]	; (8008e6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008cc4:	f7fe ff69 	bl	8007b9a <_PreparePacket>
 8008cc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	4b66      	ldr	r3, [pc, #408]	; (8008e70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8008cde:	e00b      	b.n	8008cf8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce6:	1c59      	adds	r1, r3, #1
 8008ce8:	6479      	str	r1, [r7, #68]	; 0x44
 8008cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf4:	09db      	lsrs	r3, r3, #7
 8008cf6:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8008cfc:	d8f0      	bhi.n	8008ce0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	647a      	str	r2, [r7, #68]	; 0x44
 8008d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d06:	b2d2      	uxtb	r2, r2
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d18:	e00b      	b.n	8008d32 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	1c59      	adds	r1, r3, #1
 8008d22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	09db      	lsrs	r3, r3, #7
 8008d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	2b7f      	cmp	r3, #127	; 0x7f
 8008d36:	d8f0      	bhi.n	8008d1a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	701a      	strb	r2, [r3, #0]
 8008d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d46:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7fe fed5 	bl	8007b00 <_EncodeStr>
 8008d56:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008d58:	2209      	movs	r2, #9
 8008d5a:	68f9      	ldr	r1, [r7, #12]
 8008d5c:	6938      	ldr	r0, [r7, #16]
 8008d5e:	f7ff f80d 	bl	8007d7c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b40      	ldr	r3, [pc, #256]	; (8008e70 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
 8008d76:	e00b      	b.n	8008d90 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	1c59      	adds	r1, r3, #1
 8008d80:	6379      	str	r1, [r7, #52]	; 0x34
 8008d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	09db      	lsrs	r3, r3, #7
 8008d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	2b7f      	cmp	r3, #127	; 0x7f
 8008d94:	d8f0      	bhi.n	8008d78 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	637a      	str	r2, [r7, #52]	; 0x34
 8008d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008db0:	e00b      	b.n	8008dca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dc0:	b2d2      	uxtb	r2, r2
 8008dc2:	701a      	strb	r2, [r3, #0]
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	09db      	lsrs	r3, r3, #7
 8008dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8008dce:	d8f0      	bhi.n	8008db2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	623b      	str	r3, [r7, #32]
 8008dea:	e00b      	b.n	8008e04 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	6279      	str	r1, [r7, #36]	; 0x24
 8008df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	09db      	lsrs	r3, r3, #7
 8008e02:	623b      	str	r3, [r7, #32]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	2b7f      	cmp	r3, #127	; 0x7f
 8008e08:	d8f0      	bhi.n	8008dec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	e00b      	b.n	8008e3c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	61f9      	str	r1, [r7, #28]
 8008e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	09db      	lsrs	r3, r3, #7
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e40:	d8f0      	bhi.n	8008e24 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	61fa      	str	r2, [r7, #28]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008e52:	2215      	movs	r2, #21
 8008e54:	68f9      	ldr	r1, [r7, #12]
 8008e56:	6938      	ldr	r0, [r7, #16]
 8008e58:	f7fe ff90 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f383 8811 	msr	BASEPRI, r3
}
 8008e62:	bf00      	nop
 8008e64:	3748      	adds	r7, #72	; 0x48
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	200145e4 	.word	0x200145e4
 8008e70:	200145b4 	.word	0x200145b4

08008e74 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008e78:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008e8a:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4798      	blx	r3
  }
}
 8008e92:	bf00      	nop
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200145b4 	.word	0x200145b4

08008e9c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea8:	f04f 0120 	mov.w	r1, #32
 8008eac:	f381 8811 	msr	BASEPRI, r1
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	480b      	ldr	r0, [pc, #44]	; (8008ee0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008eb4:	f7fe fe71 	bl	8007b9a <_PreparePacket>
 8008eb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008eba:	2280      	movs	r2, #128	; 0x80
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	6938      	ldr	r0, [r7, #16]
 8008ec0:	f7fe fe1e 	bl	8007b00 <_EncodeStr>
 8008ec4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008ec6:	220e      	movs	r2, #14
 8008ec8:	68f9      	ldr	r1, [r7, #12]
 8008eca:	6938      	ldr	r0, [r7, #16]
 8008ecc:	f7fe ff56 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f383 8811 	msr	BASEPRI, r3
}
 8008ed6:	bf00      	nop
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200145e4 	.word	0x200145e4

08008ee4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008ee4:	b590      	push	{r4, r7, lr}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01a      	beq.n	8008f28 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008ef2:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d015      	beq.n	8008f28 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4798      	blx	r3
 8008f04:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008f08:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008f0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	000a      	movs	r2, r1
 8008f18:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4621      	mov	r1, r4
 8008f20:	200d      	movs	r0, #13
 8008f22:	f7ff fc5b 	bl	80087dc <SEGGER_SYSVIEW_RecordU32x2>
 8008f26:	e006      	b.n	8008f36 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008f28:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	200c      	movs	r0, #12
 8008f30:	f7ff fc18 	bl	8008764 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd90      	pop	{r4, r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200145b4 	.word	0x200145b4
 8008f44:	e0001004 	.word	0xe0001004

08008f48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8008f52:	f04f 0120 	mov.w	r1, #32
 8008f56:	f381 8811 	msr	BASEPRI, r1
 8008f5a:	607b      	str	r3, [r7, #4]
 8008f5c:	4807      	ldr	r0, [pc, #28]	; (8008f7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008f5e:	f7fe fe1c 	bl	8007b9a <_PreparePacket>
 8008f62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008f64:	2211      	movs	r2, #17
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6838      	ldr	r0, [r7, #0]
 8008f6a:	f7fe ff07 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f383 8811 	msr	BASEPRI, r3
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200145e4 	.word	0x200145e4

08008f80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008f88:	f3ef 8311 	mrs	r3, BASEPRI
 8008f8c:	f04f 0120 	mov.w	r1, #32
 8008f90:	f381 8811 	msr	BASEPRI, r1
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	4819      	ldr	r0, [pc, #100]	; (8008ffc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008f98:	f7fe fdff 	bl	8007b9a <_PreparePacket>
 8008f9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008fa2:	4b17      	ldr	r3, [pc, #92]	; (8009000 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	61bb      	str	r3, [r7, #24]
 8008fb4:	e00b      	b.n	8008fce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	1c59      	adds	r1, r3, #1
 8008fbe:	61f9      	str	r1, [r7, #28]
 8008fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	09db      	lsrs	r3, r3, #7
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8008fd2:	d8f0      	bhi.n	8008fb6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	61fa      	str	r2, [r7, #28]
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	68f9      	ldr	r1, [r7, #12]
 8008fe8:	6938      	ldr	r0, [r7, #16]
 8008fea:	f7fe fec7 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f383 8811 	msr	BASEPRI, r3
}
 8008ff4:	bf00      	nop
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	200145e4 	.word	0x200145e4
 8009000:	200145b4 	.word	0x200145b4

08009004 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800900c:	f3ef 8311 	mrs	r3, BASEPRI
 8009010:	f04f 0120 	mov.w	r1, #32
 8009014:	f381 8811 	msr	BASEPRI, r1
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	4819      	ldr	r0, [pc, #100]	; (8009080 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800901c:	f7fe fdbd 	bl	8007b9a <_PreparePacket>
 8009020:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009026:	4b17      	ldr	r3, [pc, #92]	; (8009084 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	e00b      	b.n	8009052 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	b2da      	uxtb	r2, r3
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	1c59      	adds	r1, r3, #1
 8009042:	61f9      	str	r1, [r7, #28]
 8009044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	09db      	lsrs	r3, r3, #7
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	2b7f      	cmp	r3, #127	; 0x7f
 8009056:	d8f0      	bhi.n	800903a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	61fa      	str	r2, [r7, #28]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009068:	2204      	movs	r2, #4
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	6938      	ldr	r0, [r7, #16]
 800906e:	f7fe fe85 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f383 8811 	msr	BASEPRI, r3
}
 8009078:	bf00      	nop
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200145e4 	.word	0x200145e4
 8009084:	200145b4 	.word	0x200145b4

08009088 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009090:	f3ef 8311 	mrs	r3, BASEPRI
 8009094:	f04f 0120 	mov.w	r1, #32
 8009098:	f381 8811 	msr	BASEPRI, r1
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	4819      	ldr	r0, [pc, #100]	; (8009104 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80090a0:	f7fe fd7b 	bl	8007b9a <_PreparePacket>
 80090a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090aa:	4b17      	ldr	r3, [pc, #92]	; (8009108 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	e00b      	b.n	80090d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	1c59      	adds	r1, r3, #1
 80090c6:	61f9      	str	r1, [r7, #28]
 80090c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	09db      	lsrs	r3, r3, #7
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b7f      	cmp	r3, #127	; 0x7f
 80090da:	d8f0      	bhi.n	80090be <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	61fa      	str	r2, [r7, #28]
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	b2d2      	uxtb	r2, r2
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80090ec:	2206      	movs	r2, #6
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	6938      	ldr	r0, [r7, #16]
 80090f2:	f7fe fe43 	bl	8007d7c <_SendPacket>
  RECORD_END();
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f383 8811 	msr	BASEPRI, r3
}
 80090fc:	bf00      	nop
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200145e4 	.word	0x200145e4
 8009108:	200145b4 	.word	0x200145b4

0800910c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	; 0x28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009116:	f3ef 8311 	mrs	r3, BASEPRI
 800911a:	f04f 0120 	mov.w	r1, #32
 800911e:	f381 8811 	msr	BASEPRI, r1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	4827      	ldr	r0, [pc, #156]	; (80091c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8009126:	f7fe fd38 	bl	8007b9a <_PreparePacket>
 800912a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e00b      	b.n	800915c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	6279      	str	r1, [r7, #36]	; 0x24
 800914e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	09db      	lsrs	r3, r3, #7
 800915a:	623b      	str	r3, [r7, #32]
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b7f      	cmp	r3, #127	; 0x7f
 8009160:	d8f0      	bhi.n	8009144 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	627a      	str	r2, [r7, #36]	; 0x24
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	e00b      	b.n	8009194 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	b2da      	uxtb	r2, r3
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	1c59      	adds	r1, r3, #1
 8009184:	61f9      	str	r1, [r7, #28]
 8009186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	09db      	lsrs	r3, r3, #7
 8009192:	61bb      	str	r3, [r7, #24]
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b7f      	cmp	r3, #127	; 0x7f
 8009198:	d8f0      	bhi.n	800917c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	61fa      	str	r2, [r7, #28]
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80091aa:	2207      	movs	r2, #7
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	6938      	ldr	r0, [r7, #16]
 80091b0:	f7fe fde4 	bl	8007d7c <_SendPacket>
  RECORD_END();
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f383 8811 	msr	BASEPRI, r3
}
 80091ba:	bf00      	nop
 80091bc:	3728      	adds	r7, #40	; 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	200145e4 	.word	0x200145e4
 80091c8:	200145b4 	.word	0x200145b4

080091cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	1ad3      	subs	r3, r2, r3
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr
 80091e8:	200145b4 	.word	0x200145b4

080091ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08c      	sub	sp, #48	; 0x30
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80091f6:	4b3b      	ldr	r3, [pc, #236]	; (80092e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d06d      	beq.n	80092da <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80091fe:	4b39      	ldr	r3, [pc, #228]	; (80092e4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009204:	2300      	movs	r3, #0
 8009206:	62bb      	str	r3, [r7, #40]	; 0x28
 8009208:	e008      	b.n	800921c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	3301      	adds	r3, #1
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009220:	429a      	cmp	r2, r3
 8009222:	d3f2      	bcc.n	800920a <SEGGER_SYSVIEW_SendModule+0x1e>
 8009224:	e000      	b.n	8009228 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009226:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d055      	beq.n	80092da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800922e:	f3ef 8311 	mrs	r3, BASEPRI
 8009232:	f04f 0120 	mov.w	r1, #32
 8009236:	f381 8811 	msr	BASEPRI, r1
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	482a      	ldr	r0, [pc, #168]	; (80092e8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800923e:	f7fe fcac 	bl	8007b9a <_PreparePacket>
 8009242:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	623b      	str	r3, [r7, #32]
 8009250:	e00b      	b.n	800926a <SEGGER_SYSVIEW_SendModule+0x7e>
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	1c59      	adds	r1, r3, #1
 800925a:	6279      	str	r1, [r7, #36]	; 0x24
 800925c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	701a      	strb	r2, [r3, #0]
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	09db      	lsrs	r3, r3, #7
 8009268:	623b      	str	r3, [r7, #32]
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	2b7f      	cmp	r3, #127	; 0x7f
 800926e:	d8f0      	bhi.n	8009252 <SEGGER_SYSVIEW_SendModule+0x66>
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	627a      	str	r2, [r7, #36]	; 0x24
 8009276:	6a3a      	ldr	r2, [r7, #32]
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e00b      	b.n	80092a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	b2da      	uxtb	r2, r3
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	61f9      	str	r1, [r7, #28]
 8009296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	09db      	lsrs	r3, r3, #7
 80092a2:	61bb      	str	r3, [r7, #24]
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2b7f      	cmp	r3, #127	; 0x7f
 80092a8:	d8f0      	bhi.n	800928c <SEGGER_SYSVIEW_SendModule+0xa0>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	61fa      	str	r2, [r7, #28]
 80092b0:	69ba      	ldr	r2, [r7, #24]
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2280      	movs	r2, #128	; 0x80
 80092c0:	4619      	mov	r1, r3
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7fe fc1c 	bl	8007b00 <_EncodeStr>
 80092c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80092ca:	2216      	movs	r2, #22
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	6938      	ldr	r0, [r7, #16]
 80092d0:	f7fe fd54 	bl	8007d7c <_SendPacket>
      RECORD_END();
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80092da:	bf00      	nop
 80092dc:	3730      	adds	r7, #48	; 0x30
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	200145dc 	.word	0x200145dc
 80092e8:	200145e4 	.word	0x200145e4

080092ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80092f2:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00f      	beq.n	800931a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f2      	bne.n	8009300 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	200145dc 	.word	0x200145dc

08009328 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800932e:	f3ef 8311 	mrs	r3, BASEPRI
 8009332:	f04f 0120 	mov.w	r1, #32
 8009336:	f381 8811 	msr	BASEPRI, r1
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	4817      	ldr	r0, [pc, #92]	; (800939c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800933e:	f7fe fc2c 	bl	8007b9a <_PreparePacket>
 8009342:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	4b14      	ldr	r3, [pc, #80]	; (80093a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	e00b      	b.n	800936c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	b2da      	uxtb	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	1c59      	adds	r1, r3, #1
 800935c:	6179      	str	r1, [r7, #20]
 800935e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	09db      	lsrs	r3, r3, #7
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b7f      	cmp	r3, #127	; 0x7f
 8009370:	d8f0      	bhi.n	8009354 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	617a      	str	r2, [r7, #20]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009382:	221b      	movs	r2, #27
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	68b8      	ldr	r0, [r7, #8]
 8009388:	f7fe fcf8 	bl	8007d7c <_SendPacket>
  RECORD_END();
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f383 8811 	msr	BASEPRI, r3
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	200145e4 	.word	0x200145e4
 80093a0:	200145e0 	.word	0x200145e0

080093a4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80093a4:	b40f      	push	{r0, r1, r2, r3}
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80093ac:	f107 0314 	add.w	r3, r7, #20
 80093b0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	461a      	mov	r2, r3
 80093b6:	2100      	movs	r1, #0
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	f7fe ff69 	bl	8008290 <_VPrintTarget>
  va_end(ParamList);
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093c8:	b004      	add	sp, #16
 80093ca:	4770      	bx	lr

080093cc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b08a      	sub	sp, #40	; 0x28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80093d4:	f3ef 8311 	mrs	r3, BASEPRI
 80093d8:	f04f 0120 	mov.w	r1, #32
 80093dc:	f381 8811 	msr	BASEPRI, r1
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	4827      	ldr	r0, [pc, #156]	; (8009480 <SEGGER_SYSVIEW_Warn+0xb4>)
 80093e4:	f7fe fbd9 	bl	8007b9a <_PreparePacket>
 80093e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80093ea:	2280      	movs	r2, #128	; 0x80
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	6938      	ldr	r0, [r7, #16]
 80093f0:	f7fe fb86 	bl	8007b00 <_EncodeStr>
 80093f4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
 80093fa:	2301      	movs	r3, #1
 80093fc:	623b      	str	r3, [r7, #32]
 80093fe:	e00b      	b.n	8009418 <SEGGER_SYSVIEW_Warn+0x4c>
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	b2da      	uxtb	r2, r3
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	1c59      	adds	r1, r3, #1
 8009408:	6279      	str	r1, [r7, #36]	; 0x24
 800940a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	09db      	lsrs	r3, r3, #7
 8009416:	623b      	str	r3, [r7, #32]
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	2b7f      	cmp	r3, #127	; 0x7f
 800941c:	d8f0      	bhi.n	8009400 <SEGGER_SYSVIEW_Warn+0x34>
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	627a      	str	r2, [r7, #36]	; 0x24
 8009424:	6a3a      	ldr	r2, [r7, #32]
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	2300      	movs	r3, #0
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	e00b      	b.n	8009450 <SEGGER_SYSVIEW_Warn+0x84>
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	1c59      	adds	r1, r3, #1
 8009440:	61f9      	str	r1, [r7, #28]
 8009442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	09db      	lsrs	r3, r3, #7
 800944e:	61bb      	str	r3, [r7, #24]
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b7f      	cmp	r3, #127	; 0x7f
 8009454:	d8f0      	bhi.n	8009438 <SEGGER_SYSVIEW_Warn+0x6c>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	61fa      	str	r2, [r7, #28]
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009466:	221a      	movs	r2, #26
 8009468:	68f9      	ldr	r1, [r7, #12]
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f7fe fc86 	bl	8007d7c <_SendPacket>
  RECORD_END();
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f383 8811 	msr	BASEPRI, r3
}
 8009476:	bf00      	nop
 8009478:	3728      	adds	r7, #40	; 0x28
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200145e4 	.word	0x200145e4

08009484 <siprintf>:
 8009484:	b40e      	push	{r1, r2, r3}
 8009486:	b500      	push	{lr}
 8009488:	b09c      	sub	sp, #112	; 0x70
 800948a:	ab1d      	add	r3, sp, #116	; 0x74
 800948c:	9002      	str	r0, [sp, #8]
 800948e:	9006      	str	r0, [sp, #24]
 8009490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <siprintf+0x38>)
 8009496:	9107      	str	r1, [sp, #28]
 8009498:	9104      	str	r1, [sp, #16]
 800949a:	4909      	ldr	r1, [pc, #36]	; (80094c0 <siprintf+0x3c>)
 800949c:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a0:	9105      	str	r1, [sp, #20]
 80094a2:	6800      	ldr	r0, [r0, #0]
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	a902      	add	r1, sp, #8
 80094a8:	f000 f9b0 	bl	800980c <_svfiprintf_r>
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	b01c      	add	sp, #112	; 0x70
 80094b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b8:	b003      	add	sp, #12
 80094ba:	4770      	bx	lr
 80094bc:	20000070 	.word	0x20000070
 80094c0:	ffff0208 	.word	0xffff0208

080094c4 <memcmp>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	3901      	subs	r1, #1
 80094c8:	4402      	add	r2, r0
 80094ca:	4290      	cmp	r0, r2
 80094cc:	d101      	bne.n	80094d2 <memcmp+0xe>
 80094ce:	2000      	movs	r0, #0
 80094d0:	e005      	b.n	80094de <memcmp+0x1a>
 80094d2:	7803      	ldrb	r3, [r0, #0]
 80094d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094d8:	42a3      	cmp	r3, r4
 80094da:	d001      	beq.n	80094e0 <memcmp+0x1c>
 80094dc:	1b18      	subs	r0, r3, r4
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	3001      	adds	r0, #1
 80094e2:	e7f2      	b.n	80094ca <memcmp+0x6>

080094e4 <memset>:
 80094e4:	4402      	add	r2, r0
 80094e6:	4603      	mov	r3, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <__errno>:
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <__errno+0x8>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000070 	.word	0x20000070

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4d0d      	ldr	r5, [pc, #52]	; (8009538 <__libc_init_array+0x38>)
 8009504:	4c0d      	ldr	r4, [pc, #52]	; (800953c <__libc_init_array+0x3c>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	2600      	movs	r6, #0
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	4d0b      	ldr	r5, [pc, #44]	; (8009540 <__libc_init_array+0x40>)
 8009512:	4c0c      	ldr	r4, [pc, #48]	; (8009544 <__libc_init_array+0x44>)
 8009514:	f000 fc6a 	bl	8009dec <_init>
 8009518:	1b64      	subs	r4, r4, r5
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	2600      	movs	r6, #0
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	0800a028 	.word	0x0800a028
 800953c:	0800a028 	.word	0x0800a028
 8009540:	0800a028 	.word	0x0800a028
 8009544:	0800a02c 	.word	0x0800a02c

08009548 <__retarget_lock_acquire_recursive>:
 8009548:	4770      	bx	lr

0800954a <__retarget_lock_release_recursive>:
 800954a:	4770      	bx	lr

0800954c <memcpy>:
 800954c:	440a      	add	r2, r1
 800954e:	4291      	cmp	r1, r2
 8009550:	f100 33ff 	add.w	r3, r0, #4294967295
 8009554:	d100      	bne.n	8009558 <memcpy+0xc>
 8009556:	4770      	bx	lr
 8009558:	b510      	push	{r4, lr}
 800955a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009562:	4291      	cmp	r1, r2
 8009564:	d1f9      	bne.n	800955a <memcpy+0xe>
 8009566:	bd10      	pop	{r4, pc}

08009568 <_free_r>:
 8009568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800956a:	2900      	cmp	r1, #0
 800956c:	d044      	beq.n	80095f8 <_free_r+0x90>
 800956e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009572:	9001      	str	r0, [sp, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f1a1 0404 	sub.w	r4, r1, #4
 800957a:	bfb8      	it	lt
 800957c:	18e4      	addlt	r4, r4, r3
 800957e:	f000 f8df 	bl	8009740 <__malloc_lock>
 8009582:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <_free_r+0x94>)
 8009584:	9801      	ldr	r0, [sp, #4]
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	b933      	cbnz	r3, 8009598 <_free_r+0x30>
 800958a:	6063      	str	r3, [r4, #4]
 800958c:	6014      	str	r4, [r2, #0]
 800958e:	b003      	add	sp, #12
 8009590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009594:	f000 b8da 	b.w	800974c <__malloc_unlock>
 8009598:	42a3      	cmp	r3, r4
 800959a:	d908      	bls.n	80095ae <_free_r+0x46>
 800959c:	6825      	ldr	r5, [r4, #0]
 800959e:	1961      	adds	r1, r4, r5
 80095a0:	428b      	cmp	r3, r1
 80095a2:	bf01      	itttt	eq
 80095a4:	6819      	ldreq	r1, [r3, #0]
 80095a6:	685b      	ldreq	r3, [r3, #4]
 80095a8:	1949      	addeq	r1, r1, r5
 80095aa:	6021      	streq	r1, [r4, #0]
 80095ac:	e7ed      	b.n	800958a <_free_r+0x22>
 80095ae:	461a      	mov	r2, r3
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	b10b      	cbz	r3, 80095b8 <_free_r+0x50>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d9fa      	bls.n	80095ae <_free_r+0x46>
 80095b8:	6811      	ldr	r1, [r2, #0]
 80095ba:	1855      	adds	r5, r2, r1
 80095bc:	42a5      	cmp	r5, r4
 80095be:	d10b      	bne.n	80095d8 <_free_r+0x70>
 80095c0:	6824      	ldr	r4, [r4, #0]
 80095c2:	4421      	add	r1, r4
 80095c4:	1854      	adds	r4, r2, r1
 80095c6:	42a3      	cmp	r3, r4
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	d1e0      	bne.n	800958e <_free_r+0x26>
 80095cc:	681c      	ldr	r4, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	6053      	str	r3, [r2, #4]
 80095d2:	440c      	add	r4, r1
 80095d4:	6014      	str	r4, [r2, #0]
 80095d6:	e7da      	b.n	800958e <_free_r+0x26>
 80095d8:	d902      	bls.n	80095e0 <_free_r+0x78>
 80095da:	230c      	movs	r3, #12
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	e7d6      	b.n	800958e <_free_r+0x26>
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf04      	itt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	6063      	str	r3, [r4, #4]
 80095ee:	bf04      	itt	eq
 80095f0:	1949      	addeq	r1, r1, r5
 80095f2:	6021      	streq	r1, [r4, #0]
 80095f4:	6054      	str	r4, [r2, #4]
 80095f6:	e7ca      	b.n	800958e <_free_r+0x26>
 80095f8:	b003      	add	sp, #12
 80095fa:	bd30      	pop	{r4, r5, pc}
 80095fc:	20014808 	.word	0x20014808

08009600 <sbrk_aligned>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	4e0e      	ldr	r6, [pc, #56]	; (800963c <sbrk_aligned+0x3c>)
 8009604:	460c      	mov	r4, r1
 8009606:	6831      	ldr	r1, [r6, #0]
 8009608:	4605      	mov	r5, r0
 800960a:	b911      	cbnz	r1, 8009612 <sbrk_aligned+0x12>
 800960c:	f000 fba6 	bl	8009d5c <_sbrk_r>
 8009610:	6030      	str	r0, [r6, #0]
 8009612:	4621      	mov	r1, r4
 8009614:	4628      	mov	r0, r5
 8009616:	f000 fba1 	bl	8009d5c <_sbrk_r>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d00a      	beq.n	8009634 <sbrk_aligned+0x34>
 800961e:	1cc4      	adds	r4, r0, #3
 8009620:	f024 0403 	bic.w	r4, r4, #3
 8009624:	42a0      	cmp	r0, r4
 8009626:	d007      	beq.n	8009638 <sbrk_aligned+0x38>
 8009628:	1a21      	subs	r1, r4, r0
 800962a:	4628      	mov	r0, r5
 800962c:	f000 fb96 	bl	8009d5c <_sbrk_r>
 8009630:	3001      	adds	r0, #1
 8009632:	d101      	bne.n	8009638 <sbrk_aligned+0x38>
 8009634:	f04f 34ff 	mov.w	r4, #4294967295
 8009638:	4620      	mov	r0, r4
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	2001480c 	.word	0x2001480c

08009640 <_malloc_r>:
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009644:	1ccd      	adds	r5, r1, #3
 8009646:	f025 0503 	bic.w	r5, r5, #3
 800964a:	3508      	adds	r5, #8
 800964c:	2d0c      	cmp	r5, #12
 800964e:	bf38      	it	cc
 8009650:	250c      	movcc	r5, #12
 8009652:	2d00      	cmp	r5, #0
 8009654:	4607      	mov	r7, r0
 8009656:	db01      	blt.n	800965c <_malloc_r+0x1c>
 8009658:	42a9      	cmp	r1, r5
 800965a:	d905      	bls.n	8009668 <_malloc_r+0x28>
 800965c:	230c      	movs	r3, #12
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	2600      	movs	r6, #0
 8009662:	4630      	mov	r0, r6
 8009664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009668:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800973c <_malloc_r+0xfc>
 800966c:	f000 f868 	bl	8009740 <__malloc_lock>
 8009670:	f8d8 3000 	ldr.w	r3, [r8]
 8009674:	461c      	mov	r4, r3
 8009676:	bb5c      	cbnz	r4, 80096d0 <_malloc_r+0x90>
 8009678:	4629      	mov	r1, r5
 800967a:	4638      	mov	r0, r7
 800967c:	f7ff ffc0 	bl	8009600 <sbrk_aligned>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	4604      	mov	r4, r0
 8009684:	d155      	bne.n	8009732 <_malloc_r+0xf2>
 8009686:	f8d8 4000 	ldr.w	r4, [r8]
 800968a:	4626      	mov	r6, r4
 800968c:	2e00      	cmp	r6, #0
 800968e:	d145      	bne.n	800971c <_malloc_r+0xdc>
 8009690:	2c00      	cmp	r4, #0
 8009692:	d048      	beq.n	8009726 <_malloc_r+0xe6>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	4631      	mov	r1, r6
 8009698:	4638      	mov	r0, r7
 800969a:	eb04 0903 	add.w	r9, r4, r3
 800969e:	f000 fb5d 	bl	8009d5c <_sbrk_r>
 80096a2:	4581      	cmp	r9, r0
 80096a4:	d13f      	bne.n	8009726 <_malloc_r+0xe6>
 80096a6:	6821      	ldr	r1, [r4, #0]
 80096a8:	1a6d      	subs	r5, r5, r1
 80096aa:	4629      	mov	r1, r5
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7ff ffa7 	bl	8009600 <sbrk_aligned>
 80096b2:	3001      	adds	r0, #1
 80096b4:	d037      	beq.n	8009726 <_malloc_r+0xe6>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	442b      	add	r3, r5
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	f8d8 3000 	ldr.w	r3, [r8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d038      	beq.n	8009736 <_malloc_r+0xf6>
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	42a2      	cmp	r2, r4
 80096c8:	d12b      	bne.n	8009722 <_malloc_r+0xe2>
 80096ca:	2200      	movs	r2, #0
 80096cc:	605a      	str	r2, [r3, #4]
 80096ce:	e00f      	b.n	80096f0 <_malloc_r+0xb0>
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	1b52      	subs	r2, r2, r5
 80096d4:	d41f      	bmi.n	8009716 <_malloc_r+0xd6>
 80096d6:	2a0b      	cmp	r2, #11
 80096d8:	d917      	bls.n	800970a <_malloc_r+0xca>
 80096da:	1961      	adds	r1, r4, r5
 80096dc:	42a3      	cmp	r3, r4
 80096de:	6025      	str	r5, [r4, #0]
 80096e0:	bf18      	it	ne
 80096e2:	6059      	strne	r1, [r3, #4]
 80096e4:	6863      	ldr	r3, [r4, #4]
 80096e6:	bf08      	it	eq
 80096e8:	f8c8 1000 	streq.w	r1, [r8]
 80096ec:	5162      	str	r2, [r4, r5]
 80096ee:	604b      	str	r3, [r1, #4]
 80096f0:	4638      	mov	r0, r7
 80096f2:	f104 060b 	add.w	r6, r4, #11
 80096f6:	f000 f829 	bl	800974c <__malloc_unlock>
 80096fa:	f026 0607 	bic.w	r6, r6, #7
 80096fe:	1d23      	adds	r3, r4, #4
 8009700:	1af2      	subs	r2, r6, r3
 8009702:	d0ae      	beq.n	8009662 <_malloc_r+0x22>
 8009704:	1b9b      	subs	r3, r3, r6
 8009706:	50a3      	str	r3, [r4, r2]
 8009708:	e7ab      	b.n	8009662 <_malloc_r+0x22>
 800970a:	42a3      	cmp	r3, r4
 800970c:	6862      	ldr	r2, [r4, #4]
 800970e:	d1dd      	bne.n	80096cc <_malloc_r+0x8c>
 8009710:	f8c8 2000 	str.w	r2, [r8]
 8009714:	e7ec      	b.n	80096f0 <_malloc_r+0xb0>
 8009716:	4623      	mov	r3, r4
 8009718:	6864      	ldr	r4, [r4, #4]
 800971a:	e7ac      	b.n	8009676 <_malloc_r+0x36>
 800971c:	4634      	mov	r4, r6
 800971e:	6876      	ldr	r6, [r6, #4]
 8009720:	e7b4      	b.n	800968c <_malloc_r+0x4c>
 8009722:	4613      	mov	r3, r2
 8009724:	e7cc      	b.n	80096c0 <_malloc_r+0x80>
 8009726:	230c      	movs	r3, #12
 8009728:	603b      	str	r3, [r7, #0]
 800972a:	4638      	mov	r0, r7
 800972c:	f000 f80e 	bl	800974c <__malloc_unlock>
 8009730:	e797      	b.n	8009662 <_malloc_r+0x22>
 8009732:	6025      	str	r5, [r4, #0]
 8009734:	e7dc      	b.n	80096f0 <_malloc_r+0xb0>
 8009736:	605b      	str	r3, [r3, #4]
 8009738:	deff      	udf	#255	; 0xff
 800973a:	bf00      	nop
 800973c:	20014808 	.word	0x20014808

08009740 <__malloc_lock>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__malloc_lock+0x8>)
 8009742:	f7ff bf01 	b.w	8009548 <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	20014804 	.word	0x20014804

0800974c <__malloc_unlock>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__malloc_unlock+0x8>)
 800974e:	f7ff befc 	b.w	800954a <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	20014804 	.word	0x20014804

08009758 <__ssputs_r>:
 8009758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	688e      	ldr	r6, [r1, #8]
 800975e:	461f      	mov	r7, r3
 8009760:	42be      	cmp	r6, r7
 8009762:	680b      	ldr	r3, [r1, #0]
 8009764:	4682      	mov	sl, r0
 8009766:	460c      	mov	r4, r1
 8009768:	4690      	mov	r8, r2
 800976a:	d82c      	bhi.n	80097c6 <__ssputs_r+0x6e>
 800976c:	898a      	ldrh	r2, [r1, #12]
 800976e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009772:	d026      	beq.n	80097c2 <__ssputs_r+0x6a>
 8009774:	6965      	ldr	r5, [r4, #20]
 8009776:	6909      	ldr	r1, [r1, #16]
 8009778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800977c:	eba3 0901 	sub.w	r9, r3, r1
 8009780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009784:	1c7b      	adds	r3, r7, #1
 8009786:	444b      	add	r3, r9
 8009788:	106d      	asrs	r5, r5, #1
 800978a:	429d      	cmp	r5, r3
 800978c:	bf38      	it	cc
 800978e:	461d      	movcc	r5, r3
 8009790:	0553      	lsls	r3, r2, #21
 8009792:	d527      	bpl.n	80097e4 <__ssputs_r+0x8c>
 8009794:	4629      	mov	r1, r5
 8009796:	f7ff ff53 	bl	8009640 <_malloc_r>
 800979a:	4606      	mov	r6, r0
 800979c:	b360      	cbz	r0, 80097f8 <__ssputs_r+0xa0>
 800979e:	6921      	ldr	r1, [r4, #16]
 80097a0:	464a      	mov	r2, r9
 80097a2:	f7ff fed3 	bl	800954c <memcpy>
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	6126      	str	r6, [r4, #16]
 80097b4:	6165      	str	r5, [r4, #20]
 80097b6:	444e      	add	r6, r9
 80097b8:	eba5 0509 	sub.w	r5, r5, r9
 80097bc:	6026      	str	r6, [r4, #0]
 80097be:	60a5      	str	r5, [r4, #8]
 80097c0:	463e      	mov	r6, r7
 80097c2:	42be      	cmp	r6, r7
 80097c4:	d900      	bls.n	80097c8 <__ssputs_r+0x70>
 80097c6:	463e      	mov	r6, r7
 80097c8:	6820      	ldr	r0, [r4, #0]
 80097ca:	4632      	mov	r2, r6
 80097cc:	4641      	mov	r1, r8
 80097ce:	f000 faab 	bl	8009d28 <memmove>
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	1b9b      	subs	r3, r3, r6
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	4433      	add	r3, r6
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	2000      	movs	r0, #0
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097e4:	462a      	mov	r2, r5
 80097e6:	f000 fac9 	bl	8009d7c <_realloc_r>
 80097ea:	4606      	mov	r6, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1e0      	bne.n	80097b2 <__ssputs_r+0x5a>
 80097f0:	6921      	ldr	r1, [r4, #16]
 80097f2:	4650      	mov	r0, sl
 80097f4:	f7ff feb8 	bl	8009568 <_free_r>
 80097f8:	230c      	movs	r3, #12
 80097fa:	f8ca 3000 	str.w	r3, [sl]
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	f04f 30ff 	mov.w	r0, #4294967295
 800980a:	e7e9      	b.n	80097e0 <__ssputs_r+0x88>

0800980c <_svfiprintf_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4698      	mov	r8, r3
 8009812:	898b      	ldrh	r3, [r1, #12]
 8009814:	061b      	lsls	r3, r3, #24
 8009816:	b09d      	sub	sp, #116	; 0x74
 8009818:	4607      	mov	r7, r0
 800981a:	460d      	mov	r5, r1
 800981c:	4614      	mov	r4, r2
 800981e:	d50e      	bpl.n	800983e <_svfiprintf_r+0x32>
 8009820:	690b      	ldr	r3, [r1, #16]
 8009822:	b963      	cbnz	r3, 800983e <_svfiprintf_r+0x32>
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	f7ff ff0b 	bl	8009640 <_malloc_r>
 800982a:	6028      	str	r0, [r5, #0]
 800982c:	6128      	str	r0, [r5, #16]
 800982e:	b920      	cbnz	r0, 800983a <_svfiprintf_r+0x2e>
 8009830:	230c      	movs	r3, #12
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e0d0      	b.n	80099dc <_svfiprintf_r+0x1d0>
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	616b      	str	r3, [r5, #20]
 800983e:	2300      	movs	r3, #0
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	2320      	movs	r3, #32
 8009844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009848:	f8cd 800c 	str.w	r8, [sp, #12]
 800984c:	2330      	movs	r3, #48	; 0x30
 800984e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099f4 <_svfiprintf_r+0x1e8>
 8009852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	4623      	mov	r3, r4
 800985c:	469a      	mov	sl, r3
 800985e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009862:	b10a      	cbz	r2, 8009868 <_svfiprintf_r+0x5c>
 8009864:	2a25      	cmp	r2, #37	; 0x25
 8009866:	d1f9      	bne.n	800985c <_svfiprintf_r+0x50>
 8009868:	ebba 0b04 	subs.w	fp, sl, r4
 800986c:	d00b      	beq.n	8009886 <_svfiprintf_r+0x7a>
 800986e:	465b      	mov	r3, fp
 8009870:	4622      	mov	r2, r4
 8009872:	4629      	mov	r1, r5
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ff6f 	bl	8009758 <__ssputs_r>
 800987a:	3001      	adds	r0, #1
 800987c:	f000 80a9 	beq.w	80099d2 <_svfiprintf_r+0x1c6>
 8009880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009882:	445a      	add	r2, fp
 8009884:	9209      	str	r2, [sp, #36]	; 0x24
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 80a1 	beq.w	80099d2 <_svfiprintf_r+0x1c6>
 8009890:	2300      	movs	r3, #0
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989a:	f10a 0a01 	add.w	sl, sl, #1
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a6:	931a      	str	r3, [sp, #104]	; 0x68
 80098a8:	4654      	mov	r4, sl
 80098aa:	2205      	movs	r2, #5
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	4850      	ldr	r0, [pc, #320]	; (80099f4 <_svfiprintf_r+0x1e8>)
 80098b2:	f7f6 fced 	bl	8000290 <memchr>
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	b9d8      	cbnz	r0, 80098f2 <_svfiprintf_r+0xe6>
 80098ba:	06d0      	lsls	r0, r2, #27
 80098bc:	bf44      	itt	mi
 80098be:	2320      	movmi	r3, #32
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c4:	0711      	lsls	r1, r2, #28
 80098c6:	bf44      	itt	mi
 80098c8:	232b      	movmi	r3, #43	; 0x2b
 80098ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b2a      	cmp	r3, #42	; 0x2a
 80098d4:	d015      	beq.n	8009902 <_svfiprintf_r+0xf6>
 80098d6:	9a07      	ldr	r2, [sp, #28]
 80098d8:	4654      	mov	r4, sl
 80098da:	2000      	movs	r0, #0
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4621      	mov	r1, r4
 80098e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e6:	3b30      	subs	r3, #48	; 0x30
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	d94d      	bls.n	8009988 <_svfiprintf_r+0x17c>
 80098ec:	b1b0      	cbz	r0, 800991c <_svfiprintf_r+0x110>
 80098ee:	9207      	str	r2, [sp, #28]
 80098f0:	e014      	b.n	800991c <_svfiprintf_r+0x110>
 80098f2:	eba0 0308 	sub.w	r3, r0, r8
 80098f6:	fa09 f303 	lsl.w	r3, r9, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	46a2      	mov	sl, r4
 8009900:	e7d2      	b.n	80098a8 <_svfiprintf_r+0x9c>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9103      	str	r1, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbb      	ittet	lt
 800990e:	425b      	neglt	r3, r3
 8009910:	f042 0202 	orrlt.w	r2, r2, #2
 8009914:	9307      	strge	r3, [sp, #28]
 8009916:	9307      	strlt	r3, [sp, #28]
 8009918:	bfb8      	it	lt
 800991a:	9204      	strlt	r2, [sp, #16]
 800991c:	7823      	ldrb	r3, [r4, #0]
 800991e:	2b2e      	cmp	r3, #46	; 0x2e
 8009920:	d10c      	bne.n	800993c <_svfiprintf_r+0x130>
 8009922:	7863      	ldrb	r3, [r4, #1]
 8009924:	2b2a      	cmp	r3, #42	; 0x2a
 8009926:	d134      	bne.n	8009992 <_svfiprintf_r+0x186>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	1d1a      	adds	r2, r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	9203      	str	r2, [sp, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfb8      	it	lt
 8009934:	f04f 33ff 	movlt.w	r3, #4294967295
 8009938:	3402      	adds	r4, #2
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009a04 <_svfiprintf_r+0x1f8>
 8009940:	7821      	ldrb	r1, [r4, #0]
 8009942:	2203      	movs	r2, #3
 8009944:	4650      	mov	r0, sl
 8009946:	f7f6 fca3 	bl	8000290 <memchr>
 800994a:	b138      	cbz	r0, 800995c <_svfiprintf_r+0x150>
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	eba0 000a 	sub.w	r0, r0, sl
 8009952:	2240      	movs	r2, #64	; 0x40
 8009954:	4082      	lsls	r2, r0
 8009956:	4313      	orrs	r3, r2
 8009958:	3401      	adds	r4, #1
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	4825      	ldr	r0, [pc, #148]	; (80099f8 <_svfiprintf_r+0x1ec>)
 8009962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009966:	2206      	movs	r2, #6
 8009968:	f7f6 fc92 	bl	8000290 <memchr>
 800996c:	2800      	cmp	r0, #0
 800996e:	d038      	beq.n	80099e2 <_svfiprintf_r+0x1d6>
 8009970:	4b22      	ldr	r3, [pc, #136]	; (80099fc <_svfiprintf_r+0x1f0>)
 8009972:	bb1b      	cbnz	r3, 80099bc <_svfiprintf_r+0x1b0>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	3307      	adds	r3, #7
 8009978:	f023 0307 	bic.w	r3, r3, #7
 800997c:	3308      	adds	r3, #8
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	4433      	add	r3, r6
 8009984:	9309      	str	r3, [sp, #36]	; 0x24
 8009986:	e768      	b.n	800985a <_svfiprintf_r+0x4e>
 8009988:	fb0c 3202 	mla	r2, ip, r2, r3
 800998c:	460c      	mov	r4, r1
 800998e:	2001      	movs	r0, #1
 8009990:	e7a6      	b.n	80098e0 <_svfiprintf_r+0xd4>
 8009992:	2300      	movs	r3, #0
 8009994:	3401      	adds	r4, #1
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	4619      	mov	r1, r3
 800999a:	f04f 0c0a 	mov.w	ip, #10
 800999e:	4620      	mov	r0, r4
 80099a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a4:	3a30      	subs	r2, #48	; 0x30
 80099a6:	2a09      	cmp	r2, #9
 80099a8:	d903      	bls.n	80099b2 <_svfiprintf_r+0x1a6>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d0c6      	beq.n	800993c <_svfiprintf_r+0x130>
 80099ae:	9105      	str	r1, [sp, #20]
 80099b0:	e7c4      	b.n	800993c <_svfiprintf_r+0x130>
 80099b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b6:	4604      	mov	r4, r0
 80099b8:	2301      	movs	r3, #1
 80099ba:	e7f0      	b.n	800999e <_svfiprintf_r+0x192>
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4b0f      	ldr	r3, [pc, #60]	; (8009a00 <_svfiprintf_r+0x1f4>)
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4638      	mov	r0, r7
 80099c8:	f3af 8000 	nop.w
 80099cc:	1c42      	adds	r2, r0, #1
 80099ce:	4606      	mov	r6, r0
 80099d0:	d1d6      	bne.n	8009980 <_svfiprintf_r+0x174>
 80099d2:	89ab      	ldrh	r3, [r5, #12]
 80099d4:	065b      	lsls	r3, r3, #25
 80099d6:	f53f af2d 	bmi.w	8009834 <_svfiprintf_r+0x28>
 80099da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099dc:	b01d      	add	sp, #116	; 0x74
 80099de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e2:	ab03      	add	r3, sp, #12
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <_svfiprintf_r+0x1f4>)
 80099ea:	a904      	add	r1, sp, #16
 80099ec:	4638      	mov	r0, r7
 80099ee:	f000 f879 	bl	8009ae4 <_printf_i>
 80099f2:	e7eb      	b.n	80099cc <_svfiprintf_r+0x1c0>
 80099f4:	08009fec 	.word	0x08009fec
 80099f8:	08009ff6 	.word	0x08009ff6
 80099fc:	00000000 	.word	0x00000000
 8009a00:	08009759 	.word	0x08009759
 8009a04:	08009ff2 	.word	0x08009ff2

08009a08 <_printf_common>:
 8009a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a0c:	4616      	mov	r6, r2
 8009a0e:	4699      	mov	r9, r3
 8009a10:	688a      	ldr	r2, [r1, #8]
 8009a12:	690b      	ldr	r3, [r1, #16]
 8009a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	bfb8      	it	lt
 8009a1c:	4613      	movlt	r3, r2
 8009a1e:	6033      	str	r3, [r6, #0]
 8009a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a24:	4607      	mov	r7, r0
 8009a26:	460c      	mov	r4, r1
 8009a28:	b10a      	cbz	r2, 8009a2e <_printf_common+0x26>
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	6033      	str	r3, [r6, #0]
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	0699      	lsls	r1, r3, #26
 8009a32:	bf42      	ittt	mi
 8009a34:	6833      	ldrmi	r3, [r6, #0]
 8009a36:	3302      	addmi	r3, #2
 8009a38:	6033      	strmi	r3, [r6, #0]
 8009a3a:	6825      	ldr	r5, [r4, #0]
 8009a3c:	f015 0506 	ands.w	r5, r5, #6
 8009a40:	d106      	bne.n	8009a50 <_printf_common+0x48>
 8009a42:	f104 0a19 	add.w	sl, r4, #25
 8009a46:	68e3      	ldr	r3, [r4, #12]
 8009a48:	6832      	ldr	r2, [r6, #0]
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	42ab      	cmp	r3, r5
 8009a4e:	dc26      	bgt.n	8009a9e <_printf_common+0x96>
 8009a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a54:	1e13      	subs	r3, r2, #0
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	bf18      	it	ne
 8009a5a:	2301      	movne	r3, #1
 8009a5c:	0692      	lsls	r2, r2, #26
 8009a5e:	d42b      	bmi.n	8009ab8 <_printf_common+0xb0>
 8009a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d01e      	beq.n	8009aac <_printf_common+0xa4>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	6922      	ldr	r2, [r4, #16]
 8009a72:	f003 0306 	and.w	r3, r3, #6
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	bf02      	ittt	eq
 8009a7a:	68e5      	ldreq	r5, [r4, #12]
 8009a7c:	6833      	ldreq	r3, [r6, #0]
 8009a7e:	1aed      	subeq	r5, r5, r3
 8009a80:	68a3      	ldr	r3, [r4, #8]
 8009a82:	bf0c      	ite	eq
 8009a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a88:	2500      	movne	r5, #0
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	bfc4      	itt	gt
 8009a8e:	1a9b      	subgt	r3, r3, r2
 8009a90:	18ed      	addgt	r5, r5, r3
 8009a92:	2600      	movs	r6, #0
 8009a94:	341a      	adds	r4, #26
 8009a96:	42b5      	cmp	r5, r6
 8009a98:	d11a      	bne.n	8009ad0 <_printf_common+0xc8>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e008      	b.n	8009ab0 <_printf_common+0xa8>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	47c0      	blx	r8
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d103      	bne.n	8009ab4 <_printf_common+0xac>
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab4:	3501      	adds	r5, #1
 8009ab6:	e7c6      	b.n	8009a46 <_printf_common+0x3e>
 8009ab8:	18e1      	adds	r1, r4, r3
 8009aba:	1c5a      	adds	r2, r3, #1
 8009abc:	2030      	movs	r0, #48	; 0x30
 8009abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ac2:	4422      	add	r2, r4
 8009ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009acc:	3302      	adds	r3, #2
 8009ace:	e7c7      	b.n	8009a60 <_printf_common+0x58>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	47c0      	blx	r8
 8009ada:	3001      	adds	r0, #1
 8009adc:	d0e6      	beq.n	8009aac <_printf_common+0xa4>
 8009ade:	3601      	adds	r6, #1
 8009ae0:	e7d9      	b.n	8009a96 <_printf_common+0x8e>
	...

08009ae4 <_printf_i>:
 8009ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	7e0f      	ldrb	r7, [r1, #24]
 8009aea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009aec:	2f78      	cmp	r7, #120	; 0x78
 8009aee:	4691      	mov	r9, r2
 8009af0:	4680      	mov	r8, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	469a      	mov	sl, r3
 8009af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009afa:	d807      	bhi.n	8009b0c <_printf_i+0x28>
 8009afc:	2f62      	cmp	r7, #98	; 0x62
 8009afe:	d80a      	bhi.n	8009b16 <_printf_i+0x32>
 8009b00:	2f00      	cmp	r7, #0
 8009b02:	f000 80d4 	beq.w	8009cae <_printf_i+0x1ca>
 8009b06:	2f58      	cmp	r7, #88	; 0x58
 8009b08:	f000 80c0 	beq.w	8009c8c <_printf_i+0x1a8>
 8009b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b14:	e03a      	b.n	8009b8c <_printf_i+0xa8>
 8009b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b1a:	2b15      	cmp	r3, #21
 8009b1c:	d8f6      	bhi.n	8009b0c <_printf_i+0x28>
 8009b1e:	a101      	add	r1, pc, #4	; (adr r1, 8009b24 <_printf_i+0x40>)
 8009b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b24:	08009b7d 	.word	0x08009b7d
 8009b28:	08009b91 	.word	0x08009b91
 8009b2c:	08009b0d 	.word	0x08009b0d
 8009b30:	08009b0d 	.word	0x08009b0d
 8009b34:	08009b0d 	.word	0x08009b0d
 8009b38:	08009b0d 	.word	0x08009b0d
 8009b3c:	08009b91 	.word	0x08009b91
 8009b40:	08009b0d 	.word	0x08009b0d
 8009b44:	08009b0d 	.word	0x08009b0d
 8009b48:	08009b0d 	.word	0x08009b0d
 8009b4c:	08009b0d 	.word	0x08009b0d
 8009b50:	08009c95 	.word	0x08009c95
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009c4f 	.word	0x08009c4f
 8009b5c:	08009b0d 	.word	0x08009b0d
 8009b60:	08009b0d 	.word	0x08009b0d
 8009b64:	08009cb7 	.word	0x08009cb7
 8009b68:	08009b0d 	.word	0x08009b0d
 8009b6c:	08009bbd 	.word	0x08009bbd
 8009b70:	08009b0d 	.word	0x08009b0d
 8009b74:	08009b0d 	.word	0x08009b0d
 8009b78:	08009c57 	.word	0x08009c57
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	602a      	str	r2, [r5, #0]
 8009b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e09f      	b.n	8009cd0 <_printf_i+0x1ec>
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	0607      	lsls	r7, r0, #24
 8009b96:	f103 0104 	add.w	r1, r3, #4
 8009b9a:	6029      	str	r1, [r5, #0]
 8009b9c:	d501      	bpl.n	8009ba2 <_printf_i+0xbe>
 8009b9e:	681e      	ldr	r6, [r3, #0]
 8009ba0:	e003      	b.n	8009baa <_printf_i+0xc6>
 8009ba2:	0646      	lsls	r6, r0, #25
 8009ba4:	d5fb      	bpl.n	8009b9e <_printf_i+0xba>
 8009ba6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	da03      	bge.n	8009bb6 <_printf_i+0xd2>
 8009bae:	232d      	movs	r3, #45	; 0x2d
 8009bb0:	4276      	negs	r6, r6
 8009bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb6:	485a      	ldr	r0, [pc, #360]	; (8009d20 <_printf_i+0x23c>)
 8009bb8:	230a      	movs	r3, #10
 8009bba:	e012      	b.n	8009be2 <_printf_i+0xfe>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	6820      	ldr	r0, [r4, #0]
 8009bc0:	1d19      	adds	r1, r3, #4
 8009bc2:	6029      	str	r1, [r5, #0]
 8009bc4:	0605      	lsls	r5, r0, #24
 8009bc6:	d501      	bpl.n	8009bcc <_printf_i+0xe8>
 8009bc8:	681e      	ldr	r6, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <_printf_i+0xee>
 8009bcc:	0641      	lsls	r1, r0, #25
 8009bce:	d5fb      	bpl.n	8009bc8 <_printf_i+0xe4>
 8009bd0:	881e      	ldrh	r6, [r3, #0]
 8009bd2:	4853      	ldr	r0, [pc, #332]	; (8009d20 <_printf_i+0x23c>)
 8009bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bd6:	bf0c      	ite	eq
 8009bd8:	2308      	moveq	r3, #8
 8009bda:	230a      	movne	r3, #10
 8009bdc:	2100      	movs	r1, #0
 8009bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be2:	6865      	ldr	r5, [r4, #4]
 8009be4:	60a5      	str	r5, [r4, #8]
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	bfa2      	ittt	ge
 8009bea:	6821      	ldrge	r1, [r4, #0]
 8009bec:	f021 0104 	bicge.w	r1, r1, #4
 8009bf0:	6021      	strge	r1, [r4, #0]
 8009bf2:	b90e      	cbnz	r6, 8009bf8 <_printf_i+0x114>
 8009bf4:	2d00      	cmp	r5, #0
 8009bf6:	d04b      	beq.n	8009c90 <_printf_i+0x1ac>
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8009c02:	5dc7      	ldrb	r7, [r0, r7]
 8009c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c08:	4637      	mov	r7, r6
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	460e      	mov	r6, r1
 8009c0e:	d9f4      	bls.n	8009bfa <_printf_i+0x116>
 8009c10:	2b08      	cmp	r3, #8
 8009c12:	d10b      	bne.n	8009c2c <_printf_i+0x148>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	07de      	lsls	r6, r3, #31
 8009c18:	d508      	bpl.n	8009c2c <_printf_i+0x148>
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	6861      	ldr	r1, [r4, #4]
 8009c1e:	4299      	cmp	r1, r3
 8009c20:	bfde      	ittt	le
 8009c22:	2330      	movle	r3, #48	; 0x30
 8009c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c2c:	1b52      	subs	r2, r2, r5
 8009c2e:	6122      	str	r2, [r4, #16]
 8009c30:	f8cd a000 	str.w	sl, [sp]
 8009c34:	464b      	mov	r3, r9
 8009c36:	aa03      	add	r2, sp, #12
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f7ff fee4 	bl	8009a08 <_printf_common>
 8009c40:	3001      	adds	r0, #1
 8009c42:	d14a      	bne.n	8009cda <_printf_i+0x1f6>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	b004      	add	sp, #16
 8009c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	f043 0320 	orr.w	r3, r3, #32
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	4833      	ldr	r0, [pc, #204]	; (8009d24 <_printf_i+0x240>)
 8009c58:	2778      	movs	r7, #120	; 0x78
 8009c5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	6829      	ldr	r1, [r5, #0]
 8009c62:	061f      	lsls	r7, r3, #24
 8009c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c68:	d402      	bmi.n	8009c70 <_printf_i+0x18c>
 8009c6a:	065f      	lsls	r7, r3, #25
 8009c6c:	bf48      	it	mi
 8009c6e:	b2b6      	uxthmi	r6, r6
 8009c70:	07df      	lsls	r7, r3, #31
 8009c72:	bf48      	it	mi
 8009c74:	f043 0320 	orrmi.w	r3, r3, #32
 8009c78:	6029      	str	r1, [r5, #0]
 8009c7a:	bf48      	it	mi
 8009c7c:	6023      	strmi	r3, [r4, #0]
 8009c7e:	b91e      	cbnz	r6, 8009c88 <_printf_i+0x1a4>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	f023 0320 	bic.w	r3, r3, #32
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	2310      	movs	r3, #16
 8009c8a:	e7a7      	b.n	8009bdc <_printf_i+0xf8>
 8009c8c:	4824      	ldr	r0, [pc, #144]	; (8009d20 <_printf_i+0x23c>)
 8009c8e:	e7e4      	b.n	8009c5a <_printf_i+0x176>
 8009c90:	4615      	mov	r5, r2
 8009c92:	e7bd      	b.n	8009c10 <_printf_i+0x12c>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	6826      	ldr	r6, [r4, #0]
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	1d18      	adds	r0, r3, #4
 8009c9c:	6028      	str	r0, [r5, #0]
 8009c9e:	0635      	lsls	r5, r6, #24
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	d501      	bpl.n	8009ca8 <_printf_i+0x1c4>
 8009ca4:	6019      	str	r1, [r3, #0]
 8009ca6:	e002      	b.n	8009cae <_printf_i+0x1ca>
 8009ca8:	0670      	lsls	r0, r6, #25
 8009caa:	d5fb      	bpl.n	8009ca4 <_printf_i+0x1c0>
 8009cac:	8019      	strh	r1, [r3, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	e7bc      	b.n	8009c30 <_printf_i+0x14c>
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	1d1a      	adds	r2, r3, #4
 8009cba:	602a      	str	r2, [r5, #0]
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	6862      	ldr	r2, [r4, #4]
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7f6 fae4 	bl	8000290 <memchr>
 8009cc8:	b108      	cbz	r0, 8009cce <_printf_i+0x1ea>
 8009cca:	1b40      	subs	r0, r0, r5
 8009ccc:	6060      	str	r0, [r4, #4]
 8009cce:	6863      	ldr	r3, [r4, #4]
 8009cd0:	6123      	str	r3, [r4, #16]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd8:	e7aa      	b.n	8009c30 <_printf_i+0x14c>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	47d0      	blx	sl
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d0ad      	beq.n	8009c44 <_printf_i+0x160>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	079b      	lsls	r3, r3, #30
 8009cec:	d413      	bmi.n	8009d16 <_printf_i+0x232>
 8009cee:	68e0      	ldr	r0, [r4, #12]
 8009cf0:	9b03      	ldr	r3, [sp, #12]
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	bfb8      	it	lt
 8009cf6:	4618      	movlt	r0, r3
 8009cf8:	e7a6      	b.n	8009c48 <_printf_i+0x164>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4649      	mov	r1, r9
 8009d00:	4640      	mov	r0, r8
 8009d02:	47d0      	blx	sl
 8009d04:	3001      	adds	r0, #1
 8009d06:	d09d      	beq.n	8009c44 <_printf_i+0x160>
 8009d08:	3501      	adds	r5, #1
 8009d0a:	68e3      	ldr	r3, [r4, #12]
 8009d0c:	9903      	ldr	r1, [sp, #12]
 8009d0e:	1a5b      	subs	r3, r3, r1
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	dcf2      	bgt.n	8009cfa <_printf_i+0x216>
 8009d14:	e7eb      	b.n	8009cee <_printf_i+0x20a>
 8009d16:	2500      	movs	r5, #0
 8009d18:	f104 0619 	add.w	r6, r4, #25
 8009d1c:	e7f5      	b.n	8009d0a <_printf_i+0x226>
 8009d1e:	bf00      	nop
 8009d20:	08009ffd 	.word	0x08009ffd
 8009d24:	0800a00e 	.word	0x0800a00e

08009d28 <memmove>:
 8009d28:	4288      	cmp	r0, r1
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	eb01 0402 	add.w	r4, r1, r2
 8009d30:	d902      	bls.n	8009d38 <memmove+0x10>
 8009d32:	4284      	cmp	r4, r0
 8009d34:	4623      	mov	r3, r4
 8009d36:	d807      	bhi.n	8009d48 <memmove+0x20>
 8009d38:	1e43      	subs	r3, r0, #1
 8009d3a:	42a1      	cmp	r1, r4
 8009d3c:	d008      	beq.n	8009d50 <memmove+0x28>
 8009d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d46:	e7f8      	b.n	8009d3a <memmove+0x12>
 8009d48:	4402      	add	r2, r0
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	428a      	cmp	r2, r1
 8009d4e:	d100      	bne.n	8009d52 <memmove+0x2a>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d5a:	e7f7      	b.n	8009d4c <memmove+0x24>

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f7 fa9c 	bl	80012a4 <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20014800 	.word	0x20014800

08009d7c <_realloc_r>:
 8009d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d80:	4680      	mov	r8, r0
 8009d82:	4614      	mov	r4, r2
 8009d84:	460e      	mov	r6, r1
 8009d86:	b921      	cbnz	r1, 8009d92 <_realloc_r+0x16>
 8009d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	f7ff bc57 	b.w	8009640 <_malloc_r>
 8009d92:	b92a      	cbnz	r2, 8009da0 <_realloc_r+0x24>
 8009d94:	f7ff fbe8 	bl	8009568 <_free_r>
 8009d98:	4625      	mov	r5, r4
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da0:	f000 f81b 	bl	8009dda <_malloc_usable_size_r>
 8009da4:	4284      	cmp	r4, r0
 8009da6:	4607      	mov	r7, r0
 8009da8:	d802      	bhi.n	8009db0 <_realloc_r+0x34>
 8009daa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dae:	d812      	bhi.n	8009dd6 <_realloc_r+0x5a>
 8009db0:	4621      	mov	r1, r4
 8009db2:	4640      	mov	r0, r8
 8009db4:	f7ff fc44 	bl	8009640 <_malloc_r>
 8009db8:	4605      	mov	r5, r0
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d0ed      	beq.n	8009d9a <_realloc_r+0x1e>
 8009dbe:	42bc      	cmp	r4, r7
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	bf28      	it	cs
 8009dc6:	463a      	movcs	r2, r7
 8009dc8:	f7ff fbc0 	bl	800954c <memcpy>
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7ff fbca 	bl	8009568 <_free_r>
 8009dd4:	e7e1      	b.n	8009d9a <_realloc_r+0x1e>
 8009dd6:	4635      	mov	r5, r6
 8009dd8:	e7df      	b.n	8009d9a <_realloc_r+0x1e>

08009dda <_malloc_usable_size_r>:
 8009dda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dde:	1f18      	subs	r0, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfbc      	itt	lt
 8009de4:	580b      	ldrlt	r3, [r1, r0]
 8009de6:	18c0      	addlt	r0, r0, r3
 8009de8:	4770      	bx	lr
	...

08009dec <_init>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	bf00      	nop
 8009df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009df2:	bc08      	pop	{r3}
 8009df4:	469e      	mov	lr, r3
 8009df6:	4770      	bx	lr

08009df8 <_fini>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	bf00      	nop
 8009dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfe:	bc08      	pop	{r3}
 8009e00:	469e      	mov	lr, r3
 8009e02:	4770      	bx	lr
