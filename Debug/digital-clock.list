
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b48  08003b48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b50  08003b50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  2000000c  08003b64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08003b64  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012799  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a3f  00000000  00000000  00032818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d80  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cfb  00000000  00000000  00037158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a38  00000000  00000000  00039e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dd50  00000000  00000000  0004c88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000498c  00000000  00000000  000ea5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  000eef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003af4 	.word	0x08003af4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08003af4 	.word	0x08003af4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20000188 	.word	0x20000188

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fafe 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f808 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f8ea 	bl	8000754 <MX_GPIO_Init>
  MX_RTC_Init();
 8000580:	f000 f872 	bl	8000668 <MX_RTC_Init>
  MX_TIM1_Init();
 8000584:	f000 f896 	bl	80006b4 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x18>
	...

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fa70 	bl	8003a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <SystemClock_Config+0xd4>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a29      	ldr	r2, [pc, #164]	; (8000660 <SystemClock_Config+0xd4>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <SystemClock_Config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a22      	ldr	r2, [pc, #136]	; (8000664 <SystemClock_Config+0xd8>)
 80005da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80005ec:	230a      	movs	r3, #10
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fd6c 	bl	80010f8 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000626:	f000 f951 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ffce 	bl	80015e8 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000652:	f000 f93b 	bl	80008cc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_RTC_Init+0x44>)
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <MX_RTC_Init+0x48>)
 8000670:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_RTC_Init+0x44>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_RTC_Init+0x44>)
 800067a:	227f      	movs	r2, #127	; 0x7f
 800067c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_RTC_Init+0x44>)
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_RTC_Init+0x44>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_RTC_Init+0x44>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_RTC_Init+0x44>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_RTC_Init+0x44>)
 8000698:	f001 fad2 	bl	8001c40 <HAL_RTC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006a2:	f000 f913 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40002800 	.word	0x40002800

080006b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_TIM1_Init+0x98>)
 80006d2:	4a1f      	ldr	r2, [pc, #124]	; (8000750 <MX_TIM1_Init+0x9c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_TIM1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_TIM1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_TIM1_Init+0x98>)
 80006e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_TIM1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_TIM1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_TIM1_Init+0x98>)
 80006fe:	f001 fb99 	bl	8001e34 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000708:	f000 f8e0 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_TIM1_Init+0x98>)
 800071a:	f001 fd45 	bl	80021a8 <HAL_TIM_ConfigClockSource>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000724:	f000 f8d2 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_TIM1_Init+0x98>)
 8000736:	f001 ff41 	bl	80025bc <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 f8c4 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000048 	.word	0x20000048
 8000750:	40010000 	.word	0x40010000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b4a      	ldr	r3, [pc, #296]	; (8000898 <MX_GPIO_Init+0x144>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a49      	ldr	r2, [pc, #292]	; (8000898 <MX_GPIO_Init+0x144>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b47      	ldr	r3, [pc, #284]	; (8000898 <MX_GPIO_Init+0x144>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b43      	ldr	r3, [pc, #268]	; (8000898 <MX_GPIO_Init+0x144>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a42      	ldr	r2, [pc, #264]	; (8000898 <MX_GPIO_Init+0x144>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b40      	ldr	r3, [pc, #256]	; (8000898 <MX_GPIO_Init+0x144>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <MX_GPIO_Init+0x144>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a3b      	ldr	r2, [pc, #236]	; (8000898 <MX_GPIO_Init+0x144>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <MX_GPIO_Init+0x144>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_GPIO_Init+0x144>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a34      	ldr	r2, [pc, #208]	; (8000898 <MX_GPIO_Init+0x144>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_GPIO_Init+0x144>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f240 4103 	movw	r1, #1027	; 0x403
 80007e0:	482e      	ldr	r0, [pc, #184]	; (800089c <MX_GPIO_Init+0x148>)
 80007e2:	f000 fc6f 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|LD2_Pin|E_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f248 0130 	movw	r1, #32816	; 0x8030
 80007ec:	482c      	ldr	r0, [pc, #176]	; (80008a0 <MX_GPIO_Init+0x14c>)
 80007ee:	f000 fc69 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2181      	movs	r1, #129	; 0x81
 80007f6:	482b      	ldr	r0, [pc, #172]	; (80008a4 <MX_GPIO_Init+0x150>)
 80007f8:	f000 fc64 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4822      	ldr	r0, [pc, #136]	; (800089c <MX_GPIO_Init+0x148>)
 8000814:	f000 fad2 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|GPIO_PIN_10;
 8000818:	f240 4303 	movw	r3, #1027	; 0x403
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	481a      	ldr	r0, [pc, #104]	; (800089c <MX_GPIO_Init+0x148>)
 8000832:	f000 fac3 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000836:	230c      	movs	r3, #12
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000846:	2307      	movs	r3, #7
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000852:	f000 fab3 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin LD2_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|LD2_Pin|E_Pin;
 8000856:	f248 0330 	movw	r3, #32816	; 0x8030
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_GPIO_Init+0x14c>)
 8000870:	f000 faa4 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000874:	2381      	movs	r3, #129	; 0x81
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x150>)
 800088c:	f000 fa96 	bl	8000dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40020400 	.word	0x40020400

080008a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ba:	f000 f97d 	bl	8000bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40000c00 	.word	0x40000c00

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_RTC_MspInit+0x50>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d111      	bne.n	800096e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800094a:	2302      	movs	r3, #2
 800094c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f883 	bl	8001a64 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000964:	f7ff ffb2 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <HAL_RTC_MspInit+0x54>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40002800 	.word	0x40002800
 800097c:	42470e3c 	.word	0x42470e3c

08000980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_TIM_Base_MspInit+0x3c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d10d      	bne.n	80009ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_TIM_Base_MspInit+0x40>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40010000 	.word	0x40010000
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 0308 	and.w	r3, r3, #8
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f800 	bl	8001a00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0a:	f000 ffe5 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a10:	e004      	b.n	8000a1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a12:	f000 ffe1 	bl	80019d8 <HAL_RCC_GetPCLK1Freq>
 8000a16:	4603      	mov	r3, r0
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <HAL_InitTick+0xe8>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	0c9b      	lsrs	r3, r3, #18
 8000a26:	3b01      	subs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_InitTick+0xf0>)
 8000a2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a36:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a52:	f001 f9ef 	bl	8001e34 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11b      	bne.n	8000a9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a66:	f001 fa35 	bl	8001ed4 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d111      	bne.n	8000a9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000a78:	2032      	movs	r0, #50	; 0x32
 8000a7a:	f000 f991 	bl	8000da0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d808      	bhi.n	8000a96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2032      	movs	r0, #50	; 0x32
 8000a8a:	f000 f96d 	bl	8000d68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_InitTick+0xf4>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e002      	b.n	8000a9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	40000c00 	.word	0x40000c00
 8000ab8:	20000004 	.word	0x20000004

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM5_IRQHandler+0x10>)
 8000aee:	f001 fa53 	bl	8001f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000090 	.word	0x20000090

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b26:	490e      	ldr	r1, [pc, #56]	; (8000b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b3c:	4c0b      	ldr	r4, [pc, #44]	; (8000b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4a:	f7ff ffd7 	bl	8000afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f002 ff9f 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fd0d 	bl	8000570 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b64:	08003b58 	.word	0x08003b58
  ldr r2, =_sbss
 8000b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b6c:	20000754 	.word	0x20000754

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f8d8 	bl	8000d52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff0e 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fe96 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	200000d8 	.word	0x200000d8

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200000d8 	.word	0x200000d8

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
         );
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ff4c 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7a:	f7ff ff61 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff ffb1 	bl	8000cec <NVIC_EncodePriority>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff80 	bl	8000c98 <__NVIC_SetPriority>
}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff54 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e159      	b.n	800108c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8148 	bne.w	8001086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d005      	beq.n	8000e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d130      	bne.n	8000e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d017      	beq.n	8000eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80a2 	beq.w	8001086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a56      	ldr	r2, [pc, #344]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <HAL_GPIO_Init+0x2e8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x2f0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x202>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x2f4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x1fe>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_GPIO_Init+0x2f8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fa>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a46      	ldr	r2, [pc, #280]	; (80010b8 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x1f6>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x1f2>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x204>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd0:	4935      	ldr	r1, [pc, #212]	; (80010a8 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001002:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001008:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800102c:	4a24      	ldr	r2, [pc, #144]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001056:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001080:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f67f aea2 	bls.w	8000dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40013800 	.word	0x40013800
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e267      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d075      	beq.n	8001202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001116:	4b88      	ldr	r3, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b04      	cmp	r3, #4
 8001120:	d00c      	beq.n	800113c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112a:	2b08      	cmp	r3, #8
 800112c:	d112      	bne.n	8001154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113a:	d10b      	bne.n	8001154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d05b      	beq.n	8001200 <HAL_RCC_OscConfig+0x108>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d157      	bne.n	8001200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e242      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115c:	d106      	bne.n	800116c <HAL_RCC_OscConfig+0x74>
 800115e:	4b76      	ldr	r3, [pc, #472]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a75      	ldr	r2, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e01d      	b.n	80011a8 <HAL_RCC_OscConfig+0xb0>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0x98>
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6f      	ldr	r2, [pc, #444]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b6d      	ldr	r3, [pc, #436]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6c      	ldr	r2, [pc, #432]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0xb0>
 8001190:	4b69      	ldr	r3, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a68      	ldr	r2, [pc, #416]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b66      	ldr	r3, [pc, #408]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a65      	ldr	r2, [pc, #404]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fd16 	bl	8000be0 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fd12 	bl	8000be0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e207      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0xc0>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fd02 	bl	8000be0 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fcfe 	bl	8000be0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e1f3      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0xe8>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d063      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120e:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00b      	beq.n	8001232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001222:	2b08      	cmp	r3, #8
 8001224:	d11c      	bne.n	8001260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b44      	ldr	r3, [pc, #272]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d116      	bne.n	8001260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	4b41      	ldr	r3, [pc, #260]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <HAL_RCC_OscConfig+0x152>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d001      	beq.n	800124a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e1c7      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4937      	ldr	r1, [pc, #220]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800125a:	4313      	orrs	r3, r2
 800125c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	e03a      	b.n	80012d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <HAL_RCC_OscConfig+0x244>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff fcb7 	bl	8000be0 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fcb3 	bl	8000be0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e1a8      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4925      	ldr	r1, [pc, #148]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
 80012a8:	e015      	b.n	80012d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_RCC_OscConfig+0x244>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fc96 	bl	8000be0 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff fc92 	bl	8000be0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e187      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d036      	beq.n	8001350 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d016      	beq.n	8001318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_RCC_OscConfig+0x248>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f0:	f7ff fc76 	bl	8000be0 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fc72 	bl	8000be0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e167      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x240>)
 800130c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x200>
 8001316:	e01b      	b.n	8001350 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x248>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fc5f 	bl	8000be0 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	e00e      	b.n	8001344 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff fc5b 	bl	8000be0 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d907      	bls.n	8001344 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e150      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
 8001338:	40023800 	.word	0x40023800
 800133c:	42470000 	.word	0x42470000
 8001340:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ea      	bne.n	8001326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8097 	beq.w	800148c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10f      	bne.n	800138e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b7d      	ldr	r3, [pc, #500]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a7c      	ldr	r2, [pc, #496]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b7a      	ldr	r3, [pc, #488]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138a:	2301      	movs	r3, #1
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	4b77      	ldr	r3, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x474>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4b74      	ldr	r3, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x474>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a73      	ldr	r2, [pc, #460]	; (800156c <HAL_RCC_OscConfig+0x474>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fc1b 	bl	8000be0 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff fc17 	bl	8000be0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e10c      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c0:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x474>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2ea>
 80013d4:	4b64      	ldr	r3, [pc, #400]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a63      	ldr	r2, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
 80013e0:	e01c      	b.n	800141c <HAL_RCC_OscConfig+0x324>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x30c>
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0x324>
 8001404:	4b58      	ldr	r3, [pc, #352]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a57      	ldr	r2, [pc, #348]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d015      	beq.n	8001450 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fbdc 	bl	8000be0 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fbd8 	bl	8000be0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0cb      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	4b49      	ldr	r3, [pc, #292]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0ee      	beq.n	800142c <HAL_RCC_OscConfig+0x334>
 800144e:	e014      	b.n	800147a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fbc6 	bl	8000be0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001456:	e00a      	b.n	800146e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fbc2 	bl	8000be0 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	; 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0b5      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1ee      	bne.n	8001458 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a38      	ldr	r2, [pc, #224]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a1 	beq.w	80015d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d05c      	beq.n	800155c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d141      	bne.n	800152e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_RCC_OscConfig+0x478>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb96 	bl	8000be0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fb92 	bl	8000be0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e087      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	3b01      	subs	r3, #1
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	491b      	ldr	r1, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x478>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fb6b 	bl	8000be0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fb67 	bl	8000be0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e05c      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x416>
 800152c:	e054      	b.n	80015d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_RCC_OscConfig+0x478>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fb54 	bl	8000be0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fb50 	bl	8000be0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e045      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_OscConfig+0x470>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x444>
 800155a:	e03d      	b.n	80015d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d107      	bne.n	8001574 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e038      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000
 8001570:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x4ec>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d028      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d121      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d11a      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d111      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	3b01      	subs	r3, #1
 80015be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0cc      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d90c      	bls.n	8001624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b8      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001646:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800165e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	494d      	ldr	r1, [pc, #308]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	4313      	orrs	r3, r2
 8001670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d044      	beq.n	8001708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d119      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e06f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e067      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f023 0203 	bic.w	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4934      	ldr	r1, [pc, #208]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d8:	f7ff fa82 	bl	8000be0 <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff fa7e 	bl	8000be0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e04f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 020c 	and.w	r2, r3, #12
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	429a      	cmp	r2, r3
 8001706:	d1eb      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d20c      	bcs.n	8001730 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e032      	b.n	8001796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4916      	ldr	r1, [pc, #88]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	490e      	ldr	r1, [pc, #56]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176e:	f000 f821 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001772:	4602      	mov	r2, r0
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	5ccb      	ldrb	r3, [r1, r3]
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f918 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00
 80017a4:	40023800 	.word	0x40023800
 80017a8:	08003b24 	.word	0x08003b24
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b8:	b094      	sub	sp, #80	; 0x50
 80017ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
 80017c0:	2300      	movs	r3, #0
 80017c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c4:	2300      	movs	r3, #0
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017cc:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d00d      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x40>
 80017d8:	2b08      	cmp	r3, #8
 80017da:	f200 80e1 	bhi.w	80019a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x34>
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_GetSysClockFreq+0x3a>
 80017e6:	e0db      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017ec:	e0db      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_GetSysClockFreq+0x208>)
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f2:	e0d8      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f4:	4b6f      	ldr	r3, [pc, #444]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d063      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	2200      	movs	r2, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
 8001814:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
 8001822:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001826:	4622      	mov	r2, r4
 8001828:	462b      	mov	r3, r5
 800182a:	f04f 0000 	mov.w	r0, #0
 800182e:	f04f 0100 	mov.w	r1, #0
 8001832:	0159      	lsls	r1, r3, #5
 8001834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001838:	0150      	lsls	r0, r2, #5
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4621      	mov	r1, r4
 8001840:	1a51      	subs	r1, r2, r1
 8001842:	6139      	str	r1, [r7, #16]
 8001844:	4629      	mov	r1, r5
 8001846:	eb63 0301 	sbc.w	r3, r3, r1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001858:	4659      	mov	r1, fp
 800185a:	018b      	lsls	r3, r1, #6
 800185c:	4651      	mov	r1, sl
 800185e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001862:	4651      	mov	r1, sl
 8001864:	018a      	lsls	r2, r1, #6
 8001866:	4651      	mov	r1, sl
 8001868:	ebb2 0801 	subs.w	r8, r2, r1
 800186c:	4659      	mov	r1, fp
 800186e:	eb63 0901 	sbc.w	r9, r3, r1
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800187e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001886:	4690      	mov	r8, r2
 8001888:	4699      	mov	r9, r3
 800188a:	4623      	mov	r3, r4
 800188c:	eb18 0303 	adds.w	r3, r8, r3
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	462b      	mov	r3, r5
 8001894:	eb49 0303 	adc.w	r3, r9, r3
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018a6:	4629      	mov	r1, r5
 80018a8:	024b      	lsls	r3, r1, #9
 80018aa:	4621      	mov	r1, r4
 80018ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018b0:	4621      	mov	r1, r4
 80018b2:	024a      	lsls	r2, r1, #9
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ba:	2200      	movs	r2, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018c4:	f7fe fcd6 	bl	8000274 <__aeabi_uldivmod>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4613      	mov	r3, r2
 80018ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018d0:	e058      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d2:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	2200      	movs	r2, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	4611      	mov	r1, r2
 80018de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018e2:	623b      	str	r3, [r7, #32]
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018ec:	4642      	mov	r2, r8
 80018ee:	464b      	mov	r3, r9
 80018f0:	f04f 0000 	mov.w	r0, #0
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	0159      	lsls	r1, r3, #5
 80018fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fe:	0150      	lsls	r0, r2, #5
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4641      	mov	r1, r8
 8001906:	ebb2 0a01 	subs.w	sl, r2, r1
 800190a:	4649      	mov	r1, r9
 800190c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800191c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001920:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001924:	ebb2 040a 	subs.w	r4, r2, sl
 8001928:	eb63 050b 	sbc.w	r5, r3, fp
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	00eb      	lsls	r3, r5, #3
 8001936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193a:	00e2      	lsls	r2, r4, #3
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	4643      	mov	r3, r8
 8001942:	18e3      	adds	r3, r4, r3
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	464b      	mov	r3, r9
 8001948:	eb45 0303 	adc.w	r3, r5, r3
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195a:	4629      	mov	r1, r5
 800195c:	028b      	lsls	r3, r1, #10
 800195e:	4621      	mov	r1, r4
 8001960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001964:	4621      	mov	r1, r4
 8001966:	028a      	lsls	r2, r1, #10
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196e:	2200      	movs	r2, #0
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	61fa      	str	r2, [r7, #28]
 8001974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001978:	f7fe fc7c 	bl	8000274 <__aeabi_uldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4613      	mov	r3, r2
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199e:	e002      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3750      	adds	r7, #80	; 0x50
 80019ac:	46bd      	mov	sp, r7
 80019ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	007a1200 	.word	0x007a1200

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000

080019d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0a9b      	lsrs	r3, r3, #10
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	08003b34 	.word	0x08003b34

08001a00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_RCC_GetClockConfig+0x5c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_GetClockConfig+0x5c>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <HAL_RCC_GetClockConfig+0x60>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0207 	and.w	r2, r3, #7
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d035      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a8c:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a92:	f7ff f8a5 	bl	8000be0 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a9a:	f7ff f8a1 	bl	8000be0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0ba      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aac:	4b60      	ldr	r3, [pc, #384]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	019a      	lsls	r2, r3, #6
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	071b      	lsls	r3, r3, #28
 8001ac4:	495a      	ldr	r1, [pc, #360]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001acc:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad2:	f7ff f885 	bl	8000be0 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ada:	f7ff f881 	bl	8000be0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e09a      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8083 	beq.w	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a43      	ldr	r2, [pc, #268]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b2e:	f7ff f857 	bl	8000be0 <HAL_GetTick>
 8001b32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff f853 	bl	8000be0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e06c      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d02f      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d028      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d114      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f821 	bl	8000be0 <HAL_GetTick>
 8001b9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f81d 	bl	8000be0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e034      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bd0:	d10d      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be6:	4912      	ldr	r1, [pc, #72]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
 8001bec:	e005      	b.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bf4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bf8:	6093      	str	r3, [r2, #8]
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7c1a      	ldrb	r2, [r3, #16]
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c1e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	42470068 	.word	0x42470068
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42470e40 	.word	0x42470e40
 8001c3c:	424711e0 	.word	0x424711e0

08001c40 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e066      	b.n	8001d24 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7f5b      	ldrb	r3, [r3, #29]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fe5e 	bl	8000928 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	22ca      	movs	r2, #202	; 0xca
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2253      	movs	r2, #83	; 0x53
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f87a 	bl	8001d7c <RTC_EnterInitMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12c      	bne.n	8001cec <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ca4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68d2      	ldr	r2, [r2, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6919      	ldr	r1, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f881 	bl	8001dea <RTC_ExitInitMode>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	22ff      	movs	r2, #255	; 0xff
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d46:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7fe ff4a 	bl	8000be0 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d4e:	e009      	b.n	8001d64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d50:	f7fe ff46 	bl	8000be0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d5e:	d901      	bls.n	8001d64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e007      	b.n	8001d74 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d122      	bne.n	8001de0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001da8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001daa:	f7fe ff19 	bl	8000be0 <HAL_GetTick>
 8001dae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001db0:	e00c      	b.n	8001dcc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001db2:	f7fe ff15 	bl	8000be0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dc0:	d904      	bls.n	8001dcc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <RTC_EnterInitMode+0x64>
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d1e8      	bne.n	8001db2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff89 	bl	8001d2c <HAL_RTC_WaitForSynchro>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e041      	b.n	8001eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fd90 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4610      	mov	r0, r2
 8001e74:	f000 fa88 	bl	8002388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e044      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_TIM_Base_Start_IT+0xb0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d018      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x6c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d013      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x6c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	; (8001f88 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00e      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x6c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_TIM_Base_Start_IT+0xb8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x6c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x6c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d010      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f62:	e007      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40014000 	.word	0x40014000

08001f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d122      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11b      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0202 	mvn.w	r2, #2
 8001fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9b5 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9a7 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f9b8 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0204 	mvn.w	r2, #4
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f98b 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f97d 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f98e 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d122      	bne.n	800209c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b08      	cmp	r3, #8
 8002062:	d11b      	bne.n	800209c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0208 	mvn.w	r2, #8
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f961 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f953 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f964 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0210 	mvn.w	r2, #16
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2208      	movs	r2, #8
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f937 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f929 	bl	8002336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f93a 	bl	800235e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0201 	mvn.w	r2, #1
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fbc6 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b80      	cmp	r3, #128	; 0x80
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b80      	cmp	r3, #128	; 0x80
 8002136:	d107      	bne.n	8002148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fab2 	bl	80026ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d10e      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b40      	cmp	r3, #64	; 0x40
 8002162:	d107      	bne.n	8002174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8ff 	bl	8002372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b20      	cmp	r3, #32
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b20      	cmp	r3, #32
 800218e:	d107      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0220 	mvn.w	r2, #32
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 fa7c 	bl	8002698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x1c>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0b4      	b.n	800232e <HAL_TIM_ConfigClockSource+0x186>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fc:	d03e      	beq.n	800227c <HAL_TIM_ConfigClockSource+0xd4>
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	f200 8087 	bhi.w	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220a:	f000 8086 	beq.w	800231a <HAL_TIM_ConfigClockSource+0x172>
 800220e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002212:	d87f      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b70      	cmp	r3, #112	; 0x70
 8002216:	d01a      	beq.n	800224e <HAL_TIM_ConfigClockSource+0xa6>
 8002218:	2b70      	cmp	r3, #112	; 0x70
 800221a:	d87b      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b60      	cmp	r3, #96	; 0x60
 800221e:	d050      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002220:	2b60      	cmp	r3, #96	; 0x60
 8002222:	d877      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b50      	cmp	r3, #80	; 0x50
 8002226:	d03c      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002228:	2b50      	cmp	r3, #80	; 0x50
 800222a:	d873      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d058      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002230:	2b40      	cmp	r3, #64	; 0x40
 8002232:	d86f      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b30      	cmp	r3, #48	; 0x30
 8002236:	d064      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d86b      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b20      	cmp	r3, #32
 800223e:	d060      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002240:	2b20      	cmp	r3, #32
 8002242:	d867      	bhi.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d05c      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d05a      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x15a>
 800224c:	e062      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f000 f98d 	bl	800257c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	609a      	str	r2, [r3, #8]
      break;
 800227a:	e04f      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f000 f976 	bl	800257c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229e:	609a      	str	r2, [r3, #8]
      break;
 80022a0:	e03c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 f8ea 	bl	8002488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2150      	movs	r1, #80	; 0x50
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f943 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e02c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 f909 	bl	80024e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2160      	movs	r1, #96	; 0x60
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f933 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 80022e0:	e01c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f000 f8ca 	bl	8002488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f923 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 8002300:	e00c      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f000 f91a 	bl	8002546 <TIM_ITRx_SetConfig>
      break;
 8002312:	e003      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      break;
 8002318:	e000      	b.n	800231c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800231a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <TIM_Base_SetConfig+0xe4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00f      	beq.n	80023c0 <TIM_Base_SetConfig+0x38>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a6:	d00b      	beq.n	80023c0 <TIM_Base_SetConfig+0x38>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <TIM_Base_SetConfig+0xe8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <TIM_Base_SetConfig+0x38>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a30      	ldr	r2, [pc, #192]	; (8002474 <TIM_Base_SetConfig+0xec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <TIM_Base_SetConfig+0x38>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <TIM_Base_SetConfig+0xf0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0xe4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01b      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d017      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <TIM_Base_SetConfig+0xe8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <TIM_Base_SetConfig+0xec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00f      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a20      	ldr	r2, [pc, #128]	; (8002478 <TIM_Base_SetConfig+0xf0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00b      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1f      	ldr	r2, [pc, #124]	; (800247c <TIM_Base_SetConfig+0xf4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <TIM_Base_SetConfig+0xf8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d003      	beq.n	8002412 <TIM_Base_SetConfig+0x8a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <TIM_Base_SetConfig+0xfc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d108      	bne.n	8002424 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <TIM_Base_SetConfig+0xe4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d103      	bne.n	8002458 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	615a      	str	r2, [r3, #20]
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00
 800247c:	40014000 	.word	0x40014000
 8002480:	40014400 	.word	0x40014400
 8002484:	40014800 	.word	0x40014800

08002488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0201 	bic.w	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f023 030a 	bic.w	r3, r3, #10
 80024c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b087      	sub	sp, #28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f023 0210 	bic.w	r2, r3, #16
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	031b      	lsls	r3, r3, #12
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	621a      	str	r2, [r3, #32]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	f043 0307 	orr.w	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	431a      	orrs	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	609a      	str	r2, [r3, #8]
}
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e050      	b.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d018      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002620:	d013      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00e      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d009      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10c      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40014000 	.word	0x40014000

08002698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <xTaskIncrementTick+0x208>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80f0 	bne.w	80028b4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026d4:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <xTaskIncrementTick+0x20c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026dc:	4a7b      	ldr	r2, [pc, #492]	; (80028cc <xTaskIncrementTick+0x20c>)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d120      	bne.n	800272a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <xTaskIncrementTick+0x210>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xTaskIncrementTick+0x46>
 8002708:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <xTaskIncrementTick+0x210>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <xTaskIncrementTick+0x214>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6f      	ldr	r2, [pc, #444]	; (80028d0 <xTaskIncrementTick+0x210>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <xTaskIncrementTick+0x214>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <xTaskIncrementTick+0x218>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <xTaskIncrementTick+0x218>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	f000 f94f 	bl	80029c8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800272a:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <xTaskIncrementTick+0x21c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	f0c0 80aa 	bcc.w	800288a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <xTaskIncrementTick+0x210>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <xTaskIncrementTick+0x21c>)
 8002742:	f04f 32ff 	mov.w	r2, #4294967295
 8002746:	601a      	str	r2, [r3, #0]
                    break;
 8002748:	e09f      	b.n	800288a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <xTaskIncrementTick+0x210>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	429a      	cmp	r2, r3
 8002760:	d203      	bcs.n	800276a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <xTaskIncrementTick+0x21c>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002768:	e08f      	b.n	800288a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	68d2      	ldr	r2, [r2, #12]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3304      	adds	r3, #4
 800278c:	429a      	cmp	r2, r3
 800278e:	d103      	bne.n	8002798 <xTaskIncrementTick+0xd8>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1e5a      	subs	r2, r3, #1
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01e      	beq.n	80027ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	6a12      	ldr	r2, [r2, #32]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	69d2      	ldr	r2, [r2, #28]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3318      	adds	r3, #24
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d103      	bne.n	80027de <xTaskIncrementTick+0x11e>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f001 f827 	bl	8003844 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	2201      	movs	r2, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <xTaskIncrementTick+0x220>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <xTaskIncrementTick+0x220>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <xTaskIncrementTick+0x224>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	3204      	adds	r2, #4
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1d1a      	adds	r2, r3, #4
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <xTaskIncrementTick+0x224>)
 800284c:	441a      	add	r2, r3
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	615a      	str	r2, [r3, #20]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	4923      	ldr	r1, [pc, #140]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c59      	adds	r1, r3, #1
 8002866:	481f      	ldr	r0, [pc, #124]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4403      	add	r3, r0
 8002872:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <xTaskIncrementTick+0x228>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	429a      	cmp	r2, r3
 8002880:	f67f af59 	bls.w	8002736 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002888:	e755      	b.n	8002736 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <xTaskIncrementTick+0x228>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	4914      	ldr	r1, [pc, #80]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d901      	bls.n	80028a6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <xTaskIncrementTick+0x22c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e004      	b.n	80028be <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <xTaskIncrementTick+0x230>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <xTaskIncrementTick+0x230>)
 80028bc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000017c 	.word	0x2000017c
 80028cc:	20000160 	.word	0x20000160
 80028d0:	20000158 	.word	0x20000158
 80028d4:	2000015c 	.word	0x2000015c
 80028d8:	20000170 	.word	0x20000170
 80028dc:	20000174 	.word	0x20000174
 80028e0:	20000164 	.word	0x20000164
 80028e4:	200000e0 	.word	0x200000e0
 80028e8:	200000dc 	.word	0x200000dc
 80028ec:	2000016c 	.word	0x2000016c
 80028f0:	20000168 	.word	0x20000168

080028f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <vTaskSwitchContext+0xbc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <vTaskSwitchContext+0xc0>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002908:	e04d      	b.n	80029a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <vTaskSwitchContext+0xc0>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <vTaskSwitchContext+0xc4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	f1c3 031f 	rsb	r3, r3, #31
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4925      	ldr	r1, [pc, #148]	; (80029bc <vTaskSwitchContext+0xc8>)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <vTaskSwitchContext+0x5c>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	607b      	str	r3, [r7, #4]
    }
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <vTaskSwitchContext+0x5a>
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <vTaskSwitchContext+0xc8>)
 800295c:	4413      	add	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3308      	adds	r3, #8
 8002972:	429a      	cmp	r2, r3
 8002974:	d104      	bne.n	8002980 <vTaskSwitchContext+0x8c>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <vTaskSwitchContext+0xcc>)
 8002988:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <vTaskSwitchContext+0xcc>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <vTaskSwitchContext+0xd0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d102      	bne.n	800299c <vTaskSwitchContext+0xa8>
 8002996:	f000 fef7 	bl	8003788 <SEGGER_SYSVIEW_OnIdle>
}
 800299a:	e004      	b.n	80029a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <vTaskSwitchContext+0xcc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ff0d 	bl	80037c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000017c 	.word	0x2000017c
 80029b4:	2000016c 	.word	0x2000016c
 80029b8:	20000164 	.word	0x20000164
 80029bc:	200000e0 	.word	0x200000e0
 80029c0:	200000dc 	.word	0x200000dc
 80029c4:	20000178 	.word	0x20000178

080029c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <prvResetNextTaskUnblockTime+0x30>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <prvResetNextTaskUnblockTime+0x34>)
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029de:	e005      	b.n	80029ec <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <prvResetNextTaskUnblockTime+0x30>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <prvResetNextTaskUnblockTime+0x34>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000158 	.word	0x20000158
 80029fc:	20000174 	.word	0x20000174

08002a00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <pxCurrentTCBConst2>)
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	6808      	ldr	r0, [r1, #0]
 8002a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0a:	f380 8809 	msr	PSP, r0
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f380 8811 	msr	BASEPRI, r0
 8002a1a:	4770      	bx	lr
 8002a1c:	f3af 8000 	nop.w

08002a20 <pxCurrentTCBConst2>:
 8002a20:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
	...

08002a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002a30:	f3ef 8009 	mrs	r0, PSP
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <pxCurrentTCBConst>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f01e 0f10 	tst.w	lr, #16
 8002a40:	bf08      	it	eq
 8002a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a4a:	6010      	str	r0, [r2, #0]
 8002a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a54:	f380 8811 	msr	BASEPRI, r0
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f7ff ff48 	bl	80028f4 <vTaskSwitchContext>
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f380 8811 	msr	BASEPRI, r0
 8002a6c:	bc09      	pop	{r0, r3}
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	6808      	ldr	r0, [r1, #0]
 8002a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a76:	f01e 0f10 	tst.w	lr, #16
 8002a7a:	bf08      	it	eq
 8002a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a80:	f380 8809 	msr	PSP, r0
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w

08002a90 <pxCurrentTCBConst>:
 8002a90:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop

08002a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
    }
 8002ab0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002ab2:	f000 fdef 	bl	8003694 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ab6:	f7ff fe03 	bl	80026c0 <xTaskIncrementTick>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d006      	beq.n	8002ace <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002ac0:	f000 fe46 	bl	8003750 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <SysTick_Handler+0x50>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e001      	b.n	8002ad2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002ace:	f000 fe23 	bl	8003718 <SEGGER_SYSVIEW_RecordExitISR>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002adc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <USART2_IRQHandler+0x80>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d011      	beq.n	8002b26 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <USART2_IRQHandler+0x84>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 030b 	and.w	r3, r3, #11
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <USART2_IRQHandler+0x88>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <USART2_IRQHandler+0x88>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	79fa      	ldrb	r2, [r7, #7]
 8002b22:	4610      	mov	r0, r2
 8002b24:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01a      	beq.n	8002b66 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <USART2_IRQHandler+0x8c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <USART2_IRQHandler+0x8c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1dfa      	adds	r2, r7, #7
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4798      	blx	r3
 8002b42:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <USART2_IRQHandler+0x90>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <USART2_IRQHandler+0x90>)
 8002b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e006      	b.n	8002b66 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <USART2_IRQHandler+0x80>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <USART2_IRQHandler+0x84>)
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e000      	b.n	8002b66 <USART2_IRQHandler+0x7a>
      return;
 8002b64:	bf00      	nop
    }
  }
}
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40011000 	.word	0x40011000
 8002b70:	40011004 	.word	0x40011004
 8002b74:	20000180 	.word	0x20000180
 8002b78:	20000184 	.word	0x20000184
 8002b7c:	4001100c 	.word	0x4001100c

08002b80 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	4001100c 	.word	0x4001100c

08002ba0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <_DoInit+0x98>)
 8002ba8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2203      	movs	r2, #3
 8002bae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <_DoInit+0x9c>)
 8002bba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <_DoInit+0xa0>)
 8002bc0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <_DoInit+0x9c>)
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <_DoInit+0xa4>)
 8002be6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2210      	movs	r2, #16
 8002bec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3307      	adds	r3, #7
 8002c04:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <_DoInit+0xa8>)
 8002c06:	6810      	ldr	r0, [r2, #0]
 8002c08:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c0a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <_DoInit+0xac>)
 8002c12:	6810      	ldr	r0, [r2, #0]
 8002c14:	6018      	str	r0, [r3, #0]
 8002c16:	8891      	ldrh	r1, [r2, #4]
 8002c18:	7992      	ldrb	r2, [r2, #6]
 8002c1a:	8099      	strh	r1, [r3, #4]
 8002c1c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c1e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002c28:	f3bf 8f5f 	dmb	sy
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20000188 	.word	0x20000188
 8002c3c:	08003b0c 	.word	0x08003b0c
 8002c40:	20000230 	.word	0x20000230
 8002c44:	20000630 	.word	0x20000630
 8002c48:	08003b18 	.word	0x08003b18
 8002c4c:	08003b1c 	.word	0x08003b1c

08002c50 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002c5c:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <SEGGER_RTT_ReadNoLock+0x108>)
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <SEGGER_RTT_ReadNoLock+0x1e>
 8002c6a:	f7ff ff99 	bl	8002ba0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3360      	adds	r3, #96	; 0x60
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <SEGGER_RTT_ReadNoLock+0x108>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d92b      	bls.n	8002cf4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bf28      	it	cs
 8002cae:	4613      	movcs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	4413      	add	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6939      	ldr	r1, [r7, #16]
 8002cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc2:	f000 ff09 	bl	8003ad8 <memcpy>
    NumBytesRead += NumBytesRem;
 8002cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	4413      	add	r3, r2
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d101      	bne.n	8002cf4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	bf28      	it	cs
 8002d04:	4613      	movcs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d019      	beq.n	8002d42 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	4413      	add	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6939      	ldr	r1, [r7, #16]
 8002d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d1e:	f000 fedb 	bl	8003ad8 <memcpy>
    NumBytesRead += NumBytesRem;
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4413      	add	r3, r2
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	4413      	add	r3, r2
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	4413      	add	r3, r2
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000188 	.word	0x20000188

08002d5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002d6c:	e002      	b.n	8002d74 <_EncodeStr+0x18>
    Len++;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	3301      	adds	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f6      	bne.n	8002d6e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d901      	bls.n	8002d8c <_EncodeStr+0x30>
    Len = Limit;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2bfe      	cmp	r3, #254	; 0xfe
 8002d90:	d806      	bhi.n	8002da0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	60fa      	str	r2, [r7, #12]
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e011      	b.n	8002dc4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60fa      	str	r2, [r7, #12]
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	0a19      	lsrs	r1, r3, #8
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	60fa      	str	r2, [r7, #12]
 8002dc0:	b2ca      	uxtb	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002dc8:	e00a      	b.n	8002de0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	1c53      	adds	r3, r2, #1
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	60f9      	str	r1, [r7, #12]
 8002dd6:	7812      	ldrb	r2, [r2, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]
    n++;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3f0      	bcc.n	8002dca <_EncodeStr+0x6e>
  }
  return pPayload;
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e16:	4b35      	ldr	r3, [pc, #212]	; (8002eec <_HandleIncomingPacket+0xdc>)
 8002e18:	7e1b      	ldrb	r3, [r3, #24]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	1cfb      	adds	r3, r7, #3
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7ff ff15 	bl	8002c50 <SEGGER_RTT_ReadNoLock>
 8002e26:	4603      	mov	r3, r0
 8002e28:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	dd59      	ble.n	8002ee4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d032      	beq.n	8002e9c <_HandleIncomingPacket+0x8c>
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	dc42      	bgt.n	8002ec0 <_HandleIncomingPacket+0xb0>
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	dc16      	bgt.n	8002e6c <_HandleIncomingPacket+0x5c>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	dd3e      	ble.n	8002ec0 <_HandleIncomingPacket+0xb0>
 8002e42:	3b01      	subs	r3, #1
 8002e44:	2b06      	cmp	r3, #6
 8002e46:	d83b      	bhi.n	8002ec0 <_HandleIncomingPacket+0xb0>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <_HandleIncomingPacket+0x40>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e73 	.word	0x08002e73
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08002e7f 	.word	0x08002e7f
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	08002e8b 	.word	0x08002e8b
 8002e64:	08002e91 	.word	0x08002e91
 8002e68:	08002e97 	.word	0x08002e97
 8002e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002e6e:	d034      	beq.n	8002eda <_HandleIncomingPacket+0xca>
 8002e70:	e026      	b.n	8002ec0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002e72:	f000 fa4d 	bl	8003310 <SEGGER_SYSVIEW_Start>
      break;
 8002e76:	e035      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002e78:	f000 fb06 	bl	8003488 <SEGGER_SYSVIEW_Stop>
      break;
 8002e7c:	e032      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002e7e:	f000 fbd7 	bl	8003630 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002e82:	e02f      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002e84:	f000 fbc0 	bl	8003608 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002e88:	e02c      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002e8a:	f000 fb23 	bl	80034d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002e8e:	e029      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002e90:	f000 fdb8 	bl	8003a04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002e94:	e026      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002e96:	f000 fd97 	bl	80039c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002e9a:	e023      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <_HandleIncomingPacket+0xdc>)
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	1cfb      	adds	r3, r7, #3
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7ff fed2 	bl	8002c50 <SEGGER_RTT_ReadNoLock>
 8002eac:	4603      	mov	r3, r0
 8002eae:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	dd13      	ble.n	8002ede <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fd05 	bl	80038c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002ebe:	e00e      	b.n	8002ede <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da0c      	bge.n	8002ee2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <_HandleIncomingPacket+0xdc>)
 8002eca:	7e1b      	ldrb	r3, [r3, #24]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	1cfb      	adds	r3, r7, #3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7ff febc 	bl	8002c50 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002ed8:	e003      	b.n	8002ee2 <_HandleIncomingPacket+0xd2>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <_HandleIncomingPacket+0xd4>
      break;
 8002ee2:	bf00      	nop
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000640 	.word	0x20000640

08002ef0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	; 0x30
 8002ef4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002efa:	1d3b      	adds	r3, r7, #4
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0a:	e00b      	b.n	8002f24 <_TrySendOverflowPacket+0x34>
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	09db      	lsrs	r3, r3, #7
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b7f      	cmp	r3, #127	; 0x7f
 8002f28:	d8f0      	bhi.n	8002f0c <_TrySendOverflowPacket+0x1c>
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <_TrySendOverflowPacket+0xe4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	e00b      	b.n	8002f6c <_TrySendOverflowPacket+0x7c>
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	6279      	str	r1, [r7, #36]	; 0x24
 8002f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	09db      	lsrs	r3, r3, #7
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f70:	d8f0      	bhi.n	8002f54 <_TrySendOverflowPacket+0x64>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	627a      	str	r2, [r7, #36]	; 0x24
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	4618      	mov	r0, r3
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd f924 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002f9c:	f7ff fdf0 	bl	8002b80 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e004      	b.n	8002fc4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <_TrySendOverflowPacket+0xe0>)
 8002fc2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002fc4:	693b      	ldr	r3, [r7, #16]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3730      	adds	r7, #48	; 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000640 	.word	0x20000640
 8002fd4:	e0001004 	.word	0xe0001004

08002fd8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002fe4:	4b6d      	ldr	r3, [pc, #436]	; (800319c <_SendPacket+0x1c4>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d010      	beq.n	800300e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002fec:	4b6b      	ldr	r3, [pc, #428]	; (800319c <_SendPacket+0x1c4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a5 	beq.w	8003140 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002ff6:	4b69      	ldr	r3, [pc, #420]	; (800319c <_SendPacket+0x1c4>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d109      	bne.n	8003012 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002ffe:	f7ff ff77 	bl	8002ef0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003002:	4b66      	ldr	r3, [pc, #408]	; (800319c <_SendPacket+0x1c4>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	f040 809c 	bne.w	8003144 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800300c:	e001      	b.n	8003012 <_SendPacket+0x3a>
    goto Send;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <_SendPacket+0x3c>
Send:
 8003012:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b1f      	cmp	r3, #31
 8003018:	d809      	bhi.n	800302e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800301a:	4b60      	ldr	r3, [pc, #384]	; (800319c <_SendPacket+0x1c4>)
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 808d 	bne.w	8003148 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b17      	cmp	r3, #23
 8003032:	d807      	bhi.n	8003044 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	701a      	strb	r2, [r3, #0]
 8003042:	e03d      	b.n	80030c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b7f      	cmp	r3, #127	; 0x7f
 8003050:	d912      	bls.n	8003078 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	09da      	lsrs	r2, r3, #7
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3b01      	subs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	3a01      	subs	r2, #1
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	e006      	b.n	8003086 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b01      	subs	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b7f      	cmp	r3, #127	; 0x7f
 800308a:	d912      	bls.n	80030b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	09da      	lsrs	r2, r3, #7
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3b01      	subs	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	3a01      	subs	r2, #1
 80030a4:	60fa      	str	r2, [r7, #12]
 80030a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e006      	b.n	80030c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80030c0:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <_SendPacket+0x1c8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80030c6:	4b35      	ldr	r3, [pc, #212]	; (800319c <_SendPacket+0x1c4>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	e00b      	b.n	80030f2 <_SendPacket+0x11a>
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	6279      	str	r1, [r7, #36]	; 0x24
 80030e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	09db      	lsrs	r3, r3, #7
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	2b7f      	cmp	r3, #127	; 0x7f
 80030f6:	d8f0      	bhi.n	80030da <_SendPacket+0x102>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	627a      	str	r2, [r7, #36]	; 0x24
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <_SendPacket+0x1c4>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	4618      	mov	r0, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	461a      	mov	r2, r3
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	f7fd f862 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800311c:	4603      	mov	r3, r0
 800311e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003120:	f7ff fd2e 	bl	8002b80 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <_SendPacket+0x1c4>)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	60d3      	str	r3, [r2, #12]
 8003130:	e00b      	b.n	800314a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <_SendPacket+0x1c4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <_SendPacket+0x1c4>)
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e004      	b.n	800314a <_SendPacket+0x172>
    goto SendDone;
 8003140:	bf00      	nop
 8003142:	e002      	b.n	800314a <_SendPacket+0x172>
      goto SendDone;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <_SendPacket+0x172>
      goto SendDone;
 8003148:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <_SendPacket+0x1c4>)
 800314c:	7e1b      	ldrb	r3, [r3, #24]
 800314e:	4619      	mov	r1, r3
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <_SendPacket+0x1cc>)
 8003152:	460b      	mov	r3, r1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	440b      	add	r3, r1
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	336c      	adds	r3, #108	; 0x6c
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0e      	ldr	r3, [pc, #56]	; (800319c <_SendPacket+0x1c4>)
 8003162:	7e1b      	ldrb	r3, [r3, #24]
 8003164:	4618      	mov	r0, r3
 8003166:	490f      	ldr	r1, [pc, #60]	; (80031a4 <_SendPacket+0x1cc>)
 8003168:	4603      	mov	r3, r0
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4403      	add	r3, r0
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	3370      	adds	r3, #112	; 0x70
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d00b      	beq.n	8003192 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <_SendPacket+0x1c4>)
 800317c:	789b      	ldrb	r3, [r3, #2]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d107      	bne.n	8003192 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <_SendPacket+0x1c4>)
 8003184:	2201      	movs	r2, #1
 8003186:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003188:	f7ff fe42 	bl	8002e10 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <_SendPacket+0x1c4>)
 800318e:	2200      	movs	r2, #0
 8003190:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003192:	bf00      	nop
 8003194:	3728      	adds	r7, #40	; 0x28
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000640 	.word	0x20000640
 80031a0:	e0001004 	.word	0xe0001004
 80031a4:	20000188 	.word	0x20000188

080031a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80031b0:	f3ef 8311 	mrs	r3, BASEPRI
 80031b4:	f04f 0120 	mov.w	r1, #32
 80031b8:	f381 8811 	msr	BASEPRI, r1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4808      	ldr	r0, [pc, #32]	; (80031e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80031c0:	f7ff fe19 	bl	8002df6 <_PreparePacket>
 80031c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f7ff ff04 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f383 8811 	msr	BASEPRI, r3
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000670 	.word	0x20000670

080031e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80031ee:	f3ef 8311 	mrs	r3, BASEPRI
 80031f2:	f04f 0120 	mov.w	r1, #32
 80031f6:	f381 8811 	msr	BASEPRI, r1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	4816      	ldr	r0, [pc, #88]	; (8003258 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80031fe:	f7ff fdfa 	bl	8002df6 <_PreparePacket>
 8003202:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e00b      	b.n	800322a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	1c59      	adds	r1, r3, #1
 800321a:	61f9      	str	r1, [r7, #28]
 800321c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	09db      	lsrs	r3, r3, #7
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b7f      	cmp	r3, #127	; 0x7f
 800322e:	d8f0      	bhi.n	8003212 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	61fa      	str	r2, [r7, #28]
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	6938      	ldr	r0, [r7, #16]
 8003246:	f7ff fec7 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f383 8811 	msr	BASEPRI, r3
}
 8003250:	bf00      	nop
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000670 	.word	0x20000670

0800325c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003268:	f3ef 8311 	mrs	r3, BASEPRI
 800326c:	f04f 0120 	mov.w	r1, #32
 8003270:	f381 8811 	msr	BASEPRI, r1
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	4825      	ldr	r0, [pc, #148]	; (800330c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003278:	f7ff fdbd 	bl	8002df6 <_PreparePacket>
 800327c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
 800328a:	e00b      	b.n	80032a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	09db      	lsrs	r3, r3, #7
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2b7f      	cmp	r3, #127	; 0x7f
 80032a8:	d8f0      	bhi.n	800328c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80032aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	e00b      	b.n	80032dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	6279      	str	r1, [r7, #36]	; 0x24
 80032ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	623b      	str	r3, [r7, #32]
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b7f      	cmp	r3, #127	; 0x7f
 80032e0:	d8f0      	bhi.n	80032c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	627a      	str	r2, [r7, #36]	; 0x24
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6979      	ldr	r1, [r7, #20]
 80032f6:	69b8      	ldr	r0, [r7, #24]
 80032f8:	f7ff fe6e 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f383 8811 	msr	BASEPRI, r3
}
 8003302:	bf00      	nop
 8003304:	3730      	adds	r7, #48	; 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000670 	.word	0x20000670

08003310 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003316:	4b59      	ldr	r3, [pc, #356]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800331c:	f3ef 8311 	mrs	r3, BASEPRI
 8003320:	f04f 0120 	mov.w	r1, #32
 8003324:	f381 8811 	msr	BASEPRI, r1
 8003328:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800332a:	4b54      	ldr	r3, [pc, #336]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	220a      	movs	r2, #10
 8003330:	4953      	ldr	r1, [pc, #332]	; (8003480 <SEGGER_SYSVIEW_Start+0x170>)
 8003332:	4618      	mov	r0, r3
 8003334:	f7fc ff54 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800333e:	f7ff fc1f 	bl	8002b80 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003342:	200a      	movs	r0, #10
 8003344:	f7ff ff30 	bl	80031a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003348:	f3ef 8311 	mrs	r3, BASEPRI
 800334c:	f04f 0120 	mov.w	r1, #32
 8003350:	f381 8811 	msr	BASEPRI, r1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	484b      	ldr	r0, [pc, #300]	; (8003484 <SEGGER_SYSVIEW_Start+0x174>)
 8003358:	f7ff fd4d 	bl	8002df6 <_PreparePacket>
 800335c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003366:	4b45      	ldr	r3, [pc, #276]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	e00b      	b.n	8003386 <SEGGER_SYSVIEW_Start+0x76>
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	1c59      	adds	r1, r3, #1
 8003376:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	09db      	lsrs	r3, r3, #7
 8003384:	62bb      	str	r3, [r7, #40]	; 0x28
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	2b7f      	cmp	r3, #127	; 0x7f
 800338a:	d8f0      	bhi.n	800336e <SEGGER_SYSVIEW_Start+0x5e>
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	e00b      	b.n	80033c0 <SEGGER_SYSVIEW_Start+0xb0>
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1c59      	adds	r1, r3, #1
 80033b0:	6279      	str	r1, [r7, #36]	; 0x24
 80033b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	09db      	lsrs	r3, r3, #7
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b7f      	cmp	r3, #127	; 0x7f
 80033c4:	d8f0      	bhi.n	80033a8 <SEGGER_SYSVIEW_Start+0x98>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	627a      	str	r2, [r7, #36]	; 0x24
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e00b      	b.n	80033fa <SEGGER_SYSVIEW_Start+0xea>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	1c59      	adds	r1, r3, #1
 80033ea:	61f9      	str	r1, [r7, #28]
 80033ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	09db      	lsrs	r3, r3, #7
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b7f      	cmp	r3, #127	; 0x7f
 80033fe:	d8f0      	bhi.n	80033e2 <SEGGER_SYSVIEW_Start+0xd2>
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	61fa      	str	r2, [r7, #28]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e00b      	b.n	8003432 <SEGGER_SYSVIEW_Start+0x122>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	1c59      	adds	r1, r3, #1
 8003422:	6179      	str	r1, [r7, #20]
 8003424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	09db      	lsrs	r3, r3, #7
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b7f      	cmp	r3, #127	; 0x7f
 8003436:	d8f0      	bhi.n	800341a <SEGGER_SYSVIEW_Start+0x10a>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	617a      	str	r2, [r7, #20]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003448:	2218      	movs	r2, #24
 800344a:	6839      	ldr	r1, [r7, #0]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fdc3 	bl	8002fd8 <_SendPacket>
      RECORD_END();
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <SEGGER_SYSVIEW_Start+0x16c>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003466:	f000 f8e3 	bl	8003630 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800346a:	f000 f8cd 	bl	8003608 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800346e:	f000 fac9 	bl	8003a04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003472:	bf00      	nop
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000640 	.word	0x20000640
 8003480:	08003b3c 	.word	0x08003b3c
 8003484:	20000670 	.word	0x20000670

08003488 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800348e:	f3ef 8311 	mrs	r3, BASEPRI
 8003492:	f04f 0120 	mov.w	r1, #32
 8003496:	f381 8811 	msr	BASEPRI, r1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	480b      	ldr	r0, [pc, #44]	; (80034cc <SEGGER_SYSVIEW_Stop+0x44>)
 800349e:	f7ff fcaa 	bl	8002df6 <_PreparePacket>
 80034a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80034ac:	220b      	movs	r2, #11
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	6838      	ldr	r0, [r7, #0]
 80034b2:	f7ff fd91 	bl	8002fd8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f383 8811 	msr	BASEPRI, r3
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000670 	.word	0x20000670
 80034d0:	20000640 	.word	0x20000640

080034d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	; 0x30
 80034d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80034da:	f3ef 8311 	mrs	r3, BASEPRI
 80034de:	f04f 0120 	mov.w	r1, #32
 80034e2:	f381 8811 	msr	BASEPRI, r1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	4845      	ldr	r0, [pc, #276]	; (8003600 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80034ea:	f7ff fc84 	bl	8002df6 <_PreparePacket>
 80034ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	e00b      	b.n	8003518 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	b2da      	uxtb	r2, r3
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	62f9      	str	r1, [r7, #44]	; 0x2c
 800350a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	09db      	lsrs	r3, r3, #7
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	2b7f      	cmp	r3, #127	; 0x7f
 800351c:	d8f0      	bhi.n	8003500 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	623b      	str	r3, [r7, #32]
 8003538:	e00b      	b.n	8003552 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	1c59      	adds	r1, r3, #1
 8003542:	6279      	str	r1, [r7, #36]	; 0x24
 8003544:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	09db      	lsrs	r3, r3, #7
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	2b7f      	cmp	r3, #127	; 0x7f
 8003556:	d8f0      	bhi.n	800353a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	627a      	str	r2, [r7, #36]	; 0x24
 800355e:	6a3a      	ldr	r2, [r7, #32]
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e00b      	b.n	800358c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	61f9      	str	r1, [r7, #28]
 800357e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b7f      	cmp	r3, #127	; 0x7f
 8003590:	d8f0      	bhi.n	8003574 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	61fa      	str	r2, [r7, #28]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	e00b      	b.n	80035c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	6179      	str	r1, [r7, #20]
 80035b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	09db      	lsrs	r3, r3, #7
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b7f      	cmp	r3, #127	; 0x7f
 80035c8:	d8f0      	bhi.n	80035ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	617a      	str	r2, [r7, #20]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80035da:	2218      	movs	r2, #24
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f7ff fcfa 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	4798      	blx	r3
  }
}
 80035f8:	bf00      	nop
 80035fa:	3730      	adds	r7, #48	; 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000670 	.word	0x20000670
 8003604:	20000640 	.word	0x20000640

08003608 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800360c:	4b07      	ldr	r3, [pc, #28]	; (800362c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4798      	blx	r3
  }
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000640 	.word	0x20000640

08003630 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01a      	beq.n	8003674 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4798      	blx	r3
 8003650:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003654:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	000a      	movs	r2, r1
 8003664:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003666:	4613      	mov	r3, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4621      	mov	r1, r4
 800366c:	200d      	movs	r0, #13
 800366e:	f7ff fdf5 	bl	800325c <SEGGER_SYSVIEW_RecordU32x2>
 8003672:	e006      	b.n	8003682 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4619      	mov	r1, r3
 800367a:	200c      	movs	r0, #12
 800367c:	f7ff fdb2 	bl	80031e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	bf00      	nop
 800368c:	20000640 	.word	0x20000640
 8003690:	e0001004 	.word	0xe0001004

08003694 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800369a:	f3ef 8311 	mrs	r3, BASEPRI
 800369e:	f04f 0120 	mov.w	r1, #32
 80036a2:	f381 8811 	msr	BASEPRI, r1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	4819      	ldr	r0, [pc, #100]	; (8003710 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80036aa:	f7ff fba4 	bl	8002df6 <_PreparePacket>
 80036ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036bc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e00b      	b.n	80036e0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1c59      	adds	r1, r3, #1
 80036d0:	6179      	str	r1, [r7, #20]
 80036d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	09db      	lsrs	r3, r3, #7
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b7f      	cmp	r3, #127	; 0x7f
 80036e4:	d8f0      	bhi.n	80036c8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	617a      	str	r2, [r7, #20]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80036f6:	2202      	movs	r2, #2
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68b8      	ldr	r0, [r7, #8]
 80036fc:	f7ff fc6c 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f383 8811 	msr	BASEPRI, r3
}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000670 	.word	0x20000670
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800371e:	f3ef 8311 	mrs	r3, BASEPRI
 8003722:	f04f 0120 	mov.w	r1, #32
 8003726:	f381 8811 	msr	BASEPRI, r1
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	4807      	ldr	r0, [pc, #28]	; (800374c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800372e:	f7ff fb62 	bl	8002df6 <_PreparePacket>
 8003732:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003734:	2203      	movs	r2, #3
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	6838      	ldr	r0, [r7, #0]
 800373a:	f7ff fc4d 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f383 8811 	msr	BASEPRI, r3
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000670 	.word	0x20000670

08003750 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003756:	f3ef 8311 	mrs	r3, BASEPRI
 800375a:	f04f 0120 	mov.w	r1, #32
 800375e:	f381 8811 	msr	BASEPRI, r1
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003766:	f7ff fb46 	bl	8002df6 <_PreparePacket>
 800376a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800376c:	2212      	movs	r2, #18
 800376e:	6839      	ldr	r1, [r7, #0]
 8003770:	6838      	ldr	r0, [r7, #0]
 8003772:	f7ff fc31 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f383 8811 	msr	BASEPRI, r3
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000670 	.word	0x20000670

08003788 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800378e:	f3ef 8311 	mrs	r3, BASEPRI
 8003792:	f04f 0120 	mov.w	r1, #32
 8003796:	f381 8811 	msr	BASEPRI, r1
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	4807      	ldr	r0, [pc, #28]	; (80037bc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800379e:	f7ff fb2a 	bl	8002df6 <_PreparePacket>
 80037a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80037a4:	2211      	movs	r2, #17
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	6838      	ldr	r0, [r7, #0]
 80037aa:	f7ff fc15 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f383 8811 	msr	BASEPRI, r3
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000670 	.word	0x20000670

080037c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037c8:	f3ef 8311 	mrs	r3, BASEPRI
 80037cc:	f04f 0120 	mov.w	r1, #32
 80037d0:	f381 8811 	msr	BASEPRI, r1
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	4819      	ldr	r0, [pc, #100]	; (800383c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80037d8:	f7ff fb0d 	bl	8002df6 <_PreparePacket>
 80037dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e00b      	b.n	800380e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	1c59      	adds	r1, r3, #1
 80037fe:	61f9      	str	r1, [r7, #28]
 8003800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b7f      	cmp	r3, #127	; 0x7f
 8003812:	d8f0      	bhi.n	80037f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	61fa      	str	r2, [r7, #28]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003824:	2204      	movs	r2, #4
 8003826:	68f9      	ldr	r1, [r7, #12]
 8003828:	6938      	ldr	r0, [r7, #16]
 800382a:	f7ff fbd5 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f383 8811 	msr	BASEPRI, r3
}
 8003834:	bf00      	nop
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000670 	.word	0x20000670
 8003840:	20000640 	.word	0x20000640

08003844 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800384c:	f3ef 8311 	mrs	r3, BASEPRI
 8003850:	f04f 0120 	mov.w	r1, #32
 8003854:	f381 8811 	msr	BASEPRI, r1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	4819      	ldr	r0, [pc, #100]	; (80038c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800385c:	f7ff facb 	bl	8002df6 <_PreparePacket>
 8003860:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e00b      	b.n	8003892 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	61f9      	str	r1, [r7, #28]
 8003884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	09db      	lsrs	r3, r3, #7
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b7f      	cmp	r3, #127	; 0x7f
 8003896:	d8f0      	bhi.n	800387a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	61fa      	str	r2, [r7, #28]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80038a8:	2206      	movs	r2, #6
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	6938      	ldr	r0, [r7, #16]
 80038ae:	f7ff fb93 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f383 8811 	msr	BASEPRI, r3
}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000670 	.word	0x20000670
 80038c4:	20000640 	.word	0x20000640

080038c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08c      	sub	sp, #48	; 0x30
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80038d2:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d06d      	beq.n	80039b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80038da:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e4:	e008      	b.n	80038f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	3301      	adds	r3, #1
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3f2      	bcc.n	80038e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003900:	e000      	b.n	8003904 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003902:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d055      	beq.n	80039b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800390a:	f3ef 8311 	mrs	r3, BASEPRI
 800390e:	f04f 0120 	mov.w	r1, #32
 8003912:	f381 8811 	msr	BASEPRI, r1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	482a      	ldr	r0, [pc, #168]	; (80039c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800391a:	f7ff fa6c 	bl	8002df6 <_PreparePacket>
 800391e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	e00b      	b.n	8003946 <SEGGER_SYSVIEW_SendModule+0x7e>
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	6279      	str	r1, [r7, #36]	; 0x24
 8003938:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	09db      	lsrs	r3, r3, #7
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2b7f      	cmp	r3, #127	; 0x7f
 800394a:	d8f0      	bhi.n	800392e <SEGGER_SYSVIEW_SendModule+0x66>
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	627a      	str	r2, [r7, #36]	; 0x24
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e00b      	b.n	8003980 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1c59      	adds	r1, r3, #1
 8003970:	61f9      	str	r1, [r7, #28]
 8003972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	09db      	lsrs	r3, r3, #7
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b7f      	cmp	r3, #127	; 0x7f
 8003984:	d8f0      	bhi.n	8003968 <SEGGER_SYSVIEW_SendModule+0xa0>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	61fa      	str	r2, [r7, #28]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	4619      	mov	r1, r3
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff f9dc 	bl	8002d5c <_EncodeStr>
 80039a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80039a6:	2216      	movs	r2, #22
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	6938      	ldr	r0, [r7, #16]
 80039ac:	f7ff fb14 	bl	8002fd8 <_SendPacket>
      RECORD_END();
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80039b6:	bf00      	nop
 80039b8:	3730      	adds	r7, #48	; 0x30
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000668 	.word	0x20000668
 80039c4:	20000670 	.word	0x20000670

080039c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80039ce:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f2      	bne.n	80039dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000668 	.word	0x20000668

08003a04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8003a0e:	f04f 0120 	mov.w	r1, #32
 8003a12:	f381 8811 	msr	BASEPRI, r1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	4817      	ldr	r0, [pc, #92]	; (8003a78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003a1a:	f7ff f9ec 	bl	8002df6 <_PreparePacket>
 8003a1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e00b      	b.n	8003a48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	6179      	str	r1, [r7, #20]
 8003a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a4c:	d8f0      	bhi.n	8003a30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	617a      	str	r2, [r7, #20]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003a5e:	221b      	movs	r2, #27
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f7ff fab8 	bl	8002fd8 <_SendPacket>
  RECORD_END();
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f383 8811 	msr	BASEPRI, r3
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000670 	.word	0x20000670
 8003a7c:	2000066c 	.word	0x2000066c

08003a80 <memset>:
 8003a80:	4402      	add	r2, r0
 8003a82:	4603      	mov	r3, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4d0d      	ldr	r5, [pc, #52]	; (8003ac8 <__libc_init_array+0x38>)
 8003a94:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	42a6      	cmp	r6, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	4d0b      	ldr	r5, [pc, #44]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa2:	4c0c      	ldr	r4, [pc, #48]	; (8003ad4 <__libc_init_array+0x44>)
 8003aa4:	f000 f826 	bl	8003af4 <_init>
 8003aa8:	1b64      	subs	r4, r4, r5
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	2600      	movs	r6, #0
 8003aae:	42a6      	cmp	r6, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab8:	4798      	blx	r3
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac2:	4798      	blx	r3
 8003ac4:	3601      	adds	r6, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	08003b50 	.word	0x08003b50
 8003acc:	08003b50 	.word	0x08003b50
 8003ad0:	08003b50 	.word	0x08003b50
 8003ad4:	08003b54 	.word	0x08003b54

08003ad8 <memcpy>:
 8003ad8:	440a      	add	r2, r1
 8003ada:	4291      	cmp	r1, r2
 8003adc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ae0:	d100      	bne.n	8003ae4 <memcpy+0xc>
 8003ae2:	4770      	bx	lr
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aee:	4291      	cmp	r1, r2
 8003af0:	d1f9      	bne.n	8003ae6 <memcpy+0xe>
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
