
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009750  08009750  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009754  08009754  00019754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001471c  20000070  080097c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001478c  080097c8  0002478c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177de  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1e  00000000  00000000  000378c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107d  00000000  00000000  0003ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b15b  00000000  00000000  0003dae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a46d  00000000  00000000  00058c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a158f  00000000  00000000  000730ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005df4  00000000  00000000  0011463c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0011a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800955c 	.word	0x0800955c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800955c 	.word	0x0800955c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013070 	.word	0x20013070

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000ac 	.word	0x200000ac

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 fb8e 	bl	8001d98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 fb83 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 fb78 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 fb6d 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 fb64 	bl	8001d98 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 fb5e 	bl	8001d98 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 fb55 	bl	8001d98 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f001 f823 	bl	8001854 <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f001 f81d 	bl	8001854 <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f001 f817 	bl	8001854 <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f001 f811 	bl	8001854 <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f001 f80b 	bl	8001854 <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f805 	bl	8001854 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 ffff 	bl	8001854 <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fff9 	bl	8001854 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fff6 	bl	8001854 <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fff0 	bl	8001854 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 ffa3 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f8db 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa21 	bl	8000cd4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f943 	bl	8000b1c <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 f9cd 	bl	8000c34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 800089a:	4856      	ldr	r0, [pc, #344]	; (80009f4 <main+0x174>)
 800089c:	f002 fcb2 	bl	8003204 <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008a0:	f006 f98e 	bl	8006bc0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008a4:	f007 fc3e 	bl	8008124 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	200a      	movs	r0, #10
 80008ae:	f003 fa3d 	bl	8003d2c <xQueueGenericCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a50      	ldr	r2, [pc, #320]	; (80009f8 <main+0x178>)
 80008b6:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008b8:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <main+0x178>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>

  /*create timers */
  printTimerHandle = xTimerCreate("Print_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, printTimerCallback);
 80008d6:	4b49      	ldr	r3, [pc, #292]	; (80009fc <main+0x17c>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008e2:	4847      	ldr	r0, [pc, #284]	; (8000a00 <main+0x180>)
 80008e4:	f005 f9c6 	bl	8005c74 <xTimerCreate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <main+0x184>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <main+0x188>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	22fa      	movs	r2, #250	; 0xfa
 80008fa:	4944      	ldr	r1, [pc, #272]	; (8000a0c <main+0x18c>)
 80008fc:	4844      	ldr	r0, [pc, #272]	; (8000a10 <main+0x190>)
 80008fe:	f003 fea9 	bl	8004654 <xTaskCreate>
 8000902:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00a      	beq.n	8000920 <main+0xa0>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	617b      	str	r3, [r7, #20]
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <main+0x9e>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <main+0x194>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2303      	movs	r3, #3
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	22fa      	movs	r2, #250	; 0xfa
 800092c:	493a      	ldr	r1, [pc, #232]	; (8000a18 <main+0x198>)
 800092e:	483b      	ldr	r0, [pc, #236]	; (8000a1c <main+0x19c>)
 8000930:	f003 fe90 	bl	8004654 <xTaskCreate>
 8000934:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00a      	beq.n	8000952 <main+0xd2>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	613b      	str	r3, [r7, #16]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0xd0>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <main+0x1a0>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2302      	movs	r3, #2
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	22fa      	movs	r2, #250	; 0xfa
 800095e:	4931      	ldr	r1, [pc, #196]	; (8000a24 <main+0x1a4>)
 8000960:	4831      	ldr	r0, [pc, #196]	; (8000a28 <main+0x1a8>)
 8000962:	f003 fe77 	bl	8004654 <xTaskCreate>
 8000966:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d00a      	beq.n	8000984 <main+0x104>
        __asm volatile
 800096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	60fb      	str	r3, [r7, #12]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <main+0x102>

  status = xTaskCreate(rtcSetTaskHandler, "RTC_Set_Task", 250, NULL, 2, &rtcSetTaskHandle);
 8000984:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <main+0x1ac>)
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	2302      	movs	r3, #2
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	22fa      	movs	r2, #250	; 0xfa
 8000990:	4927      	ldr	r1, [pc, #156]	; (8000a30 <main+0x1b0>)
 8000992:	4828      	ldr	r0, [pc, #160]	; (8000a34 <main+0x1b4>)
 8000994:	f003 fe5e 	bl	8004654 <xTaskCreate>
 8000998:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00a      	beq.n	80009b6 <main+0x136>
        __asm volatile
 80009a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a4:	f383 8811 	msr	BASEPRI, r3
 80009a8:	f3bf 8f6f 	isb	sy
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	60bb      	str	r3, [r7, #8]
    }
 80009b2:	bf00      	nop
 80009b4:	e7fe      	b.n	80009b4 <main+0x134>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <main+0x1b8>)
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	2302      	movs	r3, #2
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	22fa      	movs	r2, #250	; 0xfa
 80009c2:	491e      	ldr	r1, [pc, #120]	; (8000a3c <main+0x1bc>)
 80009c4:	481e      	ldr	r0, [pc, #120]	; (8000a40 <main+0x1c0>)
 80009c6:	f003 fe45 	bl	8004654 <xTaskCreate>
 80009ca:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d00a      	beq.n	80009e8 <main+0x168>
        __asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	607b      	str	r3, [r7, #4]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <main+0x166>

  lcdInit();
 80009e8:	f7ff ff0c 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 80009ec:	f004 f868 	bl	8004ac0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x170>
 80009f2:	bf00      	nop
 80009f4:	200000ac 	.word	0x200000ac
 80009f8:	20000108 	.word	0x20000108
 80009fc:	080011d5 	.word	0x080011d5
 8000a00:	08009574 	.word	0x08009574
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	200000f8 	.word	0x200000f8
 8000a0c:	08009580 	.word	0x08009580
 8000a10:	0800119d 	.word	0x0800119d
 8000a14:	200000f4 	.word	0x200000f4
 8000a18:	08009594 	.word	0x08009594
 8000a1c:	08001145 	.word	0x08001145
 8000a20:	200000fc 	.word	0x200000fc
 8000a24:	080095a0 	.word	0x080095a0
 8000a28:	08001545 	.word	0x08001545
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	080095b0 	.word	0x080095b0
 8000a34:	08001649 	.word	0x08001649
 8000a38:	20000104 	.word	0x20000104
 8000a3c:	080095c0 	.word	0x080095c0
 8000a40:	08001709 	.word	0x08001709

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	; 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 f8fe 	bl	8008c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <SystemClock_Config+0xd0>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ac0:	2354      	movs	r3, #84	; 0x54
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 f97b 	bl	8001dcc <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000adc:	f000 f9d0 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2102      	movs	r1, #2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fbdd 	bl	80022bc <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b08:	f000 f9ba 	bl	8000e80 <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	; 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2228      	movs	r2, #40	; 0x28
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 f889 	bl	8008c54 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b42:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b44:	4a3a      	ldr	r2, [pc, #232]	; (8000c30 <MX_RTC_Init+0x114>)
 8000b46:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b50:	227f      	movs	r2, #127	; 0x7f
 8000b52:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b6c:	482f      	ldr	r0, [pc, #188]	; (8000c2c <MX_RTC_Init+0x110>)
 8000b6e:	f001 fed1 	bl	8002914 <HAL_RTC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b78:	f000 f982 	bl	8000e80 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8000b82:	2359      	movs	r3, #89	; 0x59
 8000b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x30;
 8000b88:	2330      	movs	r3, #48	; 0x30
 8000b8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <MX_RTC_Init+0x110>)
 8000ba0:	f001 ff2e 	bl	8002a00 <HAL_RTC_SetTime>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000baa:	f000 f969 	bl	8000e80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MX_RTC_Init+0x110>)
 8000bd0:	f002 f80e 	bl	8002bf0 <HAL_RTC_SetDate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000bda:	f000 f951 	bl	8000e80 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_RTC_Init+0x110>)
 8000c16:	f002 f8be 	bl	8002d96 <HAL_RTC_SetAlarm>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000c20:	f000 f92e 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	3740      	adds	r7, #64	; 0x40
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	40002800 	.word	0x40002800

08000c34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <MX_TIM1_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c58:	2254      	movs	r2, #84	; 0x54
 8000c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c7e:	f002 fa71 	bl	8003164 <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f8fa 	bl	8000e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c9a:	f002 fc77 	bl	800358c <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ca4:	f000 f8ec 	bl	8000e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000cb6:	f002 fe73 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cc0:	f000 f8de 	bl	8000e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	40010000 	.word	0x40010000

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f240 6103 	movw	r1, #1539	; 0x603
 8000d60:	483b      	ldr	r0, [pc, #236]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000d62:	f001 f819 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|E_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f248 0110 	movw	r1, #32784	; 0x8010
 8000d6c:	4839      	ldr	r0, [pc, #228]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000d6e:	f001 f813 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2181      	movs	r1, #129	; 0x81
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000d78:	f001 f80e 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	482f      	ldr	r0, [pc, #188]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000d94:	f000 fe64 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin BUZZER_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10;
 8000d98:	f240 6303 	movw	r3, #1539	; 0x603
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4827      	ldr	r0, [pc, #156]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000db2:	f000 fe55 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db6:	230c      	movs	r3, #12
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000dd2:	f000 fe45 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|E_Pin;
 8000dd6:	f248 0310 	movw	r3, #32784	; 0x8010
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000df0:	f000 fe36 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|DEC_Pin;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000e08:	f000 fe2a 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000e0c:	2381      	movs	r3, #129	; 0x81
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000e24:	f000 fe1c 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SELECT_Pin;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000e3e:	f000 fe0f 	bl	8001a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400

08000e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e6e:	f000 fcd1 	bl	8001814 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40000c00 	.word	0x40000c00

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <Error_Handler+0x8>
	...

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_MspInit+0x50>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_MspInit+0x50>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_MspInit+0x50>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x50>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_MspInit+0x50>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_MspInit+0x50>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 fd93 	bl	80019f6 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8000ed0:	f005 fafa 	bl	80064c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_RTC_MspInit+0x50>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d111      	bne.n	8000f26 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f02:	2302      	movs	r3, #2
 8000f04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fc11 	bl	8002738 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f1c:	f7ff ffb0 	bl	8000e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_RTC_MspInit+0x54>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40002800 	.word	0x40002800
 8000f34:	42470e3c 	.word	0x42470e3c

08000f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_TIM_Base_MspInit+0x3c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d10d      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_Base_MspInit+0x40>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b33      	ldr	r3, [pc, #204]	; (8001060 <HAL_InitTick+0xe4>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <HAL_InitTick+0xe4>)
 8000f96:	f043 0308 	orr.w	r3, r3, #8
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_InitTick+0xe4>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fb8e 	bl	80026d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fc2:	f001 fb73 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8000fc6:	6378      	str	r0, [r7, #52]	; 0x34
 8000fc8:	e004      	b.n	8000fd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fca:	f001 fb6f 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_InitTick+0xe8>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9b      	lsrs	r3, r3, #18
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_InitTick+0xec>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_InitTick+0xf0>)
 8000fe6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_InitTick+0xec>)
 8000fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fee:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_InitTick+0xec>)
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_InitTick+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_InitTick+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_InitTick+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <HAL_InitTick+0xec>)
 800100a:	f002 f8ab 	bl	8003164 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001014:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001018:	2b00      	cmp	r3, #0
 800101a:	d11b      	bne.n	8001054 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800101c:	4812      	ldr	r0, [pc, #72]	; (8001068 <HAL_InitTick+0xec>)
 800101e:	f002 f94b 	bl	80032b8 <HAL_TIM_Base_Start_IT>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800102c:	2b00      	cmp	r3, #0
 800102e:	d111      	bne.n	8001054 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001030:	2032      	movs	r0, #50	; 0x32
 8001032:	f000 fd07 	bl	8001a44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d808      	bhi.n	800104e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f000 fce3 	bl	8001a0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_InitTick+0xf4>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e002      	b.n	8001054 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001058:	4618      	mov	r0, r3
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	431bde83 	.word	0x431bde83
 8001068:	20000144 	.word	0x20000144
 800106c:	40000c00 	.word	0x40000c00
 8001070:	20000010 	.word	0x20000010

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM5_IRQHandler+0x10>)
 80010a6:	f002 f969 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000144 	.word	0x20000144

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f007 fdbe 	bl	8008c64 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20018000 	.word	0x20018000
 8001114:	00000400 	.word	0x00000400
 8001118:	2000018c 	.word	0x2000018c
 800111c:	20014790 	.word	0x20014790

08001120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SystemInit+0x20>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <SystemInit+0x20>)
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <printTaskHandler>:

static void handleSetTime(RTC_TimeTypeDef *setTime);
static void handleSetDate(RTC_DateTypeDef *setDate);
static void handleSelect(void);

void printTaskHandler(void *parameters){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint32_t *str;

	while(1){
		/* print top row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <printTaskHandler+0x54>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	4618      	mov	r0, r3
 800115a:	f003 f809 	bl	8004170 <xQueueReceive>
		lcdClear();
 800115e:	f7ff fb26 	bl	80007ae <lcdClear>
		lcdMoveCursor(0, 0);
 8001162:	2100      	movs	r1, #0
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff faff 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fb29 	bl	80007c4 <lcdSendString>

		/* print bottom row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <printTaskHandler+0x54>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fff6 	bl	8004170 <xQueueReceive>
		lcdMoveCursor(1, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff faee 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb18 	bl	80007c4 <lcdSendString>
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001194:	e7da      	b.n	800114c <printTaskHandler+0x8>
 8001196:	bf00      	nop
 8001198:	20000108 	.word	0x20000108

0800119c <startTimerTaskHandler>:
	}
}

void startTimerTaskHandler(void *parameters){
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
	while(1){
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <startTimerTaskHandler+0x30>)
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	f003 fdfa 	bl	8004da0 <xTaskGetTickCount>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	2101      	movs	r1, #1
 80011b8:	4620      	mov	r0, r4
 80011ba:	f004 fdb5 	bl	8005d28 <xTimerGenericCommand>
		vTaskSuspend(startTimerTaskHandle);
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <startTimerTaskHandler+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fbce 	bl	8004964 <vTaskSuspend>
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80011c8:	e7ec      	b.n	80011a4 <startTimerTaskHandler+0x8>
 80011ca:	bf00      	nop
 80011cc:	2000010c 	.word	0x2000010c
 80011d0:	200000f8 	.word	0x200000f8

080011d4 <printTimerCallback>:
	}
}

void printTimerCallback(TimerHandle_t xTimer){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
	if (currMode == mDisplayRtc){
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <printTimerCallback+0x64>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d109      	bne.n	80011f8 <printTimerCallback+0x24>
		xTaskNotify(rtcUpdateTaskHandle, 0, eNoAction);
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <printTimerCallback+0x68>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	f004 fb59 	bl	80058a8 <xTaskGenericNotify>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
	}
	else if(currMode == mSetAlarm){
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
	}
}
 80011f6:	e01a      	b.n	800122e <printTimerCallback+0x5a>
	else if (currMode == mSetRtc){
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <printTimerCallback+0x64>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d109      	bne.n	8001214 <printTimerCallback+0x40>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <printTimerCallback+0x6c>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	f004 fb4b 	bl	80058a8 <xTaskGenericNotify>
}
 8001212:	e00c      	b.n	800122e <printTimerCallback+0x5a>
	else if(currMode == mSetAlarm){
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <printTimerCallback+0x64>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d108      	bne.n	800122e <printTimerCallback+0x5a>
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <printTimerCallback+0x70>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	f004 fb3d 	bl	80058a8 <xTaskGenericNotify>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000110 	.word	0x20000110
 800123c:	200000fc 	.word	0x200000fc
 8001240:	20000100 	.word	0x20000100
 8001244:	20000104 	.word	0x20000104

08001248 <vApplicationIdleHook>:

void vApplicationIdleHook(void){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	481d      	ldr	r0, [pc, #116]	; (80012c8 <vApplicationIdleHook+0x80>)
 8001252:	f000 fd89 	bl	8001d68 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d122      	bne.n	80012a2 <vApplicationIdleHook+0x5a>
		if (currMode == mDisplayRtc){
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <vApplicationIdleHook+0x84>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d107      	bne.n	8001274 <vApplicationIdleHook+0x2c>
			currMode = mSetRtc;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <vApplicationIdleHook+0x84>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 800126a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800126e:	f000 faf1 	bl	8001854 <HAL_Delay>
 8001272:	e016      	b.n	80012a2 <vApplicationIdleHook+0x5a>
		}
		else if (currMode == mSetRtc){
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <vApplicationIdleHook+0x84>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <vApplicationIdleHook+0x44>
			currMode = mSetAlarm;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <vApplicationIdleHook+0x84>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001282:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001286:	f000 fae5 	bl	8001854 <HAL_Delay>
 800128a:	e00a      	b.n	80012a2 <vApplicationIdleHook+0x5a>
		}
		else if(currMode == mSetAlarm){
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <vApplicationIdleHook+0x84>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d106      	bne.n	80012a2 <vApplicationIdleHook+0x5a>
			currMode = mDisplayRtc;
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <vApplicationIdleHook+0x84>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 800129a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800129e:	f000 fad9 	bl	8001854 <HAL_Delay>
		}
	}

	if (currMode == mSetRtc) {
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <vApplicationIdleHook+0x84>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10c      	bne.n	80012c4 <vApplicationIdleHook+0x7c>
		if(currSet <= 2){
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <vApplicationIdleHook+0x88>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d803      	bhi.n	80012ba <vApplicationIdleHook+0x72>
			handleSetTime(&setTime);
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <vApplicationIdleHook+0x8c>)
 80012b4:	f000 f812 	bl	80012dc <handleSetTime>
 80012b8:	e002      	b.n	80012c0 <vApplicationIdleHook+0x78>
		}
		else {
			handleSetDate(&setDate);
 80012ba:	4807      	ldr	r0, [pc, #28]	; (80012d8 <vApplicationIdleHook+0x90>)
 80012bc:	f000 f88a 	bl	80013d4 <handleSetDate>
		}
		handleSelect();
 80012c0:	f000 f900 	bl	80014c4 <handleSelect>
	}
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40020400 	.word	0x40020400
 80012cc:	20000110 	.word	0x20000110
 80012d0:	20000111 	.word	0x20000111
 80012d4:	20000130 	.word	0x20000130
 80012d8:	2000012c 	.word	0x2000012c

080012dc <handleSetTime>:

static void handleSetTime(RTC_TimeTypeDef *setTime){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 80012e4:	2120      	movs	r1, #32
 80012e6:	4839      	ldr	r0, [pc, #228]	; (80013cc <handleSetTime+0xf0>)
 80012e8:	f000 fd3e 	bl	8001d68 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d130      	bne.n	8001354 <handleSetTime+0x78>
		if(currSet == sHour){
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <handleSetTime+0xf4>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10a      	bne.n	8001310 <handleSetTime+0x34>
			if(setTime->Hours < 23) setTime->Hours++;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b16      	cmp	r3, #22
 8001300:	d823      	bhi.n	800134a <handleSetTime+0x6e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e01c      	b.n	800134a <handleSetTime+0x6e>
		}
		else if(currSet == sMin){
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <handleSetTime+0xf4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10a      	bne.n	800132e <handleSetTime+0x52>
			if(setTime->Minutes < 59) setTime->Minutes++;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	2b3a      	cmp	r3, #58	; 0x3a
 800131e:	d814      	bhi.n	800134a <handleSetTime+0x6e>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	785b      	ldrb	r3, [r3, #1]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	705a      	strb	r2, [r3, #1]
 800132c:	e00d      	b.n	800134a <handleSetTime+0x6e>
		}
		else if(currSet ==sSec){
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <handleSetTime+0xf4>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d109      	bne.n	800134a <handleSetTime+0x6e>
			if(setTime->Seconds < 59) setTime->Seconds++;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	2b3a      	cmp	r3, #58	; 0x3a
 800133c:	d805      	bhi.n	800134a <handleSetTime+0x6e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	789b      	ldrb	r3, [r3, #2]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	709a      	strb	r2, [r3, #2]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 800134a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800134e:	f000 fa81 	bl	8001854 <HAL_Delay>
		else if(currSet == sSec){
			if(setTime->Seconds > 0) setTime->Seconds--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 8001352:	e036      	b.n	80013c2 <handleSetTime+0xe6>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	481d      	ldr	r0, [pc, #116]	; (80013cc <handleSetTime+0xf0>)
 8001358:	f000 fd06 	bl	8001d68 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	2b01      	cmp	r3, #1
 8001360:	d12f      	bne.n	80013c2 <handleSetTime+0xe6>
		if(currSet == sHour){
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <handleSetTime+0xf4>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10a      	bne.n	8001380 <handleSetTime+0xa4>
			if(setTime->Hours > 0) setTime->Hours--;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d023      	beq.n	80013ba <handleSetTime+0xde>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	3b01      	subs	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e01c      	b.n	80013ba <handleSetTime+0xde>
		else if(currSet == sMin){
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <handleSetTime+0xf4>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10a      	bne.n	800139e <handleSetTime+0xc2>
			if(setTime->Minutes > 0) setTime->Minutes--;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	785b      	ldrb	r3, [r3, #1]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d014      	beq.n	80013ba <handleSetTime+0xde>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	3b01      	subs	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	705a      	strb	r2, [r3, #1]
 800139c:	e00d      	b.n	80013ba <handleSetTime+0xde>
		else if(currSet == sSec){
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <handleSetTime+0xf4>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d109      	bne.n	80013ba <handleSetTime+0xde>
			if(setTime->Seconds > 0) setTime->Seconds--;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <handleSetTime+0xde>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	789b      	ldrb	r3, [r3, #2]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	709a      	strb	r2, [r3, #2]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80013ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013be:	f000 fa49 	bl	8001854 <HAL_Delay>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000
 80013d0:	20000111 	.word	0x20000111

080013d4 <handleSetDate>:

static void handleSetDate(RTC_DateTypeDef *setDate){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 80013dc:	2120      	movs	r1, #32
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <handleSetDate+0xe8>)
 80013e0:	f000 fcc2 	bl	8001d68 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d12c      	bne.n	8001444 <handleSetDate+0x70>
		if(currSet == sMonth){
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <handleSetDate+0xec>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d10a      	bne.n	8001408 <handleSetDate+0x34>
			if(setDate->Month < 11) setDate->Month++;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	2b0a      	cmp	r3, #10
 80013f8:	d81f      	bhi.n	800143a <handleSetDate+0x66>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	3301      	adds	r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	705a      	strb	r2, [r3, #1]
 8001406:	e018      	b.n	800143a <handleSetDate+0x66>
		}
		else if(currSet == sDay) {
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <handleSetDate+0xec>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d10a      	bne.n	8001426 <handleSetDate+0x52>
			if(setDate->Date < 30) setDate->Date++;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	2b1d      	cmp	r3, #29
 8001416:	d810      	bhi.n	800143a <handleSetDate+0x66>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	709a      	strb	r2, [r3, #2]
 8001424:	e009      	b.n	800143a <handleSetDate+0x66>
		}
		else if(currSet == sYear) {
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <handleSetDate+0xec>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d105      	bne.n	800143a <handleSetDate+0x66>
			if(setDate->Year < 998) setDate->Year++;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	3301      	adds	r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	70da      	strb	r2, [r3, #3]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 800143a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800143e:	f000 fa09 	bl	8001854 <HAL_Delay>
		else if(currSet == sYear) {
			if(setDate->Year > 0) setDate->Year--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 8001442:	e036      	b.n	80014b2 <handleSetDate+0xde>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <handleSetDate+0xe8>)
 8001448:	f000 fc8e 	bl	8001d68 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	d12f      	bne.n	80014b2 <handleSetDate+0xde>
		if(currSet == sMonth){
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <handleSetDate+0xec>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d10a      	bne.n	8001470 <handleSetDate+0x9c>
			if(setDate->Month > 1) setDate->Month--;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d923      	bls.n	80014aa <handleSetDate+0xd6>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	3b01      	subs	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	705a      	strb	r2, [r3, #1]
 800146e:	e01c      	b.n	80014aa <handleSetDate+0xd6>
		else if(currSet == sDay) {
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <handleSetDate+0xec>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d10a      	bne.n	800148e <handleSetDate+0xba>
			if(setDate->Date > 1) setDate->Date--;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d914      	bls.n	80014aa <handleSetDate+0xd6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	3b01      	subs	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	709a      	strb	r2, [r3, #2]
 800148c:	e00d      	b.n	80014aa <handleSetDate+0xd6>
		else if(currSet == sYear) {
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <handleSetDate+0xec>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d109      	bne.n	80014aa <handleSetDate+0xd6>
			if(setDate->Year > 0) setDate->Year--;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <handleSetDate+0xd6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	70da      	strb	r2, [r3, #3]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80014aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ae:	f000 f9d1 	bl	8001854 <HAL_Delay>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020000 	.word	0x40020000
 80014c0:	20000111 	.word	0x20000111

080014c4 <handleSelect>:

static void handleSelect(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET){
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <handleSelect+0x78>)
 80014ce:	f000 fc4b 	bl	8001d68 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d12f      	bne.n	8001538 <handleSelect+0x74>
		switch(currSet){
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <handleSelect+0x7c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d827      	bhi.n	8001530 <handleSelect+0x6c>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <handleSelect+0x24>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001509 	.word	0x08001509
 80014f0:	08001511 	.word	0x08001511
 80014f4:	08001521 	.word	0x08001521
 80014f8:	08001519 	.word	0x08001519
 80014fc:	08001529 	.word	0x08001529
		case sHour:
			currSet = sMin;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <handleSelect+0x7c>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
			break;
 8001506:	e013      	b.n	8001530 <handleSelect+0x6c>
		case sMin:
			currSet = sSec;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <handleSelect+0x7c>)
 800150a:	2202      	movs	r2, #2
 800150c:	701a      	strb	r2, [r3, #0]
			break;
 800150e:	e00f      	b.n	8001530 <handleSelect+0x6c>
		case sSec:
			currSet = sMonth;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <handleSelect+0x7c>)
 8001512:	2204      	movs	r2, #4
 8001514:	701a      	strb	r2, [r3, #0]
			break;
 8001516:	e00b      	b.n	8001530 <handleSelect+0x6c>
		case sMonth:
			currSet = sDay;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <handleSelect+0x7c>)
 800151a:	2203      	movs	r2, #3
 800151c:	701a      	strb	r2, [r3, #0]
			break;
 800151e:	e007      	b.n	8001530 <handleSelect+0x6c>
		case sDay:
			currSet = sYear;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <handleSelect+0x7c>)
 8001522:	2205      	movs	r2, #5
 8001524:	701a      	strb	r2, [r3, #0]
			break;
 8001526:	e003      	b.n	8001530 <handleSelect+0x6c>
		case sYear:
			currSet = sHour;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <handleSelect+0x7c>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
			break;
 800152e:	bf00      	nop
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001530:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001534:	f000 f98e 	bl	8001854 <HAL_Delay>
	}
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40020400 	.word	0x40020400
 8001540:	20000111 	.word	0x20000111

08001544 <rtcUpdateTaskHandler>:

void rtcUpdateTaskHandler(void *parameters){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2300      	movs	r3, #0
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2000      	movs	r0, #0
 800155a:	f004 f91d 	bl	8005798 <xTaskGenericNotifyWait>

		memset( &rtcDate,0,sizeof(rtcDate) );
 800155e:	2204      	movs	r2, #4
 8001560:	2100      	movs	r1, #0
 8001562:	482f      	ldr	r0, [pc, #188]	; (8001620 <rtcUpdateTaskHandler+0xdc>)
 8001564:	f007 fb76 	bl	8008c54 <memset>
		memset( &rtcTime,0,sizeof(rtcTime) );
 8001568:	2214      	movs	r2, #20
 800156a:	2100      	movs	r1, #0
 800156c:	482d      	ldr	r0, [pc, #180]	; (8001624 <rtcUpdateTaskHandler+0xe0>)
 800156e:	f007 fb71 	bl	8008c54 <memset>

		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8001572:	2200      	movs	r2, #0
 8001574:	492b      	ldr	r1, [pc, #172]	; (8001624 <rtcUpdateTaskHandler+0xe0>)
 8001576:	482c      	ldr	r0, [pc, #176]	; (8001628 <rtcUpdateTaskHandler+0xe4>)
 8001578:	f001 fadc 	bl	8002b34 <HAL_RTC_GetTime>
		HAL_RTC_GetTime(&hrtc, &setTime, RTC_FORMAT_BIN); // sets time for "set" mode
 800157c:	2200      	movs	r2, #0
 800157e:	492b      	ldr	r1, [pc, #172]	; (800162c <rtcUpdateTaskHandler+0xe8>)
 8001580:	4829      	ldr	r0, [pc, #164]	; (8001628 <rtcUpdateTaskHandler+0xe4>)
 8001582:	f001 fad7 	bl	8002b34 <HAL_RTC_GetTime>

		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8001586:	2200      	movs	r2, #0
 8001588:	4925      	ldr	r1, [pc, #148]	; (8001620 <rtcUpdateTaskHandler+0xdc>)
 800158a:	4827      	ldr	r0, [pc, #156]	; (8001628 <rtcUpdateTaskHandler+0xe4>)
 800158c:	f001 fbb4 	bl	8002cf8 <HAL_RTC_GetDate>
		HAL_RTC_GetDate(&hrtc, &setDate, RTC_FORMAT_BIN); // sets date for "set" mode
 8001590:	2200      	movs	r2, #0
 8001592:	4927      	ldr	r1, [pc, #156]	; (8001630 <rtcUpdateTaskHandler+0xec>)
 8001594:	4824      	ldr	r0, [pc, #144]	; (8001628 <rtcUpdateTaskHandler+0xe4>)
 8001596:	f001 fbaf 	bl	8002cf8 <HAL_RTC_GetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4825      	ldr	r0, [pc, #148]	; (8001634 <rtcUpdateTaskHandler+0xf0>)
 80015a0:	f007 fb58 	bl	8008c54 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <rtcUpdateTaskHandler+0xe0>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <rtcUpdateTaskHandler+0xe0>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <rtcUpdateTaskHandler+0xe0>)
 80015b2:	789b      	ldrb	r3, [r3, #2]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	460b      	mov	r3, r1
 80015b8:	491f      	ldr	r1, [pc, #124]	; (8001638 <rtcUpdateTaskHandler+0xf4>)
 80015ba:	481e      	ldr	r0, [pc, #120]	; (8001634 <rtcUpdateTaskHandler+0xf0>)
 80015bc:	f007 fb1a 	bl	8008bf4 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <rtcUpdateTaskHandler+0xf8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 faa5 	bl	8008b14 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <rtcUpdateTaskHandler+0xfc>)
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	4919      	ldr	r1, [pc, #100]	; (800163c <rtcUpdateTaskHandler+0xf8>)
 80015d6:	f002 fc1b 	bl	8003e10 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4815      	ldr	r0, [pc, #84]	; (8001634 <rtcUpdateTaskHandler+0xf0>)
 80015e0:	f007 fb38 	bl	8008c54 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <rtcUpdateTaskHandler+0xdc>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <rtcUpdateTaskHandler+0xdc>)
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <rtcUpdateTaskHandler+0xdc>)
 80015f2:	78db      	ldrb	r3, [r3, #3]
 80015f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	460b      	mov	r3, r1
 80015fc:	4911      	ldr	r1, [pc, #68]	; (8001644 <rtcUpdateTaskHandler+0x100>)
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <rtcUpdateTaskHandler+0xf0>)
 8001600:	f007 faf8 	bl	8008bf4 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <rtcUpdateTaskHandler+0xf8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fa83 	bl	8008b14 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <rtcUpdateTaskHandler+0xfc>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	4908      	ldr	r1, [pc, #32]	; (800163c <rtcUpdateTaskHandler+0xf8>)
 800161a:	f002 fbf9 	bl	8003e10 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800161e:	e795      	b.n	800154c <rtcUpdateTaskHandler+0x8>
 8001620:	20000114 	.word	0x20000114
 8001624:	20000118 	.word	0x20000118
 8001628:	2000008c 	.word	0x2000008c
 800162c:	20000130 	.word	0x20000130
 8001630:	2000012c 	.word	0x2000012c
 8001634:	20000190 	.word	0x20000190
 8001638:	080095d0 	.word	0x080095d0
 800163c:	20000004 	.word	0x20000004
 8001640:	20000108 	.word	0x20000108
 8001644:	080095e0 	.word	0x080095e0

08001648 <rtcSetTaskHandler>:

	}
}

void rtcSetTaskHandler(void *parameters){
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f004 f89b 	bl	8005798 <xTaskGenericNotifyWait>

		HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 8001662:	2200      	movs	r2, #0
 8001664:	4920      	ldr	r1, [pc, #128]	; (80016e8 <rtcSetTaskHandler+0xa0>)
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <rtcSetTaskHandler+0xa4>)
 8001668:	f001 f9ca 	bl	8002a00 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN);
 800166c:	2200      	movs	r2, #0
 800166e:	4920      	ldr	r1, [pc, #128]	; (80016f0 <rtcSetTaskHandler+0xa8>)
 8001670:	481e      	ldr	r0, [pc, #120]	; (80016ec <rtcSetTaskHandler+0xa4>)
 8001672:	f001 fabd 	bl	8002bf0 <HAL_RTC_SetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	481e      	ldr	r0, [pc, #120]	; (80016f4 <rtcSetTaskHandler+0xac>)
 800167c:	f007 faea 	bl	8008c54 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",setTime.Hours, setTime.Minutes, setTime.Seconds);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <rtcSetTaskHandler+0xa0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <rtcSetTaskHandler+0xa0>)
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	4619      	mov	r1, r3
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <rtcSetTaskHandler+0xa0>)
 800168e:	789b      	ldrb	r3, [r3, #2]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	460b      	mov	r3, r1
 8001694:	4918      	ldr	r1, [pc, #96]	; (80016f8 <rtcSetTaskHandler+0xb0>)
 8001696:	4817      	ldr	r0, [pc, #92]	; (80016f4 <rtcSetTaskHandler+0xac>)
 8001698:	f007 faac 	bl	8008bf4 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <rtcSetTaskHandler+0xb4>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	f04f 32ff 	mov.w	r2, #4294967295
 80016a6:	4916      	ldr	r1, [pc, #88]	; (8001700 <rtcSetTaskHandler+0xb8>)
 80016a8:	f002 fbb2 	bl	8003e10 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80016ac:	2228      	movs	r2, #40	; 0x28
 80016ae:	2100      	movs	r1, #0
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <rtcSetTaskHandler+0xac>)
 80016b2:	f007 facf 	bl	8008c54 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", setDate.Month, setDate.Date, 2000 + setDate.Year);
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <rtcSetTaskHandler+0xa8>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <rtcSetTaskHandler+0xa8>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <rtcSetTaskHandler+0xa8>)
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	490d      	ldr	r1, [pc, #52]	; (8001704 <rtcSetTaskHandler+0xbc>)
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <rtcSetTaskHandler+0xac>)
 80016d2:	f007 fa8f 	bl	8008bf4 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <rtcSetTaskHandler+0xb4>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <rtcSetTaskHandler+0xb8>)
 80016e2:	f002 fb95 	bl	8003e10 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016e6:	e7b3      	b.n	8001650 <rtcSetTaskHandler+0x8>
 80016e8:	20000130 	.word	0x20000130
 80016ec:	2000008c 	.word	0x2000008c
 80016f0:	2000012c 	.word	0x2000012c
 80016f4:	200001b8 	.word	0x200001b8
 80016f8:	080095d0 	.word	0x080095d0
 80016fc:	20000108 	.word	0x20000108
 8001700:	20000008 	.word	0x20000008
 8001704:	080095e0 	.word	0x080095e0

08001708 <alarmSetTaskHandler>:

	}
}

void alarmSetTaskHandler(void *parameters){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af02      	add	r7, sp, #8
 800170e:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f004 f83b 	bl	8005798 <xTaskGenericNotifyWait>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001722:	2228      	movs	r2, #40	; 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	4810      	ldr	r0, [pc, #64]	; (8001768 <alarmSetTaskHandler+0x60>)
 8001728:	f007 fa94 	bl	8008c54 <memset>
		sprintf( (char*) strBuffer, "Alarm" );
 800172c:	490f      	ldr	r1, [pc, #60]	; (800176c <alarmSetTaskHandler+0x64>)
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <alarmSetTaskHandler+0x60>)
 8001730:	f007 fa60 	bl	8008bf4 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <alarmSetTaskHandler+0x68>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	f04f 32ff 	mov.w	r2, #4294967295
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <alarmSetTaskHandler+0x6c>)
 8001740:	f002 fb66 	bl	8003e10 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001744:	2228      	movs	r2, #40	; 0x28
 8001746:	2100      	movs	r1, #0
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <alarmSetTaskHandler+0x60>)
 800174a:	f007 fa83 	bl	8008c54 <memset>
		sprintf( (char*) strBuffer, "Mode" );
 800174e:	490a      	ldr	r1, [pc, #40]	; (8001778 <alarmSetTaskHandler+0x70>)
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <alarmSetTaskHandler+0x60>)
 8001752:	f007 fa4f 	bl	8008bf4 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <alarmSetTaskHandler+0x68>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	4904      	ldr	r1, [pc, #16]	; (8001774 <alarmSetTaskHandler+0x6c>)
 8001762:	f002 fb55 	bl	8003e10 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001766:	e7d3      	b.n	8001710 <alarmSetTaskHandler+0x8>
 8001768:	200001e0 	.word	0x200001e0
 800176c:	080095f0 	.word	0x080095f0
 8001770:	20000108 	.word	0x20000108
 8001774:	2000000c 	.word	0x2000000c
 8001778:	080095f8 	.word	0x080095f8

0800177c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800177c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001782:	490e      	ldr	r1, [pc, #56]	; (80017bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001798:	4c0b      	ldr	r4, [pc, #44]	; (80017c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a6:	f7ff fcbb 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017aa:	f007 fa61 	bl	8008c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ae:	f7ff f867 	bl	8000880 <main>
  bx  lr    
 80017b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017c0:	08009758 	.word	0x08009758
  ldr r2, =_sbss
 80017c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017c8:	2001478c 	.word	0x2001478c

080017cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <HAL_Init+0x40>)
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_Init+0x40>)
 80017e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_Init+0x40>)
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 f8fc 	bl	80019f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fbbc 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fb42 	bl	8000e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000014 	.word	0x20000014
 8001838:	20000208 	.word	0x20000208

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000208 	.word	0x20000208

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000014 	.word	0x20000014

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff4c 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1e:	f7ff ff61 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	6978      	ldr	r0, [r7, #20]
 8001a2a:	f7ff ffb1 	bl	8001990 <NVIC_EncodePriority>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff80 	bl	800193c <__NVIC_SetPriority>
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff54 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e159      	b.n	8001d30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8148 	bne.w	8001d2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a2 	beq.w	8001d2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x202>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2f4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x1fe>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <HAL_GPIO_Init+0x2f8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x1fa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <HAL_GPIO_Init+0x2fc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x1f6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a45      	ldr	r2, [pc, #276]	; (8001d60 <HAL_GPIO_Init+0x300>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x1f2>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x204>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_GPIO_Init+0x2ec>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_GPIO_Init+0x304>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f aea2 	bls.w	8001a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e267      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d075      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dea:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d112      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b82      	ldr	r3, [pc, #520]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0e:	d10b      	bne.n	8001e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	4b7e      	ldr	r3, [pc, #504]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05b      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d157      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e242      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d106      	bne.n	8001e40 <HAL_RCC_OscConfig+0x74>
 8001e32:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	e01d      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e00b      	b.n	8001e7c <HAL_RCC_OscConfig+0xb0>
 8001e64:	4b69      	ldr	r3, [pc, #420]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a68      	ldr	r2, [pc, #416]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b66      	ldr	r3, [pc, #408]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a65      	ldr	r2, [pc, #404]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fcda 	bl	800183c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fcd6 	bl	800183c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e207      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	4b5b      	ldr	r3, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0xc0>
 8001eaa:	e014      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fcc6 	bl	800183c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fcc2 	bl	800183c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1f3      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xe8>
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d063      	beq.n	8001faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d11c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d116      	bne.n	8001f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d005      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1c7      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4937      	ldr	r1, [pc, #220]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	e03a      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d020      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3c:	4b34      	ldr	r3, [pc, #208]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fc7b 	bl	800183c <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fc77 	bl	800183c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e1a8      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x244>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff fc5a 	bl	800183c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc56 	bl	800183c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e187      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d036      	beq.n	8002024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fc3a 	bl	800183c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fc36 	bl	800183c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e167      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x240>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x200>
 8001fea:	e01b      	b.n	8002024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x248>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff fc23 	bl	800183c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e00e      	b.n	8002018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fc1f 	bl	800183c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d907      	bls.n	8002018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e150      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ea      	bne.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b81      	ldr	r3, [pc, #516]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7c      	ldr	r2, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b77      	ldr	r3, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b74      	ldr	r3, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a73      	ldr	r2, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff fbdf 	bl	800183c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff fbdb 	bl	800183c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e10c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x474>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ea>
 80020a8:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x30c>
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x324>
 80020d8:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a54      	ldr	r2, [pc, #336]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff fba0 	bl	800183c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff fb9c 	bl	800183c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0cb      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x334>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff fb8a 	bl	800183c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff fb86 	bl	800183c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0b5      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a38      	ldr	r2, [pc, #224]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80a1 	beq.w	80022ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216a:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_OscConfig+0x470>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d05c      	beq.n	8002230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d141      	bne.n	8002202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fb5a 	bl	800183c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fb56 	bl	800183c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e087      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69da      	ldr	r2, [r3, #28]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	3b01      	subs	r3, #1
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fb2f 	bl	800183c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff fb2b 	bl	800183c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x470>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x416>
 8002200:	e054      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fb18 	bl	800183c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fb14 	bl	800183c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e045      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
 800222e:	e03d      	b.n	80022ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e038      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <HAL_RCC_OscConfig+0x4ec>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d121      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d11a      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800227e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002280:	4293      	cmp	r3, r2
 8002282:	d111      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	3b01      	subs	r3, #1
 8002292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0cc      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d90c      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800231a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d044      	beq.n	80023dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d119      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	2b03      	cmp	r3, #3
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e067      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b37      	ldr	r3, [pc, #220]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4934      	ldr	r1, [pc, #208]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ac:	f7ff fa46 	bl	800183c <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff fa42 	bl	800183c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e04f      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d20c      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1b8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fd8a 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00
 8002478:	40023800 	.word	0x40023800
 800247c:	080096d8 	.word	0x080096d8
 8002480:	20000000 	.word	0x20000000
 8002484:	20000010 	.word	0x20000010

08002488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b094      	sub	sp, #80	; 0x50
 800248e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	647b      	str	r3, [r7, #68]	; 0x44
 8002494:	2300      	movs	r3, #0
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002498:	2300      	movs	r3, #0
 800249a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a0:	4b79      	ldr	r3, [pc, #484]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d00d      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x40>
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	f200 80e1 	bhi.w	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x34>
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ba:	e0db      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b73      	ldr	r3, [pc, #460]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 80024be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024c0:	e0db      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b73      	ldr	r3, [pc, #460]	; (8002690 <HAL_RCC_GetSysClockFreq+0x208>)
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024c6:	e0d8      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024d2:	4b6d      	ldr	r3, [pc, #436]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	2200      	movs	r2, #0
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
 80024f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024fa:	4622      	mov	r2, r4
 80024fc:	462b      	mov	r3, r5
 80024fe:	f04f 0000 	mov.w	r0, #0
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	0159      	lsls	r1, r3, #5
 8002508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800250c:	0150      	lsls	r0, r2, #5
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4621      	mov	r1, r4
 8002514:	1a51      	subs	r1, r2, r1
 8002516:	6139      	str	r1, [r7, #16]
 8002518:	4629      	mov	r1, r5
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800252c:	4659      	mov	r1, fp
 800252e:	018b      	lsls	r3, r1, #6
 8002530:	4651      	mov	r1, sl
 8002532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002536:	4651      	mov	r1, sl
 8002538:	018a      	lsls	r2, r1, #6
 800253a:	4651      	mov	r1, sl
 800253c:	ebb2 0801 	subs.w	r8, r2, r1
 8002540:	4659      	mov	r1, fp
 8002542:	eb63 0901 	sbc.w	r9, r3, r1
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	4623      	mov	r3, r4
 8002560:	eb18 0303 	adds.w	r3, r8, r3
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	462b      	mov	r3, r5
 8002568:	eb49 0303 	adc.w	r3, r9, r3
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800257a:	4629      	mov	r1, r5
 800257c:	024b      	lsls	r3, r1, #9
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002584:	4621      	mov	r1, r4
 8002586:	024a      	lsls	r2, r1, #9
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002598:	f7fd feca 	bl	8000330 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025a4:	e058      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a6:	4b38      	ldr	r3, [pc, #224]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	099b      	lsrs	r3, r3, #6
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	4611      	mov	r1, r2
 80025b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	0159      	lsls	r1, r3, #5
 80025ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d2:	0150      	lsls	r0, r2, #5
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4641      	mov	r1, r8
 80025da:	ebb2 0a01 	subs.w	sl, r2, r1
 80025de:	4649      	mov	r1, r9
 80025e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f8:	ebb2 040a 	subs.w	r4, r2, sl
 80025fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4643      	mov	r3, r8
 8002616:	18e3      	adds	r3, r4, r3
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	464b      	mov	r3, r9
 800261c:	eb45 0303 	adc.w	r3, r5, r3
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262e:	4629      	mov	r1, r5
 8002630:	028b      	lsls	r3, r1, #10
 8002632:	4621      	mov	r1, r4
 8002634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002638:	4621      	mov	r1, r4
 800263a:	028a      	lsls	r2, r1, #10
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002642:	2200      	movs	r2, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	61fa      	str	r2, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	f7fd fe70 	bl	8000330 <__aeabi_uldivmod>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4613      	mov	r3, r2
 8002656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0x200>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetSysClockFreq+0x204>)
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800267c:	4618      	mov	r0, r3
 800267e:	3750      	adds	r7, #80	; 0x50
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	007a1200 	.word	0x007a1200

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000000 	.word	0x20000000

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	080096e8 	.word	0x080096e8

080026d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	220f      	movs	r2, #15
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_GetClockConfig+0x5c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCC_GetClockConfig+0x5c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCC_GetClockConfig+0x5c>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_GetClockConfig+0x5c>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCC_GetClockConfig+0x60>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	601a      	str	r2, [r3, #0]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40023c00 	.word	0x40023c00

08002738 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800275c:	2b00      	cmp	r3, #0
 800275e:	d035      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002766:	f7ff f869 	bl	800183c <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800276e:	f7ff f865 	bl	800183c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0ba      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002780:	4b60      	ldr	r3, [pc, #384]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	019a      	lsls	r2, r3, #6
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	071b      	lsls	r3, r3, #28
 8002798:	495a      	ldr	r1, [pc, #360]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027a6:	f7ff f849 	bl	800183c <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027ae:	f7ff f845 	bl	800183c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09a      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c0:	4b50      	ldr	r3, [pc, #320]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8083 	beq.w	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a48      	ldr	r2, [pc, #288]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027f6:	4b44      	ldr	r3, [pc, #272]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a43      	ldr	r2, [pc, #268]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002802:	f7ff f81b 	bl	800183c <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff f817 	bl	800183c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e06c      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02f      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	429a      	cmp	r2, r3
 8002844:	d028      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800285c:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d114      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe ffe5 	bl	800183c <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe ffe1 	bl	800183c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e034      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	4912      	ldr	r1, [pc, #72]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
 80028c0:	e005      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028cc:	6093      	str	r3, [r2, #8]
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028da:	490a      	ldr	r1, [pc, #40]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7c1a      	ldrb	r2, [r3, #16]
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	42470068 	.word	0x42470068
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470e40 	.word	0x42470e40
 8002910:	424711e0 	.word	0x424711e0

08002914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e066      	b.n	80029f8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7f5b      	ldrb	r3, [r3, #29]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fad0 	bl	8000ee0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22ca      	movs	r2, #202	; 0xca
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2253      	movs	r2, #83	; 0x53
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb6f 	bl	800303a <RTC_EnterInitMode>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d12c      	bne.n	80029c0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	68d2      	ldr	r2, [r2, #12]
 80029a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb76 	bl	80030a8 <RTC_ExitInitMode>
 80029bc:	4603      	mov	r3, r0
 80029be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	22ff      	movs	r2, #255	; 0xff
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	7f1b      	ldrb	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_RTC_SetTime+0x1c>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e087      	b.n	8002b2c <HAL_RTC_SetTime+0x12c>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2202      	movs	r2, #2
 8002a26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d126      	bne.n	8002a7c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fb53 	bl	80030f2 <RTC_ByteToBcd2>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fb4c 	bl	80030f2 <RTC_ByteToBcd2>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a5e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	789b      	ldrb	r3, [r3, #2]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fb44 	bl	80030f2 <RTC_ByteToBcd2>
 8002a6a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	78db      	ldrb	r3, [r3, #3]
 8002a74:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e018      	b.n	8002aae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002a9c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002aa2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	78db      	ldrb	r3, [r3, #3]
 8002aa8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	22ca      	movs	r2, #202	; 0xca
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2253      	movs	r2, #83	; 0x53
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fabb 	bl	800303a <RTC_EnterInitMode>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d120      	bne.n	8002b10 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ad8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002adc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 face 	bl	80030a8 <RTC_ExitInitMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	771a      	strb	r2, [r3, #28]

  return status;
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	0d9b      	lsrs	r3, r3, #22
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11a      	bne.n	8002be6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fab9 	bl	800312c <RTC_Bcd2ToByte>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fab0 	bl	800312c <RTC_Bcd2ToByte>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	789b      	ldrb	r3, [r3, #2]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 faa7 	bl	800312c <RTC_Bcd2ToByte>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	7f1b      	ldrb	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_RTC_SetDate+0x1c>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e071      	b.n	8002cf0 <HAL_RTC_SetDate+0x100>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_RTC_SetDate+0x4c>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	785b      	ldrb	r3, [r3, #1]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	785b      	ldrb	r3, [r3, #1]
 8002c2e:	f023 0310 	bic.w	r3, r3, #16
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	330a      	adds	r3, #10
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11c      	bne.n	8002c7c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	78db      	ldrb	r3, [r3, #3]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fa53 	bl	80030f2 <RTC_ByteToBcd2>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fa4c 	bl	80030f2 <RTC_ByteToBcd2>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c5e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	789b      	ldrb	r3, [r3, #2]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa44 	bl	80030f2 <RTC_ByteToBcd2>
 8002c6a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c6c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e00e      	b.n	8002c9a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	78db      	ldrb	r3, [r3, #3]
 8002c80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002c88:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002c8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	22ca      	movs	r2, #202	; 0xca
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2253      	movs	r2, #83	; 0x53
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f9c5 	bl	800303a <RTC_EnterInitMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f9ec 	bl	80030a8 <RTC_ExitInitMode>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	771a      	strb	r2, [r3, #28]

  return status;
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}

08002cf8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	0b5b      	lsrs	r3, r3, #13
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11a      	bne.n	8002d8c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	78db      	ldrb	r3, [r3, #3]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9e6 	bl	800312c <RTC_Bcd2ToByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	785b      	ldrb	r3, [r3, #1]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f9dd 	bl	800312c <RTC_Bcd2ToByte>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	789b      	ldrb	r3, [r3, #2]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f9d4 	bl	800312c <RTC_Bcd2ToByte>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002d96:	b590      	push	{r4, r7, lr}
 8002d98:	b089      	sub	sp, #36	; 0x24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	7f1b      	ldrb	r3, [r3, #28]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_RTC_SetAlarm+0x24>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e113      	b.n	8002fe2 <HAL_RTC_SetAlarm+0x24c>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d137      	bne.n	8002e3c <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f984 	bl	80030f2 <RTC_ByteToBcd2>
 8002dea:	4603      	mov	r3, r0
 8002dec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f97d 	bl	80030f2 <RTC_ByteToBcd2>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002dfc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	789b      	ldrb	r3, [r3, #2]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f975 	bl	80030f2 <RTC_ByteToBcd2>
 8002e08:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002e14:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f967 	bl	80030f2 <RTC_ByteToBcd2>
 8002e24:	4603      	mov	r3, r0
 8002e26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e023      	b.n	8002e84 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e5c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002e62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	78db      	ldrb	r3, [r3, #3]
 8002e68:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002e6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002e74:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002e7a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	22ca      	movs	r2, #202	; 0xca
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2253      	movs	r2, #83	; 0x53
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea8:	d148      	bne.n	8002f3c <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb8:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002eda:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fcae 	bl	800183c <HAL_GetTick>
 8002ee0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ee2:	e013      	b.n	8002f0c <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ee4:	f7fe fcaa 	bl	800183c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef2:	d90b      	bls.n	8002f0c <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2203      	movs	r2, #3
 8002f00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e06a      	b.n	8002fe2 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0e4      	beq.n	8002ee4 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e047      	b.n	8002fcc <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f4a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe fc65 	bl	800183c <HAL_GetTick>
 8002f72:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002f74:	e013      	b.n	8002f9e <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f76:	f7fe fc61 	bl	800183c <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f84:	d90b      	bls.n	8002f9e <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2203      	movs	r2, #3
 8002f92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e021      	b.n	8002fe2 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0e4      	beq.n	8002f76 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}

08002fea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003004:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003006:	f7fe fc19 	bl	800183c <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800300c:	e009      	b.n	8003022 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800300e:	f7fe fc15 	bl	800183c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800301c:	d901      	bls.n	8003022 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e007      	b.n	8003032 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d122      	bne.n	800309e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003066:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003068:	f7fe fbe8 	bl	800183c <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800306e:	e00c      	b.n	800308a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003070:	f7fe fbe4 	bl	800183c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307e:	d904      	bls.n	800308a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2204      	movs	r2, #4
 8003084:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d102      	bne.n	800309e <RTC_EnterInitMode+0x64>
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d1e8      	bne.n	8003070 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10a      	bne.n	80030e8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ff89 	bl	8002fea <HAL_RTC_WaitForSynchro>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2204      	movs	r2, #4
 80030e2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003100:	e005      	b.n	800310e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3b0a      	subs	r3, #10
 800310c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b09      	cmp	r3, #9
 8003112:	d8f6      	bhi.n	8003102 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	b2da      	uxtb	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	4313      	orrs	r3, r2
 800311e:	b2db      	uxtb	r3, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4413      	add	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	b2da      	uxtb	r2, r3
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	4413      	add	r3, r2
 8003156:	b2db      	uxtb	r3, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e041      	b.n	80031fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fed4 	bl	8000f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f000 fae2 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e03c      	b.n	8003296 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_TIM_Base_Start+0xa0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_TIM_Base_Start+0x5c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d013      	beq.n	8003260 <HAL_TIM_Base_Start+0x5c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1a      	ldr	r2, [pc, #104]	; (80032a8 <HAL_TIM_Base_Start+0xa4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_Base_Start+0x5c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_TIM_Base_Start+0xa8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIM_Base_Start+0x5c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_TIM_Base_Start+0xac>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_Base_Start+0x5c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <HAL_TIM_Base_Start+0xb0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d010      	beq.n	8003294 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	e007      	b.n	8003294 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40014000 	.word	0x40014000

080032b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e044      	b.n	800335a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_TIM_Base_Start_IT+0xb0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x6c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d013      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x6c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_TIM_Base_Start_IT+0xb4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x6c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_TIM_Base_Start_IT+0xb8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x6c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_TIM_Base_Start_IT+0xbc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x6c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_TIM_Base_Start_IT+0xc0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	e007      	b.n	8003358 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010000 	.word	0x40010000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40000c00 	.word	0x40000c00
 8003378:	40014000 	.word	0x40014000

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0202 	mvn.w	r2, #2
 80033a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f9b5 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9a7 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f9b8 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0204 	mvn.w	r2, #4
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f98b 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f97d 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f98e 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f961 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f953 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f964 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2208      	movs	r2, #8
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f937 	bl	800372e <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f929 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f93a 	bl	8003742 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0201 	mvn.w	r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fcae 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fab2 	bl	8003a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f8ff 	bl	8003756 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d10e      	bne.n	8003584 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d107      	bne.n	8003584 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0220 	mvn.w	r2, #32
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa7c 	bl	8003a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_ConfigClockSource+0x1c>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0b4      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x186>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d03e      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0xd4>
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e6:	f200 8087 	bhi.w	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	f000 8086 	beq.w	80036fe <HAL_TIM_ConfigClockSource+0x172>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	d87f      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b70      	cmp	r3, #112	; 0x70
 80035fa:	d01a      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0xa6>
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d87b      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b60      	cmp	r3, #96	; 0x60
 8003602:	d050      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d877      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b50      	cmp	r3, #80	; 0x50
 800360a:	d03c      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xfa>
 800360c:	2b50      	cmp	r3, #80	; 0x50
 800360e:	d873      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d058      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d86f      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b30      	cmp	r3, #48	; 0x30
 800361a:	d064      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 800361c:	2b30      	cmp	r3, #48	; 0x30
 800361e:	d86b      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d060      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d867      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	2b10      	cmp	r3, #16
 800362e:	d05a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	e062      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6899      	ldr	r1, [r3, #8]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f000 f98d 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]
      break;
 800365e:	e04f      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f000 f976 	bl	8003960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003682:	609a      	str	r2, [r3, #8]
      break;
 8003684:	e03c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	461a      	mov	r2, r3
 8003694:	f000 f8ea 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2150      	movs	r1, #80	; 0x50
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f943 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036a4:	e02c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 f909 	bl	80038ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2160      	movs	r1, #96	; 0x60
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f933 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036c4:	e01c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 f8ca 	bl	800386c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2140      	movs	r1, #64	; 0x40
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f923 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036e4:	e00c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 f91a 	bl	800392a <TIM_ITRx_SetConfig>
      break;
 80036f6:	e003      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e000      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a34      	ldr	r2, [pc, #208]	; (8003850 <TIM_Base_SetConfig+0xe4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a31      	ldr	r2, [pc, #196]	; (8003854 <TIM_Base_SetConfig+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a30      	ldr	r2, [pc, #192]	; (8003858 <TIM_Base_SetConfig+0xec>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <TIM_Base_SetConfig+0xf0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a25      	ldr	r2, [pc, #148]	; (8003850 <TIM_Base_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01b      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d017      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <TIM_Base_SetConfig+0xe8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a21      	ldr	r2, [pc, #132]	; (8003858 <TIM_Base_SetConfig+0xec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a20      	ldr	r2, [pc, #128]	; (800385c <TIM_Base_SetConfig+0xf0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <TIM_Base_SetConfig+0xf4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <TIM_Base_SetConfig+0xf8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_Base_SetConfig+0xfc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a08      	ldr	r2, [pc, #32]	; (8003850 <TIM_Base_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d103      	bne.n	800383c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	615a      	str	r2, [r3, #20]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40010000 	.word	0x40010000
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800
 800385c:	40000c00 	.word	0x40000c00
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b087      	sub	sp, #28
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f023 0210 	bic.w	r2, r3, #16
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	031b      	lsls	r3, r3, #12
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	f043 0307 	orr.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	021a      	lsls	r2, r3, #8
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	431a      	orrs	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e050      	b.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d013      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10c      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	40014000 	.word	0x40014000

08003a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f103 0208 	add.w	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 0208 	add.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e00c      	b.n	8003b80 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <vListInsert+0x2e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d2f6      	bcs.n	8003b6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6852      	ldr	r2, [r2, #4]
 8003bd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d103      	bne.n	8003bec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003c16:	2301      	movs	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueGenericReset+0x2e>
        __asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
    }
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05d      	beq.n	8003cfc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2100      	movs	r1, #0
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d000      	beq.n	8003c5c <xQueueGenericReset+0x50>
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d14c      	bne.n	8003cfc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003c62:	f002 fcaf 	bl	80065c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6e:	6939      	ldr	r1, [r7, #16]
 8003c70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	441a      	add	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6939      	ldr	r1, [r7, #16]
 8003c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	441a      	add	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d114      	bne.n	8003ce2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01a      	beq.n	8003cf6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 fa89 	bl	80051dc <xTaskRemoveFromEventList>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003cd0:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <xQueueGenericReset+0x11c>)
 8003cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	e009      	b.n	8003cf6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fedc 	bl	8003aa4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	3324      	adds	r3, #36	; 0x24
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fed7 	bl	8003aa4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003cf6:	f002 fc95 	bl	8006624 <vPortExitCritical>
 8003cfa:	e001      	b.n	8003d00 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <xQueueGenericReset+0x110>
        __asm volatile
 8003d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0a:	f383 8811 	msr	BASEPRI, r3
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	60bb      	str	r3, [r7, #8]
    }
 8003d18:	bf00      	nop
 8003d1a:	e7fe      	b.n	8003d1a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003d1c:	697b      	ldr	r3, [r7, #20]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d02e      	beq.n	8003da2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003d44:	2100      	movs	r1, #0
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <xQueueGenericCreate+0x28>
 8003d52:	2101      	movs	r1, #1
 8003d54:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d123      	bne.n	8003da2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003d62:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003d66:	d81c      	bhi.n	8003da2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	3350      	adds	r3, #80	; 0x50
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fd48 	bl	800680c <pvPortMalloc>
 8003d7c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3350      	adds	r3, #80	; 0x50
 8003d8c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d8e:	79fa      	ldrb	r2, [r7, #7]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f814 	bl	8003dc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003da0:	e00d      	b.n	8003dbe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueGenericCreate+0x92>
        __asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
    }
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
    }
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e002      	b.n	8003dea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003df6:	2101      	movs	r1, #1
 8003df8:	69b8      	ldr	r0, [r7, #24]
 8003dfa:	f7ff ff07 	bl	8003c0c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueGenericSend+0x32>
        __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <xQueueGenericSend+0x40>
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <xQueueGenericSend+0x44>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <xQueueGenericSend+0x46>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <xQueueGenericSend+0x60>
        __asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d103      	bne.n	8003e7e <xQueueGenericSend+0x6e>
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <xQueueGenericSend+0x72>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <xQueueGenericSend+0x74>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <xQueueGenericSend+0x8e>
        __asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	623b      	str	r3, [r7, #32]
    }
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e9e:	f001 fbb1 	bl	8005604 <xTaskGetSchedulerState>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueGenericSend+0x9e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueGenericSend+0xa2>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueGenericSend+0xa4>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <xQueueGenericSend+0xbe>
        __asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61fb      	str	r3, [r7, #28]
    }
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003ece:	f002 fb79 	bl	80065c4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <xQueueGenericSend+0xd4>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d129      	bne.n	8003f38 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eea:	f000 fa21 	bl	8004330 <prvCopyDataToQueue>
 8003eee:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d010      	beq.n	8003f1a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	3324      	adds	r3, #36	; 0x24
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 f96d 	bl	80051dc <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003f08:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <xQueueGenericSend+0x1f8>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	e00a      	b.n	8003f30 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d007      	beq.n	8003f30 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003f20:	4b39      	ldr	r3, [pc, #228]	; (8004008 <xQueueGenericSend+0x1f8>)
 8003f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003f30:	f002 fb78 	bl	8006624 <vPortExitCritical>
                return pdPASS;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e063      	b.n	8004000 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f3e:	f002 fb71 	bl	8006624 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e05c      	b.n	8004000 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 fa1b 	bl	800538c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f5a:	f002 fb63 	bl	8006624 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f5e:	f000 fe11 	bl	8004b84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f62:	f002 fb2f 	bl	80065c4 <vPortEnterCritical>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f6c:	b25b      	sxtb	r3, r3
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d103      	bne.n	8003f7c <xQueueGenericSend+0x16c>
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f82:	b25b      	sxtb	r3, r3
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d103      	bne.n	8003f92 <xQueueGenericSend+0x182>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f92:	f002 fb47 	bl	8006624 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f96:	1d3a      	adds	r2, r7, #4
 8003f98:	f107 0314 	add.w	r3, r7, #20
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fa0a 	bl	80053b8 <xTaskCheckForTimeOut>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d124      	bne.n	8003ff4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fac:	f000 fab8 	bl	8004520 <prvIsQueueFull>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d018      	beq.n	8003fe8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	3310      	adds	r3, #16
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 f8a0 	bl	8005104 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fc6:	f000 fa43 	bl	8004450 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003fca:	f000 fde9 	bl	8004ba0 <xTaskResumeAll>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f47f af7c 	bne.w	8003ece <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <xQueueGenericSend+0x1f8>)
 8003fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	e772      	b.n	8003ece <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fea:	f000 fa31 	bl	8004450 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003fee:	f000 fdd7 	bl	8004ba0 <xTaskResumeAll>
 8003ff2:	e76c      	b.n	8003ece <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ff6:	f000 fa2b 	bl	8004450 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ffa:	f000 fdd1 	bl	8004ba0 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003ffe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004000:	4618      	mov	r0, r3
 8004002:	3738      	adds	r7, #56	; 0x38
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b092      	sub	sp, #72	; 0x48
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004036:	bf00      	nop
 8004038:	e7fe      	b.n	8004038 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <xQueueGenericSendFromISR+0x3c>
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <xQueueGenericSendFromISR+0x40>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <xQueueGenericSendFromISR+0x42>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d103      	bne.n	8004076 <xQueueGenericSendFromISR+0x6a>
 800406e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <xQueueGenericSendFromISR+0x6e>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <xQueueGenericSendFromISR+0x70>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004092:	bf00      	nop
 8004094:	e7fe      	b.n	8004094 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004096:	f002 fb79 	bl	800678c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800409a:	f3ef 8211 	mrs	r2, BASEPRI
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	623a      	str	r2, [r7, #32]
 80040b0:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <xQueueGenericSendFromISR+0xbc>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d146      	bne.n	8004156 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80040c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80040de:	f000 f927 	bl	8004330 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80040e2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d112      	bne.n	8004112 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02d      	beq.n	8004150 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f86f 	bl	80051dc <xTaskRemoveFromEventList>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d025      	beq.n	8004150 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d022      	beq.n	8004150 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e01e      	b.n	8004150 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004112:	f000 fe67 	bl	8004de4 <uxTaskGetNumberOfTasks>
 8004116:	6338      	str	r0, [r7, #48]	; 0x30
 8004118:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	429a      	cmp	r2, r3
 8004120:	d916      	bls.n	8004150 <xQueueGenericSendFromISR+0x144>
 8004122:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d10a      	bne.n	8004140 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	61bb      	str	r3, [r7, #24]
    }
 800413c:	bf00      	nop
 800413e:	e7fe      	b.n	800413e <xQueueGenericSendFromISR+0x132>
 8004140:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004144:	3301      	adds	r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	b25a      	sxtb	r2, r3
 800414a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004150:	2301      	movs	r3, #1
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8004154:	e001      	b.n	800415a <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004156:	2300      	movs	r3, #0
 8004158:	647b      	str	r3, [r7, #68]	; 0x44
 800415a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004164:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004168:	4618      	mov	r0, r3
 800416a:	3748      	adds	r7, #72	; 0x48
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	; 0x30
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <xQueueReceive+0x30>
        __asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	623b      	str	r3, [r7, #32]
    }
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <xQueueReceive+0x3e>
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <xQueueReceive+0x42>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <xQueueReceive+0x44>
 80041b2:	2300      	movs	r3, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10a      	bne.n	80041ce <xQueueReceive+0x5e>
        __asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	61fb      	str	r3, [r7, #28]
    }
 80041ca:	bf00      	nop
 80041cc:	e7fe      	b.n	80041cc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041ce:	f001 fa19 	bl	8005604 <xTaskGetSchedulerState>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <xQueueReceive+0x6e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <xQueueReceive+0x72>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueReceive+0x74>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xQueueReceive+0x8e>
        __asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	61bb      	str	r3, [r7, #24]
    }
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80041fe:	f002 f9e1 	bl	80065c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01f      	beq.n	800424e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004212:	f000 f8f7 	bl	8004404 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00f      	beq.n	8004246 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	3310      	adds	r3, #16
 800422a:	4618      	mov	r0, r3
 800422c:	f000 ffd6 	bl	80051dc <xTaskRemoveFromEventList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d007      	beq.n	8004246 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004236:	4b3d      	ldr	r3, [pc, #244]	; (800432c <xQueueReceive+0x1bc>)
 8004238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004246:	f002 f9ed 	bl	8006624 <vPortExitCritical>
                return pdPASS;
 800424a:	2301      	movs	r3, #1
 800424c:	e069      	b.n	8004322 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004254:	f002 f9e6 	bl	8006624 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004258:	2300      	movs	r3, #0
 800425a:	e062      	b.n	8004322 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004262:	f107 0310 	add.w	r3, r7, #16
 8004266:	4618      	mov	r0, r3
 8004268:	f001 f890 	bl	800538c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004270:	f002 f9d8 	bl	8006624 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004274:	f000 fc86 	bl	8004b84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004278:	f002 f9a4 	bl	80065c4 <vPortEnterCritical>
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004282:	b25b      	sxtb	r3, r3
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d103      	bne.n	8004292 <xQueueReceive+0x122>
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004298:	b25b      	sxtb	r3, r3
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d103      	bne.n	80042a8 <xQueueReceive+0x138>
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042a8:	f002 f9bc 	bl	8006624 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ac:	1d3a      	adds	r2, r7, #4
 80042ae:	f107 0310 	add.w	r3, r7, #16
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f87f 	bl	80053b8 <xTaskCheckForTimeOut>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d123      	bne.n	8004308 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c2:	f000 f917 	bl	80044f4 <prvIsQueueEmpty>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d017      	beq.n	80042fc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 ff15 	bl	8005104 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80042da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042dc:	f000 f8b8 	bl	8004450 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80042e0:	f000 fc5e 	bl	8004ba0 <xTaskResumeAll>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d189      	bne.n	80041fe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <xQueueReceive+0x1bc>)
 80042ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	e780      	b.n	80041fe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80042fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042fe:	f000 f8a7 	bl	8004450 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004302:	f000 fc4d 	bl	8004ba0 <xTaskResumeAll>
 8004306:	e77a      	b.n	80041fe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430a:	f000 f8a1 	bl	8004450 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800430e:	f000 fc47 	bl	8004ba0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004314:	f000 f8ee 	bl	80044f4 <prvIsQueueEmpty>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f43f af6f 	beq.w	80041fe <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004320:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004322:	4618      	mov	r0, r3
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d14d      	bne.n	80043f2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f970 	bl	8005640 <xTaskPriorityDisinherit>
 8004360:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	e043      	b.n	80043f2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d119      	bne.n	80043a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6858      	ldr	r0, [r3, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	461a      	mov	r2, r3
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	f004 fc9e 	bl	8008cbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	441a      	add	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d32b      	bcc.n	80043f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	e026      	b.n	80043f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68d8      	ldr	r0, [r3, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	461a      	mov	r2, r3
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	f004 fc84 	bl	8008cbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	425b      	negs	r3, r3
 80043be:	441a      	add	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d207      	bcs.n	80043e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	425b      	negs	r3, r3
 80043da:	441a      	add	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d105      	bne.n	80043f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80043fa:	697b      	ldr	r3, [r7, #20]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	441a      	add	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d303      	bcc.n	8004438 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68d9      	ldr	r1, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	461a      	mov	r2, r3
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	f004 fc3a 	bl	8008cbc <memcpy>
    }
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004458:	f002 f8b4 	bl	80065c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004462:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004464:	e011      	b.n	800448a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d012      	beq.n	8004494 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3324      	adds	r3, #36	; 0x24
 8004472:	4618      	mov	r0, r3
 8004474:	f000 feb2 	bl	80051dc <xTaskRemoveFromEventList>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800447e:	f001 f801 	bl	8005484 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	3b01      	subs	r3, #1
 8004486:	b2db      	uxtb	r3, r3
 8004488:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800448a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	dce9      	bgt.n	8004466 <prvUnlockQueue+0x16>
 8004492:	e000      	b.n	8004496 <prvUnlockQueue+0x46>
                    break;
 8004494:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	22ff      	movs	r2, #255	; 0xff
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800449e:	f002 f8c1 	bl	8006624 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80044a2:	f002 f88f 	bl	80065c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ae:	e011      	b.n	80044d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3310      	adds	r3, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fe8d 	bl	80051dc <xTaskRemoveFromEventList>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80044c8:	f000 ffdc 	bl	8005484 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80044d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dce9      	bgt.n	80044b0 <prvUnlockQueue+0x60>
 80044dc:	e000      	b.n	80044e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80044de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	22ff      	movs	r2, #255	; 0xff
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80044e8:	f002 f89c 	bl	8006624 <vPortExitCritical>
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80044fc:	f002 f862 	bl	80065c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e001      	b.n	8004512 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004512:	f002 f887 	bl	8006624 <vPortExitCritical>

    return xReturn;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004528:	f002 f84c 	bl	80065c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	429a      	cmp	r2, r3
 8004536:	d102      	bne.n	800453e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e001      	b.n	8004542 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004542:	f002 f86f 	bl	8006624 <vPortExitCritical>

    return xReturn;
 8004546:	68fb      	ldr	r3, [r7, #12]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
    }
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d024      	beq.n	80045ca <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e01e      	b.n	80045c4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <vQueueAddToRegistry+0x98>)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4413      	add	r3, r2
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d105      	bne.n	80045a2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <vQueueAddToRegistry+0x98>)
 800459c:	4413      	add	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
                    break;
 80045a0:	e013      	b.n	80045ca <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <vQueueAddToRegistry+0x6e>
 80045a8:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <vQueueAddToRegistry+0x98>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <vQueueAddToRegistry+0x98>)
 80045ba:	4413      	add	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	d9dd      	bls.n	8004586 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	2000020c 	.word	0x2000020c

080045ec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80045fc:	f001 ffe2 	bl	80065c4 <vPortEnterCritical>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d103      	bne.n	8004616 <vQueueWaitForMessageRestricted+0x2a>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800461c:	b25b      	sxtb	r3, r3
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d103      	bne.n	800462c <vQueueWaitForMessageRestricted+0x40>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800462c:	f001 fffa 	bl	8006624 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fd83 	bl	800514c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f7ff ff02 	bl	8004450 <prvUnlockQueue>
    }
 800464c:	bf00      	nop
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af04      	add	r7, sp, #16
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f002 f8cf 	bl	800680c <pvPortMalloc>
 800466e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004676:	2058      	movs	r0, #88	; 0x58
 8004678:	f002 f8c8 	bl	800680c <pvPortMalloc>
 800467c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004684:	2258      	movs	r2, #88	; 0x58
 8004686:	2100      	movs	r1, #0
 8004688:	69f8      	ldr	r0, [r7, #28]
 800468a:	f004 fae3 	bl	8008c54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
 8004694:	e005      	b.n	80046a2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f002 f972 	bl	8006980 <vPortFree>
 800469c:	e001      	b.n	80046a2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f80e 	bl	80046e0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80046c4:	69f8      	ldr	r0, [r7, #28]
 80046c6:	f000 f899 	bl	80047fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e002      	b.n	80046d6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80046d6:	69bb      	ldr	r3, [r7, #24]
    }
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	461a      	mov	r2, r3
 80046f8:	21a5      	movs	r1, #165	; 0xa5
 80046fa:	f004 faab 	bl	8008c54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004708:	3b01      	subs	r3, #1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	f023 0307 	bic.w	r3, r3, #7
 8004716:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	617b      	str	r3, [r7, #20]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01e      	beq.n	800477c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e012      	b.n	800476a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	7819      	ldrb	r1, [r3, #0]
 800474c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	4413      	add	r3, r2
 8004752:	3334      	adds	r3, #52	; 0x34
 8004754:	460a      	mov	r2, r1
 8004756:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d006      	beq.n	8004772 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	3301      	adds	r3, #1
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b09      	cmp	r3, #9
 800476e:	d9e9      	bls.n	8004744 <prvInitialiseNewTask+0x64>
 8004770:	e000      	b.n	8004774 <prvInitialiseNewTask+0x94>
            {
                break;
 8004772:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	2b05      	cmp	r3, #5
 8004780:	d90a      	bls.n	8004798 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	613b      	str	r3, [r7, #16]
    }
 8004794:	bf00      	nop
 8004796:	e7fe      	b.n	8004796 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b05      	cmp	r3, #5
 800479c:	d901      	bls.n	80047a2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800479e:	2305      	movs	r3, #5
 80047a0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f996 	bl	8003ae4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	3318      	adds	r3, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff f991 	bl	8003ae4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	f1c3 0206 	rsb	r2, r3, #6
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	69b8      	ldr	r0, [r7, #24]
 80047de:	f001 fd43 	bl	8006268 <pxPortInitialiseStack>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047f4:	bf00      	nop
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af02      	add	r7, sp, #8
 8004802:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004804:	f001 fede 	bl	80065c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004808:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <prvAddNewTaskToReadyList+0x14c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a4e      	ldr	r2, [pc, #312]	; (8004948 <prvAddNewTaskToReadyList+0x14c>)
 8004810:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004812:	4b4e      	ldr	r3, [pc, #312]	; (800494c <prvAddNewTaskToReadyList+0x150>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800481a:	4a4c      	ldr	r2, [pc, #304]	; (800494c <prvAddNewTaskToReadyList+0x150>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <prvAddNewTaskToReadyList+0x14c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d110      	bne.n	800484a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004828:	f000 fe52 	bl	80054d0 <prvInitialiseTaskLists>
 800482c:	e00d      	b.n	800484a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800482e:	4b48      	ldr	r3, [pc, #288]	; (8004950 <prvAddNewTaskToReadyList+0x154>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004836:	4b45      	ldr	r3, [pc, #276]	; (800494c <prvAddNewTaskToReadyList+0x150>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d802      	bhi.n	800484a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004844:	4a41      	ldr	r2, [pc, #260]	; (800494c <prvAddNewTaskToReadyList+0x150>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800484a:	4b42      	ldr	r3, [pc, #264]	; (8004954 <prvAddNewTaskToReadyList+0x158>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	4a40      	ldr	r2, [pc, #256]	; (8004954 <prvAddNewTaskToReadyList+0x158>)
 8004852:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004854:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <prvAddNewTaskToReadyList+0x158>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <prvAddNewTaskToReadyList+0x94>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4618      	mov	r0, r3
 8004866:	f003 ff43 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskCreate>
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	461d      	mov	r5, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461c      	mov	r4, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	1ae3      	subs	r3, r4, r3
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	462b      	mov	r3, r5
 800488c:	f002 fa3a 	bl	8006d04 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	f003 ffb0 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <prvAddNewTaskToReadyList+0x15c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <prvAddNewTaskToReadyList+0x15c>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ae:	492b      	ldr	r1, [pc, #172]	; (800495c <prvAddNewTaskToReadyList+0x160>)
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	3304      	adds	r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	3204      	adds	r2, #4
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <prvAddNewTaskToReadyList+0x160>)
 80048ee:	441a      	add	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	615a      	str	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4918      	ldr	r1, [pc, #96]	; (800495c <prvAddNewTaskToReadyList+0x160>)
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	4814      	ldr	r0, [pc, #80]	; (800495c <prvAddNewTaskToReadyList+0x160>)
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4403      	add	r3, r0
 8004914:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004916:	f001 fe85 	bl	8006624 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <prvAddNewTaskToReadyList+0x154>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <prvAddNewTaskToReadyList+0x150>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	429a      	cmp	r2, r3
 800492e:	d207      	bcs.n	8004940 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <prvAddNewTaskToReadyList+0x164>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bdb0      	pop	{r4, r5, r7, pc}
 8004948:	20000338 	.word	0x20000338
 800494c:	2000024c 	.word	0x2000024c
 8004950:	20000344 	.word	0x20000344
 8004954:	20000354 	.word	0x20000354
 8004958:	20000340 	.word	0x20000340
 800495c:	20000250 	.word	0x20000250
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800496c:	f001 fe2a 	bl	80065c4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <vTaskSuspend+0x18>
 8004976:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <vTaskSuspend+0x13c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	e000      	b.n	800497e <vTaskSuspend+0x1a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4618      	mov	r0, r3
 8004984:	f003 ffda 	bl	800893c <SEGGER_SYSVIEW_ShrinkId>
 8004988:	4603      	mov	r3, r0
 800498a:	4619      	mov	r1, r3
 800498c:	2029      	movs	r0, #41	; 0x29
 800498e:	f003 faa1 	bl	8007ed4 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f90e 	bl	8003bb8 <uxListRemove>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d115      	bne.n	80049ce <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	493f      	ldr	r1, [pc, #252]	; (8004aa4 <vTaskSuspend+0x140>)
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <vTaskSuspend+0x6a>
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2201      	movs	r2, #1
 80049be:	fa02 f303 	lsl.w	r3, r2, r3
 80049c2:	43da      	mvns	r2, r3
 80049c4:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <vTaskSuspend+0x144>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <vTaskSuspend+0x144>)
 80049cc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	3318      	adds	r3, #24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff f8ec 	bl	8003bb8 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	211b      	movs	r1, #27
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 ff49 	bl	800887c <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	482e      	ldr	r0, [pc, #184]	; (8004aac <vTaskSuspend+0x148>)
 80049f2:	f7ff f884 	bl	8003afe <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e010      	b.n	8004a1e <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	3354      	adds	r3, #84	; 0x54
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	3354      	adds	r3, #84	; 0x54
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	ddeb      	ble.n	80049fc <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004a24:	f001 fdfe 	bl	8006624 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <vTaskSuspend+0x14c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004a30:	f001 fdc8 	bl	80065c4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004a34:	f000 fdca 	bl	80055cc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004a38:	f001 fdf4 	bl	8006624 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004a3c:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <vTaskSuspend+0x13c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d127      	bne.n	8004a96 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <vTaskSuspend+0x14c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d017      	beq.n	8004a7e <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004a4e:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <vTaskSuspend+0x150>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <vTaskSuspend+0x108>
        __asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60fb      	str	r3, [r7, #12]
    }
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8004a6c:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <vTaskSuspend+0x154>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004a7c:	e00b      	b.n	8004a96 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <vTaskSuspend+0x148>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <vTaskSuspend+0x158>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d103      	bne.n	8004a92 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <vTaskSuspend+0x13c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
    }
 8004a90:	e001      	b.n	8004a96 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8004a92:	f000 facd 	bl	8005030 <vTaskSwitchContext>
    }
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000024c 	.word	0x2000024c
 8004aa4:	20000250 	.word	0x20000250
 8004aa8:	20000340 	.word	0x20000340
 8004aac:	20000324 	.word	0x20000324
 8004ab0:	20000344 	.word	0x20000344
 8004ab4:	20000360 	.word	0x20000360
 8004ab8:	e000ed04 	.word	0xe000ed04
 8004abc:	20000338 	.word	0x20000338

08004ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <vTaskStartScheduler+0xa4>)
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	2300      	movs	r3, #0
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2282      	movs	r2, #130	; 0x82
 8004ad2:	4925      	ldr	r1, [pc, #148]	; (8004b68 <vTaskStartScheduler+0xa8>)
 8004ad4:	4825      	ldr	r0, [pc, #148]	; (8004b6c <vTaskStartScheduler+0xac>)
 8004ad6:	f7ff fdbd 	bl	8004654 <xTaskCreate>
 8004ada:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004ae2:	f001 f895 	bl	8005c10 <xTimerCreateTimerTask>
 8004ae6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d124      	bne.n	8004b38 <vTaskStartScheduler+0x78>
        __asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	60bb      	str	r3, [r7, #8]
    }
 8004b00:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <vTaskStartScheduler+0xb0>)
 8004b04:	f04f 32ff 	mov.w	r2, #4294967295
 8004b08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <vTaskStartScheduler+0xb4>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <vTaskStartScheduler+0xb8>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <vTaskStartScheduler+0xbc>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <vTaskStartScheduler+0xa4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d102      	bne.n	8004b28 <vTaskStartScheduler+0x68>
 8004b22:	f003 fdc9 	bl	80086b8 <SEGGER_SYSVIEW_OnIdle>
 8004b26:	e004      	b.n	8004b32 <vTaskStartScheduler+0x72>
 8004b28:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <vTaskStartScheduler+0xbc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 fe21 	bl	8008774 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004b32:	f001 fc27 	bl	8006384 <xPortStartScheduler>
 8004b36:	e00e      	b.n	8004b56 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3e:	d10a      	bne.n	8004b56 <vTaskStartScheduler+0x96>
        __asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	607b      	str	r3, [r7, #4]
    }
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <vTaskStartScheduler+0xc0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000035c 	.word	0x2000035c
 8004b68:	08009600 	.word	0x08009600
 8004b6c:	0800549d 	.word	0x0800549d
 8004b70:	20000358 	.word	0x20000358
 8004b74:	20000344 	.word	0x20000344
 8004b78:	2000033c 	.word	0x2000033c
 8004b7c:	2000024c 	.word	0x2000024c
 8004b80:	20000018 	.word	0x20000018

08004b84 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <vTaskSuspendAll+0x18>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	4a03      	ldr	r2, [pc, #12]	; (8004b9c <vTaskSuspendAll+0x18>)
 8004b90:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000360 	.word	0x20000360

08004ba0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004bae:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <xTaskResumeAll+0x1dc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <xTaskResumeAll+0x2c>
        __asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	607b      	str	r3, [r7, #4]
    }
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004bcc:	f001 fcfa 	bl	80065c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004bd0:	4b6a      	ldr	r3, [pc, #424]	; (8004d7c <xTaskResumeAll+0x1dc>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	4a69      	ldr	r2, [pc, #420]	; (8004d7c <xTaskResumeAll+0x1dc>)
 8004bd8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bda:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <xTaskResumeAll+0x1dc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80c4 	bne.w	8004d6c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004be4:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <xTaskResumeAll+0x1e0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80bf 	beq.w	8004d6c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bee:	e08e      	b.n	8004d0e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf0:	4b64      	ldr	r3, [pc, #400]	; (8004d84 <xTaskResumeAll+0x1e4>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	6a12      	ldr	r2, [r2, #32]
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	69d2      	ldr	r2, [r2, #28]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3318      	adds	r3, #24
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d103      	bne.n	8004c26 <xTaskResumeAll+0x86>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1e5a      	subs	r2, r3, #1
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	69fa      	ldr	r2, [r7, #28]
 8004c42:	68d2      	ldr	r2, [r2, #12]
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3304      	adds	r3, #4
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d103      	bne.n	8004c64 <xTaskResumeAll+0xc4>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2200      	movs	r2, #0
 8004c68:	615a      	str	r2, [r3, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f003 fdbe 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	4b40      	ldr	r3, [pc, #256]	; (8004d88 <xTaskResumeAll+0x1e8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <xTaskResumeAll+0x1e8>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	493e      	ldr	r1, [pc, #248]	; (8004d8c <xTaskResumeAll+0x1ec>)
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	3204      	adds	r2, #4
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <xTaskResumeAll+0x1ec>)
 8004cd2:	441a      	add	r2, r3
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	615a      	str	r2, [r3, #20]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	492b      	ldr	r1, [pc, #172]	; (8004d8c <xTaskResumeAll+0x1ec>)
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1c59      	adds	r1, r3, #1
 8004cec:	4827      	ldr	r0, [pc, #156]	; (8004d8c <xTaskResumeAll+0x1ec>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4403      	add	r3, r0
 8004cf8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <xTaskResumeAll+0x1f0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d302      	bcc.n	8004d0e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <xTaskResumeAll+0x1f4>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <xTaskResumeAll+0x1e4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f47f af6c 	bne.w	8004bf0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004d1e:	f000 fc55 	bl	80055cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <xTaskResumeAll+0x1f8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004d2e:	f000 f865 	bl	8004dfc <xTaskIncrementTick>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <xTaskResumeAll+0x1f4>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f1      	bne.n	8004d2e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004d4a:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <xTaskResumeAll+0x1f8>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <xTaskResumeAll+0x1f4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <xTaskResumeAll+0x1fc>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004d6c:	f001 fc5a 	bl	8006624 <vPortExitCritical>

    return xAlreadyYielded;
 8004d70:	69bb      	ldr	r3, [r7, #24]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000360 	.word	0x20000360
 8004d80:	20000338 	.word	0x20000338
 8004d84:	200002f8 	.word	0x200002f8
 8004d88:	20000340 	.word	0x20000340
 8004d8c:	20000250 	.word	0x20000250
 8004d90:	2000024c 	.word	0x2000024c
 8004d94:	2000034c 	.word	0x2000034c
 8004d98:	20000348 	.word	0x20000348
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <xTaskGetTickCount+0x1c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004dac:	687b      	ldr	r3, [r7, #4]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2000033c 	.word	0x2000033c

08004dc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dc6:	f001 fce1 	bl	800678c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <xTaskGetTickCountFromISR+0x20>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004dd4:	683b      	ldr	r3, [r7, #0]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2000033c 	.word	0x2000033c

08004de4 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <uxTaskGetNumberOfTasks+0x14>)
 8004dea:	681b      	ldr	r3, [r3, #0]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000338 	.word	0x20000338

08004dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <xTaskIncrementTick+0x208>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 80f0 	bne.w	8004ff0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e10:	4b7d      	ldr	r3, [pc, #500]	; (8005008 <xTaskIncrementTick+0x20c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004e18:	4a7b      	ldr	r2, [pc, #492]	; (8005008 <xTaskIncrementTick+0x20c>)
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d120      	bne.n	8004e66 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004e24:	4b79      	ldr	r3, [pc, #484]	; (800500c <xTaskIncrementTick+0x210>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <xTaskIncrementTick+0x48>
        __asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
    }
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <xTaskIncrementTick+0x46>
 8004e44:	4b71      	ldr	r3, [pc, #452]	; (800500c <xTaskIncrementTick+0x210>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	4b71      	ldr	r3, [pc, #452]	; (8005010 <xTaskIncrementTick+0x214>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6f      	ldr	r2, [pc, #444]	; (800500c <xTaskIncrementTick+0x210>)
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4a6f      	ldr	r2, [pc, #444]	; (8005010 <xTaskIncrementTick+0x214>)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b6e      	ldr	r3, [pc, #440]	; (8005014 <xTaskIncrementTick+0x218>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	4a6d      	ldr	r2, [pc, #436]	; (8005014 <xTaskIncrementTick+0x218>)
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	f000 fbb3 	bl	80055cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <xTaskIncrementTick+0x21c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a3a      	ldr	r2, [r7, #32]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	f0c0 80aa 	bcc.w	8004fc6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e72:	4b66      	ldr	r3, [pc, #408]	; (800500c <xTaskIncrementTick+0x210>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7c:	4b66      	ldr	r3, [pc, #408]	; (8005018 <xTaskIncrementTick+0x21c>)
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e82:	601a      	str	r2, [r3, #0]
                    break;
 8004e84:	e09f      	b.n	8004fc6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e86:	4b61      	ldr	r3, [pc, #388]	; (800500c <xTaskIncrementTick+0x210>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004e96:	6a3a      	ldr	r2, [r7, #32]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004e9e:	4a5e      	ldr	r2, [pc, #376]	; (8005018 <xTaskIncrementTick+0x21c>)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004ea4:	e08f      	b.n	8004fc6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	68d2      	ldr	r2, [r2, #12]
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	6892      	ldr	r2, [r2, #8]
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d103      	bne.n	8004ed4 <xTaskIncrementTick+0xd8>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	615a      	str	r2, [r3, #20]
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	1e5a      	subs	r2, r3, #1
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	6a12      	ldr	r2, [r2, #32]
 8004efa:	609a      	str	r2, [r3, #8]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	69d2      	ldr	r2, [r2, #28]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	3318      	adds	r3, #24
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d103      	bne.n	8004f1a <xTaskIncrementTick+0x11e>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f003 fc63 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	2201      	movs	r2, #1
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <xTaskIncrementTick+0x220>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	4a36      	ldr	r2, [pc, #216]	; (800501c <xTaskIncrementTick+0x220>)
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4935      	ldr	r1, [pc, #212]	; (8005020 <xTaskIncrementTick+0x224>)
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3304      	adds	r3, #4
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	3204      	adds	r2, #4
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	1d1a      	adds	r2, r3, #4
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4a26      	ldr	r2, [pc, #152]	; (8005020 <xTaskIncrementTick+0x224>)
 8004f88:	441a      	add	r2, r3
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	615a      	str	r2, [r3, #20]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f92:	4923      	ldr	r1, [pc, #140]	; (8005020 <xTaskIncrementTick+0x224>)
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1c59      	adds	r1, r3, #1
 8004fa2:	481f      	ldr	r0, [pc, #124]	; (8005020 <xTaskIncrementTick+0x224>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4403      	add	r3, r0
 8004fae:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <xTaskIncrementTick+0x228>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	f67f af59 	bls.w	8004e72 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fc4:	e755      	b.n	8004e72 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fc6:	4b17      	ldr	r3, [pc, #92]	; (8005024 <xTaskIncrementTick+0x228>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	4914      	ldr	r1, [pc, #80]	; (8005020 <xTaskIncrementTick+0x224>)
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d901      	bls.n	8004fe2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004fe2:	4b11      	ldr	r3, [pc, #68]	; (8005028 <xTaskIncrementTick+0x22c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	e004      	b.n	8004ffa <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ff0:	4b0e      	ldr	r3, [pc, #56]	; (800502c <xTaskIncrementTick+0x230>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	4a0d      	ldr	r2, [pc, #52]	; (800502c <xTaskIncrementTick+0x230>)
 8004ff8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3728      	adds	r7, #40	; 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000360 	.word	0x20000360
 8005008:	2000033c 	.word	0x2000033c
 800500c:	200002f0 	.word	0x200002f0
 8005010:	200002f4 	.word	0x200002f4
 8005014:	20000350 	.word	0x20000350
 8005018:	20000358 	.word	0x20000358
 800501c:	20000340 	.word	0x20000340
 8005020:	20000250 	.word	0x20000250
 8005024:	2000024c 	.word	0x2000024c
 8005028:	2000034c 	.word	0x2000034c
 800502c:	20000348 	.word	0x20000348

08005030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005036:	4b2d      	ldr	r3, [pc, #180]	; (80050ec <vTaskSwitchContext+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800503e:	4b2c      	ldr	r3, [pc, #176]	; (80050f0 <vTaskSwitchContext+0xc0>)
 8005040:	2201      	movs	r2, #1
 8005042:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005044:	e04d      	b.n	80050e2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <vTaskSwitchContext+0xc0>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800504c:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <vTaskSwitchContext+0xc4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	fab3 f383 	clz	r3, r3
 8005058:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800505a:	7afb      	ldrb	r3, [r7, #11]
 800505c:	f1c3 031f 	rsb	r3, r3, #31
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	4925      	ldr	r1, [pc, #148]	; (80050f8 <vTaskSwitchContext+0xc8>)
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	607b      	str	r3, [r7, #4]
    }
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <vTaskSwitchContext+0x5a>
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <vTaskSwitchContext+0xc8>)
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	3308      	adds	r3, #8
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d104      	bne.n	80050bc <vTaskSwitchContext+0x8c>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <vTaskSwitchContext+0xcc>)
 80050c4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <vTaskSwitchContext+0xcc>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <vTaskSwitchContext+0xd0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d102      	bne.n	80050d8 <vTaskSwitchContext+0xa8>
 80050d2:	f003 faf1 	bl	80086b8 <SEGGER_SYSVIEW_OnIdle>
}
 80050d6:	e004      	b.n	80050e2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80050d8:	4b08      	ldr	r3, [pc, #32]	; (80050fc <vTaskSwitchContext+0xcc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f003 fb49 	bl	8008774 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80050e2:	bf00      	nop
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000360 	.word	0x20000360
 80050f0:	2000034c 	.word	0x2000034c
 80050f4:	20000340 	.word	0x20000340
 80050f8:	20000250 	.word	0x20000250
 80050fc:	2000024c 	.word	0x2000024c
 8005100:	2000035c 	.word	0x2000035c

08005104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
    }
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800512a:	4b07      	ldr	r3, [pc, #28]	; (8005148 <vTaskPlaceOnEventList+0x44>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3318      	adds	r3, #24
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fe fd07 	bl	8003b46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005138:	2101      	movs	r1, #1
 800513a:	6838      	ldr	r0, [r7, #0]
 800513c:	f000 fce8 	bl	8005b10 <prvAddCurrentTaskToDelayedList>
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2000024c 	.word	0x2000024c

0800514c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	613b      	str	r3, [r7, #16]
    }
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	61da      	str	r2, [r3, #28]
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	621a      	str	r2, [r3, #32]
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	3218      	adds	r2, #24
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f103 0218 	add.w	r2, r3, #24
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <vTaskPlaceOnEventListRestricted+0x8c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80051c2:	2024      	movs	r0, #36	; 0x24
 80051c4:	f002 fe68 	bl	8007e98 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	f000 fca0 	bl	8005b10 <prvAddCurrentTaskToDelayedList>
    }
 80051d0:	bf00      	nop
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	2000024c 	.word	0x2000024c

080051dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	; 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	60fb      	str	r3, [r7, #12]
    }
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	6a12      	ldr	r2, [r2, #32]
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	69d2      	ldr	r2, [r2, #28]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	3318      	adds	r3, #24
 800522a:	429a      	cmp	r2, r3
 800522c:	d103      	bne.n	8005236 <xTaskRemoveFromEventList+0x5a>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	6a1a      	ldr	r2, [r3, #32]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2200      	movs	r2, #0
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	1e5a      	subs	r2, r3, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005246:	4b4b      	ldr	r3, [pc, #300]	; (8005374 <xTaskRemoveFromEventList+0x198>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d162      	bne.n	8005314 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	6a3a      	ldr	r2, [r7, #32]
 800525a:	68d2      	ldr	r2, [r2, #12]
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	6892      	ldr	r2, [r2, #8]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	3304      	adds	r3, #4
 8005270:	429a      	cmp	r2, r3
 8005272:	d103      	bne.n	800527c <xTaskRemoveFromEventList+0xa0>
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2200      	movs	r2, #0
 8005280:	615a      	str	r2, [r3, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	4618      	mov	r0, r3
 8005290:	f003 fab2 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	2201      	movs	r2, #1
 800529a:	409a      	lsls	r2, r3
 800529c:	4b36      	ldr	r3, [pc, #216]	; (8005378 <xTaskRemoveFromEventList+0x19c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	4a35      	ldr	r2, [pc, #212]	; (8005378 <xTaskRemoveFromEventList+0x19c>)
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	4934      	ldr	r1, [pc, #208]	; (800537c <xTaskRemoveFromEventList+0x1a0>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	3304      	adds	r3, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	3204      	adds	r2, #4
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a24      	ldr	r2, [pc, #144]	; (800537c <xTaskRemoveFromEventList+0x1a0>)
 80052ea:	441a      	add	r2, r3
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	615a      	str	r2, [r3, #20]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4921      	ldr	r1, [pc, #132]	; (800537c <xTaskRemoveFromEventList+0x1a0>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	481d      	ldr	r0, [pc, #116]	; (800537c <xTaskRemoveFromEventList+0x1a0>)
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4403      	add	r3, r0
 8005310:	6019      	str	r1, [r3, #0]
 8005312:	e01b      	b.n	800534c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <xTaskRemoveFromEventList+0x1a4>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	61da      	str	r2, [r3, #28]
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	621a      	str	r2, [r3, #32]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	3218      	adds	r2, #24
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f103 0218 	add.w	r2, r3, #24
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	4a10      	ldr	r2, [pc, #64]	; (8005380 <xTaskRemoveFromEventList+0x1a4>)
 8005340:	629a      	str	r2, [r3, #40]	; 0x28
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <xTaskRemoveFromEventList+0x1a4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <xTaskRemoveFromEventList+0x1a4>)
 800534a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <xTaskRemoveFromEventList+0x1a8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	429a      	cmp	r2, r3
 8005358:	d905      	bls.n	8005366 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <xTaskRemoveFromEventList+0x1ac>)
 8005360:	2201      	movs	r2, #1
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e001      	b.n	800536a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20000360 	.word	0x20000360
 8005378:	20000340 	.word	0x20000340
 800537c:	20000250 	.word	0x20000250
 8005380:	200002f8 	.word	0x200002f8
 8005384:	2000024c 	.word	0x2000024c
 8005388:	2000034c 	.word	0x2000034c

0800538c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <vTaskInternalSetTimeOutState+0x24>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <vTaskInternalSetTimeOutState+0x28>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	605a      	str	r2, [r3, #4]
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	20000350 	.word	0x20000350
 80053b4:	2000033c 	.word	0x2000033c

080053b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	613b      	str	r3, [r7, #16]
    }
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	60fb      	str	r3, [r7, #12]
    }
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80053fa:	f001 f8e3 	bl	80065c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80053fe:	4b1f      	ldr	r3, [pc, #124]	; (800547c <xTaskCheckForTimeOut+0xc4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d102      	bne.n	800541e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e026      	b.n	800546c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b17      	ldr	r3, [pc, #92]	; (8005480 <xTaskCheckForTimeOut+0xc8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d00a      	beq.n	8005440 <xTaskCheckForTimeOut+0x88>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d305      	bcc.n	8005440 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e015      	b.n	800546c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	429a      	cmp	r2, r3
 8005448:	d20b      	bcs.n	8005462 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	1ad2      	subs	r2, r2, r3
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff98 	bl	800538c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	e004      	b.n	800546c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800546c:	f001 f8da 	bl	8006624 <vPortExitCritical>

    return xReturn;
 8005470:	69fb      	ldr	r3, [r7, #28]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	2000033c 	.word	0x2000033c
 8005480:	20000350 	.word	0x20000350

08005484 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <vTaskMissedYield+0x14>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	2000034c 	.word	0x2000034c

0800549c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80054a4:	f000 f854 	bl	8005550 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <prvIdleTask+0x2c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d907      	bls.n	80054c0 <prvIdleTask+0x24>
            {
                taskYIELD();
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvIdleTask+0x30>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80054c0:	f7fb fec2 	bl	8001248 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80054c4:	e7ee      	b.n	80054a4 <prvIdleTask+0x8>
 80054c6:	bf00      	nop
 80054c8:	20000250 	.word	0x20000250
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d6:	2300      	movs	r3, #0
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	e00c      	b.n	80054f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4a12      	ldr	r2, [pc, #72]	; (8005530 <prvInitialiseTaskLists+0x60>)
 80054e8:	4413      	add	r3, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fada 	bl	8003aa4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3301      	adds	r3, #1
 80054f4:	607b      	str	r3, [r7, #4]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d9ef      	bls.n	80054dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80054fc:	480d      	ldr	r0, [pc, #52]	; (8005534 <prvInitialiseTaskLists+0x64>)
 80054fe:	f7fe fad1 	bl	8003aa4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005502:	480d      	ldr	r0, [pc, #52]	; (8005538 <prvInitialiseTaskLists+0x68>)
 8005504:	f7fe face 	bl	8003aa4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005508:	480c      	ldr	r0, [pc, #48]	; (800553c <prvInitialiseTaskLists+0x6c>)
 800550a:	f7fe facb 	bl	8003aa4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800550e:	480c      	ldr	r0, [pc, #48]	; (8005540 <prvInitialiseTaskLists+0x70>)
 8005510:	f7fe fac8 	bl	8003aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005514:	480b      	ldr	r0, [pc, #44]	; (8005544 <prvInitialiseTaskLists+0x74>)
 8005516:	f7fe fac5 	bl	8003aa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvInitialiseTaskLists+0x78>)
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <prvInitialiseTaskLists+0x64>)
 800551e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvInitialiseTaskLists+0x7c>)
 8005522:	4a05      	ldr	r2, [pc, #20]	; (8005538 <prvInitialiseTaskLists+0x68>)
 8005524:	601a      	str	r2, [r3, #0]
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000250 	.word	0x20000250
 8005534:	200002c8 	.word	0x200002c8
 8005538:	200002dc 	.word	0x200002dc
 800553c:	200002f8 	.word	0x200002f8
 8005540:	2000030c 	.word	0x2000030c
 8005544:	20000324 	.word	0x20000324
 8005548:	200002f0 	.word	0x200002f0
 800554c:	200002f4 	.word	0x200002f4

08005550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005556:	e019      	b.n	800558c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005558:	f001 f834 	bl	80065c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <prvCheckTasksWaitingTermination+0x50>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fb25 	bl	8003bb8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <prvCheckTasksWaitingTermination+0x54>)
 8005576:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 8005580:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005582:	f001 f84f 	bl	8006624 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f810 	bl	80055ac <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <prvCheckTasksWaitingTermination+0x58>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e1      	bne.n	8005558 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000030c 	.word	0x2000030c
 80055a4:	20000338 	.word	0x20000338
 80055a8:	20000320 	.word	0x20000320

080055ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f9e1 	bl	8006980 <vPortFree>
            vPortFree( pxTCB );
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f001 f9de 	bl	8006980 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <prvResetNextTaskUnblockTime+0x30>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <prvResetNextTaskUnblockTime+0x34>)
 80055dc:	f04f 32ff 	mov.w	r2, #4294967295
 80055e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80055e2:	e005      	b.n	80055f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <prvResetNextTaskUnblockTime+0x30>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a04      	ldr	r2, [pc, #16]	; (8005600 <prvResetNextTaskUnblockTime+0x34>)
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200002f0 	.word	0x200002f0
 8005600:	20000358 	.word	0x20000358

08005604 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <xTaskGetSchedulerState+0x34>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005612:	2301      	movs	r3, #1
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	e008      	b.n	800562a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <xTaskGetSchedulerState+0x38>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005620:	2302      	movs	r3, #2
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	e001      	b.n	800562a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800562a:	687b      	ldr	r3, [r7, #4]
    }
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000344 	.word	0x20000344
 800563c:	20000360 	.word	0x20000360

08005640 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8095 	beq.w	8005782 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005658:	4b4c      	ldr	r3, [pc, #304]	; (800578c <xTaskPriorityDisinherit+0x14c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	429a      	cmp	r2, r3
 8005660:	d00a      	beq.n	8005678 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	613b      	str	r3, [r7, #16]
    }
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
    }
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d06a      	beq.n	8005782 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d166      	bne.n	8005782 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fa7d 	bl	8003bb8 <uxListRemove>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	2201      	movs	r2, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43da      	mvns	r2, r3
 80056d0:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <xTaskPriorityDisinherit+0x150>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4013      	ands	r3, r2
 80056d6:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <xTaskPriorityDisinherit+0x150>)
 80056d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4619      	mov	r1, r3
 80056de:	204a      	movs	r0, #74	; 0x4a
 80056e0:	f002 fbf8 	bl	8007ed4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f1c3 0206 	rsb	r2, r3, #6
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f003 f87c 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	4b21      	ldr	r3, [pc, #132]	; (8005790 <xTaskPriorityDisinherit+0x150>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4313      	orrs	r3, r2
 800570e:	4a20      	ldr	r2, [pc, #128]	; (8005790 <xTaskPriorityDisinherit+0x150>)
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005716:	491f      	ldr	r1, [pc, #124]	; (8005794 <xTaskPriorityDisinherit+0x154>)
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3304      	adds	r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	609a      	str	r2, [r3, #8]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	3204      	adds	r2, #4
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <xTaskPriorityDisinherit+0x154>)
 8005756:	441a      	add	r2, r3
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	615a      	str	r2, [r3, #20]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	490c      	ldr	r1, [pc, #48]	; (8005794 <xTaskPriorityDisinherit+0x154>)
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <xTaskPriorityDisinherit+0x154>)
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4403      	add	r3, r0
 800577c:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005782:	69fb      	ldr	r3, [r7, #28]
    }
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	2000024c 	.word	0x2000024c
 8005790:	20000340 	.word	0x20000340
 8005794:	20000250 	.word	0x20000250

08005798 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	613b      	str	r3, [r7, #16]
    }
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80057c2:	f000 feff 	bl	80065c4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80057c6:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	3354      	adds	r3, #84	; 0x54
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d022      	beq.n	800581e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80057d8:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	3214      	adds	r2, #20
 80057e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	43d2      	mvns	r2, r2
 80057e8:	4011      	ands	r1, r2
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	3214      	adds	r2, #20
 80057ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	3354      	adds	r3, #84	; 0x54
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005806:	2101      	movs	r1, #1
 8005808:	6a38      	ldr	r0, [r7, #32]
 800580a:	f000 f981 	bl	8005b10 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800580e:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <xTaskGenericNotifyWait+0x10c>)
 8005810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800581e:	f000 ff01 	bl	8006624 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005822:	f000 fecf 	bl	80065c4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	2040      	movs	r0, #64	; 0x40
 8005834:	f002 fbe4 	bl	8008000 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	3214      	adds	r2, #20
 8005846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	3354      	adds	r3, #84	; 0x54
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d002      	beq.n	8005866 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e00e      	b.n	8005884 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005866:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	3214      	adds	r2, #20
 800586e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	43d2      	mvns	r2, r2
 8005876:	4011      	ands	r1, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	3214      	adds	r2, #20
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005880:	2301      	movs	r3, #1
 8005882:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <xTaskGenericNotifyWait+0x108>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	3354      	adds	r3, #84	; 0x54
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005892:	f000 fec7 	bl	8006624 <vPortExitCritical>

        return xReturn;
 8005896:	697b      	ldr	r3, [r7, #20]
    }
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	2000024c 	.word	0x2000024c
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b090      	sub	sp, #64	; 0x40
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80058b6:	2301      	movs	r3, #1
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <xTaskGenericNotify+0x2e>
        __asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	623b      	str	r3, [r7, #32]
    }
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xTaskGenericNotify+0x4a>
        __asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	61fb      	str	r3, [r7, #28]
    }
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80058f6:	f000 fe65 	bl	80065c4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80058fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d006      	beq.n	800590e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	3214      	adds	r2, #20
 8005906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4413      	add	r3, r2
 8005914:	3354      	adds	r3, #84	; 0x54
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4413      	add	r3, r2
 8005922:	3354      	adds	r3, #84	; 0x54
 8005924:	2202      	movs	r2, #2
 8005926:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b04      	cmp	r3, #4
 800592c:	d83b      	bhi.n	80059a6 <xTaskGenericNotify+0xfe>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <xTaskGenericNotify+0x8c>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	080059c5 	.word	0x080059c5
 8005938:	08005949 	.word	0x08005949
 800593c:	08005965 	.word	0x08005965
 8005940:	0800597d 	.word	0x0800597d
 8005944:	0800598b 	.word	0x0800598b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	3214      	adds	r2, #20
 800594e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	3214      	adds	r2, #20
 800595e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005962:	e032      	b.n	80059ca <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	3214      	adds	r2, #20
 800596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	3214      	adds	r2, #20
 8005976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800597a:	e026      	b.n	80059ca <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	3214      	adds	r2, #20
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005988:	e01f      	b.n	80059ca <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800598a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800598e:	2b02      	cmp	r3, #2
 8005990:	d006      	beq.n	80059a0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	3214      	adds	r2, #20
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800599e:	e014      	b.n	80059ca <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80059a4:	e011      	b.n	80059ca <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80059a6:	4b55      	ldr	r3, [pc, #340]	; (8005afc <xTaskGenericNotify+0x254>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <xTaskGenericNotify+0x120>
        __asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	61bb      	str	r3, [r7, #24]
    }
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <xTaskGenericNotify+0x11a>
                    break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <xTaskGenericNotify+0x122>

                    break;
 80059c8:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	4618      	mov	r0, r3
 80059ce:	f002 ffb5 	bl	800893c <SEGGER_SYSVIEW_ShrinkId>
 80059d2:	4601      	mov	r1, r0
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	203e      	movs	r0, #62	; 0x3e
 80059e0:	f002 fb0e 	bl	8008000 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d17f      	bne.n	8005aec <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f8:	68d2      	ldr	r2, [r2, #12]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a02:	6892      	ldr	r2, [r2, #8]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d103      	bne.n	8005a1a <xTaskGenericNotify+0x172>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	615a      	str	r2, [r3, #20]
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	1e5a      	subs	r2, r3, #1
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 fee3 	bl	80087f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	2201      	movs	r2, #1
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <xTaskGenericNotify+0x258>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <xTaskGenericNotify+0x258>)
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	492e      	ldr	r1, [pc, #184]	; (8005b04 <xTaskGenericNotify+0x25c>)
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3304      	adds	r3, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6e:	3204      	adds	r2, #4
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	1d1a      	adds	r2, r3, #4
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	609a      	str	r2, [r3, #8]
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <xTaskGenericNotify+0x25c>)
 8005a88:	441a      	add	r2, r3
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	491c      	ldr	r1, [pc, #112]	; (8005b04 <xTaskGenericNotify+0x25c>)
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	4818      	ldr	r0, [pc, #96]	; (8005b04 <xTaskGenericNotify+0x25c>)
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4403      	add	r3, r0
 8005aae:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <xTaskGenericNotify+0x226>
        __asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	617b      	str	r3, [r7, #20]
    }
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <xTaskGenericNotify+0x260>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d907      	bls.n	8005aec <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <xTaskGenericNotify+0x264>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005aec:	f000 fd9a 	bl	8006624 <vPortExitCritical>

        return xReturn;
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005af2:	4618      	mov	r0, r3
 8005af4:	3738      	adds	r7, #56	; 0x38
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000033c 	.word	0x2000033c
 8005b00:	20000340 	.word	0x20000340
 8005b04:	20000250 	.word	0x20000250
 8005b08:	2000024c 	.word	0x2000024c
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b20:	4b35      	ldr	r3, [pc, #212]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe f846 	bl	8003bb8 <uxListRemove>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b32:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	2201      	movs	r2, #1
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xec>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4013      	ands	r3, r2
 8005b46:	4a2d      	ldr	r2, [pc, #180]	; (8005bfc <prvAddCurrentTaskToDelayedList+0xec>)
 8005b48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d124      	bne.n	8005b9c <prvAddCurrentTaskToDelayedList+0x8c>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b58:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	6892      	ldr	r2, [r2, #8]
 8005b6e:	60da      	str	r2, [r3, #12]
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	3204      	adds	r2, #4
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	1d1a      	adds	r2, r3, #4
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005b8c:	615a      	str	r2, [r3, #20]
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005b9a:	e026      	b.n	8005bea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d209      	bcs.n	8005bc8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f7fd ffc0 	bl	8003b46 <vListInsert>
}
 8005bc6:	e010      	b.n	8005bea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc8:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7fd ffb6 	bl	8003b46 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d202      	bcs.n	8005bea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005be4:	4a09      	ldr	r2, [pc, #36]	; (8005c0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2000033c 	.word	0x2000033c
 8005bf8:	2000024c 	.word	0x2000024c
 8005bfc:	20000340 	.word	0x20000340
 8005c00:	20000324 	.word	0x20000324
 8005c04:	200002f4 	.word	0x200002f4
 8005c08:	200002f0 	.word	0x200002f0
 8005c0c:	20000358 	.word	0x20000358

08005c10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005c1a:	f000 faef 	bl	80061fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005c1e:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <xTimerCreateTimerTask+0x54>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005c26:	4b10      	ldr	r3, [pc, #64]	; (8005c68 <xTimerCreateTimerTask+0x58>)
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c34:	490d      	ldr	r1, [pc, #52]	; (8005c6c <xTimerCreateTimerTask+0x5c>)
 8005c36:	480e      	ldr	r0, [pc, #56]	; (8005c70 <xTimerCreateTimerTask+0x60>)
 8005c38:	f7fe fd0c 	bl	8004654 <xTaskCreate>
 8005c3c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	603b      	str	r3, [r7, #0]
    }
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005c5a:	687b      	ldr	r3, [r7, #4]
    }
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000394 	.word	0x20000394
 8005c68:	20000398 	.word	0x20000398
 8005c6c:	08009608 	.word	0x08009608
 8005c70:	08005e69 	.word	0x08005e69

08005c74 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005c82:	202c      	movs	r0, #44	; 0x2c
 8005c84:	f000 fdc2 	bl	800680c <pvPortMalloc>
 8005c88:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f805 	bl	8005cb6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005cac:	697b      	ldr	r3, [r7, #20]
        }
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
 8005cc2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	617b      	str	r3, [r7, #20]
    }
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8005ce0:	f000 fa8c 	bl	80061fc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd feef 	bl	8003ae4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d12:	f043 0304 	orr.w	r3, r3, #4
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	623b      	str	r3, [r7, #32]
    }
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005d56:	4b1a      	ldr	r3, [pc, #104]	; (8005dc0 <xTimerGenericCommand+0x98>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02a      	beq.n	8005db4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	dc18      	bgt.n	8005da2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d70:	f7ff fc48 	bl	8005604 <xTaskGetSchedulerState>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d109      	bne.n	8005d8e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <xTimerGenericCommand+0x98>)
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f107 0114 	add.w	r1, r7, #20
 8005d82:	2300      	movs	r3, #0
 8005d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d86:	f7fe f843 	bl	8003e10 <xQueueGenericSend>
 8005d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d8c:	e012      	b.n	8005db4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <xTimerGenericCommand+0x98>)
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	f107 0114 	add.w	r1, r7, #20
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f7fe f839 	bl	8003e10 <xQueueGenericSend>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005da0:	e008      	b.n	8005db4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <xTimerGenericCommand+0x98>)
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	f107 0114 	add.w	r1, r7, #20
 8005daa:	2300      	movs	r3, #0
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	f7fe f92d 	bl	800400c <xQueueGenericSendFromISR>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005db6:	4618      	mov	r0, r3
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000394 	.word	0x20000394

08005dc4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005dd0:	e008      	b.n	8005de4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	18d1      	adds	r1, r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f8dd 	bl	8005fb0 <prvInsertTimerInActiveList>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1ea      	bne.n	8005dd2 <prvReloadTimer+0xe>
        }
    }
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e12:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <prvProcessExpiredTimer+0x5c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fd fec9 	bl	8003bb8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff ffc3 	bl	8005dc4 <prvReloadTimer>
 8005e3e:	e008      	b.n	8005e52 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e46:	f023 0301 	bic.w	r3, r3, #1
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	4798      	blx	r3
    }
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000038c 	.word	0x2000038c

08005e68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e70:	f107 0308 	add.w	r3, r7, #8
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f857 	bl	8005f28 <prvGetNextExpireTime>
 8005e7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f803 	bl	8005e8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005e86:	f000 f8d5 	bl	8006034 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e8a:	e7f1      	b.n	8005e70 <prvTimerTask+0x8>

08005e8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005e96:	f7fe fe75 	bl	8004b84 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f866 	bl	8005f70 <prvSampleTimeNow>
 8005ea4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d130      	bne.n	8005f0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <prvProcessTimerOrBlockTask+0x3c>
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d806      	bhi.n	8005ec8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005eba:	f7fe fe71 	bl	8004ba0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff ffa1 	bl	8005e08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005ec6:	e024      	b.n	8005f12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ece:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <prvProcessTimerOrBlockTask+0x90>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <prvProcessTimerOrBlockTask+0x50>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <prvProcessTimerOrBlockTask+0x52>
 8005edc:	2300      	movs	r3, #0
 8005ede:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <prvProcessTimerOrBlockTask+0x94>)
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f7fe fb7d 	bl	80045ec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005ef2:	f7fe fe55 	bl	8004ba0 <xTaskResumeAll>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <prvProcessTimerOrBlockTask+0x98>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
    }
 8005f0c:	e001      	b.n	8005f12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005f0e:	f7fe fe47 	bl	8004ba0 <xTaskResumeAll>
    }
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000390 	.word	0x20000390
 8005f20:	20000394 	.word	0x20000394
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <prvGetNextExpireTime+0x44>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <prvGetNextExpireTime+0x16>
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	e000      	b.n	8005f40 <prvGetNextExpireTime+0x18>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f4c:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <prvGetNextExpireTime+0x44>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e001      	b.n	8005f5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
    }
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	2000038c 	.word	0x2000038c

08005f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005f78:	f7fe ff12 	bl	8004da0 <xTaskGetTickCount>
 8005f7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <prvSampleTimeNow+0x3c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d205      	bcs.n	8005f94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005f88:	f000 f912 	bl	80061b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e002      	b.n	8005f9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005f9a:	4a04      	ldr	r2, [pc, #16]	; (8005fac <prvSampleTimeNow+0x3c>)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
    }
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	2000039c 	.word	0x2000039c

08005fb0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d812      	bhi.n	8005ffc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	1ad2      	subs	r2, r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e01b      	b.n	8006022 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <prvInsertTimerInActiveList+0x7c>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fd fda6 	bl	8003b46 <vListInsert>
 8005ffa:	e012      	b.n	8006022 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d206      	bcs.n	8006012 <prvInsertTimerInActiveList+0x62>
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e007      	b.n	8006022 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <prvInsertTimerInActiveList+0x80>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f7fd fd92 	bl	8003b46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006022:	697b      	ldr	r3, [r7, #20]
    }
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	20000390 	.word	0x20000390
 8006030:	2000038c 	.word	0x2000038c

08006034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800603a:	e0a6      	b.n	800618a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f2c0 80a3 	blt.w	800618a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fdaf 	bl	8003bb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff87 	bl	8005f70 <prvSampleTimeNow>
 8006062:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3b01      	subs	r3, #1
 8006068:	2b08      	cmp	r3, #8
 800606a:	f200 808d 	bhi.w	8006188 <prvProcessReceivedCommands+0x154>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <prvProcessReceivedCommands+0x40>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006099 	.word	0x08006099
 8006078:	08006099 	.word	0x08006099
 800607c:	08006101 	.word	0x08006101
 8006080:	08006115 	.word	0x08006115
 8006084:	0800615f 	.word	0x0800615f
 8006088:	08006099 	.word	0x08006099
 800608c:	08006099 	.word	0x08006099
 8006090:	08006101 	.word	0x08006101
 8006094:	08006115 	.word	0x08006115
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	18d1      	adds	r1, r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	69f8      	ldr	r0, [r7, #28]
 80060b8:	f7ff ff7a 	bl	8005fb0 <prvInsertTimerInActiveList>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d063      	beq.n	800618a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	4413      	add	r3, r2
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4619      	mov	r1, r3
 80060dc:	69f8      	ldr	r0, [r7, #28]
 80060de:	f7ff fe71 	bl	8005dc4 <prvReloadTimer>
 80060e2:	e008      	b.n	80060f6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	69f8      	ldr	r0, [r7, #28]
 80060fc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80060fe:	e044      	b.n	800618a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	b2da      	uxtb	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006112:	e03a      	b.n	800618a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	b2da      	uxtb	r2, r3
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	617b      	str	r3, [r7, #20]
    }
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	18d1      	adds	r1, r2, r3
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	69f8      	ldr	r0, [r7, #28]
 8006158:	f7ff ff2a 	bl	8005fb0 <prvInsertTimerInActiveList>
                        break;
 800615c:	e015      	b.n	800618a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800616c:	69f8      	ldr	r0, [r7, #28]
 800616e:	f000 fc07 	bl	8006980 <vPortFree>
 8006172:	e00a      	b.n	800618a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006186:	e000      	b.n	800618a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006188:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <prvProcessReceivedCommands+0x178>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f107 0108 	add.w	r1, r7, #8
 8006192:	2200      	movs	r2, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd ffeb 	bl	8004170 <xQueueReceive>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af4d 	bne.w	800603c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000394 	.word	0x20000394

080061b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061b6:	e009      	b.n	80061cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061b8:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <prvSwitchTimerLists+0x44>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80061c2:	f04f 31ff 	mov.w	r1, #4294967295
 80061c6:	6838      	ldr	r0, [r7, #0]
 80061c8:	f7ff fe1e 	bl	8005e08 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <prvSwitchTimerLists+0x44>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80061d6:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <prvSwitchTimerLists+0x44>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvSwitchTimerLists+0x48>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <prvSwitchTimerLists+0x44>)
 80061e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <prvSwitchTimerLists+0x48>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6013      	str	r3, [r2, #0]
    }
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000038c 	.word	0x2000038c
 80061f8:	20000390 	.word	0x20000390

080061fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006200:	f000 f9e0 	bl	80065c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006204:	4b12      	ldr	r3, [pc, #72]	; (8006250 <prvCheckForValidListAndQueue+0x54>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d11d      	bne.n	8006248 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800620c:	4811      	ldr	r0, [pc, #68]	; (8006254 <prvCheckForValidListAndQueue+0x58>)
 800620e:	f7fd fc49 	bl	8003aa4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006212:	4811      	ldr	r0, [pc, #68]	; (8006258 <prvCheckForValidListAndQueue+0x5c>)
 8006214:	f7fd fc46 	bl	8003aa4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006218:	4b10      	ldr	r3, [pc, #64]	; (800625c <prvCheckForValidListAndQueue+0x60>)
 800621a:	4a0e      	ldr	r2, [pc, #56]	; (8006254 <prvCheckForValidListAndQueue+0x58>)
 800621c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800621e:	4b10      	ldr	r3, [pc, #64]	; (8006260 <prvCheckForValidListAndQueue+0x64>)
 8006220:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <prvCheckForValidListAndQueue+0x5c>)
 8006222:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006224:	2200      	movs	r2, #0
 8006226:	210c      	movs	r1, #12
 8006228:	200a      	movs	r0, #10
 800622a:	f7fd fd7f 	bl	8003d2c <xQueueGenericCreate>
 800622e:	4603      	mov	r3, r0
 8006230:	4a07      	ldr	r2, [pc, #28]	; (8006250 <prvCheckForValidListAndQueue+0x54>)
 8006232:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006234:	4b06      	ldr	r3, [pc, #24]	; (8006250 <prvCheckForValidListAndQueue+0x54>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <prvCheckForValidListAndQueue+0x54>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4908      	ldr	r1, [pc, #32]	; (8006264 <prvCheckForValidListAndQueue+0x68>)
 8006242:	4618      	mov	r0, r3
 8006244:	f7fe f984 	bl	8004550 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006248:	f000 f9ec 	bl	8006624 <vPortExitCritical>
    }
 800624c:	bf00      	nop
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000394 	.word	0x20000394
 8006254:	20000364 	.word	0x20000364
 8006258:	20000378 	.word	0x20000378
 800625c:	2000038c 	.word	0x2000038c
 8006260:	20000390 	.word	0x20000390
 8006264:	08009610 	.word	0x08009610

08006268 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b04      	subs	r3, #4
 8006278:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006280:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b04      	subs	r3, #4
 8006286:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f023 0201 	bic.w	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3b04      	subs	r3, #4
 8006296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006298:	4a0c      	ldr	r2, [pc, #48]	; (80062cc <pxPortInitialiseStack+0x64>)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3b14      	subs	r3, #20
 80062a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f06f 0202 	mvn.w	r2, #2
 80062b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3b20      	subs	r3, #32
 80062bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	080062d1 	.word	0x080062d1

080062d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <prvTaskExitError+0x54>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d00a      	beq.n	80062fa <prvTaskExitError+0x2a>
        __asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	60fb      	str	r3, [r7, #12]
    }
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <prvTaskExitError+0x28>
        __asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	60bb      	str	r3, [r7, #8]
    }
 800630c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800630e:	bf00      	nop
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0fc      	beq.n	8006310 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	2000001c 	.word	0x2000001c
	...

08006330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <pxCurrentTCBConst2>)
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	6808      	ldr	r0, [r1, #0]
 8006336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	f380 8809 	msr	PSP, r0
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	4770      	bx	lr
 800634c:	f3af 8000 	nop.w

08006350 <pxCurrentTCBConst2>:
 8006350:	2000024c 	.word	0x2000024c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop

08006358 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006358:	4808      	ldr	r0, [pc, #32]	; (800637c <prvPortStartFirstTask+0x24>)
 800635a:	6800      	ldr	r0, [r0, #0]
 800635c:	6800      	ldr	r0, [r0, #0]
 800635e:	f380 8808 	msr	MSP, r0
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8814 	msr	CONTROL, r0
 800636a:	b662      	cpsie	i
 800636c:	b661      	cpsie	f
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	df00      	svc	0
 8006378:	bf00      	nop
 800637a:	0000      	.short	0x0000
 800637c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop

08006384 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800638a:	4b46      	ldr	r3, [pc, #280]	; (80064a4 <xPortStartScheduler+0x120>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a46      	ldr	r2, [pc, #280]	; (80064a8 <xPortStartScheduler+0x124>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d10a      	bne.n	80063aa <xPortStartScheduler+0x26>
        __asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	613b      	str	r3, [r7, #16]
    }
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063aa:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <xPortStartScheduler+0x120>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a3f      	ldr	r2, [pc, #252]	; (80064ac <xPortStartScheduler+0x128>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10a      	bne.n	80063ca <xPortStartScheduler+0x46>
        __asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	60fb      	str	r3, [r7, #12]
    }
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063ca:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <xPortStartScheduler+0x12c>)
 80063cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <xPortStartScheduler+0x130>)
 80063f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063f2:	4b31      	ldr	r3, [pc, #196]	; (80064b8 <xPortStartScheduler+0x134>)
 80063f4:	2207      	movs	r2, #7
 80063f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f8:	e009      	b.n	800640e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80063fa:	4b2f      	ldr	r3, [pc, #188]	; (80064b8 <xPortStartScheduler+0x134>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <xPortStartScheduler+0x134>)
 8006402:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	005b      	lsls	r3, r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d0ef      	beq.n	80063fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800641a:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <xPortStartScheduler+0x134>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1c3 0307 	rsb	r3, r3, #7
 8006422:	2b04      	cmp	r3, #4
 8006424:	d00a      	beq.n	800643c <xPortStartScheduler+0xb8>
        __asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
    }
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <xPortStartScheduler+0x134>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <xPortStartScheduler+0x134>)
 8006444:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <xPortStartScheduler+0x134>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800644e:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <xPortStartScheduler+0x134>)
 8006450:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800645a:	4b18      	ldr	r3, [pc, #96]	; (80064bc <xPortStartScheduler+0x138>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <xPortStartScheduler+0x138>)
 8006460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006464:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <xPortStartScheduler+0x138>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a14      	ldr	r2, [pc, #80]	; (80064bc <xPortStartScheduler+0x138>)
 800646c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006470:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006472:	f000 f95b 	bl	800672c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <xPortStartScheduler+0x13c>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800647c:	f000 f97a 	bl	8006774 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <xPortStartScheduler+0x140>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <xPortStartScheduler+0x140>)
 8006486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800648a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800648c:	f7ff ff64 	bl	8006358 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006490:	f7fe fdce 	bl	8005030 <vTaskSwitchContext>
    prvTaskExitError();
 8006494:	f7ff ff1c 	bl	80062d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000ed00 	.word	0xe000ed00
 80064a8:	410fc271 	.word	0x410fc271
 80064ac:	410fc270 	.word	0x410fc270
 80064b0:	e000e400 	.word	0xe000e400
 80064b4:	200003a0 	.word	0x200003a0
 80064b8:	200003a4 	.word	0x200003a4
 80064bc:	e000ed20 	.word	0xe000ed20
 80064c0:	2000001c 	.word	0x2000001c
 80064c4:	e000ef34 	.word	0xe000ef34

080064c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <vInitPrioGroupValue+0xe4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a37      	ldr	r2, [pc, #220]	; (80065b0 <vInitPrioGroupValue+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d10a      	bne.n	80064ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	613b      	str	r3, [r7, #16]
    }
 80064ea:	bf00      	nop
 80064ec:	e7fe      	b.n	80064ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064ee:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <vInitPrioGroupValue+0xe4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <vInitPrioGroupValue+0xec>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10a      	bne.n	800650e <vInitPrioGroupValue+0x46>
        __asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
    }
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800650e:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <vInitPrioGroupValue+0xf0>)
 8006510:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	22ff      	movs	r2, #255	; 0xff
 800651e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b22      	ldr	r3, [pc, #136]	; (80065bc <vInitPrioGroupValue+0xf4>)
 8006534:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006536:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006538:	2207      	movs	r2, #7
 800653a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653c:	e009      	b.n	8006552 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3b01      	subs	r3, #1
 8006544:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006546:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d0ef      	beq.n	800653e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800655e:	4b18      	ldr	r3, [pc, #96]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1c3 0307 	rsb	r3, r3, #7
 8006566:	2b04      	cmp	r3, #4
 8006568:	d00a      	beq.n	8006580 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	60bb      	str	r3, [r7, #8]
    }
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006588:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006592:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <vInitPrioGroupValue+0xf8>)
 8006594:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	e000ed00 	.word	0xe000ed00
 80065b0:	410fc271 	.word	0x410fc271
 80065b4:	410fc270 	.word	0x410fc270
 80065b8:	e000e400 	.word	0xe000e400
 80065bc:	200003a0 	.word	0x200003a0
 80065c0:	200003a4 	.word	0x200003a4

080065c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
        __asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	607b      	str	r3, [r7, #4]
    }
 80065dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <vPortEnterCritical+0x58>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a0d      	ldr	r2, [pc, #52]	; (800661c <vPortEnterCritical+0x58>)
 80065e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <vPortEnterCritical+0x58>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10f      	bne.n	8006610 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065f0:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <vPortEnterCritical+0x5c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <vPortEnterCritical+0x4c>
        __asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
    }
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vPortEnterCritical+0x4a>
    }
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	2000001c 	.word	0x2000001c
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <vPortExitCritical+0x50>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <vPortExitCritical+0x24>
        __asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	607b      	str	r3, [r7, #4]
    }
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <vPortExitCritical+0x50>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <vPortExitCritical+0x50>)
 8006650:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006652:	4b08      	ldr	r3, [pc, #32]	; (8006674 <vPortExitCritical+0x50>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <vPortExitCritical+0x42>
 800665a:	2300      	movs	r3, #0
 800665c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	f383 8811 	msr	BASEPRI, r3
    }
 8006664:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	2000001c 	.word	0x2000001c
	...

08006680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006680:	f3ef 8009 	mrs	r0, PSP
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <pxCurrentTCBConst>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f01e 0f10 	tst.w	lr, #16
 8006690:	bf08      	it	eq
 8006692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	6010      	str	r0, [r2, #0]
 800669c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066a4:	f380 8811 	msr	BASEPRI, r0
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f7fe fcbe 	bl	8005030 <vTaskSwitchContext>
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f380 8811 	msr	BASEPRI, r0
 80066bc:	bc09      	pop	{r0, r3}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c6:	f01e 0f10 	tst.w	lr, #16
 80066ca:	bf08      	it	eq
 80066cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066d0:	f380 8809 	msr	PSP, r0
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst>:
 80066e0:	2000024c 	.word	0x2000024c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
        __asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
    }
 8006700:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006702:	f7fe fb7b 	bl	8004dfc <xTaskIncrementTick>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <SysTick_Handler+0x40>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	f383 8811 	msr	BASEPRI, r3
    }
 800671e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <vPortSetupTimerInterrupt+0x38>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <vPortSetupTimerInterrupt+0x3c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <vPortSetupTimerInterrupt+0x40>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	4a09      	ldr	r2, [pc, #36]	; (8006770 <vPortSetupTimerInterrupt+0x44>)
 800674a:	3b01      	subs	r3, #1
 800674c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800674e:	4b04      	ldr	r3, [pc, #16]	; (8006760 <vPortSetupTimerInterrupt+0x34>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	e000e010 	.word	0xe000e010
 8006764:	e000e018 	.word	0xe000e018
 8006768:	20000000 	.word	0x20000000
 800676c:	10624dd3 	.word	0x10624dd3
 8006770:	e000e014 	.word	0xe000e014

08006774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006784 <vPortEnableVFP+0x10>
 8006778:	6801      	ldr	r1, [r0, #0]
 800677a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800677e:	6001      	str	r1, [r0, #0]
 8006780:	4770      	bx	lr
 8006782:	0000      	.short	0x0000
 8006784:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop

0800678c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006792:	f3ef 8305 	mrs	r3, IPSR
 8006796:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d914      	bls.n	80067c8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800679e:	4a17      	ldr	r2, [pc, #92]	; (80067fc <vPortValidateInterruptPriority+0x70>)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067a8:	4b15      	ldr	r3, [pc, #84]	; (8006800 <vPortValidateInterruptPriority+0x74>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	7afa      	ldrb	r2, [r7, #11]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d20a      	bcs.n	80067c8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	607b      	str	r3, [r7, #4]
    }
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <vPortValidateInterruptPriority+0x78>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067d0:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <vPortValidateInterruptPriority+0x7c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d90a      	bls.n	80067ee <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	603b      	str	r3, [r7, #0]
    }
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <vPortValidateInterruptPriority+0x60>
    }
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	e000e3f0 	.word	0xe000e3f0
 8006800:	200003a0 	.word	0x200003a0
 8006804:	e000ed0c 	.word	0xe000ed0c
 8006808:	200003a4 	.word	0x200003a4

0800680c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006818:	f7fe f9b4 	bl	8004b84 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800681c:	4b53      	ldr	r3, [pc, #332]	; (800696c <pvPortMalloc+0x160>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006824:	f000 f908 	bl	8006a38 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d012      	beq.n	8006854 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800682e:	2208      	movs	r2, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	3308      	adds	r3, #8
 800683a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	43db      	mvns	r3, r3
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d804      	bhi.n	8006850 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4413      	add	r3, r2
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	e001      	b.n	8006854 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	db70      	blt.n	800693c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d06d      	beq.n	800693c <pvPortMalloc+0x130>
 8006860:	4b43      	ldr	r3, [pc, #268]	; (8006970 <pvPortMalloc+0x164>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d868      	bhi.n	800693c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800686a:	4b42      	ldr	r3, [pc, #264]	; (8006974 <pvPortMalloc+0x168>)
 800686c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800686e:	4b41      	ldr	r3, [pc, #260]	; (8006974 <pvPortMalloc+0x168>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006874:	e004      	b.n	8006880 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d903      	bls.n	8006892 <pvPortMalloc+0x86>
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f1      	bne.n	8006876 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006892:	4b36      	ldr	r3, [pc, #216]	; (800696c <pvPortMalloc+0x160>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006898:	429a      	cmp	r2, r3
 800689a:	d04f      	beq.n	800693c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2208      	movs	r2, #8
 80068a2:	4413      	add	r3, r2
 80068a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	1ad2      	subs	r2, r2, r3
 80068b6:	2308      	movs	r3, #8
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d91f      	bls.n	80068fe <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4413      	add	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <pvPortMalloc+0xda>
        __asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
    }
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80068f8:	6978      	ldr	r0, [r7, #20]
 80068fa:	f000 f8f9 	bl	8006af0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80068fe:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <pvPortMalloc+0x164>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	4a19      	ldr	r2, [pc, #100]	; (8006970 <pvPortMalloc+0x164>)
 800690a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800690c:	4b18      	ldr	r3, [pc, #96]	; (8006970 <pvPortMalloc+0x164>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b19      	ldr	r3, [pc, #100]	; (8006978 <pvPortMalloc+0x16c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d203      	bcs.n	8006920 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <pvPortMalloc+0x164>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a16      	ldr	r2, [pc, #88]	; (8006978 <pvPortMalloc+0x16c>)
 800691e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006932:	4b12      	ldr	r3, [pc, #72]	; (800697c <pvPortMalloc+0x170>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3301      	adds	r3, #1
 8006938:	4a10      	ldr	r2, [pc, #64]	; (800697c <pvPortMalloc+0x170>)
 800693a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800693c:	f7fe f930 	bl	8004ba0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <pvPortMalloc+0x154>
        __asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	60fb      	str	r3, [r7, #12]
    }
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <pvPortMalloc+0x152>
    return pvReturn;
 8006960:	69fb      	ldr	r3, [r7, #28]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3728      	adds	r7, #40	; 0x28
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20012fb0 	.word	0x20012fb0
 8006970:	20012fb4 	.word	0x20012fb4
 8006974:	20012fa8 	.word	0x20012fa8
 8006978:	20012fb8 	.word	0x20012fb8
 800697c:	20012fbc 	.word	0x20012fbc

08006980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d049      	beq.n	8006a26 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006992:	2308      	movs	r3, #8
 8006994:	425b      	negs	r3, r3
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4413      	add	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db0a      	blt.n	80069be <vPortFree+0x3e>
        __asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
    }
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <vPortFree+0x5c>
        __asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
    }
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	0fdb      	lsrs	r3, r3, #31
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01c      	beq.n	8006a26 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d118      	bne.n	8006a26 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006a00:	f7fe f8c0 	bl	8004b84 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <vPortFree+0xb0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	4a08      	ldr	r2, [pc, #32]	; (8006a30 <vPortFree+0xb0>)
 8006a10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a12:	6938      	ldr	r0, [r7, #16]
 8006a14:	f000 f86c 	bl	8006af0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <vPortFree+0xb4>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <vPortFree+0xb4>)
 8006a20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006a22:	f7fe f8bd 	bl	8004ba0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20012fb4 	.word	0x20012fb4
 8006a34:	20012fc0 	.word	0x20012fc0

08006a38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a3e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006a42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <prvHeapInit+0xa4>)
 8006a46:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3307      	adds	r3, #7
 8006a56:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 0307 	bic.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <prvHeapInit+0xa4>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a70:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <prvHeapInit+0xa8>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <prvHeapInit+0xa8>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006a84:	2208      	movs	r2, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0307 	bic.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <prvHeapInit+0xac>)
 8006a98:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <prvHeapInit+0xac>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <prvHeapInit+0xac>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvHeapInit+0xac>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <prvHeapInit+0xb0>)
 8006ac6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4a07      	ldr	r2, [pc, #28]	; (8006aec <prvHeapInit+0xb4>)
 8006ace:	6013      	str	r3, [r2, #0]
}
 8006ad0:	bf00      	nop
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	200003a8 	.word	0x200003a8
 8006ae0:	20012fa8 	.word	0x20012fa8
 8006ae4:	20012fb0 	.word	0x20012fb0
 8006ae8:	20012fb8 	.word	0x20012fb8
 8006aec:	20012fb4 	.word	0x20012fb4

08006af0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006af8:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <prvInsertBlockIntoFreeList+0xac>)
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e002      	b.n	8006b04 <prvInsertBlockIntoFreeList+0x14>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d8f7      	bhi.n	8006afe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	4413      	add	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d108      	bne.n	8006b32 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	441a      	add	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d118      	bne.n	8006b78 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d00d      	beq.n	8006b6e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e008      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <prvInsertBlockIntoFreeList+0xb0>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e003      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d002      	beq.n	8006b8e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20012fa8 	.word	0x20012fa8
 8006ba0:	20012fb0 	.word	0x20012fb0

08006ba4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006ba8:	4803      	ldr	r0, [pc, #12]	; (8006bb8 <_cbSendSystemDesc+0x14>)
 8006baa:	f001 fd2f 	bl	800860c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006bae:	4803      	ldr	r0, [pc, #12]	; (8006bbc <_cbSendSystemDesc+0x18>)
 8006bb0:	f001 fd2c 	bl	800860c <SEGGER_SYSVIEW_SendSysDesc>
}
 8006bb4:	bf00      	nop
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	08009618 	.word	0x08009618
 8006bbc:	08009650 	.word	0x08009650

08006bc0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bca:	6819      	ldr	r1, [r3, #0]
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <SEGGER_SYSVIEW_Conf+0x24>)
 8006bce:	4a06      	ldr	r2, [pc, #24]	; (8006be8 <SEGGER_SYSVIEW_Conf+0x28>)
 8006bd0:	f001 f90e 	bl	8007df0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006bd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006bd8:	f001 f94e 	bl	8007e78 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000000 	.word	0x20000000
 8006be4:	08006ba5 	.word	0x08006ba5
 8006be8:	080096f0 	.word	0x080096f0

08006bec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	e033      	b.n	8006c60 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006bf8:	491e      	ldr	r1, [pc, #120]	; (8006c74 <_cbSendTaskList+0x88>)
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	491a      	ldr	r1, [pc, #104]	; (8006c74 <_cbSendTaskList+0x88>)
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	440b      	add	r3, r1
 8006c16:	3304      	adds	r3, #4
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	4c16      	ldr	r4, [pc, #88]	; (8006c74 <_cbSendTaskList+0x88>)
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4423      	add	r3, r4
 8006c28:	3308      	adds	r3, #8
 8006c2a:	681c      	ldr	r4, [r3, #0]
 8006c2c:	4d11      	ldr	r5, [pc, #68]	; (8006c74 <_cbSendTaskList+0x88>)
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	442b      	add	r3, r5
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	681d      	ldr	r5, [r3, #0]
 8006c3e:	4e0d      	ldr	r6, [pc, #52]	; (8006c74 <_cbSendTaskList+0x88>)
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4433      	add	r3, r6
 8006c4c:	3310      	adds	r3, #16
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	462b      	mov	r3, r5
 8006c54:	4622      	mov	r2, r4
 8006c56:	f000 f8bd 	bl	8006dd4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <_cbSendTaskList+0x8c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d3c6      	bcc.n	8006bf8 <_cbSendTaskList+0xc>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c74:	20012fc4 	.word	0x20012fc4
 8006c78:	20013064 	.word	0x20013064

08006c7c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006c84:	f7fe f89c 	bl	8004dc0 <xTaskGetTickCountFromISR>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	469a      	mov	sl, r3
 8006c8e:	4693      	mov	fp, r2
 8006c90:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	f04f 0a00 	mov.w	sl, #0
 8006ca0:	f04f 0b00 	mov.w	fp, #0
 8006ca4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006ca8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006cac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	1a14      	subs	r4, r2, r0
 8006cb6:	eb63 0501 	sbc.w	r5, r3, r1
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	00ab      	lsls	r3, r5, #2
 8006cc4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006cc8:	00a2      	lsls	r2, r4, #2
 8006cca:	4614      	mov	r4, r2
 8006ccc:	461d      	mov	r5, r3
 8006cce:	eb14 0800 	adds.w	r8, r4, r0
 8006cd2:	eb45 0901 	adc.w	r9, r5, r1
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cea:	4690      	mov	r8, r2
 8006cec:	4699      	mov	r9, r3
 8006cee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006d04 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006d12:	2205      	movs	r2, #5
 8006d14:	492b      	ldr	r1, [pc, #172]	; (8006dc4 <SYSVIEW_AddTask+0xc0>)
 8006d16:	68b8      	ldr	r0, [r7, #8]
 8006d18:	f001 ff8c 	bl	8008c34 <memcmp>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d04b      	beq.n	8006dba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006d22:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	d903      	bls.n	8006d32 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006d2a:	4828      	ldr	r0, [pc, #160]	; (8006dcc <SYSVIEW_AddTask+0xc8>)
 8006d2c:	f001 ff06 	bl	8008b3c <SEGGER_SYSVIEW_Warn>
    return;
 8006d30:	e044      	b.n	8006dbc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4926      	ldr	r1, [pc, #152]	; (8006dd0 <SYSVIEW_AddTask+0xcc>)
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	440b      	add	r3, r1
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4921      	ldr	r1, [pc, #132]	; (8006dd0 <SYSVIEW_AddTask+0xcc>)
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	3304      	adds	r3, #4
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	491b      	ldr	r1, [pc, #108]	; (8006dd0 <SYSVIEW_AddTask+0xcc>)
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <SYSVIEW_AddTask+0xcc>)
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	330c      	adds	r3, #12
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4910      	ldr	r1, [pc, #64]	; (8006dd0 <SYSVIEW_AddTask+0xcc>)
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3310      	adds	r3, #16
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <SYSVIEW_AddTask+0xc4>)
 8006da6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f80e 	bl	8006dd4 <SYSVIEW_SendTaskInfo>
 8006db8:	e000      	b.n	8006dbc <SYSVIEW_AddTask+0xb8>
    return;
 8006dba:	bf00      	nop

}
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08009660 	.word	0x08009660
 8006dc8:	20013064 	.word	0x20013064
 8006dcc:	08009668 	.word	0x08009668
 8006dd0:	20012fc4 	.word	0x20012fc4

08006dd4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	2214      	movs	r2, #20
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 ff32 	bl	8008c54 <memset>
  TaskInfo.TaskID     = TaskID;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006e04:	f107 0314 	add.w	r3, r7, #20
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 fb07 	bl	800841c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006e0e:	bf00      	nop
 8006e10:	3728      	adds	r7, #40	; 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8006e1e:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <USART2_IRQHandler+0x80>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d011      	beq.n	8006e52 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8006e2e:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <USART2_IRQHandler+0x84>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 030b 	and.w	r3, r3, #11
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006e40:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <USART2_IRQHandler+0x88>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <USART2_IRQHandler+0x88>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	79fa      	ldrb	r2, [r7, #7]
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01a      	beq.n	8006e92 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006e5c:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <USART2_IRQHandler+0x8c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d015      	beq.n	8006e90 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <USART2_IRQHandler+0x8c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	1dfa      	adds	r2, r7, #7
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4798      	blx	r3
 8006e6e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <USART2_IRQHandler+0x90>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <USART2_IRQHandler+0x90>)
 8006e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	e006      	b.n	8006e92 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <USART2_IRQHandler+0x80>)
 8006e86:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8006e88:	79fa      	ldrb	r2, [r7, #7]
 8006e8a:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <USART2_IRQHandler+0x84>)
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e000      	b.n	8006e92 <USART2_IRQHandler+0x7a>
      return;
 8006e90:	bf00      	nop
    }
  }
}
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40011000 	.word	0x40011000
 8006e9c:	40011004 	.word	0x40011004
 8006ea0:	20013068 	.word	0x20013068
 8006ea4:	2001306c 	.word	0x2001306c
 8006ea8:	4001100c 	.word	0x4001100c

08006eac <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006eb0:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a04      	ldr	r2, [pc, #16]	; (8006ec8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	4001100c 	.word	0x4001100c

08006ecc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <_DoInit+0x98>)
 8006ed4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2203      	movs	r2, #3
 8006eda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <_DoInit+0x9c>)
 8006ee6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a20      	ldr	r2, [pc, #128]	; (8006f6c <_DoInit+0xa0>)
 8006eec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ef4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <_DoInit+0x9c>)
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <_DoInit+0xa4>)
 8006f12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2210      	movs	r2, #16
 8006f18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3307      	adds	r3, #7
 8006f30:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <_DoInit+0xa8>)
 8006f32:	6810      	ldr	r0, [r2, #0]
 8006f34:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f36:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a0e      	ldr	r2, [pc, #56]	; (8006f78 <_DoInit+0xac>)
 8006f3e:	6810      	ldr	r0, [r2, #0]
 8006f40:	6018      	str	r0, [r3, #0]
 8006f42:	8891      	ldrh	r1, [r2, #4]
 8006f44:	7992      	ldrb	r2, [r2, #6]
 8006f46:	8099      	strh	r1, [r3, #4]
 8006f48:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f4a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006f54:	f3bf 8f5f 	dmb	sy
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20013070 	.word	0x20013070
 8006f68:	080096b8 	.word	0x080096b8
 8006f6c:	20013118 	.word	0x20013118
 8006f70:	20013518 	.word	0x20013518
 8006f74:	080096c4 	.word	0x080096c4
 8006f78:	080096c8 	.word	0x080096c8

08006f7c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08c      	sub	sp, #48	; 0x30
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006f88:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <SEGGER_RTT_ReadNoLock+0x108>)
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <SEGGER_RTT_ReadNoLock+0x1e>
 8006f96:	f7ff ff99 	bl	8006ecc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	3360      	adds	r3, #96	; 0x60
 8006fa6:	4a37      	ldr	r2, [pc, #220]	; (8007084 <SEGGER_RTT_ReadNoLock+0x108>)
 8006fa8:	4413      	add	r3, r2
 8006faa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d92b      	bls.n	8007020 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	bf28      	it	cs
 8006fda:	4613      	movcs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	4413      	add	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	6939      	ldr	r1, [r7, #16]
 8006fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fee:	f001 fe65 	bl	8008cbc <memcpy>
    NumBytesRead += NumBytesRem;
 8006ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4413      	add	r3, r2
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800700a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4413      	add	r3, r2
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007018:	429a      	cmp	r2, r3
 800701a:	d101      	bne.n	8007020 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800701c:	2300      	movs	r3, #0
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4293      	cmp	r3, r2
 800702e:	bf28      	it	cs
 8007030:	4613      	movcs	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d019      	beq.n	800706e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	4413      	add	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	6939      	ldr	r1, [r7, #16]
 8007048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800704a:	f001 fe37 	bl	8008cbc <memcpy>
    NumBytesRead += NumBytesRem;
 800704e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	4413      	add	r3, r2
 8007054:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4413      	add	r3, r2
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4413      	add	r3, r2
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007078:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800707c:	4618      	mov	r0, r3
 800707e:	3730      	adds	r7, #48	; 0x30
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20013070 	.word	0x20013070

08007088 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b088      	sub	sp, #32
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007096:	4b3d      	ldr	r3, [pc, #244]	; (800718c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007098:	61bb      	str	r3, [r7, #24]
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80070a4:	f7ff ff12 	bl	8006ecc <_DoInit>
  SEGGER_RTT_LOCK();
 80070a8:	f3ef 8311 	mrs	r3, BASEPRI
 80070ac:	f04f 0120 	mov.w	r1, #32
 80070b0:	f381 8811 	msr	BASEPRI, r1
 80070b4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80070b6:	4b35      	ldr	r3, [pc, #212]	; (800718c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80070b8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80070be:	6939      	ldr	r1, [r7, #16]
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	440b      	add	r3, r1
 80070ce:	3304      	adds	r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	dbeb      	blt.n	80070be <SEGGER_RTT_AllocUpBuffer+0x36>
 80070e6:	e000      	b.n	80070ea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80070e8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	da3f      	bge.n	8007174 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80070f4:	6939      	ldr	r1, [r7, #16]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	440b      	add	r3, r1
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007108:	6939      	ldr	r1, [r7, #16]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	440b      	add	r3, r1
 8007118:	3304      	adds	r3, #4
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800711e:	6939      	ldr	r1, [r7, #16]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	4613      	mov	r3, r2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	4413      	add	r3, r2
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	3320      	adds	r3, #32
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	4613      	mov	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	440b      	add	r3, r1
 8007140:	3328      	adds	r3, #40	; 0x28
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007146:	6939      	ldr	r1, [r7, #16]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	4613      	mov	r3, r2
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4413      	add	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	440b      	add	r3, r1
 8007154:	3324      	adds	r3, #36	; 0x24
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800715a:	6939      	ldr	r1, [r7, #16]
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	332c      	adds	r3, #44	; 0x2c
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800716e:	f3bf 8f5f 	dmb	sy
 8007172:	e002      	b.n	800717a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
 8007178:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007180:	69fb      	ldr	r3, [r7, #28]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20013070 	.word	0x20013070

08007190 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800719e:	4b33      	ldr	r3, [pc, #204]	; (800726c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80071ac:	f7ff fe8e 	bl	8006ecc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80071b0:	4b2e      	ldr	r3, [pc, #184]	; (800726c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80071b2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4293      	cmp	r3, r2
 80071be:	d24d      	bcs.n	800725c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80071c0:	f3ef 8311 	mrs	r3, BASEPRI
 80071c4:	f04f 0120 	mov.w	r1, #32
 80071c8:	f381 8811 	msr	BASEPRI, r1
 80071cc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d031      	beq.n	8007238 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80071d4:	6979      	ldr	r1, [r7, #20]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4613      	mov	r3, r2
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	4413      	add	r3, r2
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	440b      	add	r3, r1
 80071e2:	3360      	adds	r3, #96	; 0x60
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4613      	mov	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	440b      	add	r3, r1
 80071f6:	3364      	adds	r3, #100	; 0x64
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	440b      	add	r3, r1
 800720a:	3368      	adds	r3, #104	; 0x68
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	440b      	add	r3, r1
 800721e:	3370      	adds	r3, #112	; 0x70
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007224:	6979      	ldr	r1, [r7, #20]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4613      	mov	r3, r2
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	440b      	add	r3, r1
 8007232:	336c      	adds	r3, #108	; 0x6c
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007238:	6979      	ldr	r1, [r7, #20]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4613      	mov	r3, r2
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	4413      	add	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	440b      	add	r3, r1
 8007246:	3374      	adds	r3, #116	; 0x74
 8007248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800724a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800724c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	e002      	b.n	8007262 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800725c:	f04f 33ff 	mov.w	r3, #4294967295
 8007260:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8007262:	69fb      	ldr	r3, [r7, #28]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20013070 	.word	0x20013070

08007270 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007280:	e002      	b.n	8007288 <_EncodeStr+0x18>
    Len++;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3301      	adds	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	4413      	add	r3, r2
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f6      	bne.n	8007282 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d901      	bls.n	80072a0 <_EncodeStr+0x30>
    Len = Limit;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2bfe      	cmp	r3, #254	; 0xfe
 80072a4:	d806      	bhi.n	80072b4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	60fa      	str	r2, [r7, #12]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e011      	b.n	80072d8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	60fa      	str	r2, [r7, #12]
 80072ba:	22ff      	movs	r2, #255	; 0xff
 80072bc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	60fa      	str	r2, [r7, #12]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	0a19      	lsrs	r1, r3, #8
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	60fa      	str	r2, [r7, #12]
 80072d4:	b2ca      	uxtb	r2, r1
 80072d6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80072dc:	e00a      	b.n	80072f4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	1c53      	adds	r3, r2, #1
 80072e2:	60bb      	str	r3, [r7, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	60f9      	str	r1, [r7, #12]
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	701a      	strb	r2, [r3, #0]
    n++;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3301      	adds	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d3f0      	bcc.n	80072de <_EncodeStr+0x6e>
  }
  return pPayload;
 80072fc:	68fb      	ldr	r3, [r7, #12]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800732a:	4b35      	ldr	r3, [pc, #212]	; (8007400 <_HandleIncomingPacket+0xdc>)
 800732c:	7e1b      	ldrb	r3, [r3, #24]
 800732e:	4618      	mov	r0, r3
 8007330:	1cfb      	adds	r3, r7, #3
 8007332:	2201      	movs	r2, #1
 8007334:	4619      	mov	r1, r3
 8007336:	f7ff fe21 	bl	8006f7c <SEGGER_RTT_ReadNoLock>
 800733a:	4603      	mov	r3, r0
 800733c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dd59      	ble.n	80073f8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b80      	cmp	r3, #128	; 0x80
 8007348:	d032      	beq.n	80073b0 <_HandleIncomingPacket+0x8c>
 800734a:	2b80      	cmp	r3, #128	; 0x80
 800734c:	dc42      	bgt.n	80073d4 <_HandleIncomingPacket+0xb0>
 800734e:	2b07      	cmp	r3, #7
 8007350:	dc16      	bgt.n	8007380 <_HandleIncomingPacket+0x5c>
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd3e      	ble.n	80073d4 <_HandleIncomingPacket+0xb0>
 8007356:	3b01      	subs	r3, #1
 8007358:	2b06      	cmp	r3, #6
 800735a:	d83b      	bhi.n	80073d4 <_HandleIncomingPacket+0xb0>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <_HandleIncomingPacket+0x40>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007387 	.word	0x08007387
 8007368:	0800738d 	.word	0x0800738d
 800736c:	08007393 	.word	0x08007393
 8007370:	08007399 	.word	0x08007399
 8007374:	0800739f 	.word	0x0800739f
 8007378:	080073a5 	.word	0x080073a5
 800737c:	080073ab 	.word	0x080073ab
 8007380:	2b7f      	cmp	r3, #127	; 0x7f
 8007382:	d034      	beq.n	80073ee <_HandleIncomingPacket+0xca>
 8007384:	e026      	b.n	80073d4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007386:	f000 fecd 	bl	8008124 <SEGGER_SYSVIEW_Start>
      break;
 800738a:	e035      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800738c:	f000 ff86 	bl	800829c <SEGGER_SYSVIEW_Stop>
      break;
 8007390:	e032      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007392:	f001 f95f 	bl	8008654 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007396:	e02f      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007398:	f001 f924 	bl	80085e4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800739c:	e02c      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800739e:	f000 ffa3 	bl	80082e8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80073a2:	e029      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80073a4:	f001 fb78 	bl	8008a98 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80073a8:	e026      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80073aa:	f001 fb57 	bl	8008a5c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80073ae:	e023      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80073b0:	4b13      	ldr	r3, [pc, #76]	; (8007400 <_HandleIncomingPacket+0xdc>)
 80073b2:	7e1b      	ldrb	r3, [r3, #24]
 80073b4:	4618      	mov	r0, r3
 80073b6:	1cfb      	adds	r3, r7, #3
 80073b8:	2201      	movs	r2, #1
 80073ba:	4619      	mov	r1, r3
 80073bc:	f7ff fdde 	bl	8006f7c <SEGGER_RTT_ReadNoLock>
 80073c0:	4603      	mov	r3, r0
 80073c2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd13      	ble.n	80073f2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 fac5 	bl	800895c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80073d2:	e00e      	b.n	80073f2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da0c      	bge.n	80073f6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80073dc:	4b08      	ldr	r3, [pc, #32]	; (8007400 <_HandleIncomingPacket+0xdc>)
 80073de:	7e1b      	ldrb	r3, [r3, #24]
 80073e0:	4618      	mov	r0, r3
 80073e2:	1cfb      	adds	r3, r7, #3
 80073e4:	2201      	movs	r2, #1
 80073e6:	4619      	mov	r1, r3
 80073e8:	f7ff fdc8 	bl	8006f7c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80073ec:	e003      	b.n	80073f6 <_HandleIncomingPacket+0xd2>
      break;
 80073ee:	bf00      	nop
 80073f0:	e002      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
      break;
 80073f2:	bf00      	nop
 80073f4:	e000      	b.n	80073f8 <_HandleIncomingPacket+0xd4>
      break;
 80073f6:	bf00      	nop
    }
  }
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20014530 	.word	0x20014530

08007404 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b08c      	sub	sp, #48	; 0x30
 8007408:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800740a:	2301      	movs	r3, #1
 800740c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	3301      	adds	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007418:	4b32      	ldr	r3, [pc, #200]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	62bb      	str	r3, [r7, #40]	; 0x28
 800741e:	e00b      	b.n	8007438 <_TrySendOverflowPacket+0x34>
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	b2da      	uxtb	r2, r3
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	1c59      	adds	r1, r3, #1
 8007428:	62f9      	str	r1, [r7, #44]	; 0x2c
 800742a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	09db      	lsrs	r3, r3, #7
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b7f      	cmp	r3, #127	; 0x7f
 800743c:	d8f0      	bhi.n	8007420 <_TrySendOverflowPacket+0x1c>
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800744e:	4b26      	ldr	r3, [pc, #152]	; (80074e8 <_TrySendOverflowPacket+0xe4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	623b      	str	r3, [r7, #32]
 8007466:	e00b      	b.n	8007480 <_TrySendOverflowPacket+0x7c>
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	b2da      	uxtb	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	1c59      	adds	r1, r3, #1
 8007470:	6279      	str	r1, [r7, #36]	; 0x24
 8007472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	09db      	lsrs	r3, r3, #7
 800747e:	623b      	str	r3, [r7, #32]
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	2b7f      	cmp	r3, #127	; 0x7f
 8007484:	d8f0      	bhi.n	8007468 <_TrySendOverflowPacket+0x64>
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	627a      	str	r2, [r7, #36]	; 0x24
 800748c:	6a3a      	ldr	r2, [r7, #32]
 800748e:	b2d2      	uxtb	r2, r2
 8007490:	701a      	strb	r2, [r3, #0]
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	4618      	mov	r0, r3
 800749c:	1d3b      	adds	r3, r7, #4
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	1d3b      	adds	r3, r7, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	f7f8 fe9a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80074ac:	4603      	mov	r3, r0
 80074ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80074b0:	f7ff fcfc 	bl	8006eac <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80074ba:	4a0a      	ldr	r2, [pc, #40]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 80074ca:	701a      	strb	r2, [r3, #0]
 80074cc:	e004      	b.n	80074d8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a03      	ldr	r2, [pc, #12]	; (80074e4 <_TrySendOverflowPacket+0xe0>)
 80074d6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80074d8:	693b      	ldr	r3, [r7, #16]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3730      	adds	r7, #48	; 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20014530 	.word	0x20014530
 80074e8:	e0001004 	.word	0xe0001004

080074ec <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80074f8:	4b6d      	ldr	r3, [pc, #436]	; (80076b0 <_SendPacket+0x1c4>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d010      	beq.n	8007522 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007500:	4b6b      	ldr	r3, [pc, #428]	; (80076b0 <_SendPacket+0x1c4>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80a5 	beq.w	8007654 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800750a:	4b69      	ldr	r3, [pc, #420]	; (80076b0 <_SendPacket+0x1c4>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b02      	cmp	r3, #2
 8007510:	d109      	bne.n	8007526 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007512:	f7ff ff77 	bl	8007404 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007516:	4b66      	ldr	r3, [pc, #408]	; (80076b0 <_SendPacket+0x1c4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 809c 	bne.w	8007658 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007520:	e001      	b.n	8007526 <_SendPacket+0x3a>
    goto Send;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <_SendPacket+0x3c>
Send:
 8007526:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b1f      	cmp	r3, #31
 800752c:	d809      	bhi.n	8007542 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800752e:	4b60      	ldr	r3, [pc, #384]	; (80076b0 <_SendPacket+0x1c4>)
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 808d 	bne.w	800765c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b17      	cmp	r3, #23
 8007546:	d807      	bhi.n	8007558 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3b01      	subs	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	e03d      	b.n	80075d4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b7f      	cmp	r3, #127	; 0x7f
 8007564:	d912      	bls.n	800758c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	09da      	lsrs	r2, r3, #7
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3b01      	subs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	3a01      	subs	r2, #1
 800757e:	60fa      	str	r2, [r7, #12]
 8007580:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007584:	b2da      	uxtb	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e006      	b.n	800759a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3b01      	subs	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b7f      	cmp	r3, #127	; 0x7f
 800759e:	d912      	bls.n	80075c6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	09da      	lsrs	r2, r3, #7
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	3a01      	subs	r2, #1
 80075b8:	60fa      	str	r2, [r7, #12]
 80075ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e006      	b.n	80075d4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80075d4:	4b37      	ldr	r3, [pc, #220]	; (80076b4 <_SendPacket+0x1c8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80075da:	4b35      	ldr	r3, [pc, #212]	; (80076b0 <_SendPacket+0x1c4>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	e00b      	b.n	8007606 <_SendPacket+0x11a>
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	1c59      	adds	r1, r3, #1
 80075f6:	6279      	str	r1, [r7, #36]	; 0x24
 80075f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	09db      	lsrs	r3, r3, #7
 8007604:	623b      	str	r3, [r7, #32]
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2b7f      	cmp	r3, #127	; 0x7f
 800760a:	d8f0      	bhi.n	80075ee <_SendPacket+0x102>
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	627a      	str	r2, [r7, #36]	; 0x24
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800761c:	4b24      	ldr	r3, [pc, #144]	; (80076b0 <_SendPacket+0x1c4>)
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	4618      	mov	r0, r3
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	461a      	mov	r2, r3
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	f7f8 fdd8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007630:	4603      	mov	r3, r0
 8007632:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007634:	f7ff fc3a 	bl	8006eac <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800763e:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <_SendPacket+0x1c4>)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	60d3      	str	r3, [r2, #12]
 8007644:	e00b      	b.n	800765e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007646:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <_SendPacket+0x1c4>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <_SendPacket+0x1c4>)
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e004      	b.n	800765e <_SendPacket+0x172>
    goto SendDone;
 8007654:	bf00      	nop
 8007656:	e002      	b.n	800765e <_SendPacket+0x172>
      goto SendDone;
 8007658:	bf00      	nop
 800765a:	e000      	b.n	800765e <_SendPacket+0x172>
      goto SendDone;
 800765c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <_SendPacket+0x1c4>)
 8007660:	7e1b      	ldrb	r3, [r3, #24]
 8007662:	4619      	mov	r1, r3
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <_SendPacket+0x1cc>)
 8007666:	460b      	mov	r3, r1
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	440b      	add	r3, r1
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	4413      	add	r3, r2
 8007670:	336c      	adds	r3, #108	; 0x6c
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <_SendPacket+0x1c4>)
 8007676:	7e1b      	ldrb	r3, [r3, #24]
 8007678:	4618      	mov	r0, r3
 800767a:	490f      	ldr	r1, [pc, #60]	; (80076b8 <_SendPacket+0x1cc>)
 800767c:	4603      	mov	r3, r0
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4403      	add	r3, r0
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	440b      	add	r3, r1
 8007686:	3370      	adds	r3, #112	; 0x70
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d00b      	beq.n	80076a6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <_SendPacket+0x1c4>)
 8007690:	789b      	ldrb	r3, [r3, #2]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d107      	bne.n	80076a6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <_SendPacket+0x1c4>)
 8007698:	2201      	movs	r2, #1
 800769a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800769c:	f7ff fe42 	bl	8007324 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80076a0:	4b03      	ldr	r3, [pc, #12]	; (80076b0 <_SendPacket+0x1c4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80076a6:	bf00      	nop
 80076a8:	3728      	adds	r7, #40	; 0x28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20014530 	.word	0x20014530
 80076b4:	e0001004 	.word	0xe0001004
 80076b8:	20013070 	.word	0x20013070

080076bc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	; 0x28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d80a      	bhi.n	80076ec <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	1c59      	adds	r1, r3, #1
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6051      	str	r1, [r2, #4]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b80      	cmp	r3, #128	; 0x80
 80076f2:	d15a      	bne.n	80077aa <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691a      	ldr	r2, [r3, #16]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	627b      	str	r3, [r7, #36]	; 0x24
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	623b      	str	r3, [r7, #32]
 8007714:	e00b      	b.n	800772e <_StoreChar+0x72>
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	1c59      	adds	r1, r3, #1
 800771e:	6279      	str	r1, [r7, #36]	; 0x24
 8007720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	09db      	lsrs	r3, r3, #7
 800772c:	623b      	str	r3, [r7, #32]
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	2b7f      	cmp	r3, #127	; 0x7f
 8007732:	d8f0      	bhi.n	8007716 <_StoreChar+0x5a>
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	627a      	str	r2, [r7, #36]	; 0x24
 800773a:	6a3a      	ldr	r2, [r7, #32]
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
 800774c:	e00b      	b.n	8007766 <_StoreChar+0xaa>
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	61f9      	str	r1, [r7, #28]
 8007758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	09db      	lsrs	r3, r3, #7
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	2b7f      	cmp	r3, #127	; 0x7f
 800776a:	d8f0      	bhi.n	800774e <_StoreChar+0x92>
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	61fa      	str	r2, [r7, #28]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	221a      	movs	r2, #26
 8007782:	6939      	ldr	r1, [r7, #16]
 8007784:	4618      	mov	r0, r3
 8007786:	f7ff feb1 	bl	80074ec <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff fdbb 	bl	800730a <_PreparePacket>
 8007794:	4602      	mov	r2, r0
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
  }
}
 80077aa:	bf00      	nop
 80077ac:	3728      	adds	r7, #40	; 0x28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80077c6:	2301      	movs	r3, #1
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80077ca:	2301      	movs	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80077ce:	e007      	b.n	80077e0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80077d0:	6a3a      	ldr	r2, [r7, #32]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d8:	623b      	str	r3, [r7, #32]
    Width++;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	3301      	adds	r3, #1
 80077de:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80077e0:	6a3a      	ldr	r2, [r7, #32]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d2f3      	bcs.n	80077d0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d901      	bls.n	80077f4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11f      	bne.n	800783e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01c      	beq.n	800783e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <_PrintUnsigned+0x66>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <_PrintUnsigned+0x66>
        c = '0';
 8007814:	2330      	movs	r3, #48	; 0x30
 8007816:	76fb      	strb	r3, [r7, #27]
 8007818:	e001      	b.n	800781e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800781a:	2320      	movs	r3, #32
 800781c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800781e:	e007      	b.n	8007830 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	3b01      	subs	r3, #1
 8007824:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8007826:	7efb      	ldrb	r3, [r7, #27]
 8007828:	4619      	mov	r1, r3
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff ff46 	bl	80076bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <_PrintUnsigned+0x8a>
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	429a      	cmp	r2, r3
 800783c:	d3f0      	bcc.n	8007820 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d903      	bls.n	800784c <_PrintUnsigned+0x98>
      NumDigits--;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	3b01      	subs	r3, #1
 8007848:	603b      	str	r3, [r7, #0]
 800784a:	e009      	b.n	8007860 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	fbb2 f3f3 	udiv	r3, r2, r3
 8007854:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d200      	bcs.n	8007860 <_PrintUnsigned+0xac>
        break;
 800785e:	e005      	b.n	800786c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800786a:	e7e8      	b.n	800783e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	fb02 f303 	mul.w	r3, r2, r3
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8007884:	4a15      	ldr	r2, [pc, #84]	; (80078dc <_PrintUnsigned+0x128>)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	4413      	add	r3, r2
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff ff14 	bl	80076bc <_StoreChar>
    Digit /= Base;
 8007894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	fbb2 f3f3 	udiv	r3, r2, r3
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e3      	bne.n	800786c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80078b4:	e006      	b.n	80078c4 <_PrintUnsigned+0x110>
        FieldWidth--;
 80078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b8:	3b01      	subs	r3, #1
 80078ba:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80078bc:	2120      	movs	r1, #32
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fefc 	bl	80076bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <_PrintUnsigned+0x11e>
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d3f1      	bcc.n	80078b6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80078d2:	bf00      	nop
 80078d4:	3728      	adds	r7, #40	; 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	08009704 	.word	0x08009704

080078e0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfb8      	it	lt
 80078f4:	425b      	neglt	r3, r3
 80078f6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80078f8:	2301      	movs	r3, #1
 80078fa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80078fc:	e007      	b.n	800790e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	fb92 f3f3 	sdiv	r3, r2, r3
 8007906:	613b      	str	r3, [r7, #16]
    Width++;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3301      	adds	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	429a      	cmp	r2, r3
 8007914:	daf3      	bge.n	80078fe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	429a      	cmp	r2, r3
 800791c:	d901      	bls.n	8007922 <_PrintInt+0x42>
    Width = NumDigits;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <_PrintInt+0x5e>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	db04      	blt.n	8007938 <_PrintInt+0x58>
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <_PrintInt+0x5e>
    FieldWidth--;
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	3b01      	subs	r3, #1
 800793c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <_PrintInt+0x6e>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d016      	beq.n	800797c <_PrintInt+0x9c>
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d111      	bne.n	800797c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800795e:	e006      	b.n	800796e <_PrintInt+0x8e>
        FieldWidth--;
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	3b01      	subs	r3, #1
 8007964:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8007966:	2120      	movs	r1, #32
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fea7 	bl	80076bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <_PrintInt+0x9c>
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	429a      	cmp	r2, r3
 800797a:	d3f1      	bcc.n	8007960 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	da07      	bge.n	8007992 <_PrintInt+0xb2>
    v = -v;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	425b      	negs	r3, r3
 8007986:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8007988:	212d      	movs	r1, #45	; 0x2d
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f7ff fe96 	bl	80076bc <_StoreChar>
 8007990:	e008      	b.n	80079a4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800799c:	212b      	movs	r1, #43	; 0x2b
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff fe8c 	bl	80076bc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d019      	beq.n	80079e2 <_PrintInt+0x102>
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d114      	bne.n	80079e2 <_PrintInt+0x102>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d111      	bne.n	80079e2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00e      	beq.n	80079e2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80079c4:	e006      	b.n	80079d4 <_PrintInt+0xf4>
        FieldWidth--;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80079cc:	2130      	movs	r1, #48	; 0x30
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f7ff fe74 	bl	80076bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <_PrintInt+0x102>
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d3f1      	bcc.n	80079c6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80079e2:	68b9      	ldr	r1, [r7, #8]
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7ff fedf 	bl	80077b4 <_PrintUnsigned>
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b098      	sub	sp, #96	; 0x60
 8007a04:	af02      	add	r7, sp, #8
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007a0c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a10:	f04f 0120 	mov.w	r1, #32
 8007a14:	f381 8811 	msr	BASEPRI, r1
 8007a18:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1a:	48b7      	ldr	r0, [pc, #732]	; (8007cf8 <_VPrintTarget+0x2f8>)
 8007a1c:	f7ff fc75 	bl	800730a <_PreparePacket>
 8007a20:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8007a22:	4bb5      	ldr	r3, [pc, #724]	; (8007cf8 <_VPrintTarget+0x2f8>)
 8007a24:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8007a46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8183 	beq.w	8007d56 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8007a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a54:	2b25      	cmp	r3, #37	; 0x25
 8007a56:	f040 8170 	bne.w	8007d3a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8007a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a6e:	3b23      	subs	r3, #35	; 0x23
 8007a70:	2b0d      	cmp	r3, #13
 8007a72:	d83f      	bhi.n	8007af4 <_VPrintTarget+0xf4>
 8007a74:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <_VPrintTarget+0x7c>)
 8007a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7a:	bf00      	nop
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007af5 	.word	0x08007af5
 8007a84:	08007af5 	.word	0x08007af5
 8007a88:	08007af5 	.word	0x08007af5
 8007a8c:	08007af5 	.word	0x08007af5
 8007a90:	08007af5 	.word	0x08007af5
 8007a94:	08007af5 	.word	0x08007af5
 8007a98:	08007af5 	.word	0x08007af5
 8007a9c:	08007ad5 	.word	0x08007ad5
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007af5 	.word	0x08007af5
 8007aac:	08007af5 	.word	0x08007af5
 8007ab0:	08007ac5 	.word	0x08007ac5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8007ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e01a      	b.n	8007afa <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8007ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac6:	f043 0302 	orr.w	r3, r3, #2
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e012      	b.n	8007afa <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8007ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad6:	f043 0304 	orr.w	r3, r3, #4
 8007ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e00a      	b.n	8007afa <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8007ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae6:	f043 0308 	orr.w	r3, r3, #8
 8007aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e002      	b.n	8007afa <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8007af4:	2300      	movs	r3, #0
 8007af6:	653b      	str	r3, [r7, #80]	; 0x50
 8007af8:	bf00      	nop
        }
      } while (v);
 8007afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1b0      	bne.n	8007a62 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8007b00:	2300      	movs	r3, #0
 8007b02:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8007b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b10:	2b2f      	cmp	r3, #47	; 0x2f
 8007b12:	d912      	bls.n	8007b3a <_VPrintTarget+0x13a>
 8007b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b18:	2b39      	cmp	r3, #57	; 0x39
 8007b1a:	d80e      	bhi.n	8007b3a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8007b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b32:	4413      	add	r3, r2
 8007b34:	3b30      	subs	r3, #48	; 0x30
 8007b36:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8007b38:	e7e4      	b.n	8007b04 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8007b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b4c:	d11d      	bne.n	8007b8a <_VPrintTarget+0x18a>
        sFormat++;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8007b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b60:	2b2f      	cmp	r3, #47	; 0x2f
 8007b62:	d912      	bls.n	8007b8a <_VPrintTarget+0x18a>
 8007b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b68:	2b39      	cmp	r3, #57	; 0x39
 8007b6a:	d80e      	bhi.n	8007b8a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8007b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b74:	4613      	mov	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4413      	add	r3, r2
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b82:	4413      	add	r3, r2
 8007b84:	3b30      	subs	r3, #48	; 0x30
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8007b88:	e7e4      	b.n	8007b54 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8007b92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b96:	2b6c      	cmp	r3, #108	; 0x6c
 8007b98:	d003      	beq.n	8007ba2 <_VPrintTarget+0x1a2>
 8007b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b9e:	2b68      	cmp	r3, #104	; 0x68
 8007ba0:	d107      	bne.n	8007bb2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8007bb0:	e7ef      	b.n	8007b92 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8007bb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bb6:	2b25      	cmp	r3, #37	; 0x25
 8007bb8:	f000 80b3 	beq.w	8007d22 <_VPrintTarget+0x322>
 8007bbc:	2b25      	cmp	r3, #37	; 0x25
 8007bbe:	f2c0 80b7 	blt.w	8007d30 <_VPrintTarget+0x330>
 8007bc2:	2b78      	cmp	r3, #120	; 0x78
 8007bc4:	f300 80b4 	bgt.w	8007d30 <_VPrintTarget+0x330>
 8007bc8:	2b58      	cmp	r3, #88	; 0x58
 8007bca:	f2c0 80b1 	blt.w	8007d30 <_VPrintTarget+0x330>
 8007bce:	3b58      	subs	r3, #88	; 0x58
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	f200 80ad 	bhi.w	8007d30 <_VPrintTarget+0x330>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <_VPrintTarget+0x1dc>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007cd3 	.word	0x08007cd3
 8007be0:	08007d31 	.word	0x08007d31
 8007be4:	08007d31 	.word	0x08007d31
 8007be8:	08007d31 	.word	0x08007d31
 8007bec:	08007d31 	.word	0x08007d31
 8007bf0:	08007d31 	.word	0x08007d31
 8007bf4:	08007d31 	.word	0x08007d31
 8007bf8:	08007d31 	.word	0x08007d31
 8007bfc:	08007d31 	.word	0x08007d31
 8007c00:	08007d31 	.word	0x08007d31
 8007c04:	08007d31 	.word	0x08007d31
 8007c08:	08007c61 	.word	0x08007c61
 8007c0c:	08007c87 	.word	0x08007c87
 8007c10:	08007d31 	.word	0x08007d31
 8007c14:	08007d31 	.word	0x08007d31
 8007c18:	08007d31 	.word	0x08007d31
 8007c1c:	08007d31 	.word	0x08007d31
 8007c20:	08007d31 	.word	0x08007d31
 8007c24:	08007d31 	.word	0x08007d31
 8007c28:	08007d31 	.word	0x08007d31
 8007c2c:	08007d31 	.word	0x08007d31
 8007c30:	08007d31 	.word	0x08007d31
 8007c34:	08007d31 	.word	0x08007d31
 8007c38:	08007d31 	.word	0x08007d31
 8007c3c:	08007cfd 	.word	0x08007cfd
 8007c40:	08007d31 	.word	0x08007d31
 8007c44:	08007d31 	.word	0x08007d31
 8007c48:	08007d31 	.word	0x08007d31
 8007c4c:	08007d31 	.word	0x08007d31
 8007c50:	08007cad 	.word	0x08007cad
 8007c54:	08007d31 	.word	0x08007d31
 8007c58:	08007d31 	.word	0x08007d31
 8007c5c:	08007cd3 	.word	0x08007cd3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	1d19      	adds	r1, r3, #4
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6011      	str	r1, [r2, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8007c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8007c74:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007c78:	f107 0314 	add.w	r3, r7, #20
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fd1c 	bl	80076bc <_StoreChar>
        break;
 8007c84:	e055      	b.n	8007d32 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1d19      	adds	r1, r3, #4
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6011      	str	r1, [r2, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007c94:	f107 0014 	add.w	r0, r7, #20
 8007c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ca6:	f7ff fe1b 	bl	80078e0 <_PrintInt>
        break;
 8007caa:	e042      	b.n	8007d32 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	1d19      	adds	r1, r3, #4
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6011      	str	r1, [r2, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cbc:	f107 0014 	add.w	r0, r7, #20
 8007cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cca:	220a      	movs	r2, #10
 8007ccc:	f7ff fd72 	bl	80077b4 <_PrintUnsigned>
        break;
 8007cd0:	e02f      	b.n	8007d32 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1d19      	adds	r1, r3, #4
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6011      	str	r1, [r2, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8007ce0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ce2:	f107 0014 	add.w	r0, r7, #20
 8007ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf0:	2210      	movs	r2, #16
 8007cf2:	f7ff fd5f 	bl	80077b4 <_PrintUnsigned>
        break;
 8007cf6:	e01c      	b.n	8007d32 <_VPrintTarget+0x332>
 8007cf8:	20014560 	.word	0x20014560
      case 'p':
        v = va_arg(*pParamList, int);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6011      	str	r1, [r2, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8007d0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d0c:	f107 0014 	add.w	r0, r7, #20
 8007d10:	2300      	movs	r3, #0
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	2308      	movs	r3, #8
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2308      	movs	r3, #8
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	f7ff fd4a 	bl	80077b4 <_PrintUnsigned>
        break;
 8007d20:	e007      	b.n	8007d32 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	2125      	movs	r1, #37	; 0x25
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fcc7 	bl	80076bc <_StoreChar>
        break;
 8007d2e:	e000      	b.n	8007d32 <_VPrintTarget+0x332>
      default:
        break;
 8007d30:	bf00      	nop
      }
      sFormat++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e007      	b.n	8007d4a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8007d3a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007d3e:	f107 0314 	add.w	r3, r7, #20
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fcb9 	bl	80076bc <_StoreChar>
    }
  } while (*sFormat);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f47f ae72 	bne.w	8007a38 <_VPrintTarget+0x38>
 8007d54:	e000      	b.n	8007d58 <_VPrintTarget+0x358>
      break;
 8007d56:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d041      	beq.n	8007de2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8007d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	643b      	str	r3, [r7, #64]	; 0x40
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6e:	e00b      	b.n	8007d88 <_VPrintTarget+0x388>
 8007d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	6439      	str	r1, [r7, #64]	; 0x40
 8007d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	09db      	lsrs	r3, r3, #7
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d8c:	d8f0      	bhi.n	8007d70 <_VPrintTarget+0x370>
 8007d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	643a      	str	r2, [r7, #64]	; 0x40
 8007d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da2:	2300      	movs	r3, #0
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
 8007da6:	e00b      	b.n	8007dc0 <_VPrintTarget+0x3c0>
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	63b9      	str	r1, [r7, #56]	; 0x38
 8007db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbc:	09db      	lsrs	r3, r3, #7
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d8f0      	bhi.n	8007da8 <_VPrintTarget+0x3a8>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	63ba      	str	r2, [r7, #56]	; 0x38
 8007dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	69b9      	ldr	r1, [r7, #24]
 8007dda:	221a      	movs	r2, #26
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fb85 	bl	80074ec <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8007de8:	bf00      	nop
 8007dea:	3758      	adds	r7, #88	; 0x58
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e04:	4917      	ldr	r1, [pc, #92]	; (8007e64 <SEGGER_SYSVIEW_Init+0x74>)
 8007e06:	4818      	ldr	r0, [pc, #96]	; (8007e68 <SEGGER_SYSVIEW_Init+0x78>)
 8007e08:	f7ff f93e 	bl	8007088 <SEGGER_RTT_AllocUpBuffer>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	4b16      	ldr	r3, [pc, #88]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e12:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007e14:	4b15      	ldr	r3, [pc, #84]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e16:	785a      	ldrb	r2, [r3, #1]
 8007e18:	4b14      	ldr	r3, [pc, #80]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e1a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	4618      	mov	r0, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2308      	movs	r3, #8
 8007e28:	4a11      	ldr	r2, [pc, #68]	; (8007e70 <SEGGER_SYSVIEW_Init+0x80>)
 8007e2a:	490f      	ldr	r1, [pc, #60]	; (8007e68 <SEGGER_SYSVIEW_Init+0x78>)
 8007e2c:	f7ff f9b0 	bl	8007190 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007e30:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <SEGGER_SYSVIEW_Init+0x84>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a0c      	ldr	r2, [pc, #48]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e3c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007e3e:	4a0b      	ldr	r2, [pc, #44]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007e44:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007e4a:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007e50:	4a06      	ldr	r2, [pc, #24]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <SEGGER_SYSVIEW_Init+0x7c>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20013528 	.word	0x20013528
 8007e68:	080096d0 	.word	0x080096d0
 8007e6c:	20014530 	.word	0x20014530
 8007e70:	20014528 	.word	0x20014528
 8007e74:	e0001004 	.word	0xe0001004

08007e78 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007e80:	4a04      	ldr	r2, [pc, #16]	; (8007e94 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6113      	str	r3, [r2, #16]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20014530 	.word	0x20014530

08007e98 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ea4:	f04f 0120 	mov.w	r1, #32
 8007ea8:	f381 8811 	msr	BASEPRI, r1
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	4808      	ldr	r0, [pc, #32]	; (8007ed0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007eb0:	f7ff fa2b 	bl	800730a <_PreparePacket>
 8007eb4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	68b9      	ldr	r1, [r7, #8]
 8007eba:	68b8      	ldr	r0, [r7, #8]
 8007ebc:	f7ff fb16 	bl	80074ec <_SendPacket>
  RECORD_END();
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f383 8811 	msr	BASEPRI, r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20014560 	.word	0x20014560

08007ed4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007ede:	f3ef 8311 	mrs	r3, BASEPRI
 8007ee2:	f04f 0120 	mov.w	r1, #32
 8007ee6:	f381 8811 	msr	BASEPRI, r1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	4816      	ldr	r0, [pc, #88]	; (8007f48 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007eee:	f7ff fa0c 	bl	800730a <_PreparePacket>
 8007ef2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	e00b      	b.n	8007f1a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	1c59      	adds	r1, r3, #1
 8007f0a:	61f9      	str	r1, [r7, #28]
 8007f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	09db      	lsrs	r3, r3, #7
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f1e:	d8f0      	bhi.n	8007f02 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	61fa      	str	r2, [r7, #28]
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	6938      	ldr	r0, [r7, #16]
 8007f36:	f7ff fad9 	bl	80074ec <_SendPacket>
  RECORD_END();
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f383 8811 	msr	BASEPRI, r3
}
 8007f40:	bf00      	nop
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20014560 	.word	0x20014560

08007f4c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08c      	sub	sp, #48	; 0x30
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f58:	f3ef 8311 	mrs	r3, BASEPRI
 8007f5c:	f04f 0120 	mov.w	r1, #32
 8007f60:	f381 8811 	msr	BASEPRI, r1
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	4825      	ldr	r0, [pc, #148]	; (8007ffc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007f68:	f7ff f9cf 	bl	800730a <_PreparePacket>
 8007f6c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f7a:	e00b      	b.n	8007f94 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	09db      	lsrs	r3, r3, #7
 8007f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	2b7f      	cmp	r3, #127	; 0x7f
 8007f98:	d8f0      	bhi.n	8007f7c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	e00b      	b.n	8007fcc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	1c59      	adds	r1, r3, #1
 8007fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8007fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	09db      	lsrs	r3, r3, #7
 8007fca:	623b      	str	r3, [r7, #32]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd0:	d8f0      	bhi.n	8007fb4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	6979      	ldr	r1, [r7, #20]
 8007fe6:	69b8      	ldr	r0, [r7, #24]
 8007fe8:	f7ff fa80 	bl	80074ec <_SendPacket>
  RECORD_END();
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f383 8811 	msr	BASEPRI, r3
}
 8007ff2:	bf00      	nop
 8007ff4:	3730      	adds	r7, #48	; 0x30
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20014560 	.word	0x20014560

08008000 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008000:	b580      	push	{r7, lr}
 8008002:	b090      	sub	sp, #64	; 0x40
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800800e:	f3ef 8311 	mrs	r3, BASEPRI
 8008012:	f04f 0120 	mov.w	r1, #32
 8008016:	f381 8811 	msr	BASEPRI, r1
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	4840      	ldr	r0, [pc, #256]	; (8008120 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800801e:	f7ff f974 	bl	800730a <_PreparePacket>
 8008022:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008030:	e00b      	b.n	800804a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	b2da      	uxtb	r2, r3
 8008036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800803c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	09db      	lsrs	r3, r3, #7
 8008048:	63bb      	str	r3, [r7, #56]	; 0x38
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b7f      	cmp	r3, #127	; 0x7f
 800804e:	d8f0      	bhi.n	8008032 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	633b      	str	r3, [r7, #48]	; 0x30
 8008068:	e00b      	b.n	8008082 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	b2da      	uxtb	r2, r3
 800806e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008070:	1c59      	adds	r1, r3, #1
 8008072:	6379      	str	r1, [r7, #52]	; 0x34
 8008074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	09db      	lsrs	r3, r3, #7
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b7f      	cmp	r3, #127	; 0x7f
 8008086:	d8f0      	bhi.n	800806a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	637a      	str	r2, [r7, #52]	; 0x34
 800808e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008090:	b2d2      	uxtb	r2, r2
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a0:	e00b      	b.n	80080ba <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80080a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	1c59      	adds	r1, r3, #1
 80080aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	09db      	lsrs	r3, r3, #7
 80080b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2b7f      	cmp	r3, #127	; 0x7f
 80080be:	d8f0      	bhi.n	80080a2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
 80080d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d6:	623b      	str	r3, [r7, #32]
 80080d8:	e00b      	b.n	80080f2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	1c59      	adds	r1, r3, #1
 80080e2:	6279      	str	r1, [r7, #36]	; 0x24
 80080e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	701a      	strb	r2, [r3, #0]
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	09db      	lsrs	r3, r3, #7
 80080f0:	623b      	str	r3, [r7, #32]
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	2b7f      	cmp	r3, #127	; 0x7f
 80080f6:	d8f0      	bhi.n	80080da <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	627a      	str	r2, [r7, #36]	; 0x24
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	6979      	ldr	r1, [r7, #20]
 800810c:	69b8      	ldr	r0, [r7, #24]
 800810e:	f7ff f9ed 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	f383 8811 	msr	BASEPRI, r3
}
 8008118:	bf00      	nop
 800811a:	3740      	adds	r7, #64	; 0x40
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20014560 	.word	0x20014560

08008124 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008124:	b580      	push	{r7, lr}
 8008126:	b08c      	sub	sp, #48	; 0x30
 8008128:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800812a:	4b59      	ldr	r3, [pc, #356]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 800812c:	2201      	movs	r2, #1
 800812e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008130:	f3ef 8311 	mrs	r3, BASEPRI
 8008134:	f04f 0120 	mov.w	r1, #32
 8008138:	f381 8811 	msr	BASEPRI, r1
 800813c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800813e:	4b54      	ldr	r3, [pc, #336]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	220a      	movs	r2, #10
 8008144:	4953      	ldr	r1, [pc, #332]	; (8008294 <SEGGER_SYSVIEW_Start+0x170>)
 8008146:	4618      	mov	r0, r3
 8008148:	f7f8 f84a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8008152:	f7fe feab 	bl	8006eac <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8008156:	200a      	movs	r0, #10
 8008158:	f7ff fe9e 	bl	8007e98 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800815c:	f3ef 8311 	mrs	r3, BASEPRI
 8008160:	f04f 0120 	mov.w	r1, #32
 8008164:	f381 8811 	msr	BASEPRI, r1
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	484b      	ldr	r0, [pc, #300]	; (8008298 <SEGGER_SYSVIEW_Start+0x174>)
 800816c:	f7ff f8cd 	bl	800730a <_PreparePacket>
 8008170:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800817a:	4b45      	ldr	r3, [pc, #276]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008180:	e00b      	b.n	800819a <SEGGER_SYSVIEW_Start+0x76>
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	b2da      	uxtb	r2, r3
 8008186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008188:	1c59      	adds	r1, r3, #1
 800818a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800818c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	09db      	lsrs	r3, r3, #7
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	2b7f      	cmp	r3, #127	; 0x7f
 800819e:	d8f0      	bhi.n	8008182 <SEGGER_SYSVIEW_Start+0x5e>
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
 80081b4:	4b36      	ldr	r3, [pc, #216]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	e00b      	b.n	80081d4 <SEGGER_SYSVIEW_Start+0xb0>
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	6279      	str	r1, [r7, #36]	; 0x24
 80081c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	09db      	lsrs	r3, r3, #7
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2b7f      	cmp	r3, #127	; 0x7f
 80081d8:	d8f0      	bhi.n	80081bc <SEGGER_SYSVIEW_Start+0x98>
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	627a      	str	r2, [r7, #36]	; 0x24
 80081e0:	6a3a      	ldr	r2, [r7, #32]
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	4b28      	ldr	r3, [pc, #160]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	61bb      	str	r3, [r7, #24]
 80081f4:	e00b      	b.n	800820e <SEGGER_SYSVIEW_Start+0xea>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	1c59      	adds	r1, r3, #1
 80081fe:	61f9      	str	r1, [r7, #28]
 8008200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	09db      	lsrs	r3, r3, #7
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b7f      	cmp	r3, #127	; 0x7f
 8008212:	d8f0      	bhi.n	80081f6 <SEGGER_SYSVIEW_Start+0xd2>
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	61fa      	str	r2, [r7, #28]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
 800822c:	e00b      	b.n	8008246 <SEGGER_SYSVIEW_Start+0x122>
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	1c59      	adds	r1, r3, #1
 8008236:	6179      	str	r1, [r7, #20]
 8008238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	09db      	lsrs	r3, r3, #7
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b7f      	cmp	r3, #127	; 0x7f
 800824a:	d8f0      	bhi.n	800822e <SEGGER_SYSVIEW_Start+0x10a>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	617a      	str	r2, [r7, #20]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800825c:	2218      	movs	r2, #24
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff f943 	bl	80074ec <_SendPacket>
      RECORD_END();
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800826c:	4b08      	ldr	r3, [pc, #32]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008274:	4b06      	ldr	r3, [pc, #24]	; (8008290 <SEGGER_SYSVIEW_Start+0x16c>)
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800827a:	f000 f9eb 	bl	8008654 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800827e:	f000 f9b1 	bl	80085e4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008282:	f000 fc09 	bl	8008a98 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008286:	bf00      	nop
 8008288:	3730      	adds	r7, #48	; 0x30
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20014530 	.word	0x20014530
 8008294:	080096f8 	.word	0x080096f8
 8008298:	20014560 	.word	0x20014560

0800829c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80082a2:	f3ef 8311 	mrs	r3, BASEPRI
 80082a6:	f04f 0120 	mov.w	r1, #32
 80082aa:	f381 8811 	msr	BASEPRI, r1
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	480b      	ldr	r0, [pc, #44]	; (80082e0 <SEGGER_SYSVIEW_Stop+0x44>)
 80082b2:	f7ff f82a 	bl	800730a <_PreparePacket>
 80082b6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80082c0:	220b      	movs	r2, #11
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6838      	ldr	r0, [r7, #0]
 80082c6:	f7ff f911 	bl	80074ec <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80082ca:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <SEGGER_SYSVIEW_Stop+0x48>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f383 8811 	msr	BASEPRI, r3
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20014560 	.word	0x20014560
 80082e4:	20014530 	.word	0x20014530

080082e8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80082ee:	f3ef 8311 	mrs	r3, BASEPRI
 80082f2:	f04f 0120 	mov.w	r1, #32
 80082f6:	f381 8811 	msr	BASEPRI, r1
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	4845      	ldr	r0, [pc, #276]	; (8008414 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80082fe:	f7ff f804 	bl	800730a <_PreparePacket>
 8008302:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830c:	4b42      	ldr	r3, [pc, #264]	; (8008418 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
 8008312:	e00b      	b.n	800832c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800831e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	09db      	lsrs	r3, r3, #7
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2b7f      	cmp	r3, #127	; 0x7f
 8008330:	d8f0      	bhi.n	8008314 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
 8008346:	4b34      	ldr	r3, [pc, #208]	; (8008418 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	623b      	str	r3, [r7, #32]
 800834c:	e00b      	b.n	8008366 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1c59      	adds	r1, r3, #1
 8008356:	6279      	str	r1, [r7, #36]	; 0x24
 8008358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	09db      	lsrs	r3, r3, #7
 8008364:	623b      	str	r3, [r7, #32]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	2b7f      	cmp	r3, #127	; 0x7f
 800836a:	d8f0      	bhi.n	800834e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	627a      	str	r2, [r7, #36]	; 0x24
 8008372:	6a3a      	ldr	r2, [r7, #32]
 8008374:	b2d2      	uxtb	r2, r2
 8008376:	701a      	strb	r2, [r3, #0]
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	4b25      	ldr	r3, [pc, #148]	; (8008418 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	e00b      	b.n	80083a0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	1c59      	adds	r1, r3, #1
 8008390:	61f9      	str	r1, [r7, #28]
 8008392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	09db      	lsrs	r3, r3, #7
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b7f      	cmp	r3, #127	; 0x7f
 80083a4:	d8f0      	bhi.n	8008388 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	61fa      	str	r2, [r7, #28]
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	2300      	movs	r3, #0
 80083bc:	613b      	str	r3, [r7, #16]
 80083be:	e00b      	b.n	80083d8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	1c59      	adds	r1, r3, #1
 80083c8:	6179      	str	r1, [r7, #20]
 80083ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083ce:	b2d2      	uxtb	r2, r2
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	09db      	lsrs	r3, r3, #7
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b7f      	cmp	r3, #127	; 0x7f
 80083dc:	d8f0      	bhi.n	80083c0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	617a      	str	r2, [r7, #20]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80083ee:	2218      	movs	r2, #24
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	68b8      	ldr	r0, [r7, #8]
 80083f4:	f7ff f87a 	bl	80074ec <_SendPacket>
  RECORD_END();
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80083fe:	4b06      	ldr	r3, [pc, #24]	; (8008418 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008406:	4b04      	ldr	r3, [pc, #16]	; (8008418 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	4798      	blx	r3
  }
}
 800840c:	bf00      	nop
 800840e:	3730      	adds	r7, #48	; 0x30
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20014560 	.word	0x20014560
 8008418:	20014530 	.word	0x20014530

0800841c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b092      	sub	sp, #72	; 0x48
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008424:	f3ef 8311 	mrs	r3, BASEPRI
 8008428:	f04f 0120 	mov.w	r1, #32
 800842c:	f381 8811 	msr	BASEPRI, r1
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	486a      	ldr	r0, [pc, #424]	; (80085dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008434:	f7fe ff69 	bl	800730a <_PreparePacket>
 8008438:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	647b      	str	r3, [r7, #68]	; 0x44
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4b66      	ldr	r3, [pc, #408]	; (80085e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	643b      	str	r3, [r7, #64]	; 0x40
 800844e:	e00b      	b.n	8008468 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008452:	b2da      	uxtb	r2, r3
 8008454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008456:	1c59      	adds	r1, r3, #1
 8008458:	6479      	str	r1, [r7, #68]	; 0x44
 800845a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008464:	09db      	lsrs	r3, r3, #7
 8008466:	643b      	str	r3, [r7, #64]	; 0x40
 8008468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846a:	2b7f      	cmp	r3, #127	; 0x7f
 800846c:	d8f0      	bhi.n	8008450 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	647a      	str	r2, [r7, #68]	; 0x44
 8008474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	701a      	strb	r2, [r3, #0]
 800847a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	63bb      	str	r3, [r7, #56]	; 0x38
 8008488:	e00b      	b.n	80084a2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	b2da      	uxtb	r2, r3
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	1c59      	adds	r1, r3, #1
 8008492:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	09db      	lsrs	r3, r3, #7
 80084a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	2b7f      	cmp	r3, #127	; 0x7f
 80084a6:	d8f0      	bhi.n	800848a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80084a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80084ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	4619      	mov	r1, r3
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7fe fed5 	bl	8007270 <_EncodeStr>
 80084c6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80084c8:	2209      	movs	r2, #9
 80084ca:	68f9      	ldr	r1, [r7, #12]
 80084cc:	6938      	ldr	r0, [r7, #16]
 80084ce:	f7ff f80d 	bl	80074ec <_SendPacket>
  //
  pPayload = pPayloadStart;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	633b      	str	r3, [r7, #48]	; 0x30
 80084e6:	e00b      	b.n	8008500 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	1c59      	adds	r1, r3, #1
 80084f0:	6379      	str	r1, [r7, #52]	; 0x34
 80084f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	09db      	lsrs	r3, r3, #7
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008502:	2b7f      	cmp	r3, #127	; 0x7f
 8008504:	d8f0      	bhi.n	80084e8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	637a      	str	r2, [r7, #52]	; 0x34
 800850c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008514:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008520:	e00b      	b.n	800853a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	b2da      	uxtb	r2, r3
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	1c59      	adds	r1, r3, #1
 800852a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800852c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008530:	b2d2      	uxtb	r2, r2
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	09db      	lsrs	r3, r3, #7
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	2b7f      	cmp	r3, #127	; 0x7f
 800853e:	d8f0      	bhi.n	8008522 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	623b      	str	r3, [r7, #32]
 800855a:	e00b      	b.n	8008574 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	b2da      	uxtb	r2, r3
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	1c59      	adds	r1, r3, #1
 8008564:	6279      	str	r1, [r7, #36]	; 0x24
 8008566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800856a:	b2d2      	uxtb	r2, r2
 800856c:	701a      	strb	r2, [r3, #0]
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	09db      	lsrs	r3, r3, #7
 8008572:	623b      	str	r3, [r7, #32]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	2b7f      	cmp	r3, #127	; 0x7f
 8008578:	d8f0      	bhi.n	800855c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	1c5a      	adds	r2, r3, #1
 800857e:	627a      	str	r2, [r7, #36]	; 0x24
 8008580:	6a3a      	ldr	r2, [r7, #32]
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	701a      	strb	r2, [r3, #0]
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	61fb      	str	r3, [r7, #28]
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	e00b      	b.n	80085ac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	1c59      	adds	r1, r3, #1
 800859c:	61f9      	str	r1, [r7, #28]
 800859e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	09db      	lsrs	r3, r3, #7
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b7f      	cmp	r3, #127	; 0x7f
 80085b0:	d8f0      	bhi.n	8008594 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	61fa      	str	r2, [r7, #28]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80085c2:	2215      	movs	r2, #21
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	6938      	ldr	r0, [r7, #16]
 80085c8:	f7fe ff90 	bl	80074ec <_SendPacket>
  RECORD_END();
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f383 8811 	msr	BASEPRI, r3
}
 80085d2:	bf00      	nop
 80085d4:	3748      	adds	r7, #72	; 0x48
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20014560 	.word	0x20014560
 80085e0:	20014530 	.word	0x20014530

080085e4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80085e8:	4b07      	ldr	r3, [pc, #28]	; (8008608 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d008      	beq.n	8008602 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80085fa:	4b03      	ldr	r3, [pc, #12]	; (8008608 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4798      	blx	r3
  }
}
 8008602:	bf00      	nop
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20014530 	.word	0x20014530

0800860c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008614:	f3ef 8311 	mrs	r3, BASEPRI
 8008618:	f04f 0120 	mov.w	r1, #32
 800861c:	f381 8811 	msr	BASEPRI, r1
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	480b      	ldr	r0, [pc, #44]	; (8008650 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008624:	f7fe fe71 	bl	800730a <_PreparePacket>
 8008628:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800862a:	2280      	movs	r2, #128	; 0x80
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	6938      	ldr	r0, [r7, #16]
 8008630:	f7fe fe1e 	bl	8007270 <_EncodeStr>
 8008634:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008636:	220e      	movs	r2, #14
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	6938      	ldr	r0, [r7, #16]
 800863c:	f7fe ff56 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f383 8811 	msr	BASEPRI, r3
}
 8008646:	bf00      	nop
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20014560 	.word	0x20014560

08008654 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01a      	beq.n	8008698 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008662:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d015      	beq.n	8008698 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800866c:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4798      	blx	r3
 8008674:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008678:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800867a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	000a      	movs	r2, r1
 8008688:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800868a:	4613      	mov	r3, r2
 800868c:	461a      	mov	r2, r3
 800868e:	4621      	mov	r1, r4
 8008690:	200d      	movs	r0, #13
 8008692:	f7ff fc5b 	bl	8007f4c <SEGGER_SYSVIEW_RecordU32x2>
 8008696:	e006      	b.n	80086a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4619      	mov	r1, r3
 800869e:	200c      	movs	r0, #12
 80086a0:	f7ff fc18 	bl	8007ed4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20014530 	.word	0x20014530
 80086b4:	e0001004 	.word	0xe0001004

080086b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80086be:	f3ef 8311 	mrs	r3, BASEPRI
 80086c2:	f04f 0120 	mov.w	r1, #32
 80086c6:	f381 8811 	msr	BASEPRI, r1
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	4807      	ldr	r0, [pc, #28]	; (80086ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80086ce:	f7fe fe1c 	bl	800730a <_PreparePacket>
 80086d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80086d4:	2211      	movs	r2, #17
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6838      	ldr	r0, [r7, #0]
 80086da:	f7fe ff07 	bl	80074ec <_SendPacket>
  RECORD_END();
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f383 8811 	msr	BASEPRI, r3
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20014560 	.word	0x20014560

080086f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80086f8:	f3ef 8311 	mrs	r3, BASEPRI
 80086fc:	f04f 0120 	mov.w	r1, #32
 8008700:	f381 8811 	msr	BASEPRI, r1
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	4819      	ldr	r0, [pc, #100]	; (800876c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008708:	f7fe fdff 	bl	800730a <_PreparePacket>
 800870c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008712:	4b17      	ldr	r3, [pc, #92]	; (8008770 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e00b      	b.n	800873e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	b2da      	uxtb	r2, r3
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	1c59      	adds	r1, r3, #1
 800872e:	61f9      	str	r1, [r7, #28]
 8008730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	09db      	lsrs	r3, r3, #7
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b7f      	cmp	r3, #127	; 0x7f
 8008742:	d8f0      	bhi.n	8008726 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	61fa      	str	r2, [r7, #28]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008754:	2208      	movs	r2, #8
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	6938      	ldr	r0, [r7, #16]
 800875a:	f7fe fec7 	bl	80074ec <_SendPacket>
  RECORD_END();
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f383 8811 	msr	BASEPRI, r3
}
 8008764:	bf00      	nop
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20014560 	.word	0x20014560
 8008770:	20014530 	.word	0x20014530

08008774 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800877c:	f3ef 8311 	mrs	r3, BASEPRI
 8008780:	f04f 0120 	mov.w	r1, #32
 8008784:	f381 8811 	msr	BASEPRI, r1
 8008788:	617b      	str	r3, [r7, #20]
 800878a:	4819      	ldr	r0, [pc, #100]	; (80087f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800878c:	f7fe fdbd 	bl	800730a <_PreparePacket>
 8008790:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008796:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	61bb      	str	r3, [r7, #24]
 80087a8:	e00b      	b.n	80087c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	1c59      	adds	r1, r3, #1
 80087b2:	61f9      	str	r1, [r7, #28]
 80087b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	09db      	lsrs	r3, r3, #7
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b7f      	cmp	r3, #127	; 0x7f
 80087c6:	d8f0      	bhi.n	80087aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	61fa      	str	r2, [r7, #28]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	701a      	strb	r2, [r3, #0]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80087d8:	2204      	movs	r2, #4
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	6938      	ldr	r0, [r7, #16]
 80087de:	f7fe fe85 	bl	80074ec <_SendPacket>
  RECORD_END();
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f383 8811 	msr	BASEPRI, r3
}
 80087e8:	bf00      	nop
 80087ea:	3720      	adds	r7, #32
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20014560 	.word	0x20014560
 80087f4:	20014530 	.word	0x20014530

080087f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008800:	f3ef 8311 	mrs	r3, BASEPRI
 8008804:	f04f 0120 	mov.w	r1, #32
 8008808:	f381 8811 	msr	BASEPRI, r1
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	4819      	ldr	r0, [pc, #100]	; (8008874 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008810:	f7fe fd7b 	bl	800730a <_PreparePacket>
 8008814:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800881a:	4b17      	ldr	r3, [pc, #92]	; (8008878 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	e00b      	b.n	8008846 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	1c59      	adds	r1, r3, #1
 8008836:	61f9      	str	r1, [r7, #28]
 8008838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800883c:	b2d2      	uxtb	r2, r2
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	09db      	lsrs	r3, r3, #7
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b7f      	cmp	r3, #127	; 0x7f
 800884a:	d8f0      	bhi.n	800882e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	61fa      	str	r2, [r7, #28]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	701a      	strb	r2, [r3, #0]
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800885c:	2206      	movs	r2, #6
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	6938      	ldr	r0, [r7, #16]
 8008862:	f7fe fe43 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f383 8811 	msr	BASEPRI, r3
}
 800886c:	bf00      	nop
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20014560 	.word	0x20014560
 8008878:	20014530 	.word	0x20014530

0800887c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008886:	f3ef 8311 	mrs	r3, BASEPRI
 800888a:	f04f 0120 	mov.w	r1, #32
 800888e:	f381 8811 	msr	BASEPRI, r1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	4827      	ldr	r0, [pc, #156]	; (8008934 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008896:	f7fe fd38 	bl	800730a <_PreparePacket>
 800889a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80088a0:	4b25      	ldr	r3, [pc, #148]	; (8008938 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	623b      	str	r3, [r7, #32]
 80088b2:	e00b      	b.n	80088cc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	b2da      	uxtb	r2, r3
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	6279      	str	r1, [r7, #36]	; 0x24
 80088be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	09db      	lsrs	r3, r3, #7
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b7f      	cmp	r3, #127	; 0x7f
 80088d0:	d8f0      	bhi.n	80088b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	627a      	str	r2, [r7, #36]	; 0x24
 80088d8:	6a3a      	ldr	r2, [r7, #32]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e00b      	b.n	8008904 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	1c59      	adds	r1, r3, #1
 80088f4:	61f9      	str	r1, [r7, #28]
 80088f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	09db      	lsrs	r3, r3, #7
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b7f      	cmp	r3, #127	; 0x7f
 8008908:	d8f0      	bhi.n	80088ec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	61fa      	str	r2, [r7, #28]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	b2d2      	uxtb	r2, r2
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800891a:	2207      	movs	r2, #7
 800891c:	68f9      	ldr	r1, [r7, #12]
 800891e:	6938      	ldr	r0, [r7, #16]
 8008920:	f7fe fde4 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f383 8811 	msr	BASEPRI, r3
}
 800892a:	bf00      	nop
 800892c:	3728      	adds	r7, #40	; 0x28
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20014560 	.word	0x20014560
 8008938:	20014530 	.word	0x20014530

0800893c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	1ad3      	subs	r3, r2, r3
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20014530 	.word	0x20014530

0800895c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	; 0x30
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008966:	4b3b      	ldr	r3, [pc, #236]	; (8008a54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d06d      	beq.n	8008a4a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800896e:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008974:	2300      	movs	r3, #0
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
 8008978:	e008      	b.n	800898c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	3301      	adds	r3, #1
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008990:	429a      	cmp	r2, r3
 8008992:	d3f2      	bcc.n	800897a <SEGGER_SYSVIEW_SendModule+0x1e>
 8008994:	e000      	b.n	8008998 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008996:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d055      	beq.n	8008a4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800899e:	f3ef 8311 	mrs	r3, BASEPRI
 80089a2:	f04f 0120 	mov.w	r1, #32
 80089a6:	f381 8811 	msr	BASEPRI, r1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	482a      	ldr	r0, [pc, #168]	; (8008a58 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80089ae:	f7fe fcac 	bl	800730a <_PreparePacket>
 80089b2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	623b      	str	r3, [r7, #32]
 80089c0:	e00b      	b.n	80089da <SEGGER_SYSVIEW_SendModule+0x7e>
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	1c59      	adds	r1, r3, #1
 80089ca:	6279      	str	r1, [r7, #36]	; 0x24
 80089cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089d0:	b2d2      	uxtb	r2, r2
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	09db      	lsrs	r3, r3, #7
 80089d8:	623b      	str	r3, [r7, #32]
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	2b7f      	cmp	r3, #127	; 0x7f
 80089de:	d8f0      	bhi.n	80089c2 <SEGGER_SYSVIEW_SendModule+0x66>
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	627a      	str	r2, [r7, #36]	; 0x24
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	61fb      	str	r3, [r7, #28]
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	61bb      	str	r3, [r7, #24]
 80089fa:	e00b      	b.n	8008a14 <SEGGER_SYSVIEW_SendModule+0xb8>
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	1c59      	adds	r1, r3, #1
 8008a04:	61f9      	str	r1, [r7, #28]
 8008a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	09db      	lsrs	r3, r3, #7
 8008a12:	61bb      	str	r3, [r7, #24]
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	d8f0      	bhi.n	80089fc <SEGGER_SYSVIEW_SendModule+0xa0>
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	61fa      	str	r2, [r7, #28]
 8008a20:	69ba      	ldr	r2, [r7, #24]
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2280      	movs	r2, #128	; 0x80
 8008a30:	4619      	mov	r1, r3
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7fe fc1c 	bl	8007270 <_EncodeStr>
 8008a38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008a3a:	2216      	movs	r2, #22
 8008a3c:	68f9      	ldr	r1, [r7, #12]
 8008a3e:	6938      	ldr	r0, [r7, #16]
 8008a40:	f7fe fd54 	bl	80074ec <_SendPacket>
      RECORD_END();
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3730      	adds	r7, #48	; 0x30
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20014558 	.word	0x20014558
 8008a58:	20014560 	.word	0x20014560

08008a5c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00f      	beq.n	8008a8a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f2      	bne.n	8008a70 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20014558 	.word	0x20014558

08008a98 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8008aa2:	f04f 0120 	mov.w	r1, #32
 8008aa6:	f381 8811 	msr	BASEPRI, r1
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	4817      	ldr	r0, [pc, #92]	; (8008b0c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008aae:	f7fe fc2c 	bl	800730a <_PreparePacket>
 8008ab2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	e00b      	b.n	8008adc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	6179      	str	r1, [r7, #20]
 8008ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	09db      	lsrs	r3, r3, #7
 8008ada:	613b      	str	r3, [r7, #16]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae0:	d8f0      	bhi.n	8008ac4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	617a      	str	r2, [r7, #20]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008af2:	221b      	movs	r2, #27
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	68b8      	ldr	r0, [r7, #8]
 8008af8:	f7fe fcf8 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f383 8811 	msr	BASEPRI, r3
}
 8008b02:	bf00      	nop
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20014560 	.word	0x20014560
 8008b10:	2001455c 	.word	0x2001455c

08008b14 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8008b14:	b40f      	push	{r0, r1, r2, r3}
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b082      	sub	sp, #8
 8008b1a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8008b1c:	f107 0314 	add.w	r3, r7, #20
 8008b20:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	461a      	mov	r2, r3
 8008b26:	2100      	movs	r1, #0
 8008b28:	6938      	ldr	r0, [r7, #16]
 8008b2a:	f7fe ff69 	bl	8007a00 <_VPrintTarget>
  va_end(ParamList);
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b38:	b004      	add	sp, #16
 8008b3a:	4770      	bx	lr

08008b3c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b44:	f3ef 8311 	mrs	r3, BASEPRI
 8008b48:	f04f 0120 	mov.w	r1, #32
 8008b4c:	f381 8811 	msr	BASEPRI, r1
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	4827      	ldr	r0, [pc, #156]	; (8008bf0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008b54:	f7fe fbd9 	bl	800730a <_PreparePacket>
 8008b58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b5a:	2280      	movs	r2, #128	; 0x80
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	6938      	ldr	r0, [r7, #16]
 8008b60:	f7fe fb86 	bl	8007270 <_EncodeStr>
 8008b64:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	623b      	str	r3, [r7, #32]
 8008b6e:	e00b      	b.n	8008b88 <SEGGER_SYSVIEW_Warn+0x4c>
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	6279      	str	r1, [r7, #36]	; 0x24
 8008b7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	09db      	lsrs	r3, r3, #7
 8008b86:	623b      	str	r3, [r7, #32]
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b8c:	d8f0      	bhi.n	8008b70 <SEGGER_SYSVIEW_Warn+0x34>
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	627a      	str	r2, [r7, #36]	; 0x24
 8008b94:	6a3a      	ldr	r2, [r7, #32]
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	61fb      	str	r3, [r7, #28]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	e00b      	b.n	8008bc0 <SEGGER_SYSVIEW_Warn+0x84>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	1c59      	adds	r1, r3, #1
 8008bb0:	61f9      	str	r1, [r7, #28]
 8008bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bb6:	b2d2      	uxtb	r2, r2
 8008bb8:	701a      	strb	r2, [r3, #0]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	09db      	lsrs	r3, r3, #7
 8008bbe:	61bb      	str	r3, [r7, #24]
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8008bc4:	d8f0      	bhi.n	8008ba8 <SEGGER_SYSVIEW_Warn+0x6c>
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	61fa      	str	r2, [r7, #28]
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008bd6:	221a      	movs	r2, #26
 8008bd8:	68f9      	ldr	r1, [r7, #12]
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f7fe fc86 	bl	80074ec <_SendPacket>
  RECORD_END();
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f383 8811 	msr	BASEPRI, r3
}
 8008be6:	bf00      	nop
 8008be8:	3728      	adds	r7, #40	; 0x28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20014560 	.word	0x20014560

08008bf4 <siprintf>:
 8008bf4:	b40e      	push	{r1, r2, r3}
 8008bf6:	b500      	push	{lr}
 8008bf8:	b09c      	sub	sp, #112	; 0x70
 8008bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8008bfc:	9002      	str	r0, [sp, #8]
 8008bfe:	9006      	str	r0, [sp, #24]
 8008c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c04:	4809      	ldr	r0, [pc, #36]	; (8008c2c <siprintf+0x38>)
 8008c06:	9107      	str	r1, [sp, #28]
 8008c08:	9104      	str	r1, [sp, #16]
 8008c0a:	4909      	ldr	r1, [pc, #36]	; (8008c30 <siprintf+0x3c>)
 8008c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c10:	9105      	str	r1, [sp, #20]
 8008c12:	6800      	ldr	r0, [r0, #0]
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	a902      	add	r1, sp, #8
 8008c18:	f000 f9b0 	bl	8008f7c <_svfiprintf_r>
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	b01c      	add	sp, #112	; 0x70
 8008c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c28:	b003      	add	sp, #12
 8008c2a:	4770      	bx	lr
 8008c2c:	2000006c 	.word	0x2000006c
 8008c30:	ffff0208 	.word	0xffff0208

08008c34 <memcmp>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	3901      	subs	r1, #1
 8008c38:	4402      	add	r2, r0
 8008c3a:	4290      	cmp	r0, r2
 8008c3c:	d101      	bne.n	8008c42 <memcmp+0xe>
 8008c3e:	2000      	movs	r0, #0
 8008c40:	e005      	b.n	8008c4e <memcmp+0x1a>
 8008c42:	7803      	ldrb	r3, [r0, #0]
 8008c44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d001      	beq.n	8008c50 <memcmp+0x1c>
 8008c4c:	1b18      	subs	r0, r3, r4
 8008c4e:	bd10      	pop	{r4, pc}
 8008c50:	3001      	adds	r0, #1
 8008c52:	e7f2      	b.n	8008c3a <memcmp+0x6>

08008c54 <memset>:
 8008c54:	4402      	add	r2, r0
 8008c56:	4603      	mov	r3, r0
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <memset+0xa>
 8008c5c:	4770      	bx	lr
 8008c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c62:	e7f9      	b.n	8008c58 <memset+0x4>

08008c64 <__errno>:
 8008c64:	4b01      	ldr	r3, [pc, #4]	; (8008c6c <__errno+0x8>)
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	2000006c 	.word	0x2000006c

08008c70 <__libc_init_array>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4d0d      	ldr	r5, [pc, #52]	; (8008ca8 <__libc_init_array+0x38>)
 8008c74:	4c0d      	ldr	r4, [pc, #52]	; (8008cac <__libc_init_array+0x3c>)
 8008c76:	1b64      	subs	r4, r4, r5
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	42a6      	cmp	r6, r4
 8008c7e:	d109      	bne.n	8008c94 <__libc_init_array+0x24>
 8008c80:	4d0b      	ldr	r5, [pc, #44]	; (8008cb0 <__libc_init_array+0x40>)
 8008c82:	4c0c      	ldr	r4, [pc, #48]	; (8008cb4 <__libc_init_array+0x44>)
 8008c84:	f000 fc6a 	bl	800955c <_init>
 8008c88:	1b64      	subs	r4, r4, r5
 8008c8a:	10a4      	asrs	r4, r4, #2
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	42a6      	cmp	r6, r4
 8008c90:	d105      	bne.n	8008c9e <__libc_init_array+0x2e>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c98:	4798      	blx	r3
 8008c9a:	3601      	adds	r6, #1
 8008c9c:	e7ee      	b.n	8008c7c <__libc_init_array+0xc>
 8008c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca2:	4798      	blx	r3
 8008ca4:	3601      	adds	r6, #1
 8008ca6:	e7f2      	b.n	8008c8e <__libc_init_array+0x1e>
 8008ca8:	08009750 	.word	0x08009750
 8008cac:	08009750 	.word	0x08009750
 8008cb0:	08009750 	.word	0x08009750
 8008cb4:	08009754 	.word	0x08009754

08008cb8 <__retarget_lock_acquire_recursive>:
 8008cb8:	4770      	bx	lr

08008cba <__retarget_lock_release_recursive>:
 8008cba:	4770      	bx	lr

08008cbc <memcpy>:
 8008cbc:	440a      	add	r2, r1
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cc4:	d100      	bne.n	8008cc8 <memcpy+0xc>
 8008cc6:	4770      	bx	lr
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	d1f9      	bne.n	8008cca <memcpy+0xe>
 8008cd6:	bd10      	pop	{r4, pc}

08008cd8 <_free_r>:
 8008cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	d044      	beq.n	8008d68 <_free_r+0x90>
 8008cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce2:	9001      	str	r0, [sp, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8008cea:	bfb8      	it	lt
 8008cec:	18e4      	addlt	r4, r4, r3
 8008cee:	f000 f8df 	bl	8008eb0 <__malloc_lock>
 8008cf2:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <_free_r+0x94>)
 8008cf4:	9801      	ldr	r0, [sp, #4]
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	b933      	cbnz	r3, 8008d08 <_free_r+0x30>
 8008cfa:	6063      	str	r3, [r4, #4]
 8008cfc:	6014      	str	r4, [r2, #0]
 8008cfe:	b003      	add	sp, #12
 8008d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d04:	f000 b8da 	b.w	8008ebc <__malloc_unlock>
 8008d08:	42a3      	cmp	r3, r4
 8008d0a:	d908      	bls.n	8008d1e <_free_r+0x46>
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	1961      	adds	r1, r4, r5
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf01      	itttt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	1949      	addeq	r1, r1, r5
 8008d1a:	6021      	streq	r1, [r4, #0]
 8008d1c:	e7ed      	b.n	8008cfa <_free_r+0x22>
 8008d1e:	461a      	mov	r2, r3
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	b10b      	cbz	r3, 8008d28 <_free_r+0x50>
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d9fa      	bls.n	8008d1e <_free_r+0x46>
 8008d28:	6811      	ldr	r1, [r2, #0]
 8008d2a:	1855      	adds	r5, r2, r1
 8008d2c:	42a5      	cmp	r5, r4
 8008d2e:	d10b      	bne.n	8008d48 <_free_r+0x70>
 8008d30:	6824      	ldr	r4, [r4, #0]
 8008d32:	4421      	add	r1, r4
 8008d34:	1854      	adds	r4, r2, r1
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	6011      	str	r1, [r2, #0]
 8008d3a:	d1e0      	bne.n	8008cfe <_free_r+0x26>
 8008d3c:	681c      	ldr	r4, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	6053      	str	r3, [r2, #4]
 8008d42:	440c      	add	r4, r1
 8008d44:	6014      	str	r4, [r2, #0]
 8008d46:	e7da      	b.n	8008cfe <_free_r+0x26>
 8008d48:	d902      	bls.n	8008d50 <_free_r+0x78>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	6003      	str	r3, [r0, #0]
 8008d4e:	e7d6      	b.n	8008cfe <_free_r+0x26>
 8008d50:	6825      	ldr	r5, [r4, #0]
 8008d52:	1961      	adds	r1, r4, r5
 8008d54:	428b      	cmp	r3, r1
 8008d56:	bf04      	itt	eq
 8008d58:	6819      	ldreq	r1, [r3, #0]
 8008d5a:	685b      	ldreq	r3, [r3, #4]
 8008d5c:	6063      	str	r3, [r4, #4]
 8008d5e:	bf04      	itt	eq
 8008d60:	1949      	addeq	r1, r1, r5
 8008d62:	6021      	streq	r1, [r4, #0]
 8008d64:	6054      	str	r4, [r2, #4]
 8008d66:	e7ca      	b.n	8008cfe <_free_r+0x26>
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd30      	pop	{r4, r5, pc}
 8008d6c:	20014784 	.word	0x20014784

08008d70 <sbrk_aligned>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4e0e      	ldr	r6, [pc, #56]	; (8008dac <sbrk_aligned+0x3c>)
 8008d74:	460c      	mov	r4, r1
 8008d76:	6831      	ldr	r1, [r6, #0]
 8008d78:	4605      	mov	r5, r0
 8008d7a:	b911      	cbnz	r1, 8008d82 <sbrk_aligned+0x12>
 8008d7c:	f000 fba6 	bl	80094cc <_sbrk_r>
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 fba1 	bl	80094cc <_sbrk_r>
 8008d8a:	1c43      	adds	r3, r0, #1
 8008d8c:	d00a      	beq.n	8008da4 <sbrk_aligned+0x34>
 8008d8e:	1cc4      	adds	r4, r0, #3
 8008d90:	f024 0403 	bic.w	r4, r4, #3
 8008d94:	42a0      	cmp	r0, r4
 8008d96:	d007      	beq.n	8008da8 <sbrk_aligned+0x38>
 8008d98:	1a21      	subs	r1, r4, r0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f000 fb96 	bl	80094cc <_sbrk_r>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d101      	bne.n	8008da8 <sbrk_aligned+0x38>
 8008da4:	f04f 34ff 	mov.w	r4, #4294967295
 8008da8:	4620      	mov	r0, r4
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	20014788 	.word	0x20014788

08008db0 <_malloc_r>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	1ccd      	adds	r5, r1, #3
 8008db6:	f025 0503 	bic.w	r5, r5, #3
 8008dba:	3508      	adds	r5, #8
 8008dbc:	2d0c      	cmp	r5, #12
 8008dbe:	bf38      	it	cc
 8008dc0:	250c      	movcc	r5, #12
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	db01      	blt.n	8008dcc <_malloc_r+0x1c>
 8008dc8:	42a9      	cmp	r1, r5
 8008dca:	d905      	bls.n	8008dd8 <_malloc_r+0x28>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	2600      	movs	r6, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008eac <_malloc_r+0xfc>
 8008ddc:	f000 f868 	bl	8008eb0 <__malloc_lock>
 8008de0:	f8d8 3000 	ldr.w	r3, [r8]
 8008de4:	461c      	mov	r4, r3
 8008de6:	bb5c      	cbnz	r4, 8008e40 <_malloc_r+0x90>
 8008de8:	4629      	mov	r1, r5
 8008dea:	4638      	mov	r0, r7
 8008dec:	f7ff ffc0 	bl	8008d70 <sbrk_aligned>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	4604      	mov	r4, r0
 8008df4:	d155      	bne.n	8008ea2 <_malloc_r+0xf2>
 8008df6:	f8d8 4000 	ldr.w	r4, [r8]
 8008dfa:	4626      	mov	r6, r4
 8008dfc:	2e00      	cmp	r6, #0
 8008dfe:	d145      	bne.n	8008e8c <_malloc_r+0xdc>
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d048      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	4631      	mov	r1, r6
 8008e08:	4638      	mov	r0, r7
 8008e0a:	eb04 0903 	add.w	r9, r4, r3
 8008e0e:	f000 fb5d 	bl	80094cc <_sbrk_r>
 8008e12:	4581      	cmp	r9, r0
 8008e14:	d13f      	bne.n	8008e96 <_malloc_r+0xe6>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	1a6d      	subs	r5, r5, r1
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff ffa7 	bl	8008d70 <sbrk_aligned>
 8008e22:	3001      	adds	r0, #1
 8008e24:	d037      	beq.n	8008e96 <_malloc_r+0xe6>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	442b      	add	r3, r5
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d038      	beq.n	8008ea6 <_malloc_r+0xf6>
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	42a2      	cmp	r2, r4
 8008e38:	d12b      	bne.n	8008e92 <_malloc_r+0xe2>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	e00f      	b.n	8008e60 <_malloc_r+0xb0>
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	1b52      	subs	r2, r2, r5
 8008e44:	d41f      	bmi.n	8008e86 <_malloc_r+0xd6>
 8008e46:	2a0b      	cmp	r2, #11
 8008e48:	d917      	bls.n	8008e7a <_malloc_r+0xca>
 8008e4a:	1961      	adds	r1, r4, r5
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	6025      	str	r5, [r4, #0]
 8008e50:	bf18      	it	ne
 8008e52:	6059      	strne	r1, [r3, #4]
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	bf08      	it	eq
 8008e58:	f8c8 1000 	streq.w	r1, [r8]
 8008e5c:	5162      	str	r2, [r4, r5]
 8008e5e:	604b      	str	r3, [r1, #4]
 8008e60:	4638      	mov	r0, r7
 8008e62:	f104 060b 	add.w	r6, r4, #11
 8008e66:	f000 f829 	bl	8008ebc <__malloc_unlock>
 8008e6a:	f026 0607 	bic.w	r6, r6, #7
 8008e6e:	1d23      	adds	r3, r4, #4
 8008e70:	1af2      	subs	r2, r6, r3
 8008e72:	d0ae      	beq.n	8008dd2 <_malloc_r+0x22>
 8008e74:	1b9b      	subs	r3, r3, r6
 8008e76:	50a3      	str	r3, [r4, r2]
 8008e78:	e7ab      	b.n	8008dd2 <_malloc_r+0x22>
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	d1dd      	bne.n	8008e3c <_malloc_r+0x8c>
 8008e80:	f8c8 2000 	str.w	r2, [r8]
 8008e84:	e7ec      	b.n	8008e60 <_malloc_r+0xb0>
 8008e86:	4623      	mov	r3, r4
 8008e88:	6864      	ldr	r4, [r4, #4]
 8008e8a:	e7ac      	b.n	8008de6 <_malloc_r+0x36>
 8008e8c:	4634      	mov	r4, r6
 8008e8e:	6876      	ldr	r6, [r6, #4]
 8008e90:	e7b4      	b.n	8008dfc <_malloc_r+0x4c>
 8008e92:	4613      	mov	r3, r2
 8008e94:	e7cc      	b.n	8008e30 <_malloc_r+0x80>
 8008e96:	230c      	movs	r3, #12
 8008e98:	603b      	str	r3, [r7, #0]
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	f000 f80e 	bl	8008ebc <__malloc_unlock>
 8008ea0:	e797      	b.n	8008dd2 <_malloc_r+0x22>
 8008ea2:	6025      	str	r5, [r4, #0]
 8008ea4:	e7dc      	b.n	8008e60 <_malloc_r+0xb0>
 8008ea6:	605b      	str	r3, [r3, #4]
 8008ea8:	deff      	udf	#255	; 0xff
 8008eaa:	bf00      	nop
 8008eac:	20014784 	.word	0x20014784

08008eb0 <__malloc_lock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_lock+0x8>)
 8008eb2:	f7ff bf01 	b.w	8008cb8 <__retarget_lock_acquire_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	20014780 	.word	0x20014780

08008ebc <__malloc_unlock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	; (8008ec4 <__malloc_unlock+0x8>)
 8008ebe:	f7ff befc 	b.w	8008cba <__retarget_lock_release_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20014780 	.word	0x20014780

08008ec8 <__ssputs_r>:
 8008ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ecc:	688e      	ldr	r6, [r1, #8]
 8008ece:	461f      	mov	r7, r3
 8008ed0:	42be      	cmp	r6, r7
 8008ed2:	680b      	ldr	r3, [r1, #0]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	4690      	mov	r8, r2
 8008eda:	d82c      	bhi.n	8008f36 <__ssputs_r+0x6e>
 8008edc:	898a      	ldrh	r2, [r1, #12]
 8008ede:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ee2:	d026      	beq.n	8008f32 <__ssputs_r+0x6a>
 8008ee4:	6965      	ldr	r5, [r4, #20]
 8008ee6:	6909      	ldr	r1, [r1, #16]
 8008ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008eec:	eba3 0901 	sub.w	r9, r3, r1
 8008ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ef4:	1c7b      	adds	r3, r7, #1
 8008ef6:	444b      	add	r3, r9
 8008ef8:	106d      	asrs	r5, r5, #1
 8008efa:	429d      	cmp	r5, r3
 8008efc:	bf38      	it	cc
 8008efe:	461d      	movcc	r5, r3
 8008f00:	0553      	lsls	r3, r2, #21
 8008f02:	d527      	bpl.n	8008f54 <__ssputs_r+0x8c>
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7ff ff53 	bl	8008db0 <_malloc_r>
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	b360      	cbz	r0, 8008f68 <__ssputs_r+0xa0>
 8008f0e:	6921      	ldr	r1, [r4, #16]
 8008f10:	464a      	mov	r2, r9
 8008f12:	f7ff fed3 	bl	8008cbc <memcpy>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f20:	81a3      	strh	r3, [r4, #12]
 8008f22:	6126      	str	r6, [r4, #16]
 8008f24:	6165      	str	r5, [r4, #20]
 8008f26:	444e      	add	r6, r9
 8008f28:	eba5 0509 	sub.w	r5, r5, r9
 8008f2c:	6026      	str	r6, [r4, #0]
 8008f2e:	60a5      	str	r5, [r4, #8]
 8008f30:	463e      	mov	r6, r7
 8008f32:	42be      	cmp	r6, r7
 8008f34:	d900      	bls.n	8008f38 <__ssputs_r+0x70>
 8008f36:	463e      	mov	r6, r7
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	4641      	mov	r1, r8
 8008f3e:	f000 faab 	bl	8009498 <memmove>
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	1b9b      	subs	r3, r3, r6
 8008f46:	60a3      	str	r3, [r4, #8]
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	4433      	add	r3, r6
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	462a      	mov	r2, r5
 8008f56:	f000 fac9 	bl	80094ec <_realloc_r>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1e0      	bne.n	8008f22 <__ssputs_r+0x5a>
 8008f60:	6921      	ldr	r1, [r4, #16]
 8008f62:	4650      	mov	r0, sl
 8008f64:	f7ff feb8 	bl	8008cd8 <_free_r>
 8008f68:	230c      	movs	r3, #12
 8008f6a:	f8ca 3000 	str.w	r3, [sl]
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e7e9      	b.n	8008f50 <__ssputs_r+0x88>

08008f7c <_svfiprintf_r>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	4698      	mov	r8, r3
 8008f82:	898b      	ldrh	r3, [r1, #12]
 8008f84:	061b      	lsls	r3, r3, #24
 8008f86:	b09d      	sub	sp, #116	; 0x74
 8008f88:	4607      	mov	r7, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	d50e      	bpl.n	8008fae <_svfiprintf_r+0x32>
 8008f90:	690b      	ldr	r3, [r1, #16]
 8008f92:	b963      	cbnz	r3, 8008fae <_svfiprintf_r+0x32>
 8008f94:	2140      	movs	r1, #64	; 0x40
 8008f96:	f7ff ff0b 	bl	8008db0 <_malloc_r>
 8008f9a:	6028      	str	r0, [r5, #0]
 8008f9c:	6128      	str	r0, [r5, #16]
 8008f9e:	b920      	cbnz	r0, 8008faa <_svfiprintf_r+0x2e>
 8008fa0:	230c      	movs	r3, #12
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e0d0      	b.n	800914c <_svfiprintf_r+0x1d0>
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	616b      	str	r3, [r5, #20]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	2320      	movs	r3, #32
 8008fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fbc:	2330      	movs	r3, #48	; 0x30
 8008fbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009164 <_svfiprintf_r+0x1e8>
 8008fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fc6:	f04f 0901 	mov.w	r9, #1
 8008fca:	4623      	mov	r3, r4
 8008fcc:	469a      	mov	sl, r3
 8008fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fd2:	b10a      	cbz	r2, 8008fd8 <_svfiprintf_r+0x5c>
 8008fd4:	2a25      	cmp	r2, #37	; 0x25
 8008fd6:	d1f9      	bne.n	8008fcc <_svfiprintf_r+0x50>
 8008fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fdc:	d00b      	beq.n	8008ff6 <_svfiprintf_r+0x7a>
 8008fde:	465b      	mov	r3, fp
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f7ff ff6f 	bl	8008ec8 <__ssputs_r>
 8008fea:	3001      	adds	r0, #1
 8008fec:	f000 80a9 	beq.w	8009142 <_svfiprintf_r+0x1c6>
 8008ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ff2:	445a      	add	r2, fp
 8008ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80a1 	beq.w	8009142 <_svfiprintf_r+0x1c6>
 8009000:	2300      	movs	r3, #0
 8009002:	f04f 32ff 	mov.w	r2, #4294967295
 8009006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800900a:	f10a 0a01 	add.w	sl, sl, #1
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	9307      	str	r3, [sp, #28]
 8009012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009016:	931a      	str	r3, [sp, #104]	; 0x68
 8009018:	4654      	mov	r4, sl
 800901a:	2205      	movs	r2, #5
 800901c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009020:	4850      	ldr	r0, [pc, #320]	; (8009164 <_svfiprintf_r+0x1e8>)
 8009022:	f7f7 f935 	bl	8000290 <memchr>
 8009026:	9a04      	ldr	r2, [sp, #16]
 8009028:	b9d8      	cbnz	r0, 8009062 <_svfiprintf_r+0xe6>
 800902a:	06d0      	lsls	r0, r2, #27
 800902c:	bf44      	itt	mi
 800902e:	2320      	movmi	r3, #32
 8009030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009034:	0711      	lsls	r1, r2, #28
 8009036:	bf44      	itt	mi
 8009038:	232b      	movmi	r3, #43	; 0x2b
 800903a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800903e:	f89a 3000 	ldrb.w	r3, [sl]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d015      	beq.n	8009072 <_svfiprintf_r+0xf6>
 8009046:	9a07      	ldr	r2, [sp, #28]
 8009048:	4654      	mov	r4, sl
 800904a:	2000      	movs	r0, #0
 800904c:	f04f 0c0a 	mov.w	ip, #10
 8009050:	4621      	mov	r1, r4
 8009052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009056:	3b30      	subs	r3, #48	; 0x30
 8009058:	2b09      	cmp	r3, #9
 800905a:	d94d      	bls.n	80090f8 <_svfiprintf_r+0x17c>
 800905c:	b1b0      	cbz	r0, 800908c <_svfiprintf_r+0x110>
 800905e:	9207      	str	r2, [sp, #28]
 8009060:	e014      	b.n	800908c <_svfiprintf_r+0x110>
 8009062:	eba0 0308 	sub.w	r3, r0, r8
 8009066:	fa09 f303 	lsl.w	r3, r9, r3
 800906a:	4313      	orrs	r3, r2
 800906c:	9304      	str	r3, [sp, #16]
 800906e:	46a2      	mov	sl, r4
 8009070:	e7d2      	b.n	8009018 <_svfiprintf_r+0x9c>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	1d19      	adds	r1, r3, #4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	9103      	str	r1, [sp, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfbb      	ittet	lt
 800907e:	425b      	neglt	r3, r3
 8009080:	f042 0202 	orrlt.w	r2, r2, #2
 8009084:	9307      	strge	r3, [sp, #28]
 8009086:	9307      	strlt	r3, [sp, #28]
 8009088:	bfb8      	it	lt
 800908a:	9204      	strlt	r2, [sp, #16]
 800908c:	7823      	ldrb	r3, [r4, #0]
 800908e:	2b2e      	cmp	r3, #46	; 0x2e
 8009090:	d10c      	bne.n	80090ac <_svfiprintf_r+0x130>
 8009092:	7863      	ldrb	r3, [r4, #1]
 8009094:	2b2a      	cmp	r3, #42	; 0x2a
 8009096:	d134      	bne.n	8009102 <_svfiprintf_r+0x186>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	9203      	str	r2, [sp, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfb8      	it	lt
 80090a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090a8:	3402      	adds	r4, #2
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009174 <_svfiprintf_r+0x1f8>
 80090b0:	7821      	ldrb	r1, [r4, #0]
 80090b2:	2203      	movs	r2, #3
 80090b4:	4650      	mov	r0, sl
 80090b6:	f7f7 f8eb 	bl	8000290 <memchr>
 80090ba:	b138      	cbz	r0, 80090cc <_svfiprintf_r+0x150>
 80090bc:	9b04      	ldr	r3, [sp, #16]
 80090be:	eba0 000a 	sub.w	r0, r0, sl
 80090c2:	2240      	movs	r2, #64	; 0x40
 80090c4:	4082      	lsls	r2, r0
 80090c6:	4313      	orrs	r3, r2
 80090c8:	3401      	adds	r4, #1
 80090ca:	9304      	str	r3, [sp, #16]
 80090cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d0:	4825      	ldr	r0, [pc, #148]	; (8009168 <_svfiprintf_r+0x1ec>)
 80090d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090d6:	2206      	movs	r2, #6
 80090d8:	f7f7 f8da 	bl	8000290 <memchr>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d038      	beq.n	8009152 <_svfiprintf_r+0x1d6>
 80090e0:	4b22      	ldr	r3, [pc, #136]	; (800916c <_svfiprintf_r+0x1f0>)
 80090e2:	bb1b      	cbnz	r3, 800912c <_svfiprintf_r+0x1b0>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	3307      	adds	r3, #7
 80090e8:	f023 0307 	bic.w	r3, r3, #7
 80090ec:	3308      	adds	r3, #8
 80090ee:	9303      	str	r3, [sp, #12]
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	4433      	add	r3, r6
 80090f4:	9309      	str	r3, [sp, #36]	; 0x24
 80090f6:	e768      	b.n	8008fca <_svfiprintf_r+0x4e>
 80090f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090fc:	460c      	mov	r4, r1
 80090fe:	2001      	movs	r0, #1
 8009100:	e7a6      	b.n	8009050 <_svfiprintf_r+0xd4>
 8009102:	2300      	movs	r3, #0
 8009104:	3401      	adds	r4, #1
 8009106:	9305      	str	r3, [sp, #20]
 8009108:	4619      	mov	r1, r3
 800910a:	f04f 0c0a 	mov.w	ip, #10
 800910e:	4620      	mov	r0, r4
 8009110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009114:	3a30      	subs	r2, #48	; 0x30
 8009116:	2a09      	cmp	r2, #9
 8009118:	d903      	bls.n	8009122 <_svfiprintf_r+0x1a6>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0c6      	beq.n	80090ac <_svfiprintf_r+0x130>
 800911e:	9105      	str	r1, [sp, #20]
 8009120:	e7c4      	b.n	80090ac <_svfiprintf_r+0x130>
 8009122:	fb0c 2101 	mla	r1, ip, r1, r2
 8009126:	4604      	mov	r4, r0
 8009128:	2301      	movs	r3, #1
 800912a:	e7f0      	b.n	800910e <_svfiprintf_r+0x192>
 800912c:	ab03      	add	r3, sp, #12
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	462a      	mov	r2, r5
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <_svfiprintf_r+0x1f4>)
 8009134:	a904      	add	r1, sp, #16
 8009136:	4638      	mov	r0, r7
 8009138:	f3af 8000 	nop.w
 800913c:	1c42      	adds	r2, r0, #1
 800913e:	4606      	mov	r6, r0
 8009140:	d1d6      	bne.n	80090f0 <_svfiprintf_r+0x174>
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	065b      	lsls	r3, r3, #25
 8009146:	f53f af2d 	bmi.w	8008fa4 <_svfiprintf_r+0x28>
 800914a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800914c:	b01d      	add	sp, #116	; 0x74
 800914e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009152:	ab03      	add	r3, sp, #12
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	462a      	mov	r2, r5
 8009158:	4b05      	ldr	r3, [pc, #20]	; (8009170 <_svfiprintf_r+0x1f4>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	4638      	mov	r0, r7
 800915e:	f000 f879 	bl	8009254 <_printf_i>
 8009162:	e7eb      	b.n	800913c <_svfiprintf_r+0x1c0>
 8009164:	08009714 	.word	0x08009714
 8009168:	0800971e 	.word	0x0800971e
 800916c:	00000000 	.word	0x00000000
 8009170:	08008ec9 	.word	0x08008ec9
 8009174:	0800971a 	.word	0x0800971a

08009178 <_printf_common>:
 8009178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800917c:	4616      	mov	r6, r2
 800917e:	4699      	mov	r9, r3
 8009180:	688a      	ldr	r2, [r1, #8]
 8009182:	690b      	ldr	r3, [r1, #16]
 8009184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009188:	4293      	cmp	r3, r2
 800918a:	bfb8      	it	lt
 800918c:	4613      	movlt	r3, r2
 800918e:	6033      	str	r3, [r6, #0]
 8009190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009194:	4607      	mov	r7, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b10a      	cbz	r2, 800919e <_printf_common+0x26>
 800919a:	3301      	adds	r3, #1
 800919c:	6033      	str	r3, [r6, #0]
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	0699      	lsls	r1, r3, #26
 80091a2:	bf42      	ittt	mi
 80091a4:	6833      	ldrmi	r3, [r6, #0]
 80091a6:	3302      	addmi	r3, #2
 80091a8:	6033      	strmi	r3, [r6, #0]
 80091aa:	6825      	ldr	r5, [r4, #0]
 80091ac:	f015 0506 	ands.w	r5, r5, #6
 80091b0:	d106      	bne.n	80091c0 <_printf_common+0x48>
 80091b2:	f104 0a19 	add.w	sl, r4, #25
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	6832      	ldr	r2, [r6, #0]
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dc26      	bgt.n	800920e <_printf_common+0x96>
 80091c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80091c4:	1e13      	subs	r3, r2, #0
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	bf18      	it	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	0692      	lsls	r2, r2, #26
 80091ce:	d42b      	bmi.n	8009228 <_printf_common+0xb0>
 80091d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091d4:	4649      	mov	r1, r9
 80091d6:	4638      	mov	r0, r7
 80091d8:	47c0      	blx	r8
 80091da:	3001      	adds	r0, #1
 80091dc:	d01e      	beq.n	800921c <_printf_common+0xa4>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	6922      	ldr	r2, [r4, #16]
 80091e2:	f003 0306 	and.w	r3, r3, #6
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	bf02      	ittt	eq
 80091ea:	68e5      	ldreq	r5, [r4, #12]
 80091ec:	6833      	ldreq	r3, [r6, #0]
 80091ee:	1aed      	subeq	r5, r5, r3
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	bf0c      	ite	eq
 80091f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091f8:	2500      	movne	r5, #0
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bfc4      	itt	gt
 80091fe:	1a9b      	subgt	r3, r3, r2
 8009200:	18ed      	addgt	r5, r5, r3
 8009202:	2600      	movs	r6, #0
 8009204:	341a      	adds	r4, #26
 8009206:	42b5      	cmp	r5, r6
 8009208:	d11a      	bne.n	8009240 <_printf_common+0xc8>
 800920a:	2000      	movs	r0, #0
 800920c:	e008      	b.n	8009220 <_printf_common+0xa8>
 800920e:	2301      	movs	r3, #1
 8009210:	4652      	mov	r2, sl
 8009212:	4649      	mov	r1, r9
 8009214:	4638      	mov	r0, r7
 8009216:	47c0      	blx	r8
 8009218:	3001      	adds	r0, #1
 800921a:	d103      	bne.n	8009224 <_printf_common+0xac>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009224:	3501      	adds	r5, #1
 8009226:	e7c6      	b.n	80091b6 <_printf_common+0x3e>
 8009228:	18e1      	adds	r1, r4, r3
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	2030      	movs	r0, #48	; 0x30
 800922e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009232:	4422      	add	r2, r4
 8009234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800923c:	3302      	adds	r3, #2
 800923e:	e7c7      	b.n	80091d0 <_printf_common+0x58>
 8009240:	2301      	movs	r3, #1
 8009242:	4622      	mov	r2, r4
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d0e6      	beq.n	800921c <_printf_common+0xa4>
 800924e:	3601      	adds	r6, #1
 8009250:	e7d9      	b.n	8009206 <_printf_common+0x8e>
	...

08009254 <_printf_i>:
 8009254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009258:	7e0f      	ldrb	r7, [r1, #24]
 800925a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800925c:	2f78      	cmp	r7, #120	; 0x78
 800925e:	4691      	mov	r9, r2
 8009260:	4680      	mov	r8, r0
 8009262:	460c      	mov	r4, r1
 8009264:	469a      	mov	sl, r3
 8009266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800926a:	d807      	bhi.n	800927c <_printf_i+0x28>
 800926c:	2f62      	cmp	r7, #98	; 0x62
 800926e:	d80a      	bhi.n	8009286 <_printf_i+0x32>
 8009270:	2f00      	cmp	r7, #0
 8009272:	f000 80d4 	beq.w	800941e <_printf_i+0x1ca>
 8009276:	2f58      	cmp	r7, #88	; 0x58
 8009278:	f000 80c0 	beq.w	80093fc <_printf_i+0x1a8>
 800927c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009284:	e03a      	b.n	80092fc <_printf_i+0xa8>
 8009286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800928a:	2b15      	cmp	r3, #21
 800928c:	d8f6      	bhi.n	800927c <_printf_i+0x28>
 800928e:	a101      	add	r1, pc, #4	; (adr r1, 8009294 <_printf_i+0x40>)
 8009290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009294:	080092ed 	.word	0x080092ed
 8009298:	08009301 	.word	0x08009301
 800929c:	0800927d 	.word	0x0800927d
 80092a0:	0800927d 	.word	0x0800927d
 80092a4:	0800927d 	.word	0x0800927d
 80092a8:	0800927d 	.word	0x0800927d
 80092ac:	08009301 	.word	0x08009301
 80092b0:	0800927d 	.word	0x0800927d
 80092b4:	0800927d 	.word	0x0800927d
 80092b8:	0800927d 	.word	0x0800927d
 80092bc:	0800927d 	.word	0x0800927d
 80092c0:	08009405 	.word	0x08009405
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	080093bf 	.word	0x080093bf
 80092cc:	0800927d 	.word	0x0800927d
 80092d0:	0800927d 	.word	0x0800927d
 80092d4:	08009427 	.word	0x08009427
 80092d8:	0800927d 	.word	0x0800927d
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	0800927d 	.word	0x0800927d
 80092e4:	0800927d 	.word	0x0800927d
 80092e8:	080093c7 	.word	0x080093c7
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	602a      	str	r2, [r5, #0]
 80092f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092fc:	2301      	movs	r3, #1
 80092fe:	e09f      	b.n	8009440 <_printf_i+0x1ec>
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	682b      	ldr	r3, [r5, #0]
 8009304:	0607      	lsls	r7, r0, #24
 8009306:	f103 0104 	add.w	r1, r3, #4
 800930a:	6029      	str	r1, [r5, #0]
 800930c:	d501      	bpl.n	8009312 <_printf_i+0xbe>
 800930e:	681e      	ldr	r6, [r3, #0]
 8009310:	e003      	b.n	800931a <_printf_i+0xc6>
 8009312:	0646      	lsls	r6, r0, #25
 8009314:	d5fb      	bpl.n	800930e <_printf_i+0xba>
 8009316:	f9b3 6000 	ldrsh.w	r6, [r3]
 800931a:	2e00      	cmp	r6, #0
 800931c:	da03      	bge.n	8009326 <_printf_i+0xd2>
 800931e:	232d      	movs	r3, #45	; 0x2d
 8009320:	4276      	negs	r6, r6
 8009322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009326:	485a      	ldr	r0, [pc, #360]	; (8009490 <_printf_i+0x23c>)
 8009328:	230a      	movs	r3, #10
 800932a:	e012      	b.n	8009352 <_printf_i+0xfe>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	6029      	str	r1, [r5, #0]
 8009334:	0605      	lsls	r5, r0, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xe8>
 8009338:	681e      	ldr	r6, [r3, #0]
 800933a:	e002      	b.n	8009342 <_printf_i+0xee>
 800933c:	0641      	lsls	r1, r0, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xe4>
 8009340:	881e      	ldrh	r6, [r3, #0]
 8009342:	4853      	ldr	r0, [pc, #332]	; (8009490 <_printf_i+0x23c>)
 8009344:	2f6f      	cmp	r7, #111	; 0x6f
 8009346:	bf0c      	ite	eq
 8009348:	2308      	moveq	r3, #8
 800934a:	230a      	movne	r3, #10
 800934c:	2100      	movs	r1, #0
 800934e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009352:	6865      	ldr	r5, [r4, #4]
 8009354:	60a5      	str	r5, [r4, #8]
 8009356:	2d00      	cmp	r5, #0
 8009358:	bfa2      	ittt	ge
 800935a:	6821      	ldrge	r1, [r4, #0]
 800935c:	f021 0104 	bicge.w	r1, r1, #4
 8009360:	6021      	strge	r1, [r4, #0]
 8009362:	b90e      	cbnz	r6, 8009368 <_printf_i+0x114>
 8009364:	2d00      	cmp	r5, #0
 8009366:	d04b      	beq.n	8009400 <_printf_i+0x1ac>
 8009368:	4615      	mov	r5, r2
 800936a:	fbb6 f1f3 	udiv	r1, r6, r3
 800936e:	fb03 6711 	mls	r7, r3, r1, r6
 8009372:	5dc7      	ldrb	r7, [r0, r7]
 8009374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009378:	4637      	mov	r7, r6
 800937a:	42bb      	cmp	r3, r7
 800937c:	460e      	mov	r6, r1
 800937e:	d9f4      	bls.n	800936a <_printf_i+0x116>
 8009380:	2b08      	cmp	r3, #8
 8009382:	d10b      	bne.n	800939c <_printf_i+0x148>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	07de      	lsls	r6, r3, #31
 8009388:	d508      	bpl.n	800939c <_printf_i+0x148>
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	6861      	ldr	r1, [r4, #4]
 800938e:	4299      	cmp	r1, r3
 8009390:	bfde      	ittt	le
 8009392:	2330      	movle	r3, #48	; 0x30
 8009394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800939c:	1b52      	subs	r2, r2, r5
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	f8cd a000 	str.w	sl, [sp]
 80093a4:	464b      	mov	r3, r9
 80093a6:	aa03      	add	r2, sp, #12
 80093a8:	4621      	mov	r1, r4
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7ff fee4 	bl	8009178 <_printf_common>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d14a      	bne.n	800944a <_printf_i+0x1f6>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b004      	add	sp, #16
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	f043 0320 	orr.w	r3, r3, #32
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	4833      	ldr	r0, [pc, #204]	; (8009494 <_printf_i+0x240>)
 80093c8:	2778      	movs	r7, #120	; 0x78
 80093ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	6829      	ldr	r1, [r5, #0]
 80093d2:	061f      	lsls	r7, r3, #24
 80093d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80093d8:	d402      	bmi.n	80093e0 <_printf_i+0x18c>
 80093da:	065f      	lsls	r7, r3, #25
 80093dc:	bf48      	it	mi
 80093de:	b2b6      	uxthmi	r6, r6
 80093e0:	07df      	lsls	r7, r3, #31
 80093e2:	bf48      	it	mi
 80093e4:	f043 0320 	orrmi.w	r3, r3, #32
 80093e8:	6029      	str	r1, [r5, #0]
 80093ea:	bf48      	it	mi
 80093ec:	6023      	strmi	r3, [r4, #0]
 80093ee:	b91e      	cbnz	r6, 80093f8 <_printf_i+0x1a4>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	f023 0320 	bic.w	r3, r3, #32
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	2310      	movs	r3, #16
 80093fa:	e7a7      	b.n	800934c <_printf_i+0xf8>
 80093fc:	4824      	ldr	r0, [pc, #144]	; (8009490 <_printf_i+0x23c>)
 80093fe:	e7e4      	b.n	80093ca <_printf_i+0x176>
 8009400:	4615      	mov	r5, r2
 8009402:	e7bd      	b.n	8009380 <_printf_i+0x12c>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	6826      	ldr	r6, [r4, #0]
 8009408:	6961      	ldr	r1, [r4, #20]
 800940a:	1d18      	adds	r0, r3, #4
 800940c:	6028      	str	r0, [r5, #0]
 800940e:	0635      	lsls	r5, r6, #24
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	d501      	bpl.n	8009418 <_printf_i+0x1c4>
 8009414:	6019      	str	r1, [r3, #0]
 8009416:	e002      	b.n	800941e <_printf_i+0x1ca>
 8009418:	0670      	lsls	r0, r6, #25
 800941a:	d5fb      	bpl.n	8009414 <_printf_i+0x1c0>
 800941c:	8019      	strh	r1, [r3, #0]
 800941e:	2300      	movs	r3, #0
 8009420:	6123      	str	r3, [r4, #16]
 8009422:	4615      	mov	r5, r2
 8009424:	e7bc      	b.n	80093a0 <_printf_i+0x14c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	1d1a      	adds	r2, r3, #4
 800942a:	602a      	str	r2, [r5, #0]
 800942c:	681d      	ldr	r5, [r3, #0]
 800942e:	6862      	ldr	r2, [r4, #4]
 8009430:	2100      	movs	r1, #0
 8009432:	4628      	mov	r0, r5
 8009434:	f7f6 ff2c 	bl	8000290 <memchr>
 8009438:	b108      	cbz	r0, 800943e <_printf_i+0x1ea>
 800943a:	1b40      	subs	r0, r0, r5
 800943c:	6060      	str	r0, [r4, #4]
 800943e:	6863      	ldr	r3, [r4, #4]
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	2300      	movs	r3, #0
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009448:	e7aa      	b.n	80093a0 <_printf_i+0x14c>
 800944a:	6923      	ldr	r3, [r4, #16]
 800944c:	462a      	mov	r2, r5
 800944e:	4649      	mov	r1, r9
 8009450:	4640      	mov	r0, r8
 8009452:	47d0      	blx	sl
 8009454:	3001      	adds	r0, #1
 8009456:	d0ad      	beq.n	80093b4 <_printf_i+0x160>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	079b      	lsls	r3, r3, #30
 800945c:	d413      	bmi.n	8009486 <_printf_i+0x232>
 800945e:	68e0      	ldr	r0, [r4, #12]
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	4298      	cmp	r0, r3
 8009464:	bfb8      	it	lt
 8009466:	4618      	movlt	r0, r3
 8009468:	e7a6      	b.n	80093b8 <_printf_i+0x164>
 800946a:	2301      	movs	r3, #1
 800946c:	4632      	mov	r2, r6
 800946e:	4649      	mov	r1, r9
 8009470:	4640      	mov	r0, r8
 8009472:	47d0      	blx	sl
 8009474:	3001      	adds	r0, #1
 8009476:	d09d      	beq.n	80093b4 <_printf_i+0x160>
 8009478:	3501      	adds	r5, #1
 800947a:	68e3      	ldr	r3, [r4, #12]
 800947c:	9903      	ldr	r1, [sp, #12]
 800947e:	1a5b      	subs	r3, r3, r1
 8009480:	42ab      	cmp	r3, r5
 8009482:	dcf2      	bgt.n	800946a <_printf_i+0x216>
 8009484:	e7eb      	b.n	800945e <_printf_i+0x20a>
 8009486:	2500      	movs	r5, #0
 8009488:	f104 0619 	add.w	r6, r4, #25
 800948c:	e7f5      	b.n	800947a <_printf_i+0x226>
 800948e:	bf00      	nop
 8009490:	08009725 	.word	0x08009725
 8009494:	08009736 	.word	0x08009736

08009498 <memmove>:
 8009498:	4288      	cmp	r0, r1
 800949a:	b510      	push	{r4, lr}
 800949c:	eb01 0402 	add.w	r4, r1, r2
 80094a0:	d902      	bls.n	80094a8 <memmove+0x10>
 80094a2:	4284      	cmp	r4, r0
 80094a4:	4623      	mov	r3, r4
 80094a6:	d807      	bhi.n	80094b8 <memmove+0x20>
 80094a8:	1e43      	subs	r3, r0, #1
 80094aa:	42a1      	cmp	r1, r4
 80094ac:	d008      	beq.n	80094c0 <memmove+0x28>
 80094ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094b6:	e7f8      	b.n	80094aa <memmove+0x12>
 80094b8:	4402      	add	r2, r0
 80094ba:	4601      	mov	r1, r0
 80094bc:	428a      	cmp	r2, r1
 80094be:	d100      	bne.n	80094c2 <memmove+0x2a>
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ca:	e7f7      	b.n	80094bc <memmove+0x24>

080094cc <_sbrk_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d06      	ldr	r5, [pc, #24]	; (80094e8 <_sbrk_r+0x1c>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	f7f7 fdec 	bl	80010b4 <_sbrk>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_sbrk_r+0x1a>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_sbrk_r+0x1a>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	2001477c 	.word	0x2001477c

080094ec <_realloc_r>:
 80094ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f0:	4680      	mov	r8, r0
 80094f2:	4614      	mov	r4, r2
 80094f4:	460e      	mov	r6, r1
 80094f6:	b921      	cbnz	r1, 8009502 <_realloc_r+0x16>
 80094f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094fc:	4611      	mov	r1, r2
 80094fe:	f7ff bc57 	b.w	8008db0 <_malloc_r>
 8009502:	b92a      	cbnz	r2, 8009510 <_realloc_r+0x24>
 8009504:	f7ff fbe8 	bl	8008cd8 <_free_r>
 8009508:	4625      	mov	r5, r4
 800950a:	4628      	mov	r0, r5
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	f000 f81b 	bl	800954a <_malloc_usable_size_r>
 8009514:	4284      	cmp	r4, r0
 8009516:	4607      	mov	r7, r0
 8009518:	d802      	bhi.n	8009520 <_realloc_r+0x34>
 800951a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800951e:	d812      	bhi.n	8009546 <_realloc_r+0x5a>
 8009520:	4621      	mov	r1, r4
 8009522:	4640      	mov	r0, r8
 8009524:	f7ff fc44 	bl	8008db0 <_malloc_r>
 8009528:	4605      	mov	r5, r0
 800952a:	2800      	cmp	r0, #0
 800952c:	d0ed      	beq.n	800950a <_realloc_r+0x1e>
 800952e:	42bc      	cmp	r4, r7
 8009530:	4622      	mov	r2, r4
 8009532:	4631      	mov	r1, r6
 8009534:	bf28      	it	cs
 8009536:	463a      	movcs	r2, r7
 8009538:	f7ff fbc0 	bl	8008cbc <memcpy>
 800953c:	4631      	mov	r1, r6
 800953e:	4640      	mov	r0, r8
 8009540:	f7ff fbca 	bl	8008cd8 <_free_r>
 8009544:	e7e1      	b.n	800950a <_realloc_r+0x1e>
 8009546:	4635      	mov	r5, r6
 8009548:	e7df      	b.n	800950a <_realloc_r+0x1e>

0800954a <_malloc_usable_size_r>:
 800954a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954e:	1f18      	subs	r0, r3, #4
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfbc      	itt	lt
 8009554:	580b      	ldrlt	r3, [r1, r0]
 8009556:	18c0      	addlt	r0, r0, r3
 8009558:	4770      	bx	lr
	...

0800955c <_init>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	bf00      	nop
 8009560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009562:	bc08      	pop	{r3}
 8009564:	469e      	mov	lr, r3
 8009566:	4770      	bx	lr

08009568 <_fini>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr
