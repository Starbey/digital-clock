
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000680c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a98  08006a98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a98  08006a98  00016a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013514  20000014  08006ab4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013528  08006ab4  00023528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166b5  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000381b  00000000  00000000  0003673c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  00039f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001013  00000000  00000000  0003b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a813  00000000  00000000  0003c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187dc  00000000  00000000  00056c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0ecf  00000000  00000000  0006f44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005778  00000000  00000000  0011031c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00115a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006994 	.word	0x08006994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006994 	.word	0x08006994

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f5c 	.word	0x20012f5c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b970 	b.w	800057c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	460f      	mov	r7, r1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d14a      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4694      	mov	ip, r2
 80002c8:	d965      	bls.n	8000396 <__udivmoddi4+0xe2>
 80002ca:	fab2 f382 	clz	r3, r2
 80002ce:	b143      	cbz	r3, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d4:	f1c3 0220 	rsb	r2, r3, #32
 80002d8:	409f      	lsls	r7, r3
 80002da:	fa20 f202 	lsr.w	r2, r0, r2
 80002de:	4317      	orrs	r7, r2
 80002e0:	409c      	lsls	r4, r3
 80002e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e6:	fa1f f58c 	uxth.w	r5, ip
 80002ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	4290      	cmp	r0, r2
 80002fe:	d90a      	bls.n	8000316 <__udivmoddi4+0x62>
 8000300:	eb1c 0202 	adds.w	r2, ip, r2
 8000304:	f101 37ff 	add.w	r7, r1, #4294967295
 8000308:	f080 811c 	bcs.w	8000544 <__udivmoddi4+0x290>
 800030c:	4290      	cmp	r0, r2
 800030e:	f240 8119 	bls.w	8000544 <__udivmoddi4+0x290>
 8000312:	3902      	subs	r1, #2
 8000314:	4462      	add	r2, ip
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	42a5      	cmp	r5, r4
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x90>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	f080 8107 	bcs.w	8000548 <__udivmoddi4+0x294>
 800033a:	42a5      	cmp	r5, r4
 800033c:	f240 8104 	bls.w	8000548 <__udivmoddi4+0x294>
 8000340:	4464      	add	r4, ip
 8000342:	3802      	subs	r0, #2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0xa2>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xbc>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80ed 	beq.w	800053e <__udivmoddi4+0x28a>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d149      	bne.n	800040c <__udivmoddi4+0x158>
 8000378:	42ab      	cmp	r3, r5
 800037a:	d302      	bcc.n	8000382 <__udivmoddi4+0xce>
 800037c:	4282      	cmp	r2, r0
 800037e:	f200 80f8 	bhi.w	8000572 <__udivmoddi4+0x2be>
 8000382:	1a84      	subs	r4, r0, r2
 8000384:	eb65 0203 	sbc.w	r2, r5, r3
 8000388:	2001      	movs	r0, #1
 800038a:	4617      	mov	r7, r2
 800038c:	2e00      	cmp	r6, #0
 800038e:	d0e2      	beq.n	8000356 <__udivmoddi4+0xa2>
 8000390:	e9c6 4700 	strd	r4, r7, [r6]
 8000394:	e7df      	b.n	8000356 <__udivmoddi4+0xa2>
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xe6>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f382 	clz	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a4:	1a8a      	subs	r2, r1, r2
 80003a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	2101      	movs	r1, #1
 80003b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b4:	fb07 2015 	mls	r0, r7, r5, r2
 80003b8:	0c22      	lsrs	r2, r4, #16
 80003ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003be:	fb0e f005 	mul.w	r0, lr, r5
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4290      	cmp	r0, r2
 80003d2:	f200 80cb 	bhi.w	800056c <__udivmoddi4+0x2b8>
 80003d6:	4645      	mov	r5, r8
 80003d8:	1a12      	subs	r2, r2, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003e0:	fb07 2210 	mls	r2, r7, r0, r2
 80003e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x14e>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f8:	d202      	bcs.n	8000400 <__udivmoddi4+0x14c>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f200 80bb 	bhi.w	8000576 <__udivmoddi4+0x2c2>
 8000400:	4610      	mov	r0, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040a:	e79f      	b.n	800034c <__udivmoddi4+0x98>
 800040c:	f1c1 0720 	rsb	r7, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 fc07 	lsr.w	ip, r2, r7
 8000416:	ea4c 0c03 	orr.w	ip, ip, r3
 800041a:	fa05 f401 	lsl.w	r4, r5, r1
 800041e:	fa20 f307 	lsr.w	r3, r0, r7
 8000422:	40fd      	lsrs	r5, r7
 8000424:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fbb5 f8f9 	udiv	r8, r5, r9
 800042e:	fa1f fe8c 	uxth.w	lr, ip
 8000432:	fb09 5518 	mls	r5, r9, r8, r5
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800043c:	fb08 f50e 	mul.w	r5, r8, lr
 8000440:	42a5      	cmp	r5, r4
 8000442:	fa02 f201 	lsl.w	r2, r2, r1
 8000446:	fa00 f001 	lsl.w	r0, r0, r1
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f108 3aff 	add.w	sl, r8, #4294967295
 8000454:	f080 8088 	bcs.w	8000568 <__udivmoddi4+0x2b4>
 8000458:	42a5      	cmp	r5, r4
 800045a:	f240 8085 	bls.w	8000568 <__udivmoddi4+0x2b4>
 800045e:	f1a8 0802 	sub.w	r8, r8, #2
 8000462:	4464      	add	r4, ip
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	b29d      	uxth	r5, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000474:	fb03 fe0e 	mul.w	lr, r3, lr
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f103 35ff 	add.w	r5, r3, #4294967295
 8000484:	d26c      	bcs.n	8000560 <__udivmoddi4+0x2ac>
 8000486:	45a6      	cmp	lr, r4
 8000488:	d96a      	bls.n	8000560 <__udivmoddi4+0x2ac>
 800048a:	3b02      	subs	r3, #2
 800048c:	4464      	add	r4, ip
 800048e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000492:	fba3 9502 	umull	r9, r5, r3, r2
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	42ac      	cmp	r4, r5
 800049c:	46c8      	mov	r8, r9
 800049e:	46ae      	mov	lr, r5
 80004a0:	d356      	bcc.n	8000550 <__udivmoddi4+0x29c>
 80004a2:	d053      	beq.n	800054c <__udivmoddi4+0x298>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x208>
 80004a6:	ebb0 0208 	subs.w	r2, r0, r8
 80004aa:	eb64 040e 	sbc.w	r4, r4, lr
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40ca      	lsrs	r2, r1
 80004b4:	40cc      	lsrs	r4, r1
 80004b6:	4317      	orrs	r7, r2
 80004b8:	e9c6 7400 	strd	r7, r4, [r6]
 80004bc:	4618      	mov	r0, r3
 80004be:	2100      	movs	r1, #0
 80004c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c4:	f1c3 0120 	rsb	r1, r3, #32
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	fa20 f201 	lsr.w	r2, r0, r1
 80004d0:	fa25 f101 	lsr.w	r1, r5, r1
 80004d4:	409d      	lsls	r5, r3
 80004d6:	432a      	orrs	r2, r5
 80004d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004dc:	fa1f fe8c 	uxth.w	lr, ip
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1510 	mls	r5, r7, r0, r1
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ee:	fb00 f50e 	mul.w	r5, r0, lr
 80004f2:	428d      	cmp	r5, r1
 80004f4:	fa04 f403 	lsl.w	r4, r4, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x258>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	d22f      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000504:	428d      	cmp	r5, r1
 8000506:	d92d      	bls.n	8000564 <__udivmoddi4+0x2b0>
 8000508:	3802      	subs	r0, #2
 800050a:	4461      	add	r1, ip
 800050c:	1b49      	subs	r1, r1, r5
 800050e:	b292      	uxth	r2, r2
 8000510:	fbb1 f5f7 	udiv	r5, r1, r7
 8000514:	fb07 1115 	mls	r1, r7, r5, r1
 8000518:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800051c:	fb05 f10e 	mul.w	r1, r5, lr
 8000520:	4291      	cmp	r1, r2
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x282>
 8000524:	eb1c 0202 	adds.w	r2, ip, r2
 8000528:	f105 38ff 	add.w	r8, r5, #4294967295
 800052c:	d216      	bcs.n	800055c <__udivmoddi4+0x2a8>
 800052e:	4291      	cmp	r1, r2
 8000530:	d914      	bls.n	800055c <__udivmoddi4+0x2a8>
 8000532:	3d02      	subs	r5, #2
 8000534:	4462      	add	r2, ip
 8000536:	1a52      	subs	r2, r2, r1
 8000538:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800053c:	e738      	b.n	80003b0 <__udivmoddi4+0xfc>
 800053e:	4631      	mov	r1, r6
 8000540:	4630      	mov	r0, r6
 8000542:	e708      	b.n	8000356 <__udivmoddi4+0xa2>
 8000544:	4639      	mov	r1, r7
 8000546:	e6e6      	b.n	8000316 <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e6fb      	b.n	8000344 <__udivmoddi4+0x90>
 800054c:	4548      	cmp	r0, r9
 800054e:	d2a9      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 8000550:	ebb9 0802 	subs.w	r8, r9, r2
 8000554:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000558:	3b01      	subs	r3, #1
 800055a:	e7a3      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055c:	4645      	mov	r5, r8
 800055e:	e7ea      	b.n	8000536 <__udivmoddi4+0x282>
 8000560:	462b      	mov	r3, r5
 8000562:	e794      	b.n	800048e <__udivmoddi4+0x1da>
 8000564:	4640      	mov	r0, r8
 8000566:	e7d1      	b.n	800050c <__udivmoddi4+0x258>
 8000568:	46d0      	mov	r8, sl
 800056a:	e77b      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056c:	3d02      	subs	r5, #2
 800056e:	4462      	add	r2, ip
 8000570:	e732      	b.n	80003d8 <__udivmoddi4+0x124>
 8000572:	4608      	mov	r0, r1
 8000574:	e70a      	b.n	800038c <__udivmoddi4+0xd8>
 8000576:	4464      	add	r4, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e742      	b.n	8000402 <__udivmoddi4+0x14e>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <lcdDelayUs+0x30>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000592:	bf00      	nop
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <lcdDelayUs+0x30>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f9      	bcc.n	8000594 <lcdDelayUs+0x14>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000050 	.word	0x20000050

080005b4 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	461a      	mov	r2, r3
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4821      	ldr	r0, [pc, #132]	; (8000650 <lcdSend+0x9c>)
 80005cc:	f000 ff2c 	bl	8001428 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 1 ) );
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	461a      	mov	r2, r3
 80005de:	2101      	movs	r1, #1
 80005e0:	481c      	ldr	r0, [pc, #112]	; (8000654 <lcdSend+0xa0>)
 80005e2:	f000 ff21 	bl	8001428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 1 ) );
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	089b      	lsrs	r3, r3, #2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	2102      	movs	r1, #2
 80005f6:	4817      	ldr	r0, [pc, #92]	; (8000654 <lcdSend+0xa0>)
 80005f8:	f000 ff16 	bl	8001428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 1 ) );
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	085b      	lsrs	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	2101      	movs	r1, #1
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <lcdSend+0x9c>)
 800060e:	f000 ff0b 	bl	8001428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 1 ) );
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2110      	movs	r1, #16
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <lcdSend+0xa4>)
 8000620:	f000 ff02 	bl	8001428 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <lcdSend+0xa4>)
 800062c:	f000 fefc 	bl	8001428 <HAL_GPIO_WritePin>
	lcdDelayUs(8);
 8000630:	2008      	movs	r0, #8
 8000632:	f7ff ffa5 	bl	8000580 <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <lcdSend+0xa4>)
 800063e:	f000 fef3 	bl	8001428 <HAL_GPIO_WritePin>
	lcdDelayUs(8);
 8000642:	2008      	movs	r0, #8
 8000644:	f7ff ff9c 	bl	8000580 <lcdDelayUs>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400
 8000654:	40020800 	.word	0x40020800
 8000658:	40020000 	.word	0x40020000

0800065c <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	091b      	lsrs	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffa0 	bl	80005b4 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff98 	bl	80005b4 <lcdSend>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <lcdSendData>:

static void lcdSendData(char data){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	091b      	lsrs	r3, r3, #4
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff88 	bl	80005b4 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff80 	bl	80005b4 <lcdSend>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <lcdMoveCursor+0x1c>
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d005      	beq.n	80006e2 <lcdMoveCursor+0x26>
 80006d6:	e009      	b.n	80006ec <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006de:	73fb      	strb	r3, [r7, #15]
		break;
 80006e0:	e004      	b.n	80006ec <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006e8:	73fb      	strb	r3, [r7, #15]
		break;
 80006ea:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffb4 	bl	800065c <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80006f4:	2028      	movs	r0, #40	; 0x28
 80006f6:	f7ff ff43 	bl	8000580 <lcdDelayUs>
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <lcdClear>:

void lcdClear(void){
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff ffa8 	bl	800065c <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 800070c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000710:	f7ff ff36 	bl	8000580 <lcdDelayUs>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcdSendString>:

void lcdSendString(char *str){
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(str); i++){
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e009      	b.n	800073a <lcdSendString+0x22>
		lcdSendData(str[i]);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffac 	bl	800068c <lcdSendData>
	for(uint8_t i = 0; i < strlen(str); i++){
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	3301      	adds	r3, #1
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	7bfc      	ldrb	r4, [r7, #15]
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd99 	bl	8000274 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	429c      	cmp	r4, r3
 8000746:	d3ee      	bcc.n	8000726 <lcdSendString+0xe>
	}

	//while (*str) lcdSendData(*str++);
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fbbd 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f87b 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f95d 	bl	8000a20 <MX_GPIO_Init>
  MX_RTC_Init();
 8000766:	f000 f8e5 	bl	8000934 <MX_RTC_Init>
  MX_TIM1_Init();
 800076a:	f000 f909 	bl	8000980 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <main+0xd8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <main+0xd8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 2, &printTaskHandle);
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <main+0xdc>)
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2302      	movs	r3, #2
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	22fa      	movs	r2, #250	; 0xfa
 8000786:	492b      	ldr	r1, [pc, #172]	; (8000834 <main+0xe0>)
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <main+0xe4>)
 800078a:	f002 feb3 	bl	80034f4 <xTaskCreate>
 800078e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d00a      	beq.n	80007ac <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079a:	f383 8811 	msr	BASEPRI, r3
 800079e:	f3bf 8f6f 	isb	sy
 80007a2:	f3bf 8f4f 	dsb	sy
 80007a6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <main+0x56>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <main+0xe8>)
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	2302      	movs	r3, #2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	22fa      	movs	r2, #250	; 0xfa
 80007b8:	4921      	ldr	r1, [pc, #132]	; (8000840 <main+0xec>)
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <main+0xf0>)
 80007bc:	f002 fe9a 	bl	80034f4 <xTaskCreate>
 80007c0:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d00a      	beq.n	80007de <main+0x8a>
        __asm volatile
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	607b      	str	r3, [r7, #4]
    }
 80007da:	bf00      	nop
 80007dc:	e7fe      	b.n	80007dc <main+0x88>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80007de:	2200      	movs	r2, #0
 80007e0:	2104      	movs	r1, #4
 80007e2:	200a      	movs	r0, #10
 80007e4:	f002 fa3e 	bl	8002c64 <xQueueGenericCreate>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <main+0xf4>)
 80007ec:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <main+0xf4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10a      	bne.n	800080c <main+0xb8>
        __asm volatile
 80007f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007fa:	f383 8811 	msr	BASEPRI, r3
 80007fe:	f3bf 8f6f 	isb	sy
 8000802:	f3bf 8f4f 	dsb	sy
 8000806:	603b      	str	r3, [r7, #0]
    }
 8000808:	bf00      	nop
 800080a:	e7fe      	b.n	800080a <main+0xb6>

  /*create timers */
  rtcUpdateTimerHandle = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, rtcUpdateTimerCallback);
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <main+0xf8>)
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2300      	movs	r3, #0
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <main+0xfc>)
 800081a:	f003 fef1 	bl	8004600 <xTimerCreate>
 800081e:	4603      	mov	r3, r0
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <main+0x100>)
 8000822:	6013      	str	r3, [r2, #0]


  vTaskStartScheduler();
 8000824:	f002 ffee 	bl	8003804 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000828:	e7fe      	b.n	8000828 <main+0xd4>
 800082a:	bf00      	nop
 800082c:	e0001000 	.word	0xe0001000
 8000830:	20000098 	.word	0x20000098
 8000834:	080069ac 	.word	0x080069ac
 8000838:	08000b75 	.word	0x08000b75
 800083c:	200000a0 	.word	0x200000a0
 8000840:	080069b8 	.word	0x080069b8
 8000844:	08000ba9 	.word	0x08000ba9
 8000848:	2000009c 	.word	0x2000009c
 800084c:	08000bb5 	.word	0x08000bb5
 8000850:	080069c8 	.word	0x080069c8
 8000854:	200000a4 	.word	0x200000a4

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f006 f85a 	bl	8006920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <SystemClock_Config+0xd4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a29      	ldr	r2, [pc, #164]	; (800092c <SystemClock_Config+0xd4>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <SystemClock_Config+0xd4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <SystemClock_Config+0xd8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a4:	4a22      	ldr	r2, [pc, #136]	; (8000930 <SystemClock_Config+0xd8>)
 80008a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SystemClock_Config+0xd8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008b8:	230a      	movs	r3, #10
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	2301      	movs	r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c0:	2310      	movs	r3, #16
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c8:	2302      	movs	r3, #2
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008cc:	2300      	movs	r3, #0
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008da:	2304      	movs	r3, #4
 80008dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008de:	2307      	movs	r3, #7
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fdb8 	bl	800145c <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f2:	f000 f99d 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 f81a 	bl	800194c <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800091e:	f000 f987 	bl	8000c30 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	; 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_RTC_Init+0x44>)
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <MX_RTC_Init+0x48>)
 800093c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_RTC_Init+0x44>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_RTC_Init+0x44>)
 8000946:	227f      	movs	r2, #127	; 0x7f
 8000948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_RTC_Init+0x44>)
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_RTC_Init+0x44>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_RTC_Init+0x44>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_RTC_Init+0x44>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_RTC_Init+0x44>)
 8000964:	f001 fb1e 	bl	8001fa4 <HAL_RTC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800096e:	f000 f95f 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000030 	.word	0x20000030
 800097c:	40002800 	.word	0x40002800

08000980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_TIM1_Init+0x98>)
 800099e:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <MX_TIM1_Init+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009a4:	2254      	movs	r2, #84	; 0x54
 80009a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009ca:	f001 fbe5 	bl	8002198 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f92c 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_TIM1_Init+0x98>)
 80009e6:	f001 fd91 	bl	800250c <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009f0:	f000 f91e 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM1_Init+0x98>)
 8000a02:	f001 ff8d 	bl	8002920 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a0c:	f000 f910 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000050 	.word	0x20000050
 8000a1c:	40010000 	.word	0x40010000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a49      	ldr	r2, [pc, #292]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a40:	f043 0304 	orr.w	r3, r3, #4
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b47      	ldr	r3, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0304 	and.w	r3, r3, #4
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a42      	ldr	r2, [pc, #264]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a3b      	ldr	r2, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a34      	ldr	r2, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <MX_GPIO_Init+0x144>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f240 4103 	movw	r1, #1027	; 0x403
 8000aac:	482e      	ldr	r0, [pc, #184]	; (8000b68 <MX_GPIO_Init+0x148>)
 8000aae:	f000 fcbb 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|LD2_Pin|E_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f248 0130 	movw	r1, #32816	; 0x8030
 8000ab8:	482c      	ldr	r0, [pc, #176]	; (8000b6c <MX_GPIO_Init+0x14c>)
 8000aba:	f000 fcb5 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2181      	movs	r1, #129	; 0x81
 8000ac2:	482b      	ldr	r0, [pc, #172]	; (8000b70 <MX_GPIO_Init+0x150>)
 8000ac4:	f000 fcb0 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ace:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <MX_GPIO_Init+0x148>)
 8000ae0:	f000 fb1e 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|GPIO_PIN_10;
 8000ae4:	f240 4303 	movw	r3, #1027	; 0x403
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_GPIO_Init+0x148>)
 8000afe:	f000 fb0f 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4813      	ldr	r0, [pc, #76]	; (8000b6c <MX_GPIO_Init+0x14c>)
 8000b1e:	f000 faff 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin LD2_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|LD2_Pin|E_Pin;
 8000b22:	f248 0330 	movw	r3, #32816	; 0x8030
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_GPIO_Init+0x14c>)
 8000b3c:	f000 faf0 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000b40:	2381      	movs	r3, #129	; 0x81
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x150>)
 8000b58:	f000 fae2 	bl	8001120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400

08000b74 <printTaskHandler>:

/* USER CODE BEGIN 4 */

	void printTaskHandler(void *parameters){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
		uint32_t *msg; //32 bits because msg is a pointer to a string
		while(1){
			xQueueReceive(printQueueHandle, &msg, portMAX_DELAY);
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <printTaskHandler+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f107 010c 	add.w	r1, r7, #12
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 fa09 	bl	8002fa0 <xQueueReceive>
			lcdClear();
 8000b8e:	f7ff fdb8 	bl	8000702 <lcdClear>
			lcdMoveCursor(0, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fd91 	bl	80006bc <lcdMoveCursor>
			lcdSendString(msg);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fdbb 	bl	8000718 <lcdSendString>
			xQueueReceive(printQueueHandle, &msg, portMAX_DELAY);
 8000ba2:	e7eb      	b.n	8000b7c <printTaskHandler+0x8>
 8000ba4:	2000009c 	.word	0x2000009c

08000ba8 <rtcUpdateTaskHandler>:
		}
	}

	void rtcUpdateTaskHandler(void *parameters){
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
		while(1){
 8000bb0:	e7fe      	b.n	8000bb0 <rtcUpdateTaskHandler+0x8>
	...

08000bb4 <rtcUpdateTimerCallback>:

		}
	}

	void rtcUpdateTimerCallback(TimerHandle_t *xTimer){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
		static int counter = 0;

		const char* msg1 = "Hello";
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <rtcUpdateTimerCallback+0x48>)
 8000bbe:	60fb      	str	r3, [r7, #12]
		const char* msg2 = "World";
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <rtcUpdateTimerCallback+0x4c>)
 8000bc2:	60bb      	str	r3, [r7, #8]

		if (counter % 2){
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <rtcUpdateTimerCallback+0x50>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d008      	beq.n	8000be2 <rtcUpdateTimerCallback+0x2e>
			xQueueSend(printQueueHandle, (void*) msg1, portMAX_DELAY);
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <rtcUpdateTimerCallback+0x54>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bda:	68f9      	ldr	r1, [r7, #12]
 8000bdc:	f002 f8ba 	bl	8002d54 <xQueueGenericSend>
		}
		else {
			xQueueSend(printQueueHandle, (void*) msg2, portMAX_DELAY);
		}
	}
 8000be0:	e007      	b.n	8000bf2 <rtcUpdateTimerCallback+0x3e>
			xQueueSend(printQueueHandle, (void*) msg2, portMAX_DELAY);
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <rtcUpdateTimerCallback+0x54>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	f002 f8b1 	bl	8002d54 <xQueueGenericSend>
	}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	080069d4 	.word	0x080069d4
 8000c00:	080069dc 	.word	0x080069dc
 8000c04:	200000a8 	.word	0x200000a8
 8000c08:	2000009c 	.word	0x2000009c

08000c0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1e:	f000 f97d 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40000c00 	.word	0x40000c00

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_RTC_MspInit+0x50>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d111      	bne.n	8000cd2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 f883 	bl	8001dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000cc8:	f7ff ffb2 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_RTC_MspInit+0x54>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40002800 	.word	0x40002800
 8000ce0:	42470e3c 	.word	0x42470e3c

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <HAL_InitTick+0xe4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a32      	ldr	r2, [pc, #200]	; (8000e0c <HAL_InitTick+0xe4>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <HAL_InitTick+0xe4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f800 	bl	8001d64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d6e:	f000 ffe5 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8000d72:	6378      	str	r0, [r7, #52]	; 0x34
 8000d74:	e004      	b.n	8000d80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d76:	f000 ffe1 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <HAL_InitTick+0xe8>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	0c9b      	lsrs	r3, r3, #18
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <HAL_InitTick+0xec>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <HAL_InitTick+0xf0>)
 8000d92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <HAL_InitTick+0xec>)
 8000d96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_InitTick+0xec>)
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <HAL_InitTick+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <HAL_InitTick+0xec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_InitTick+0xec>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <HAL_InitTick+0xec>)
 8000db6:	f001 f9ef 	bl	8002198 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d11b      	bne.n	8000e00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <HAL_InitTick+0xec>)
 8000dca:	f001 fa35 	bl	8002238 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d111      	bne.n	8000e00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000ddc:	2032      	movs	r0, #50	; 0x32
 8000dde:	f000 f991 	bl	8001104 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d808      	bhi.n	8000dfa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f000 f96d 	bl	80010cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_InitTick+0xf4>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e002      	b.n	8000e00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3738      	adds	r7, #56	; 0x38
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	431bde83 	.word	0x431bde83
 8000e14:	200000ac 	.word	0x200000ac
 8000e18:	40000c00 	.word	0x40000c00
 8000e1c:	20000004 	.word	0x20000004

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM5_IRQHandler+0x10>)
 8000e52:	f001 fa53 	bl	80022fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000ac 	.word	0x200000ac

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f005 fd3d 	bl	8006930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fc4d 	bl	8000754 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ebc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ec8:	08006aa0 	.word	0x08006aa0
  ldr r2, =_sbss
 8000ecc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ed0:	20013528 	.word	0x20013528

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f8d8 	bl	80010b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ff0e 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe96 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200000f4 	.word	0x200000f4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000f4 	.word	0x200000f4

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff4c 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff61 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb1 	bl	8001050 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff80 	bl	8000ffc <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff54 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e159      	b.n	80013f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8148 	bne.w	80013ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a2 	beq.w	80013ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a56      	ldr	r2, [pc, #344]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x202>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1fe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x2f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1fa>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x2fc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1f6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_GPIO_Init+0x300>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1f2>
 800130e:	2304      	movs	r3, #4
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001312:	2307      	movs	r3, #7
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x304>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f aea2 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e267      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d075      	beq.n	8001566 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d00c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d112      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001492:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800149e:	d10b      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d05b      	beq.n	8001564 <HAL_RCC_OscConfig+0x108>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d157      	bne.n	8001564 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e242      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d106      	bne.n	80014d0 <HAL_RCC_OscConfig+0x74>
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a75      	ldr	r2, [pc, #468]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e01d      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x98>
 80014da:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6c      	ldr	r2, [pc, #432]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xb0>
 80014f4:	4b69      	ldr	r3, [pc, #420]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a68      	ldr	r2, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b66      	ldr	r3, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a65      	ldr	r2, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fd16 	bl	8000f44 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fd12 	bl	8000f44 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e207      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xc0>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fd02 	bl	8000f44 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fcfe 	bl	8000f44 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1f3      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0xe8>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d063      	beq.n	800163a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_OscConfig+0x240>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e1c7      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4937      	ldr	r1, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e03a      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d020      	beq.n	800160e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fcb7 	bl	8000f44 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fcb3 	bl	8000f44 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a8      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f0      	beq.n	80015da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <HAL_RCC_OscConfig+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4925      	ldr	r1, [pc, #148]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e015      	b.n	800163a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_RCC_OscConfig+0x244>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fc96 	bl	8000f44 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fc92 	bl	8000f44 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e187      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d016      	beq.n	800167c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fc76 	bl	8000f44 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165c:	f7ff fc72 	bl	8000f44 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e167      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x240>)
 8001670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x200>
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x248>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7ff fc5f 	bl	8000f44 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	e00e      	b.n	80016a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fc5b 	bl	8000f44 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d907      	bls.n	80016a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e150      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 800169c:	40023800 	.word	0x40023800
 80016a0:	42470000 	.word	0x42470000
 80016a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1ea      	bne.n	800168a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8097 	beq.w	80017f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c6:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6413      	str	r3, [r2, #64]	; 0x40
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a73      	ldr	r2, [pc, #460]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fc1b 	bl	8000f44 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fc17 	bl	8000f44 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e10c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x474>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d106      	bne.n	8001746 <HAL_RCC_OscConfig+0x2ea>
 8001738:	4b64      	ldr	r3, [pc, #400]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a63      	ldr	r2, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b05      	cmp	r3, #5
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x30c>
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a5e      	ldr	r2, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6713      	str	r3, [r2, #112]	; 0x70
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x324>
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a54      	ldr	r2, [pc, #336]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fbdc 	bl	8000f44 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fbd8 	bl	8000f44 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0cb      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ee      	beq.n	8001790 <HAL_RCC_OscConfig+0x334>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fbc6 	bl	8000f44 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fbc2 	bl	8000f44 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0b5      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ee      	bne.n	80017bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d105      	bne.n	80017f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a38      	ldr	r2, [pc, #224]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80a1 	beq.w	800193c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d05c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d141      	bne.n	8001892 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fb96 	bl	8000f44 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181c:	f7ff fb92 	bl	8000f44 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e087      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	491b      	ldr	r1, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fb6b 	bl	8000f44 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff fb67 	bl	8000f44 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e05c      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x416>
 8001890:	e054      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_RCC_OscConfig+0x478>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fb54 	bl	8000f44 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fb50 	bl	8000f44 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e045      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x470>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x444>
 80018be:	e03d      	b.n	800193c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e038      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40007000 	.word	0x40007000
 80018d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_OscConfig+0x4ec>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d028      	beq.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d121      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d11a      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	3b01      	subs	r3, #1
 8001922:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fa82 	bl	8000f44 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff fa7e 	bl	8000f44 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f918 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08006a6c 	.word	0x08006a6c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b1c:	b094      	sub	sp, #80	; 0x50
 8001b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b28:	2300      	movs	r3, #0
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b30:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d00d      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	f200 80e1 	bhi.w	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x34>
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4a:	e0db      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b50:	e0db      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b56:	e0d8      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d063      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6e:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	2200      	movs	r2, #0
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	2300      	movs	r3, #0
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	462b      	mov	r3, r5
 8001b8e:	f04f 0000 	mov.w	r0, #0
 8001b92:	f04f 0100 	mov.w	r1, #0
 8001b96:	0159      	lsls	r1, r3, #5
 8001b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b9c:	0150      	lsls	r0, r2, #5
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	1a51      	subs	r1, r2, r1
 8001ba6:	6139      	str	r1, [r7, #16]
 8001ba8:	4629      	mov	r1, r5
 8001baa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bbc:	4659      	mov	r1, fp
 8001bbe:	018b      	lsls	r3, r1, #6
 8001bc0:	4651      	mov	r1, sl
 8001bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	018a      	lsls	r2, r1, #6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bea:	4690      	mov	r8, r2
 8001bec:	4699      	mov	r9, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	eb18 0303 	adds.w	r3, r8, r3
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	eb49 0303 	adc.w	r3, r9, r3
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	024b      	lsls	r3, r1, #9
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c14:	4621      	mov	r1, r4
 8001c16:	024a      	lsls	r2, r1, #9
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c28:	f7fe fb2c 	bl	8000284 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	e058      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4611      	mov	r1, r2
 8001c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c46:	623b      	str	r3, [r7, #32]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c50:	4642      	mov	r2, r8
 8001c52:	464b      	mov	r3, r9
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0159      	lsls	r1, r3, #5
 8001c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c62:	0150      	lsls	r0, r2, #5
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4641      	mov	r1, r8
 8001c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c6e:	4649      	mov	r1, r9
 8001c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c88:	ebb2 040a 	subs.w	r4, r2, sl
 8001c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	00eb      	lsls	r3, r5, #3
 8001c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c9e:	00e2      	lsls	r2, r4, #3
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	18e3      	adds	r3, r4, r3
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	464b      	mov	r3, r9
 8001cac:	eb45 0303 	adc.w	r3, r5, r3
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	028b      	lsls	r3, r1, #10
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc8:	4621      	mov	r1, r4
 8001cca:	028a      	lsls	r2, r1, #10
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	61fa      	str	r2, [r7, #28]
 8001cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cdc:	f7fe fad2 	bl	8000284 <__aeabi_uldivmod>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3750      	adds	r7, #80	; 0x50
 8001d10:	46bd      	mov	sp, r7
 8001d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08006a7c 	.word	0x08006a7c

08001d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	220f      	movs	r2, #15
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	08db      	lsrs	r3, r3, #3
 8001d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCC_GetClockConfig+0x60>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0207 	and.w	r2, r3, #7
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d035      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001df0:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df6:	f7ff f8a5 	bl	8000f44 <HAL_GetTick>
 8001dfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dfe:	f7ff f8a1 	bl	8000f44 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0ba      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e10:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	019a      	lsls	r2, r3, #6
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	071b      	lsls	r3, r3, #28
 8001e28:	495a      	ldr	r1, [pc, #360]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e30:	4b57      	ldr	r3, [pc, #348]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e36:	f7ff f885 	bl	8000f44 <HAL_GetTick>
 8001e3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e3e:	f7ff f881 	bl	8000f44 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e09a      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8083 	beq.w	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a43      	ldr	r2, [pc, #268]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e92:	f7ff f857 	bl	8000f44 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff f853 	bl	8000f44 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e06c      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eac:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d02f      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d028      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001eec:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d114      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001efe:	f7ff f821 	bl	8000f44 <HAL_GetTick>
 8001f02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7ff f81d 	bl	8000f44 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e034      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ee      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f34:	d10d      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4a:	4912      	ldr	r1, [pc, #72]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e005      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f5c:	6093      	str	r3, [r2, #8]
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	490a      	ldr	r1, [pc, #40]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7c1a      	ldrb	r2, [r3, #16]
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f82:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	42470068 	.word	0x42470068
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470e40 	.word	0x42470e40
 8001fa0:	424711e0 	.word	0x424711e0

08001fa4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e066      	b.n	8002088 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7f5b      	ldrb	r3, [r3, #29]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fe5e 	bl	8000c8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	22ca      	movs	r2, #202	; 0xca
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2253      	movs	r2, #83	; 0x53
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f87a 	bl	80020e0 <RTC_EnterInitMode>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12c      	bne.n	8002050 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002008:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6919      	ldr	r1, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	041a      	lsls	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f881 	bl	800214e <RTC_ExitInitMode>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d113      	bne.n	800207e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7fe ff4a 	bl	8000f44 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80020b2:	e009      	b.n	80020c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80020b4:	f7fe ff46 	bl	8000f44 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c2:	d901      	bls.n	80020c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e007      	b.n	80020d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ee      	beq.n	80020b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d122      	bne.n	8002144 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800210e:	f7fe ff19 	bl	8000f44 <HAL_GetTick>
 8002112:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002114:	e00c      	b.n	8002130 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002116:	f7fe ff15 	bl	8000f44 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002124:	d904      	bls.n	8002130 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <RTC_EnterInitMode+0x64>
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d1e8      	bne.n	8002116 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002144:	7bfb      	ldrb	r3, [r7, #15]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002168:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10a      	bne.n	800218e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff89 	bl	8002090 <HAL_RTC_WaitForSynchro>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2204      	movs	r2, #4
 8002188:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fd90 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 fa88 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e044      	b.n	80022da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1e      	ldr	r2, [pc, #120]	; (80022e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d018      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d013      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x6c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_TIM_Base_Start_IT+0xb4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d009      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x6c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d111      	bne.n	80022c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d010      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c6:	e007      	b.n	80022d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40014000 	.word	0x40014000

080022fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b02      	cmp	r3, #2
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f9b5 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f9a7 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f9b8 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b04      	cmp	r3, #4
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0204 	mvn.w	r2, #4
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2202      	movs	r2, #2
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f98b 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f97d 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f98e 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0208 	mvn.w	r2, #8
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f961 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f953 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f964 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b10      	cmp	r3, #16
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0210 	mvn.w	r2, #16
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2208      	movs	r2, #8
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f937 	bl	80026ae <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f929 	bl	800269a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f93a 	bl	80026c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0201 	mvn.w	r2, #1
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7fe fbc6 	bl	8000c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b80      	cmp	r3, #128	; 0x80
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fab2 	bl	8002a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8ff 	bl	80026d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	d10e      	bne.n	8002504 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d107      	bne.n	8002504 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0220 	mvn.w	r2, #32
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa7c 	bl	80029fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIM_ConfigClockSource+0x1c>
 8002524:	2302      	movs	r3, #2
 8002526:	e0b4      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x186>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002560:	d03e      	beq.n	80025e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	f200 8087 	bhi.w	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 800256a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256e:	f000 8086 	beq.w	800267e <HAL_TIM_ConfigClockSource+0x172>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d87f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d01a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xa6>
 800257c:	2b70      	cmp	r3, #112	; 0x70
 800257e:	d87b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b60      	cmp	r3, #96	; 0x60
 8002582:	d050      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x11a>
 8002584:	2b60      	cmp	r3, #96	; 0x60
 8002586:	d877      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b50      	cmp	r3, #80	; 0x50
 800258a:	d03c      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0xfa>
 800258c:	2b50      	cmp	r3, #80	; 0x50
 800258e:	d873      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d058      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x13a>
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d86f      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b30      	cmp	r3, #48	; 0x30
 800259a:	d064      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	2b30      	cmp	r3, #48	; 0x30
 800259e:	d86b      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d060      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d867      	bhi.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d05a      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x15a>
 80025b0:	e062      	b.n	8002678 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f000 f98d 	bl	80028e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	609a      	str	r2, [r3, #8]
      break;
 80025de:	e04f      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f000 f976 	bl	80028e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002602:	609a      	str	r2, [r3, #8]
      break;
 8002604:	e03c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	461a      	mov	r2, r3
 8002614:	f000 f8ea 	bl	80027ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2150      	movs	r1, #80	; 0x50
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f943 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002624:	e02c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 f909 	bl	800284a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2160      	movs	r1, #96	; 0x60
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f933 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002644:	e01c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 f8ca 	bl	80027ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f923 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002664:	e00c      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f000 f91a 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002676:	e003      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e000      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800267e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a34      	ldr	r2, [pc, #208]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00f      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x38>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01b      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d017      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <TIM_Base_SetConfig+0xe8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <TIM_Base_SetConfig+0xec>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <TIM_Base_SetConfig+0xf0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <TIM_Base_SetConfig+0xf4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <TIM_Base_SetConfig+0xf8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0x8a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <TIM_Base_SetConfig+0xfc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <TIM_Base_SetConfig+0xe4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	615a      	str	r2, [r3, #20]
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40000800 	.word	0x40000800
 80027dc:	40000c00 	.word	0x40000c00
 80027e0:	40014000 	.word	0x40014000
 80027e4:	40014400 	.word	0x40014400
 80027e8:	40014800 	.word	0x40014800

080027ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f023 0201 	bic.w	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f023 030a 	bic.w	r3, r3, #10
 8002828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0210 	bic.w	r2, r3, #16
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	021a      	lsls	r2, r3, #8
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	431a      	orrs	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002934:	2302      	movs	r3, #2
 8002936:	e050      	b.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d018      	beq.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d013      	beq.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00e      	beq.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d004      	beq.n	80029ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10c      	bne.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40014000 	.word	0x40014000

080029fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 0208 	add.w	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f103 0208 	add.w	r2, r3, #8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0208 	add.w	r2, r3, #8
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d103      	bne.n	8002a9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e00c      	b.n	8002ab8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e002      	b.n	8002aac <vListInsert+0x2e>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d2f6      	bcs.n	8002aa6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6892      	ldr	r2, [r2, #8]
 8002b06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6852      	ldr	r2, [r2, #4]
 8002b10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d103      	bne.n	8002b24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericReset+0x2e>
        __asm volatile
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	60fb      	str	r3, [r7, #12]
    }
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05d      	beq.n	8002c34 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d059      	beq.n	8002c34 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	2100      	movs	r1, #0
 8002b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <xQueueGenericReset+0x50>
 8002b92:	2101      	movs	r1, #1
 8002b94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d14c      	bne.n	8002c34 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002b9a:	f002 f90d 	bl	8004db8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	441a      	add	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	441a      	add	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d114      	bne.n	8002c1a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01a      	beq.n	8002c2e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3310      	adds	r3, #16
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 f971 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <xQueueGenericReset+0x11c>)
 8002c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	e009      	b.n	8002c2e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	3310      	adds	r3, #16
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff00 	bl	8002a24 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	3324      	adds	r3, #36	; 0x24
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fefb 	bl	8002a24 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002c2e:	f002 f8f3 	bl	8004e18 <vPortExitCritical>
 8002c32:	e001      	b.n	8002c38 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <xQueueGenericReset+0x110>
        __asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60bb      	str	r3, [r7, #8]
    }
 8002c50:	bf00      	nop
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002c54:	697b      	ldr	r3, [r7, #20]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02e      	beq.n	8002cda <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d000      	beq.n	8002c8c <xQueueGenericCreate+0x28>
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d123      	bne.n	8002cda <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c9a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c9e:	d81c      	bhi.n	8002cda <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3350      	adds	r3, #80	; 0x50
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f002 f96c 	bl	8004f8c <pvPortMalloc>
 8002cb4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3350      	adds	r3, #80	; 0x50
 8002cc4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cc6:	79fa      	ldrb	r2, [r7, #7]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f814 	bl	8002d00 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002cd8:	e00d      	b.n	8002cf6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueGenericCreate+0x92>
        __asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	613b      	str	r3, [r7, #16]
    }
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
    }
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e002      	b.n	8002d22 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d2e:	2101      	movs	r1, #1
 8002d30:	69b8      	ldr	r0, [r7, #24]
 8002d32:	f7ff ff07 	bl	8002b44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	2073      	movs	r0, #115	; 0x73
 8002d46:	f002 ff89 	bl	8005c5c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b090      	sub	sp, #64	; 0x40
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <xQueueGenericSend+0x32>
        __asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <xQueueGenericSend+0x40>
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <xQueueGenericSend+0x44>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <xQueueGenericSend+0x46>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xQueueGenericSend+0x60>
        __asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d103      	bne.n	8002dc2 <xQueueGenericSend+0x6e>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <xQueueGenericSend+0x72>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <xQueueGenericSend+0x74>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <xQueueGenericSend+0x8e>
        __asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	623b      	str	r3, [r7, #32]
    }
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002de2:	f001 fa91 	bl	8004308 <xTaskGetSchedulerState>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <xQueueGenericSend+0x9e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <xQueueGenericSend+0xa2>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <xQueueGenericSend+0xa4>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <xQueueGenericSend+0xbe>
        __asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61fb      	str	r3, [r7, #28]
    }
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e12:	f001 ffd1 	bl	8004db8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <xQueueGenericSend+0xd4>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d136      	bne.n	8002e96 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fc20 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	205a      	movs	r0, #90	; 0x5a
 8002e3e:	f002 ff83 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e48:	f000 f9ba 	bl	80031c0 <prvCopyDataToQueue>
 8002e4c:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d010      	beq.n	8002e78 <xQueueGenericSend+0x124>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 f842 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <xQueueGenericSend+0x13a>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <xQueueGenericSend+0x248>)
 8002e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	e00a      	b.n	8002e8e <xQueueGenericSend+0x13a>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <xQueueGenericSend+0x13a>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <xQueueGenericSend+0x248>)
 8002e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e8e:	f001 ffc3 	bl	8004e18 <vPortExitCritical>
                return pdPASS;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07d      	b.n	8002f92 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d110      	bne.n	8002ebe <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e9c:	f001 ffbc 	bl	8004e18 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fbe4 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	205a      	movs	r0, #90	; 0x5a
 8002eb6:	f002 ff47 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e069      	b.n	8002f92 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f8e3 	bl	8004094 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ed2:	f001 ffa1 	bl	8004e18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ed6:	f000 fcf7 	bl	80038c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002eda:	f001 ff6d 	bl	8004db8 <vPortEnterCritical>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d103      	bne.n	8002ef4 <xQueueGenericSend+0x1a0>
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d103      	bne.n	8002f0a <xQueueGenericSend+0x1b6>
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0a:	f001 ff85 	bl	8004e18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0e:	1d3a      	adds	r2, r7, #4
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f001 f8d2 	bl	80040c0 <xTaskCheckForTimeOut>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d124      	bne.n	8002f6c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f24:	f000 fa44 	bl	80033b0 <prvIsQueueFull>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	3310      	adds	r3, #16
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 ff68 	bl	8003e0c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3e:	f000 f9cf 	bl	80032e0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002f42:	f000 fccf 	bl	80038e4 <xTaskResumeAll>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f47f af62 	bne.w	8002e12 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <xQueueGenericSend+0x248>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	e758      	b.n	8002e12 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f62:	f000 f9bd 	bl	80032e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f66:	f000 fcbd 	bl	80038e4 <xTaskResumeAll>
 8002f6a:	e752      	b.n	8002e12 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 f9b7 	bl	80032e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f72:	f000 fcb7 	bl	80038e4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fb79 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	460b      	mov	r3, r1
 8002f88:	4601      	mov	r1, r0
 8002f8a:	205a      	movs	r0, #90	; 0x5a
 8002f8c:	f002 fedc 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002f90:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3738      	adds	r7, #56	; 0x38
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b08f      	sub	sp, #60	; 0x3c
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <xQueueReceive+0x30>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	623b      	str	r3, [r7, #32]
    }
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <xQueueReceive+0x3e>
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <xQueueReceive+0x42>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueReceive+0x44>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <xQueueReceive+0x5e>
        __asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	61fb      	str	r3, [r7, #28]
    }
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffe:	f001 f983 	bl	8004308 <xTaskGetSchedulerState>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <xQueueReceive+0x6e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <xQueueReceive+0x72>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueReceive+0x74>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10a      	bne.n	800302e <xQueueReceive+0x8e>
        __asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61bb      	str	r3, [r7, #24]
    }
 800302a:	bf00      	nop
 800302c:	e7fe      	b.n	800302c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800302e:	f001 fec3 	bl	8004db8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	d02f      	beq.n	800309e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003042:	f000 f927 	bl	8003294 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fb11 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 800304e:	4604      	mov	r4, r0
 8003050:	2000      	movs	r0, #0
 8003052:	f003 fb0d 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2101      	movs	r1, #1
 800305c:	9100      	str	r1, [sp, #0]
 800305e:	4621      	mov	r1, r4
 8003060:	205c      	movs	r0, #92	; 0x5c
 8003062:	f002 fe71 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	3310      	adds	r3, #16
 800307a:	4618      	mov	r0, r3
 800307c:	f000 ff32 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003086:	4b4d      	ldr	r3, [pc, #308]	; (80031bc <xQueueReceive+0x21c>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003096:	f001 febf 	bl	8004e18 <vPortExitCritical>
                return pdPASS;
 800309a:	2301      	movs	r3, #1
 800309c:	e08a      	b.n	80031b4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d113      	bne.n	80030cc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80030a4:	f001 feb8 	bl	8004e18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fae0 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 80030b0:	4604      	mov	r4, r0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f003 fadc 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2101      	movs	r1, #1
 80030be:	9100      	str	r1, [sp, #0]
 80030c0:	4621      	mov	r1, r4
 80030c2:	205c      	movs	r0, #92	; 0x5c
 80030c4:	f002 fe40 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e073      	b.n	80031b4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030d2:	f107 0310 	add.w	r3, r7, #16
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 ffdc 	bl	8004094 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030e0:	f001 fe9a 	bl	8004e18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030e4:	f000 fbf0 	bl	80038c8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030e8:	f001 fe66 	bl	8004db8 <vPortEnterCritical>
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d103      	bne.n	8003102 <xQueueReceive+0x162>
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003108:	b25b      	sxtb	r3, r3
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d103      	bne.n	8003118 <xQueueReceive+0x178>
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003118:	f001 fe7e 	bl	8004e18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800311c:	1d3a      	adds	r2, r7, #4
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 ffcb 	bl	80040c0 <xTaskCheckForTimeOut>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d124      	bne.n	800317a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f927 	bl	8003384 <prvIsQueueEmpty>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d018      	beq.n	800316e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fe61 	bl	8003e0c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800314a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800314c:	f000 f8c8 	bl	80032e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003150:	f000 fbc8 	bl	80038e4 <xTaskResumeAll>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f af69 	bne.w	800302e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800315c:	4b17      	ldr	r3, [pc, #92]	; (80031bc <xQueueReceive+0x21c>)
 800315e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	e75f      	b.n	800302e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800316e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003170:	f000 f8b6 	bl	80032e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003174:	f000 fbb6 	bl	80038e4 <xTaskResumeAll>
 8003178:	e759      	b.n	800302e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800317a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800317c:	f000 f8b0 	bl	80032e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003180:	f000 fbb0 	bl	80038e4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003186:	f000 f8fd 	bl	8003384 <prvIsQueueEmpty>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f43f af4e 	beq.w	800302e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fa6b 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 800319a:	4604      	mov	r4, r0
 800319c:	2000      	movs	r0, #0
 800319e:	f003 fa67 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2101      	movs	r1, #1
 80031a8:	9100      	str	r1, [sp, #0]
 80031aa:	4621      	mov	r1, r4
 80031ac:	205c      	movs	r0, #92	; 0x5c
 80031ae:	f002 fdcb 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80031b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3734      	adds	r7, #52	; 0x34
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	e000ed04 	.word	0xe000ed04

080031c0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d14d      	bne.n	8003282 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 f8aa 	bl	8004344 <xTaskPriorityDisinherit>
 80031f0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	e043      	b.n	8003282 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d119      	bne.n	8003234 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6858      	ldr	r0, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	461a      	mov	r2, r3
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	f003 fbb4 	bl	8006978 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d32b      	bcc.n	8003282 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e026      	b.n	8003282 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68d8      	ldr	r0, [r3, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	461a      	mov	r2, r3
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	f003 fb9a 	bl	8006978 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	425b      	negs	r3, r3
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	425b      	negs	r3, r3
 800326a:	441a      	add	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d105      	bne.n	8003282 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3b01      	subs	r3, #1
 8003280:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800328a:	697b      	ldr	r3, [r7, #20]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d018      	beq.n	80032d8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d303      	bcc.n	80032c8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68d9      	ldr	r1, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	461a      	mov	r2, r3
 80032d2:	6838      	ldr	r0, [r7, #0]
 80032d4:	f003 fb50 	bl	8006978 <memcpy>
    }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032e8:	f001 fd66 	bl	8004db8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f4:	e011      	b.n	800331a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3324      	adds	r3, #36	; 0x24
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fdee 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800330e:	f000 ff3d 	bl	800418c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3b01      	subs	r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	dce9      	bgt.n	80032f6 <prvUnlockQueue+0x16>
 8003322:	e000      	b.n	8003326 <prvUnlockQueue+0x46>
                    break;
 8003324:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800332e:	f001 fd73 	bl	8004e18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003332:	f001 fd41 	bl	8004db8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800333c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800333e:	e011      	b.n	8003364 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3310      	adds	r3, #16
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fdc9 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003358:	f000 ff18 	bl	800418c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	3b01      	subs	r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003368:	2b00      	cmp	r3, #0
 800336a:	dce9      	bgt.n	8003340 <prvUnlockQueue+0x60>
 800336c:	e000      	b.n	8003370 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800336e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	22ff      	movs	r2, #255	; 0xff
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003378:	f001 fd4e 	bl	8004e18 <vPortExitCritical>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800338c:	f001 fd14 	bl	8004db8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e001      	b.n	80033a2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033a2:	f001 fd39 	bl	8004e18 <vPortExitCritical>

    return xReturn;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80033b8:	f001 fcfe 	bl	8004db8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d102      	bne.n	80033ce <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80033c8:	2301      	movs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e001      	b.n	80033d2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80033d2:	f001 fd21 	bl	8004e18 <vPortExitCritical>

    return xReturn;
 80033d6:	68fb      	ldr	r3, [r7, #12]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <vQueueAddToRegistry+0x2a>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	60fb      	str	r3, [r7, #12]
    }
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d024      	beq.n	800345a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e01e      	b.n	8003454 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <vQueueAddToRegistry+0xa8>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	429a      	cmp	r2, r3
 8003424:	d105      	bne.n	8003432 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <vQueueAddToRegistry+0xa8>)
 800342c:	4413      	add	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
                    break;
 8003430:	e013      	b.n	800345a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <vQueueAddToRegistry+0x6e>
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <vQueueAddToRegistry+0xa8>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <vQueueAddToRegistry+0xa8>)
 800344a:	4413      	add	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b07      	cmp	r3, #7
 8003458:	d9dd      	bls.n	8003416 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00f      	beq.n	8003480 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 f8fe 	bl	8006670 <SEGGER_SYSVIEW_ShrinkId>
 8003474:	4601      	mov	r1, r0
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	2071      	movs	r0, #113	; 0x71
 800347c:	f002 fb94 	bl	8005ba8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	200000f8 	.word	0x200000f8

0800348c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800349c:	f001 fc8c 	bl	8004db8 <vPortEnterCritical>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d103      	bne.n	80034b6 <vQueueWaitForMessageRestricted+0x2a>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d103      	bne.n	80034cc <vQueueWaitForMessageRestricted+0x40>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034cc:	f001 fca4 	bl	8004e18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3324      	adds	r3, #36	; 0x24
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fcb7 	bl	8003e54 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff fefa 	bl	80032e0 <prvUnlockQueue>
    }
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08c      	sub	sp, #48	; 0x30
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fd3f 	bl	8004f8c <pvPortMalloc>
 800350e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003516:	2058      	movs	r0, #88	; 0x58
 8003518:	f001 fd38 	bl	8004f8c <pvPortMalloc>
 800351c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003524:	2258      	movs	r2, #88	; 0x58
 8003526:	2100      	movs	r1, #0
 8003528:	69f8      	ldr	r0, [r7, #28]
 800352a:	f003 f9f9 	bl	8006920 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
 8003534:	e005      	b.n	8003542 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f001 fde2 	bl	8005100 <vPortFree>
 800353c:	e001      	b.n	8003542 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	2300      	movs	r3, #0
 800354c:	9303      	str	r3, [sp, #12]
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	9302      	str	r3, [sp, #8]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f80e 	bl	8003580 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003564:	69f8      	ldr	r0, [r7, #28]
 8003566:	f000 f899 	bl	800369c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	e002      	b.n	8003576 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003570:	f04f 33ff 	mov.w	r3, #4294967295
 8003574:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003576:	69bb      	ldr	r3, [r7, #24]
    }
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	461a      	mov	r2, r3
 8003598:	21a5      	movs	r1, #165	; 0xa5
 800359a:	f003 f9c1 	bl	8006920 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035a8:	3b01      	subs	r3, #1
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f023 0307 	bic.w	r3, r3, #7
 80035b6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	617b      	str	r3, [r7, #20]
    }
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01e      	beq.n	800361c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e012      	b.n	800360a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	7819      	ldrb	r1, [r3, #0]
 80035ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	3334      	adds	r3, #52	; 0x34
 80035f4:	460a      	mov	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d9e9      	bls.n	80035e4 <prvInitialiseNewTask+0x64>
 8003610:	e000      	b.n	8003614 <prvInitialiseNewTask+0x94>
            {
                break;
 8003612:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	2b05      	cmp	r3, #5
 8003620:	d90a      	bls.n	8003638 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	613b      	str	r3, [r7, #16]
    }
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	2b05      	cmp	r3, #5
 800363c:	d901      	bls.n	8003642 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800363e:	2305      	movs	r3, #5
 8003640:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800364c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	3304      	adds	r3, #4
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fa06 	bl	8002a64 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	3318      	adds	r3, #24
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fa01 	bl	8002a64 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	f1c3 0206 	rsb	r2, r3, #6
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003676:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	69b8      	ldr	r0, [r7, #24]
 800367e:	f001 fa69 	bl	8004b54 <pxPortInitialiseStack>
 8003682:	4602      	mov	r2, r0
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003692:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003694:	bf00      	nop
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80036a4:	f001 fb88 	bl	8004db8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <prvAddNewTaskToReadyList+0x14c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <prvAddNewTaskToReadyList+0x14c>)
 80036b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80036b2:	4b4e      	ldr	r3, [pc, #312]	; (80037ec <prvAddNewTaskToReadyList+0x150>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80036ba:	4a4c      	ldr	r2, [pc, #304]	; (80037ec <prvAddNewTaskToReadyList+0x150>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c0:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <prvAddNewTaskToReadyList+0x14c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d110      	bne.n	80036ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80036c8:	f000 fd84 	bl	80041d4 <prvInitialiseTaskLists>
 80036cc:	e00d      	b.n	80036ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80036ce:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <prvAddNewTaskToReadyList+0x154>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036d6:	4b45      	ldr	r3, [pc, #276]	; (80037ec <prvAddNewTaskToReadyList+0x150>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d802      	bhi.n	80036ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80036e4:	4a41      	ldr	r2, [pc, #260]	; (80037ec <prvAddNewTaskToReadyList+0x150>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <prvAddNewTaskToReadyList+0x158>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <prvAddNewTaskToReadyList+0x158>)
 80036f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f4:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <prvAddNewTaskToReadyList+0x158>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <prvAddNewTaskToReadyList+0x94>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4618      	mov	r0, r3
 8003706:	f002 feed 	bl	80064e4 <SEGGER_SYSVIEW_OnTaskCreate>
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	461d      	mov	r5, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461c      	mov	r4, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	1ae3      	subs	r3, r4, r3
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	462b      	mov	r3, r5
 800372c:	f001 fdfa 	bl	8005324 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f002 ff5a 	bl	80065ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2201      	movs	r2, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <prvAddNewTaskToReadyList+0x15c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <prvAddNewTaskToReadyList+0x15c>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	492b      	ldr	r1, [pc, #172]	; (80037fc <prvAddNewTaskToReadyList+0x160>)
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3304      	adds	r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	3204      	adds	r2, #4
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1d1a      	adds	r2, r3, #4
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <prvAddNewTaskToReadyList+0x160>)
 800378e:	441a      	add	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	615a      	str	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	4918      	ldr	r1, [pc, #96]	; (80037fc <prvAddNewTaskToReadyList+0x160>)
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	4814      	ldr	r0, [pc, #80]	; (80037fc <prvAddNewTaskToReadyList+0x160>)
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80037b6:	f001 fb2f 	bl	8004e18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <prvAddNewTaskToReadyList+0x154>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00e      	beq.n	80037e0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <prvAddNewTaskToReadyList+0x150>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d207      	bcs.n	80037e0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <prvAddNewTaskToReadyList+0x164>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bdb0      	pop	{r4, r5, r7, pc}
 80037e8:	20000224 	.word	0x20000224
 80037ec:	20000138 	.word	0x20000138
 80037f0:	20000230 	.word	0x20000230
 80037f4:	20000240 	.word	0x20000240
 80037f8:	2000022c 	.word	0x2000022c
 80037fc:	2000013c 	.word	0x2000013c
 8003800:	e000ed04 	.word	0xe000ed04

08003804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800380a:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <vTaskStartScheduler+0xa4>)
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	2282      	movs	r2, #130	; 0x82
 8003816:	4925      	ldr	r1, [pc, #148]	; (80038ac <vTaskStartScheduler+0xa8>)
 8003818:	4825      	ldr	r0, [pc, #148]	; (80038b0 <vTaskStartScheduler+0xac>)
 800381a:	f7ff fe6b 	bl	80034f4 <xTaskCreate>
 800381e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d102      	bne.n	800382c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003826:	f000 feb9 	bl	800459c <xTimerCreateTimerTask>
 800382a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d124      	bne.n	800387c <vTaskStartScheduler+0x78>
        __asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
    }
 8003844:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003846:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <vTaskStartScheduler+0xb0>)
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800384e:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <vTaskStartScheduler+0xb4>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <vTaskStartScheduler+0xb8>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <vTaskStartScheduler+0xbc>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <vTaskStartScheduler+0xa4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d102      	bne.n	800386c <vTaskStartScheduler+0x68>
 8003866:	f002 fe21 	bl	80064ac <SEGGER_SYSVIEW_OnIdle>
 800386a:	e004      	b.n	8003876 <vTaskStartScheduler+0x72>
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <vTaskStartScheduler+0xbc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fe79 	bl	8006568 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003876:	f001 f9fd 	bl	8004c74 <xPortStartScheduler>
 800387a:	e00e      	b.n	800389a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	d10a      	bne.n	800389a <vTaskStartScheduler+0x96>
        __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	607b      	str	r3, [r7, #4]
    }
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <vTaskStartScheduler+0xc0>)
 800389c:	681b      	ldr	r3, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000248 	.word	0x20000248
 80038ac:	080069e4 	.word	0x080069e4
 80038b0:	080041a5 	.word	0x080041a5
 80038b4:	20000244 	.word	0x20000244
 80038b8:	20000230 	.word	0x20000230
 80038bc:	20000228 	.word	0x20000228
 80038c0:	20000138 	.word	0x20000138
 80038c4:	2000000c 	.word	0x2000000c

080038c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <vTaskSuspendAll+0x18>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <vTaskSuspendAll+0x18>)
 80038d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	2000024c 	.word	0x2000024c

080038e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <xTaskResumeAll+0x1dc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <xTaskResumeAll+0x2c>
        __asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	607b      	str	r3, [r7, #4]
    }
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003910:	f001 fa52 	bl	8004db8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003914:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <xTaskResumeAll+0x1dc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3b01      	subs	r3, #1
 800391a:	4a69      	ldr	r2, [pc, #420]	; (8003ac0 <xTaskResumeAll+0x1dc>)
 800391c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800391e:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <xTaskResumeAll+0x1dc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f040 80c4 	bne.w	8003ab0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <xTaskResumeAll+0x1e0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80bf 	beq.w	8003ab0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003932:	e08e      	b.n	8003a52 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <xTaskResumeAll+0x1e4>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	6a12      	ldr	r2, [r2, #32]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	69d2      	ldr	r2, [r2, #28]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3318      	adds	r3, #24
 800395e:	429a      	cmp	r2, r3
 8003960:	d103      	bne.n	800396a <xTaskResumeAll+0x86>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2200      	movs	r2, #0
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	3304      	adds	r3, #4
 800399c:	429a      	cmp	r2, r3
 800399e:	d103      	bne.n	80039a8 <xTaskResumeAll+0xc4>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fe16 	bl	80065ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	4b40      	ldr	r3, [pc, #256]	; (8003acc <xTaskResumeAll+0x1e8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <xTaskResumeAll+0x1e8>)
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	493e      	ldr	r1, [pc, #248]	; (8003ad0 <xTaskResumeAll+0x1ec>)
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3304      	adds	r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	3204      	adds	r2, #4
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <xTaskResumeAll+0x1ec>)
 8003a16:	441a      	add	r2, r3
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	615a      	str	r2, [r3, #20]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	492b      	ldr	r1, [pc, #172]	; (8003ad0 <xTaskResumeAll+0x1ec>)
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1c59      	adds	r1, r3, #1
 8003a30:	4827      	ldr	r0, [pc, #156]	; (8003ad0 <xTaskResumeAll+0x1ec>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4403      	add	r3, r0
 8003a3c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <xTaskResumeAll+0x1f0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <xTaskResumeAll+0x1f4>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a52:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <xTaskResumeAll+0x1e4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f af6c 	bne.w	8003934 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a62:	f000 fc35 	bl	80042d0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <xTaskResumeAll+0x1f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a72:	f000 f847 	bl	8003b04 <xTaskIncrementTick>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003a7c:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <xTaskResumeAll+0x1f4>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f1      	bne.n	8003a72 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <xTaskResumeAll+0x1f8>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <xTaskResumeAll+0x1f4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <xTaskResumeAll+0x1fc>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003ab0:	f001 f9b2 	bl	8004e18 <vPortExitCritical>

    return xAlreadyYielded;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2000024c 	.word	0x2000024c
 8003ac4:	20000224 	.word	0x20000224
 8003ac8:	200001e4 	.word	0x200001e4
 8003acc:	2000022c 	.word	0x2000022c
 8003ad0:	2000013c 	.word	0x2000013c
 8003ad4:	20000138 	.word	0x20000138
 8003ad8:	20000238 	.word	0x20000238
 8003adc:	20000234 	.word	0x20000234
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <xTaskGetTickCount+0x1c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000228 	.word	0x20000228

08003b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0e:	4b7f      	ldr	r3, [pc, #508]	; (8003d0c <xTaskIncrementTick+0x208>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 80f0 	bne.w	8003cf8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b18:	4b7d      	ldr	r3, [pc, #500]	; (8003d10 <xTaskIncrementTick+0x20c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003b20:	4a7b      	ldr	r2, [pc, #492]	; (8003d10 <xTaskIncrementTick+0x20c>)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d120      	bne.n	8003b6e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003b2c:	4b79      	ldr	r3, [pc, #484]	; (8003d14 <xTaskIncrementTick+0x210>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <xTaskIncrementTick+0x48>
        __asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	607b      	str	r3, [r7, #4]
    }
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <xTaskIncrementTick+0x46>
 8003b4c:	4b71      	ldr	r3, [pc, #452]	; (8003d14 <xTaskIncrementTick+0x210>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <xTaskIncrementTick+0x214>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6f      	ldr	r2, [pc, #444]	; (8003d14 <xTaskIncrementTick+0x210>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4a6f      	ldr	r2, [pc, #444]	; (8003d18 <xTaskIncrementTick+0x214>)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b6e      	ldr	r3, [pc, #440]	; (8003d1c <xTaskIncrementTick+0x218>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a6d      	ldr	r2, [pc, #436]	; (8003d1c <xTaskIncrementTick+0x218>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	f000 fbb1 	bl	80042d0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b6e:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <xTaskIncrementTick+0x21c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f0c0 80aa 	bcc.w	8003cce <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b7a:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <xTaskIncrementTick+0x210>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b84:	4b66      	ldr	r3, [pc, #408]	; (8003d20 <xTaskIncrementTick+0x21c>)
 8003b86:	f04f 32ff 	mov.w	r2, #4294967295
 8003b8a:	601a      	str	r2, [r3, #0]
                    break;
 8003b8c:	e09f      	b.n	8003cce <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <xTaskIncrementTick+0x210>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d203      	bcs.n	8003bae <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ba6:	4a5e      	ldr	r2, [pc, #376]	; (8003d20 <xTaskIncrementTick+0x21c>)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003bac:	e08f      	b.n	8003cce <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	68d2      	ldr	r2, [r2, #12]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	6892      	ldr	r2, [r2, #8]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d103      	bne.n	8003bdc <xTaskIncrementTick+0xd8>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2200      	movs	r2, #0
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1e5a      	subs	r2, r3, #1
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01e      	beq.n	8003c32 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	6a12      	ldr	r2, [r2, #32]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	69d2      	ldr	r2, [r2, #28]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	3318      	adds	r3, #24
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d103      	bne.n	8003c22 <xTaskIncrementTick+0x11e>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fcd9 	bl	80065ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <xTaskIncrementTick+0x220>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	4a36      	ldr	r2, [pc, #216]	; (8003d24 <xTaskIncrementTick+0x220>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	4935      	ldr	r1, [pc, #212]	; (8003d28 <xTaskIncrementTick+0x224>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	3204      	adds	r2, #4
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <xTaskIncrementTick+0x224>)
 8003c90:	441a      	add	r2, r3
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9a:	4923      	ldr	r1, [pc, #140]	; (8003d28 <xTaskIncrementTick+0x224>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1c59      	adds	r1, r3, #1
 8003caa:	481f      	ldr	r0, [pc, #124]	; (8003d28 <xTaskIncrementTick+0x224>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4403      	add	r3, r0
 8003cb6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <xTaskIncrementTick+0x228>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	f67f af59 	bls.w	8003b7a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ccc:	e755      	b.n	8003b7a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <xTaskIncrementTick+0x228>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4914      	ldr	r1, [pc, #80]	; (8003d28 <xTaskIncrementTick+0x224>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d901      	bls.n	8003cea <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <xTaskIncrementTick+0x22c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e004      	b.n	8003d02 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <xTaskIncrementTick+0x230>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <xTaskIncrementTick+0x230>)
 8003d00:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	2000024c 	.word	0x2000024c
 8003d10:	20000228 	.word	0x20000228
 8003d14:	200001dc 	.word	0x200001dc
 8003d18:	200001e0 	.word	0x200001e0
 8003d1c:	2000023c 	.word	0x2000023c
 8003d20:	20000244 	.word	0x20000244
 8003d24:	2000022c 	.word	0x2000022c
 8003d28:	2000013c 	.word	0x2000013c
 8003d2c:	20000138 	.word	0x20000138
 8003d30:	20000238 	.word	0x20000238
 8003d34:	20000234 	.word	0x20000234

08003d38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <vTaskSwitchContext+0xbc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003d46:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <vTaskSwitchContext+0xc0>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003d4c:	e04d      	b.n	8003dea <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <vTaskSwitchContext+0xc0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <vTaskSwitchContext+0xc4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	f1c3 031f 	rsb	r3, r3, #31
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	4925      	ldr	r1, [pc, #148]	; (8003e00 <vTaskSwitchContext+0xc8>)
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
    }
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <vTaskSwitchContext+0x5a>
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <vTaskSwitchContext+0xc8>)
 8003da0:	4413      	add	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3308      	adds	r3, #8
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d104      	bne.n	8003dc4 <vTaskSwitchContext+0x8c>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <vTaskSwitchContext+0xcc>)
 8003dcc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <vTaskSwitchContext+0xcc>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <vTaskSwitchContext+0xd0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d102      	bne.n	8003de0 <vTaskSwitchContext+0xa8>
 8003dda:	f002 fb67 	bl	80064ac <SEGGER_SYSVIEW_OnIdle>
}
 8003dde:	e004      	b.n	8003dea <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <vTaskSwitchContext+0xcc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 fbbf 	bl	8006568 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	2000024c 	.word	0x2000024c
 8003df8:	20000238 	.word	0x20000238
 8003dfc:	2000022c 	.word	0x2000022c
 8003e00:	2000013c 	.word	0x2000013c
 8003e04:	20000138 	.word	0x20000138
 8003e08:	20000248 	.word	0x20000248

08003e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	60fb      	str	r3, [r7, #12]
    }
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <vTaskPlaceOnEventList+0x44>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3318      	adds	r3, #24
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fe1f 	bl	8002a7e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e40:	2101      	movs	r1, #1
 8003e42:	6838      	ldr	r0, [r7, #0]
 8003e44:	f000 fb2a 	bl	800449c <prvAddCurrentTaskToDelayedList>
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000138 	.word	0x20000138

08003e54 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	613b      	str	r3, [r7, #16]
    }
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	61da      	str	r2, [r3, #28]
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	621a      	str	r2, [r3, #32]
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	3218      	adds	r2, #24
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f103 0218 	add.w	r2, r3, #24
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003eca:	2024      	movs	r0, #36	; 0x24
 8003ecc:	f001 fe12 	bl	8005af4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68b8      	ldr	r0, [r7, #8]
 8003ed4:	f000 fae2 	bl	800449c <prvAddCurrentTaskToDelayedList>
    }
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000138 	.word	0x20000138

08003ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
    }
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	6a3a      	ldr	r2, [r7, #32]
 8003f1c:	6a12      	ldr	r2, [r2, #32]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	69d2      	ldr	r2, [r2, #28]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	3318      	adds	r3, #24
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d103      	bne.n	8003f3e <xTaskRemoveFromEventList+0x5a>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2200      	movs	r2, #0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4e:	4b4b      	ldr	r3, [pc, #300]	; (800407c <xTaskRemoveFromEventList+0x198>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d162      	bne.n	800401c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	68d2      	ldr	r2, [r2, #12]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	6a3a      	ldr	r2, [r7, #32]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	3304      	adds	r3, #4
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d103      	bne.n	8003f84 <xTaskRemoveFromEventList+0xa0>
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2200      	movs	r2, #0
 8003f88:	615a      	str	r2, [r3, #20]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1e5a      	subs	r2, r3, #1
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f002 fb28 	bl	80065ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <xTaskRemoveFromEventList+0x19c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	4a35      	ldr	r2, [pc, #212]	; (8004080 <xTaskRemoveFromEventList+0x19c>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4934      	ldr	r1, [pc, #208]	; (8004084 <xTaskRemoveFromEventList+0x1a0>)
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	6a3a      	ldr	r2, [r7, #32]
 8003fd8:	3204      	adds	r2, #4
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <xTaskRemoveFromEventList+0x1a0>)
 8003ff2:	441a      	add	r2, r3
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	615a      	str	r2, [r3, #20]
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	4921      	ldr	r1, [pc, #132]	; (8004084 <xTaskRemoveFromEventList+0x1a0>)
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	481d      	ldr	r0, [pc, #116]	; (8004084 <xTaskRemoveFromEventList+0x1a0>)
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4403      	add	r3, r0
 8004018:	6019      	str	r1, [r3, #0]
 800401a:	e01b      	b.n	8004054 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <xTaskRemoveFromEventList+0x1a4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	61da      	str	r2, [r3, #28]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	3218      	adds	r2, #24
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f103 0218 	add.w	r2, r3, #24
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <xTaskRemoveFromEventList+0x1a4>)
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <xTaskRemoveFromEventList+0x1a4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <xTaskRemoveFromEventList+0x1a4>)
 8004052:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <xTaskRemoveFromEventList+0x1a8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	429a      	cmp	r2, r3
 8004060:	d905      	bls.n	800406e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004062:	2301      	movs	r3, #1
 8004064:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <xTaskRemoveFromEventList+0x1ac>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e001      	b.n	8004072 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004074:	4618      	mov	r0, r3
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000024c 	.word	0x2000024c
 8004080:	2000022c 	.word	0x2000022c
 8004084:	2000013c 	.word	0x2000013c
 8004088:	200001e4 	.word	0x200001e4
 800408c:	20000138 	.word	0x20000138
 8004090:	20000238 	.word	0x20000238

08004094 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <vTaskInternalSetTimeOutState+0x24>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <vTaskInternalSetTimeOutState+0x28>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	605a      	str	r2, [r3, #4]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	2000023c 	.word	0x2000023c
 80040bc:	20000228 	.word	0x20000228

080040c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	613b      	str	r3, [r7, #16]
    }
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
    }
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004102:	f000 fe59 	bl	8004db8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <xTaskCheckForTimeOut+0xc4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d102      	bne.n	8004126 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	e026      	b.n	8004174 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <xTaskCheckForTimeOut+0xc8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d00a      	beq.n	8004148 <xTaskCheckForTimeOut+0x88>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d305      	bcc.n	8004148 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800413c:	2301      	movs	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e015      	b.n	8004174 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	429a      	cmp	r2, r3
 8004150:	d20b      	bcs.n	800416a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff98 	bl	8004094 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e004      	b.n	8004174 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004174:	f000 fe50 	bl	8004e18 <vPortExitCritical>

    return xReturn;
 8004178:	69fb      	ldr	r3, [r7, #28]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000228 	.word	0x20000228
 8004188:	2000023c 	.word	0x2000023c

0800418c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <vTaskMissedYield+0x14>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	20000238 	.word	0x20000238

080041a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80041ac:	f000 f852 	bl	8004254 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <prvIdleTask+0x28>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d9f9      	bls.n	80041ac <prvIdleTask+0x8>
            {
                taskYIELD();
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <prvIdleTask+0x2c>)
 80041ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	f3bf 8f4f 	dsb	sy
 80041c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80041c8:	e7f0      	b.n	80041ac <prvIdleTask+0x8>
 80041ca:	bf00      	nop
 80041cc:	2000013c 	.word	0x2000013c
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	e00c      	b.n	80041fa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a12      	ldr	r2, [pc, #72]	; (8004234 <prvInitialiseTaskLists+0x60>)
 80041ec:	4413      	add	r3, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fc18 	bl	8002a24 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3301      	adds	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b05      	cmp	r3, #5
 80041fe:	d9ef      	bls.n	80041e0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004200:	480d      	ldr	r0, [pc, #52]	; (8004238 <prvInitialiseTaskLists+0x64>)
 8004202:	f7fe fc0f 	bl	8002a24 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004206:	480d      	ldr	r0, [pc, #52]	; (800423c <prvInitialiseTaskLists+0x68>)
 8004208:	f7fe fc0c 	bl	8002a24 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800420c:	480c      	ldr	r0, [pc, #48]	; (8004240 <prvInitialiseTaskLists+0x6c>)
 800420e:	f7fe fc09 	bl	8002a24 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004212:	480c      	ldr	r0, [pc, #48]	; (8004244 <prvInitialiseTaskLists+0x70>)
 8004214:	f7fe fc06 	bl	8002a24 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004218:	480b      	ldr	r0, [pc, #44]	; (8004248 <prvInitialiseTaskLists+0x74>)
 800421a:	f7fe fc03 	bl	8002a24 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <prvInitialiseTaskLists+0x78>)
 8004220:	4a05      	ldr	r2, [pc, #20]	; (8004238 <prvInitialiseTaskLists+0x64>)
 8004222:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <prvInitialiseTaskLists+0x7c>)
 8004226:	4a05      	ldr	r2, [pc, #20]	; (800423c <prvInitialiseTaskLists+0x68>)
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000013c 	.word	0x2000013c
 8004238:	200001b4 	.word	0x200001b4
 800423c:	200001c8 	.word	0x200001c8
 8004240:	200001e4 	.word	0x200001e4
 8004244:	200001f8 	.word	0x200001f8
 8004248:	20000210 	.word	0x20000210
 800424c:	200001dc 	.word	0x200001dc
 8004250:	200001e0 	.word	0x200001e0

08004254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800425a:	e019      	b.n	8004290 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800425c:	f000 fdac 	bl	8004db8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004260:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <prvCheckTasksWaitingTermination+0x50>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fc3f 	bl	8002af0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <prvCheckTasksWaitingTermination+0x54>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3b01      	subs	r3, #1
 8004278:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <prvCheckTasksWaitingTermination+0x54>)
 800427a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <prvCheckTasksWaitingTermination+0x58>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3b01      	subs	r3, #1
 8004282:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <prvCheckTasksWaitingTermination+0x58>)
 8004284:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004286:	f000 fdc7 	bl	8004e18 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f810 	bl	80042b0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <prvCheckTasksWaitingTermination+0x58>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e1      	bne.n	800425c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200001f8 	.word	0x200001f8
 80042a8:	20000224 	.word	0x20000224
 80042ac:	2000020c 	.word	0x2000020c

080042b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 ff1f 	bl	8005100 <vPortFree>
            vPortFree( pxTCB );
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 ff1c 	bl	8005100 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <prvResetNextTaskUnblockTime+0x30>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <prvResetNextTaskUnblockTime+0x34>)
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80042e6:	e005      	b.n	80042f4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <prvResetNextTaskUnblockTime+0x30>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a04      	ldr	r2, [pc, #16]	; (8004304 <prvResetNextTaskUnblockTime+0x34>)
 80042f2:	6013      	str	r3, [r2, #0]
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	200001dc 	.word	0x200001dc
 8004304:	20000244 	.word	0x20000244

08004308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <xTaskGetSchedulerState+0x34>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004316:	2301      	movs	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e008      	b.n	800432e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <xTaskGetSchedulerState+0x38>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004324:	2302      	movs	r3, #2
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	e001      	b.n	800432e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800432e:	687b      	ldr	r3, [r7, #4]
    }
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	20000230 	.word	0x20000230
 8004340:	2000024c 	.word	0x2000024c

08004344 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8095 	beq.w	8004486 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800435c:	4b4c      	ldr	r3, [pc, #304]	; (8004490 <xTaskPriorityDisinherit+0x14c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	d00a      	beq.n	800437c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	613b      	str	r3, [r7, #16]
    }
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
    }
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d06a      	beq.n	8004486 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d166      	bne.n	8004486 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe fb97 	bl	8002af0 <uxListRemove>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	2201      	movs	r2, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <xTaskPriorityDisinherit+0x150>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4013      	ands	r3, r2
 80043da:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <xTaskPriorityDisinherit+0x150>)
 80043dc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4619      	mov	r1, r3
 80043e2:	204a      	movs	r0, #74	; 0x4a
 80043e4:	f001 fba4 	bl	8005b30 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f1c3 0206 	rsb	r2, r3, #6
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 f8f4 	bl	80065ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	2201      	movs	r2, #1
 800440a:	409a      	lsls	r2, r3
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <xTaskPriorityDisinherit+0x150>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	4a20      	ldr	r2, [pc, #128]	; (8004494 <xTaskPriorityDisinherit+0x150>)
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	491f      	ldr	r1, [pc, #124]	; (8004498 <xTaskPriorityDisinherit+0x154>)
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3304      	adds	r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	609a      	str	r2, [r3, #8]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	3204      	adds	r2, #4
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <xTaskPriorityDisinherit+0x154>)
 800445a:	441a      	add	r2, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	615a      	str	r2, [r3, #20]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	490c      	ldr	r1, [pc, #48]	; (8004498 <xTaskPriorityDisinherit+0x154>)
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	4808      	ldr	r0, [pc, #32]	; (8004498 <xTaskPriorityDisinherit+0x154>)
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4403      	add	r3, r0
 8004480:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004486:	69fb      	ldr	r3, [r7, #28]
    }
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000138 	.word	0x20000138
 8004494:	2000022c 	.word	0x2000022c
 8004498:	2000013c 	.word	0x2000013c

0800449c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <prvAddCurrentTaskToDelayedList+0xe4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3304      	adds	r3, #4
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fb1c 	bl	8002af0 <uxListRemove>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2201      	movs	r2, #1
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43da      	mvns	r2, r3
 80044cc:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <prvAddCurrentTaskToDelayedList+0xec>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4013      	ands	r3, r2
 80044d2:	4a2d      	ldr	r2, [pc, #180]	; (8004588 <prvAddCurrentTaskToDelayedList+0xec>)
 80044d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d124      	bne.n	8004528 <prvAddCurrentTaskToDelayedList+0x8c>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d021      	beq.n	8004528 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <prvAddCurrentTaskToDelayedList+0xf0>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	3204      	adds	r2, #4
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1d1a      	adds	r2, r3, #4
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004518:	615a      	str	r2, [r3, #20]
 800451a:	4b1c      	ldr	r3, [pc, #112]	; (800458c <prvAddCurrentTaskToDelayedList+0xf0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a1a      	ldr	r2, [pc, #104]	; (800458c <prvAddCurrentTaskToDelayedList+0xf0>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004526:	e026      	b.n	8004576 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d209      	bcs.n	8004554 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3304      	adds	r3, #4
 800454a:	4619      	mov	r1, r3
 800454c:	4610      	mov	r0, r2
 800454e:	f7fe fa96 	bl	8002a7e <vListInsert>
}
 8004552:	e010      	b.n	8004576 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <prvAddCurrentTaskToDelayedList+0xe8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7fe fa8c 	bl	8002a7e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d202      	bcs.n	8004576 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004570:	4a09      	ldr	r2, [pc, #36]	; (8004598 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6013      	str	r3, [r2, #0]
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000228 	.word	0x20000228
 8004584:	20000138 	.word	0x20000138
 8004588:	2000022c 	.word	0x2000022c
 800458c:	20000210 	.word	0x20000210
 8004590:	200001e0 	.word	0x200001e0
 8004594:	200001dc 	.word	0x200001dc
 8004598:	20000244 	.word	0x20000244

0800459c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80045a6:	f000 fa9f 	bl	8004ae8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <xTimerCreateTimerTask+0x54>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <xTimerCreateTimerTask+0x58>)
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	2302      	movs	r3, #2
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045c0:	490d      	ldr	r1, [pc, #52]	; (80045f8 <xTimerCreateTimerTask+0x5c>)
 80045c2:	480e      	ldr	r0, [pc, #56]	; (80045fc <xTimerCreateTimerTask+0x60>)
 80045c4:	f7fe ff96 	bl	80034f4 <xTaskCreate>
 80045c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	603b      	str	r3, [r7, #0]
    }
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80045e6:	687b      	ldr	r3, [r7, #4]
    }
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000280 	.word	0x20000280
 80045f4:	20000284 	.word	0x20000284
 80045f8:	080069ec 	.word	0x080069ec
 80045fc:	08004755 	.word	0x08004755

08004600 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800460e:	202c      	movs	r0, #44	; 0x2c
 8004610:	f000 fcbc 	bl	8004f8c <pvPortMalloc>
 8004614:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f805 	bl	8004642 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004638:	697b      	ldr	r3, [r7, #20]
        }
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	617b      	str	r3, [r7, #20]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800466c:	f000 fa3c 	bl	8004ae8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	3304      	adds	r3, #4
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe f9e9 	bl	8002a64 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469e:	f043 0304 	orr.w	r3, r3, #4
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046be:	e008      	b.n	80046d2 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4413      	add	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	18d1      	adds	r1, r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f8dc 	bl	800489c <prvInsertTimerInActiveList>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ea      	bne.n	80046c0 <prvReloadTimer+0xe>
        }
    }
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <prvProcessExpiredTimer+0x5c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7fe f9ef 	bl	8002af0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ffc4 	bl	80046b2 <prvReloadTimer>
 800472a:	e008      	b.n	800473e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	4798      	blx	r3
    }
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000278 	.word	0x20000278

08004754 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f857 	bl	8004814 <prvGetNextExpireTime>
 8004766:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f803 	bl	8004778 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004772:	f000 f8d5 	bl	8004920 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004776:	e7f1      	b.n	800475c <prvTimerTask+0x8>

08004778 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004782:	f7ff f8a1 	bl	80038c8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f866 	bl	800485c <prvSampleTimeNow>
 8004790:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d130      	bne.n	80047fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d806      	bhi.n	80047b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80047a6:	f7ff f89d 	bl	80038e4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ffa1 	bl	80046f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80047b2:	e024      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <prvProcessTimerOrBlockTask+0x90>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <prvProcessTimerOrBlockTask+0x50>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <prvProcessTimerOrBlockTask+0x52>
 80047c8:	2300      	movs	r3, #0
 80047ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <prvProcessTimerOrBlockTask+0x94>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	f7fe fe57 	bl	800348c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80047de:	f7ff f881 	bl	80038e4 <xTaskResumeAll>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <prvProcessTimerOrBlockTask+0x98>)
 80047ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	f3bf 8f6f 	isb	sy
    }
 80047f8:	e001      	b.n	80047fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80047fa:	f7ff f873 	bl	80038e4 <xTaskResumeAll>
    }
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	2000027c 	.word	0x2000027c
 800480c:	20000280 	.word	0x20000280
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800481c:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <prvGetNextExpireTime+0x44>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <prvGetNextExpireTime+0x16>
 8004826:	2201      	movs	r2, #1
 8004828:	e000      	b.n	800482c <prvGetNextExpireTime+0x18>
 800482a:	2200      	movs	r2, #0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <prvGetNextExpireTime+0x44>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e001      	b.n	8004848 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004848:	68fb      	ldr	r3, [r7, #12]
    }
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000278 	.word	0x20000278

0800485c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004864:	f7ff f93e 	bl	8003ae4 <xTaskGetTickCount>
 8004868:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <prvSampleTimeNow+0x3c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d205      	bcs.n	8004880 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004874:	f000 f912 	bl	8004a9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e002      	b.n	8004886 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <prvSampleTimeNow+0x3c>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800488c:	68fb      	ldr	r3, [r7, #12]
    }
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000288 	.word	0x20000288

0800489c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d812      	bhi.n	80048e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	1ad2      	subs	r2, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d302      	bcc.n	80048d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80048d0:	2301      	movs	r3, #1
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e01b      	b.n	800490e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <prvInsertTimerInActiveList+0x7c>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe f8cc 	bl	8002a7e <vListInsert>
 80048e6:	e012      	b.n	800490e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d206      	bcs.n	80048fe <prvInsertTimerInActiveList+0x62>
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e007      	b.n	800490e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <prvInsertTimerInActiveList+0x80>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fe f8b8 	bl	8002a7e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800490e:	697b      	ldr	r3, [r7, #20]
    }
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2000027c 	.word	0x2000027c
 800491c:	20000278 	.word	0x20000278

08004920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004926:	e0a6      	b.n	8004a76 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f2c0 80a3 	blt.w	8004a76 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe f8d5 	bl	8002af0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff87 	bl	800485c <prvSampleTimeNow>
 800494e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3b01      	subs	r3, #1
 8004954:	2b08      	cmp	r3, #8
 8004956:	f200 808d 	bhi.w	8004a74 <prvProcessReceivedCommands+0x154>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <prvProcessReceivedCommands+0x40>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	08004985 	.word	0x08004985
 8004968:	080049ed 	.word	0x080049ed
 800496c:	08004a01 	.word	0x08004a01
 8004970:	08004a4b 	.word	0x08004a4b
 8004974:	08004985 	.word	0x08004985
 8004978:	08004985 	.word	0x08004985
 800497c:	080049ed 	.word	0x080049ed
 8004980:	08004a01 	.word	0x08004a01
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	18d1      	adds	r1, r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	69f8      	ldr	r0, [r7, #28]
 80049a4:	f7ff ff7a 	bl	800489c <prvInsertTimerInActiveList>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4619      	mov	r1, r3
 80049c8:	69f8      	ldr	r0, [r7, #28]
 80049ca:	f7ff fe72 	bl	80046b2 <prvReloadTimer>
 80049ce:	e008      	b.n	80049e2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	69f8      	ldr	r0, [r7, #28]
 80049e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80049ea:	e044      	b.n	8004a76 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80049fe:	e03a      	b.n	8004a76 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10a      	bne.n	8004a36 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	617b      	str	r3, [r7, #20]
    }
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	18d1      	adds	r1, r2, r3
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	69f8      	ldr	r0, [r7, #28]
 8004a44:	f7ff ff2a 	bl	800489c <prvInsertTimerInActiveList>
                        break;
 8004a48:	e015      	b.n	8004a76 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004a58:	69f8      	ldr	r0, [r7, #28]
 8004a5a:	f000 fb51 	bl	8005100 <vPortFree>
 8004a5e:	e00a      	b.n	8004a76 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004a72:	e000      	b.n	8004a76 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004a74:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <prvProcessReceivedCommands+0x178>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f107 0108 	add.w	r1, r7, #8
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fa8d 	bl	8002fa0 <xQueueReceive>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f47f af4d 	bne.w	8004928 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	3720      	adds	r7, #32
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20000280 	.word	0x20000280

08004a9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aa2:	e009      	b.n	8004ab8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <prvSwitchTimerLists+0x44>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004aae:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab2:	6838      	ldr	r0, [r7, #0]
 8004ab4:	f7ff fe1e 	bl	80046f4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <prvSwitchTimerLists+0x44>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <prvSwitchTimerLists+0x44>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <prvSwitchTimerLists+0x48>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <prvSwitchTimerLists+0x44>)
 8004ace:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ad0:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <prvSwitchTimerLists+0x48>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
    }
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000278 	.word	0x20000278
 8004ae4:	2000027c 	.word	0x2000027c

08004ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004aec:	f000 f964 	bl	8004db8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <prvCheckForValidListAndQueue+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d11d      	bne.n	8004b34 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004af8:	4811      	ldr	r0, [pc, #68]	; (8004b40 <prvCheckForValidListAndQueue+0x58>)
 8004afa:	f7fd ff93 	bl	8002a24 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004afe:	4811      	ldr	r0, [pc, #68]	; (8004b44 <prvCheckForValidListAndQueue+0x5c>)
 8004b00:	f7fd ff90 	bl	8002a24 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <prvCheckForValidListAndQueue+0x60>)
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <prvCheckForValidListAndQueue+0x58>)
 8004b08:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <prvCheckForValidListAndQueue+0x64>)
 8004b0c:	4a0d      	ldr	r2, [pc, #52]	; (8004b44 <prvCheckForValidListAndQueue+0x5c>)
 8004b0e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b10:	2200      	movs	r2, #0
 8004b12:	210c      	movs	r1, #12
 8004b14:	200a      	movs	r0, #10
 8004b16:	f7fe f8a5 	bl	8002c64 <xQueueGenericCreate>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <prvCheckForValidListAndQueue+0x54>)
 8004b1e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvCheckForValidListAndQueue+0x54>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <prvCheckForValidListAndQueue+0x54>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4908      	ldr	r1, [pc, #32]	; (8004b50 <prvCheckForValidListAndQueue+0x68>)
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fc56 	bl	80033e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b34:	f000 f970 	bl	8004e18 <vPortExitCritical>
    }
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000280 	.word	0x20000280
 8004b40:	20000250 	.word	0x20000250
 8004b44:	20000264 	.word	0x20000264
 8004b48:	20000278 	.word	0x20000278
 8004b4c:	2000027c 	.word	0x2000027c
 8004b50:	080069f4 	.word	0x080069f4

08004b54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b04      	subs	r3, #4
 8004b64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f023 0201 	bic.w	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b04      	subs	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b84:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <pxPortInitialiseStack+0x64>)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b14      	subs	r3, #20
 8004b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f06f 0202 	mvn.w	r2, #2
 8004ba2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3b20      	subs	r3, #32
 8004ba8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	08004bbd 	.word	0x08004bbd

08004bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <prvTaskExitError+0x54>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d00a      	beq.n	8004be6 <prvTaskExitError+0x2a>
        __asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
    }
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <prvTaskExitError+0x28>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
    }
 8004bf8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bfa:	bf00      	nop
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0fc      	beq.n	8004bfc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000010 	.word	0x20000010
	...

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	4770      	bx	lr
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst2>:
 8004c40:	20000138 	.word	0x20000138
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c48:	4808      	ldr	r0, [pc, #32]	; (8004c6c <prvPortStartFirstTask+0x24>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8814 	msr	CONTROL, r0
 8004c5a:	b662      	cpsie	i
 8004c5c:	b661      	cpsie	f
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	df00      	svc	0
 8004c68:	bf00      	nop
 8004c6a:	0000      	.short	0x0000
 8004c6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop

08004c74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c7a:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <xPortStartScheduler+0x120>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <xPortStartScheduler+0x124>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d10a      	bne.n	8004c9a <xPortStartScheduler+0x26>
        __asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	613b      	str	r3, [r7, #16]
    }
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <xPortStartScheduler+0x120>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	; (8004d9c <xPortStartScheduler+0x128>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10a      	bne.n	8004cba <xPortStartScheduler+0x46>
        __asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	60fb      	str	r3, [r7, #12]
    }
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <xPortStartScheduler+0x12c>)
 8004cbc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <xPortStartScheduler+0x130>)
 8004ce0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ce2:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <xPortStartScheduler+0x134>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ce8:	e009      	b.n	8004cfe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004cea:	4b2f      	ldr	r3, [pc, #188]	; (8004da8 <xPortStartScheduler+0x134>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <xPortStartScheduler+0x134>)
 8004cf2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d0ef      	beq.n	8004cea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1c3 0307 	rsb	r3, r3, #7
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00a      	beq.n	8004d2c <xPortStartScheduler+0xb8>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60bb      	str	r3, [r7, #8]
    }
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d34:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d3e:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <xPortStartScheduler+0x134>)
 8004d40:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <xPortStartScheduler+0x138>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <xPortStartScheduler+0x138>)
 8004d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <xPortStartScheduler+0x138>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <xPortStartScheduler+0x138>)
 8004d5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d62:	f000 f8e3 	bl	8004f2c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <xPortStartScheduler+0x13c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d6c:	f000 f902 	bl	8004f74 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <xPortStartScheduler+0x140>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0f      	ldr	r2, [pc, #60]	; (8004db4 <xPortStartScheduler+0x140>)
 8004d76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d7c:	f7ff ff64 	bl	8004c48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d80:	f7fe ffda 	bl	8003d38 <vTaskSwitchContext>
    prvTaskExitError();
 8004d84:	f7ff ff1a 	bl	8004bbc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	e000ed00 	.word	0xe000ed00
 8004d98:	410fc271 	.word	0x410fc271
 8004d9c:	410fc270 	.word	0x410fc270
 8004da0:	e000e400 	.word	0xe000e400
 8004da4:	2000028c 	.word	0x2000028c
 8004da8:	20000290 	.word	0x20000290
 8004dac:	e000ed20 	.word	0xe000ed20
 8004db0:	20000010 	.word	0x20000010
 8004db4:	e000ef34 	.word	0xe000ef34

08004db8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	607b      	str	r3, [r7, #4]
    }
 8004dd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <vPortEnterCritical+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10f      	bne.n	8004e04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de4:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vPortEnterCritical+0x5c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <vPortEnterCritical+0x4c>
        __asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	603b      	str	r3, [r7, #0]
    }
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vPortEnterCritical+0x4a>
    }
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	20000010 	.word	0x20000010
 8004e14:	e000ed04 	.word	0xe000ed04

08004e18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <vPortExitCritical+0x50>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vPortExitCritical+0x24>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <vPortExitCritical+0x50>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <vPortExitCritical+0x50>)
 8004e44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <vPortExitCritical+0x50>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <vPortExitCritical+0x42>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000010 	.word	0x20000010
 8004e6c:	00000000 	.word	0x00000000

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7fe ff4a 	bl	8003d38 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000138 	.word	0x20000138
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
    }
 8004ef0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004ef2:	f001 fa61 	bl	80063b8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ef6:	f7fe fe05 	bl	8003b04 <xTaskIncrementTick>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004f00:	f001 fab8 	bl	8006474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <SysTick_Handler+0x50>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e001      	b.n	8004f12 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004f0e:	f001 fa95 	bl	800643c <SEGGER_SYSVIEW_RecordExitISR>
 8004f12:	2300      	movs	r3, #0
 8004f14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f383 8811 	msr	BASEPRI, r3
    }
 8004f1c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004f1e:	bf00      	nop
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	e000ed04 	.word	0xe000ed04

08004f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <vPortSetupTimerInterrupt+0x34>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f36:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <vPortSetupTimerInterrupt+0x38>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <vPortSetupTimerInterrupt+0x3c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <vPortSetupTimerInterrupt+0x40>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <vPortSetupTimerInterrupt+0x44>)
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <vPortSetupTimerInterrupt+0x34>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000e010 	.word	0xe000e010
 8004f64:	e000e018 	.word	0xe000e018
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	10624dd3 	.word	0x10624dd3
 8004f70:	e000e014 	.word	0xe000e014

08004f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f84 <vPortEnableVFP+0x10>
 8004f78:	6801      	ldr	r1, [r0, #0]
 8004f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f7e:	6001      	str	r1, [r0, #0]
 8004f80:	4770      	bx	lr
 8004f82:	0000      	.short	0x0000
 8004f84:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop

08004f8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004f98:	f7fe fc96 	bl	80038c8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <pvPortMalloc+0x160>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004fa4:	f000 f908 	bl	80051b8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d012      	beq.n	8004fd4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004fae:	2208      	movs	r2, #8
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	3308      	adds	r3, #8
 8004fba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d804      	bhi.n	8004fd0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	4413      	add	r3, r2
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	e001      	b.n	8004fd4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	db70      	blt.n	80050bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d06d      	beq.n	80050bc <pvPortMalloc+0x130>
 8004fe0:	4b43      	ldr	r3, [pc, #268]	; (80050f0 <pvPortMalloc+0x164>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d868      	bhi.n	80050bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004fea:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <pvPortMalloc+0x168>)
 8004fec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <pvPortMalloc+0x168>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff4:	e004      	b.n	8005000 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d903      	bls.n	8005012 <pvPortMalloc+0x86>
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f1      	bne.n	8004ff6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005012:	4b36      	ldr	r3, [pc, #216]	; (80050ec <pvPortMalloc+0x160>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	429a      	cmp	r2, r3
 800501a:	d04f      	beq.n	80050bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2208      	movs	r2, #8
 8005022:	4413      	add	r3, r2
 8005024:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	1ad2      	subs	r2, r2, r3
 8005036:	2308      	movs	r3, #8
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	429a      	cmp	r2, r3
 800503c:	d91f      	bls.n	800507e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <pvPortMalloc+0xda>
        __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
    }
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1ad2      	subs	r2, r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005078:	6978      	ldr	r0, [r7, #20]
 800507a:	f000 f8f9 	bl	8005270 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800507e:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <pvPortMalloc+0x164>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <pvPortMalloc+0x164>)
 800508a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800508c:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <pvPortMalloc+0x164>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <pvPortMalloc+0x16c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d203      	bcs.n	80050a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005098:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <pvPortMalloc+0x164>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <pvPortMalloc+0x16c>)
 800509e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <pvPortMalloc+0x170>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4a10      	ldr	r2, [pc, #64]	; (80050fc <pvPortMalloc+0x170>)
 80050ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80050bc:	f7fe fc12 	bl	80038e4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <pvPortMalloc+0x154>
        __asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60fb      	str	r3, [r7, #12]
    }
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <pvPortMalloc+0x152>
    return pvReturn;
 80050e0:	69fb      	ldr	r3, [r7, #28]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	; 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20012e9c 	.word	0x20012e9c
 80050f0:	20012ea0 	.word	0x20012ea0
 80050f4:	20012e94 	.word	0x20012e94
 80050f8:	20012ea4 	.word	0x20012ea4
 80050fc:	20012ea8 	.word	0x20012ea8

08005100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d049      	beq.n	80051a6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005112:	2308      	movs	r3, #8
 8005114:	425b      	negs	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	db0a      	blt.n	800513e <vPortFree+0x3e>
        __asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	60fb      	str	r3, [r7, #12]
    }
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <vPortFree+0x5c>
        __asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
    }
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	0fdb      	lsrs	r3, r3, #31
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01c      	beq.n	80051a6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d118      	bne.n	80051a6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005180:	f7fe fba2 	bl	80038c8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <vPortFree+0xb0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4413      	add	r3, r2
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <vPortFree+0xb0>)
 8005190:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005192:	6938      	ldr	r0, [r7, #16]
 8005194:	f000 f86c 	bl	8005270 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <vPortFree+0xb4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a05      	ldr	r2, [pc, #20]	; (80051b4 <vPortFree+0xb4>)
 80051a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80051a2:	f7fe fb9f 	bl	80038e4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051a6:	bf00      	nop
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20012ea0 	.word	0x20012ea0
 80051b4:	20012eac 	.word	0x20012eac

080051b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051be:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80051c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051c4:	4b25      	ldr	r3, [pc, #148]	; (800525c <prvHeapInit+0xa4>)
 80051c6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3307      	adds	r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	4a1d      	ldr	r2, [pc, #116]	; (800525c <prvHeapInit+0xa4>)
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f0:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <prvHeapInit+0xa8>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <prvHeapInit+0xa8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005204:	2208      	movs	r2, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0307 	bic.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a13      	ldr	r2, [pc, #76]	; (8005264 <prvHeapInit+0xac>)
 8005218:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <prvHeapInit+0xac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <prvHeapInit+0xac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvHeapInit+0xac>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <prvHeapInit+0xb0>)
 8005246:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a07      	ldr	r2, [pc, #28]	; (800526c <prvHeapInit+0xb4>)
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000294 	.word	0x20000294
 8005260:	20012e94 	.word	0x20012e94
 8005264:	20012e9c 	.word	0x20012e9c
 8005268:	20012ea4 	.word	0x20012ea4
 800526c:	20012ea0 	.word	0x20012ea0

08005270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005278:	4b28      	ldr	r3, [pc, #160]	; (800531c <prvInsertBlockIntoFreeList+0xac>)
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e002      	b.n	8005284 <prvInsertBlockIntoFreeList+0x14>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d8f7      	bhi.n	800527e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d108      	bne.n	80052b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	441a      	add	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d118      	bne.n	80052f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <prvInsertBlockIntoFreeList+0xb0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d00d      	beq.n	80052ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	441a      	add	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e008      	b.n	8005300 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <prvInsertBlockIntoFreeList+0xb0>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e003      	b.n	8005300 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d002      	beq.n	800530e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	20012e94 	.word	0x20012e94
 8005320:	20012e9c 	.word	0x20012e9c

08005324 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005332:	2205      	movs	r2, #5
 8005334:	492b      	ldr	r1, [pc, #172]	; (80053e4 <SYSVIEW_AddTask+0xc0>)
 8005336:	68b8      	ldr	r0, [r7, #8]
 8005338:	f001 fae2 	bl	8006900 <memcmp>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04b      	beq.n	80053da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005342:	4b29      	ldr	r3, [pc, #164]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b07      	cmp	r3, #7
 8005348:	d903      	bls.n	8005352 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800534a:	4828      	ldr	r0, [pc, #160]	; (80053ec <SYSVIEW_AddTask+0xc8>)
 800534c:	f001 fa7c 	bl	8006848 <SEGGER_SYSVIEW_Warn>
    return;
 8005350:	e044      	b.n	80053dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005352:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4926      	ldr	r1, [pc, #152]	; (80053f0 <SYSVIEW_AddTask+0xcc>)
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4921      	ldr	r1, [pc, #132]	; (80053f0 <SYSVIEW_AddTask+0xcc>)
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3304      	adds	r3, #4
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800537c:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	491b      	ldr	r1, [pc, #108]	; (80053f0 <SYSVIEW_AddTask+0xcc>)
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3308      	adds	r3, #8
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005392:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4916      	ldr	r1, [pc, #88]	; (80053f0 <SYSVIEW_AddTask+0xcc>)
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	330c      	adds	r3, #12
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4910      	ldr	r1, [pc, #64]	; (80053f0 <SYSVIEW_AddTask+0xcc>)
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3310      	adds	r3, #16
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <SYSVIEW_AddTask+0xc4>)
 80053c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f80e 	bl	80053f4 <SYSVIEW_SendTaskInfo>
 80053d8:	e000      	b.n	80053dc <SYSVIEW_AddTask+0xb8>
    return;
 80053da:	bf00      	nop

}
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	080069fc 	.word	0x080069fc
 80053e8:	20012f50 	.word	0x20012f50
 80053ec:	08006a04 	.word	0x08006a04
 80053f0:	20012eb0 	.word	0x20012eb0

080053f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005402:	f107 0314 	add.w	r3, r7, #20
 8005406:	2214      	movs	r2, #20
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f001 fa88 	bl	8006920 <memset>
  TaskInfo.TaskID     = TaskID;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005424:	f107 0314 	add.w	r3, r7, #20
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fe9b 	bl	8006164 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800542e:	bf00      	nop
 8005430:	3728      	adds	r7, #40	; 0x28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800543e:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <USART2_IRQHandler+0x80>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800544e:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <USART2_IRQHandler+0x84>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 030b 	and.w	r3, r3, #11
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005460:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <USART2_IRQHandler+0x88>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <USART2_IRQHandler+0x88>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	79fa      	ldrb	r2, [r7, #7]
 800546e:	4610      	mov	r0, r2
 8005470:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01a      	beq.n	80054b2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <USART2_IRQHandler+0x8c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <USART2_IRQHandler+0x8c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	1dfa      	adds	r2, r7, #7
 800548a:	4610      	mov	r0, r2
 800548c:	4798      	blx	r3
 800548e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <USART2_IRQHandler+0x90>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a0b      	ldr	r2, [pc, #44]	; (80054c8 <USART2_IRQHandler+0x90>)
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e006      	b.n	80054b2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80054a4:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <USART2_IRQHandler+0x80>)
 80054a6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80054a8:	79fa      	ldrb	r2, [r7, #7]
 80054aa:	4b04      	ldr	r3, [pc, #16]	; (80054bc <USART2_IRQHandler+0x84>)
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e000      	b.n	80054b2 <USART2_IRQHandler+0x7a>
      return;
 80054b0:	bf00      	nop
    }
  }
}
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40011000 	.word	0x40011000
 80054bc:	40011004 	.word	0x40011004
 80054c0:	20012f54 	.word	0x20012f54
 80054c4:	20012f58 	.word	0x20012f58
 80054c8:	4001100c 	.word	0x4001100c

080054cc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	4001100c 	.word	0x4001100c

080054ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054f2:	4b24      	ldr	r3, [pc, #144]	; (8005584 <_DoInit+0x98>)
 80054f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2203      	movs	r2, #3
 80054fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2203      	movs	r2, #3
 8005500:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a20      	ldr	r2, [pc, #128]	; (8005588 <_DoInit+0x9c>)
 8005506:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a20      	ldr	r2, [pc, #128]	; (800558c <_DoInit+0xa0>)
 800550c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005514:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <_DoInit+0x9c>)
 800552c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <_DoInit+0xa4>)
 8005532:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2210      	movs	r2, #16
 8005538:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3307      	adds	r3, #7
 8005550:	4a10      	ldr	r2, [pc, #64]	; (8005594 <_DoInit+0xa8>)
 8005552:	6810      	ldr	r0, [r2, #0]
 8005554:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005556:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <_DoInit+0xac>)
 800555e:	6810      	ldr	r0, [r2, #0]
 8005560:	6018      	str	r0, [r3, #0]
 8005562:	8891      	ldrh	r1, [r2, #4]
 8005564:	7992      	ldrb	r2, [r2, #6]
 8005566:	8099      	strh	r1, [r3, #4]
 8005568:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800556a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005574:	f3bf 8f5f 	dmb	sy
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20012f5c 	.word	0x20012f5c
 8005588:	08006a54 	.word	0x08006a54
 800558c:	20013004 	.word	0x20013004
 8005590:	20013404 	.word	0x20013404
 8005594:	08006a60 	.word	0x08006a60
 8005598:	08006a64 	.word	0x08006a64

0800559c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	; 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80055a8:	4b3e      	ldr	r3, [pc, #248]	; (80056a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <SEGGER_RTT_ReadNoLock+0x1e>
 80055b6:	f7ff ff99 	bl	80054ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4613      	mov	r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	3360      	adds	r3, #96	; 0x60
 80055c6:	4a37      	ldr	r2, [pc, #220]	; (80056a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80055c8:	4413      	add	r3, r2
 80055ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80055e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d92b      	bls.n	8005640 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bf28      	it	cs
 80055fa:	4613      	movcs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800560e:	f001 f9b3 	bl	8006978 <memcpy>
    NumBytesRead += NumBytesRem;
 8005612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800562a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005638:	429a      	cmp	r2, r3
 800563a:	d101      	bne.n	8005640 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800563c:	2300      	movs	r3, #0
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4293      	cmp	r3, r2
 800564e:	bf28      	it	cs
 8005650:	4613      	movcs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d019      	beq.n	800568e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	4413      	add	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	6939      	ldr	r1, [r7, #16]
 8005668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800566a:	f001 f985 	bl	8006978 <memcpy>
    NumBytesRead += NumBytesRem;
 800566e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005698:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	; 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20012f5c 	.word	0x20012f5c

080056a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80056b8:	e002      	b.n	80056c0 <_EncodeStr+0x18>
    Len++;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1f6      	bne.n	80056ba <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d901      	bls.n	80056d8 <_EncodeStr+0x30>
    Len = Limit;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2bfe      	cmp	r3, #254	; 0xfe
 80056dc:	d806      	bhi.n	80056ec <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	60fa      	str	r2, [r7, #12]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e011      	b.n	8005710 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	60fa      	str	r2, [r7, #12]
 80056f2:	22ff      	movs	r2, #255	; 0xff
 80056f4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	0a19      	lsrs	r1, r3, #8
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	60fa      	str	r2, [r7, #12]
 800570c:	b2ca      	uxtb	r2, r1
 800570e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005714:	e00a      	b.n	800572c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	1c53      	adds	r3, r2, #1
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	60f9      	str	r1, [r7, #12]
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
    n++;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	3301      	adds	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	429a      	cmp	r2, r3
 8005732:	d3f0      	bcc.n	8005716 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005734:	68fb      	ldr	r3, [r7, #12]
}
 8005736:	4618      	mov	r0, r3
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005762:	4b35      	ldr	r3, [pc, #212]	; (8005838 <_HandleIncomingPacket+0xdc>)
 8005764:	7e1b      	ldrb	r3, [r3, #24]
 8005766:	4618      	mov	r0, r3
 8005768:	1cfb      	adds	r3, r7, #3
 800576a:	2201      	movs	r2, #1
 800576c:	4619      	mov	r1, r3
 800576e:	f7ff ff15 	bl	800559c <SEGGER_RTT_ReadNoLock>
 8005772:	4603      	mov	r3, r0
 8005774:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	dd59      	ble.n	8005830 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d032      	beq.n	80057e8 <_HandleIncomingPacket+0x8c>
 8005782:	2b80      	cmp	r3, #128	; 0x80
 8005784:	dc42      	bgt.n	800580c <_HandleIncomingPacket+0xb0>
 8005786:	2b07      	cmp	r3, #7
 8005788:	dc16      	bgt.n	80057b8 <_HandleIncomingPacket+0x5c>
 800578a:	2b00      	cmp	r3, #0
 800578c:	dd3e      	ble.n	800580c <_HandleIncomingPacket+0xb0>
 800578e:	3b01      	subs	r3, #1
 8005790:	2b06      	cmp	r3, #6
 8005792:	d83b      	bhi.n	800580c <_HandleIncomingPacket+0xb0>
 8005794:	a201      	add	r2, pc, #4	; (adr r2, 800579c <_HandleIncomingPacket+0x40>)
 8005796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579a:	bf00      	nop
 800579c:	080057bf 	.word	0x080057bf
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057cb 	.word	0x080057cb
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	080057e3 	.word	0x080057e3
 80057b8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ba:	d034      	beq.n	8005826 <_HandleIncomingPacket+0xca>
 80057bc:	e026      	b.n	800580c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80057be:	f000 fb55 	bl	8005e6c <SEGGER_SYSVIEW_Start>
      break;
 80057c2:	e035      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80057c4:	f000 fc0e 	bl	8005fe4 <SEGGER_SYSVIEW_Stop>
      break;
 80057c8:	e032      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80057ca:	f000 fdc3 	bl	8006354 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80057ce:	e02f      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80057d0:	f000 fdac 	bl	800632c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80057d4:	e02c      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80057d6:	f000 fc2b 	bl	8006030 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80057da:	e029      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80057dc:	f000 fff6 	bl	80067cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80057e0:	e026      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80057e2:	f000 ffd5 	bl	8006790 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80057e6:	e023      	b.n	8005830 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057e8:	4b13      	ldr	r3, [pc, #76]	; (8005838 <_HandleIncomingPacket+0xdc>)
 80057ea:	7e1b      	ldrb	r3, [r3, #24]
 80057ec:	4618      	mov	r0, r3
 80057ee:	1cfb      	adds	r3, r7, #3
 80057f0:	2201      	movs	r2, #1
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7ff fed2 	bl	800559c <SEGGER_RTT_ReadNoLock>
 80057f8:	4603      	mov	r3, r0
 80057fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	dd13      	ble.n	800582a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 ff43 	bl	8006690 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800580a:	e00e      	b.n	800582a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	b25b      	sxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	da0c      	bge.n	800582e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <_HandleIncomingPacket+0xdc>)
 8005816:	7e1b      	ldrb	r3, [r3, #24]
 8005818:	4618      	mov	r0, r3
 800581a:	1cfb      	adds	r3, r7, #3
 800581c:	2201      	movs	r2, #1
 800581e:	4619      	mov	r1, r3
 8005820:	f7ff febc 	bl	800559c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005824:	e003      	b.n	800582e <_HandleIncomingPacket+0xd2>
      break;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <_HandleIncomingPacket+0xd4>
      break;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <_HandleIncomingPacket+0xd4>
      break;
 800582e:	bf00      	nop
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20013414 	.word	0x20013414

0800583c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005842:	2301      	movs	r3, #1
 8005844:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005846:	1d3b      	adds	r3, r7, #4
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005850:	4b32      	ldr	r3, [pc, #200]	; (800591c <_TrySendOverflowPacket+0xe0>)
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
 8005856:	e00b      	b.n	8005870 <_TrySendOverflowPacket+0x34>
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	b2da      	uxtb	r2, r3
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	09db      	lsrs	r3, r3, #7
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b7f      	cmp	r3, #127	; 0x7f
 8005874:	d8f0      	bhi.n	8005858 <_TrySendOverflowPacket+0x1c>
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <_TrySendOverflowPacket+0xe4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800588c:	4b23      	ldr	r3, [pc, #140]	; (800591c <_TrySendOverflowPacket+0xe0>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	e00b      	b.n	80058b8 <_TrySendOverflowPacket+0x7c>
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	6279      	str	r1, [r7, #36]	; 0x24
 80058aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	09db      	lsrs	r3, r3, #7
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	2b7f      	cmp	r3, #127	; 0x7f
 80058bc:	d8f0      	bhi.n	80058a0 <_TrySendOverflowPacket+0x64>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	627a      	str	r2, [r7, #36]	; 0x24
 80058c4:	6a3a      	ldr	r2, [r7, #32]
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80058ce:	4b13      	ldr	r3, [pc, #76]	; (800591c <_TrySendOverflowPacket+0xe0>)
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	4618      	mov	r0, r3
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	1d3b      	adds	r3, r7, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	f7fa fc7e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058e4:	4603      	mov	r3, r0
 80058e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80058e8:	f7ff fdf0 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <_TrySendOverflowPacket+0xe0>)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80058f8:	4b08      	ldr	r3, [pc, #32]	; (800591c <_TrySendOverflowPacket+0xe0>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <_TrySendOverflowPacket+0xe0>)
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e004      	b.n	8005910 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <_TrySendOverflowPacket+0xe0>)
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	3301      	adds	r3, #1
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <_TrySendOverflowPacket+0xe0>)
 800590e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005910:	693b      	ldr	r3, [r7, #16]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3730      	adds	r7, #48	; 0x30
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20013414 	.word	0x20013414
 8005920:	e0001004 	.word	0xe0001004

08005924 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005930:	4b6d      	ldr	r3, [pc, #436]	; (8005ae8 <_SendPacket+0x1c4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d010      	beq.n	800595a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005938:	4b6b      	ldr	r3, [pc, #428]	; (8005ae8 <_SendPacket+0x1c4>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80a5 	beq.w	8005a8c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005942:	4b69      	ldr	r3, [pc, #420]	; (8005ae8 <_SendPacket+0x1c4>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d109      	bne.n	800595e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800594a:	f7ff ff77 	bl	800583c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800594e:	4b66      	ldr	r3, [pc, #408]	; (8005ae8 <_SendPacket+0x1c4>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b01      	cmp	r3, #1
 8005954:	f040 809c 	bne.w	8005a90 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005958:	e001      	b.n	800595e <_SendPacket+0x3a>
    goto Send;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <_SendPacket+0x3c>
Send:
 800595e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b1f      	cmp	r3, #31
 8005964:	d809      	bhi.n	800597a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005966:	4b60      	ldr	r3, [pc, #384]	; (8005ae8 <_SendPacket+0x1c4>)
 8005968:	69da      	ldr	r2, [r3, #28]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	f040 808d 	bne.w	8005a94 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b17      	cmp	r3, #23
 800597e:	d807      	bhi.n	8005990 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3b01      	subs	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e03d      	b.n	8005a0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b7f      	cmp	r3, #127	; 0x7f
 800599c:	d912      	bls.n	80059c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	09da      	lsrs	r2, r3, #7
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	3a01      	subs	r2, #1
 80059b6:	60fa      	str	r2, [r7, #12]
 80059b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	e006      	b.n	80059d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b7f      	cmp	r3, #127	; 0x7f
 80059d6:	d912      	bls.n	80059fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	09da      	lsrs	r2, r3, #7
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3b01      	subs	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	3a01      	subs	r2, #1
 80059f0:	60fa      	str	r2, [r7, #12]
 80059f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	e006      	b.n	8005a0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a0c:	4b37      	ldr	r3, [pc, #220]	; (8005aec <_SendPacket+0x1c8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a12:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	e00b      	b.n	8005a3e <_SendPacket+0x11a>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	09db      	lsrs	r3, r3, #7
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	2b7f      	cmp	r3, #127	; 0x7f
 8005a42:	d8f0      	bhi.n	8005a26 <_SendPacket+0x102>
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	627a      	str	r2, [r7, #36]	; 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f7fa fbbc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005a6c:	f7ff fd2e 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	60d3      	str	r3, [r2, #12]
 8005a7c:	e00b      	b.n	8005a96 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e004      	b.n	8005a96 <_SendPacket+0x172>
    goto SendDone;
 8005a8c:	bf00      	nop
 8005a8e:	e002      	b.n	8005a96 <_SendPacket+0x172>
      goto SendDone;
 8005a90:	bf00      	nop
 8005a92:	e000      	b.n	8005a96 <_SendPacket+0x172>
      goto SendDone;
 8005a94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <_SendPacket+0x1c4>)
 8005a98:	7e1b      	ldrb	r3, [r3, #24]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <_SendPacket+0x1cc>)
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	440b      	add	r3, r1
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	336c      	adds	r3, #108	; 0x6c
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <_SendPacket+0x1c4>)
 8005aae:	7e1b      	ldrb	r3, [r3, #24]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	490f      	ldr	r1, [pc, #60]	; (8005af0 <_SendPacket+0x1cc>)
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4403      	add	r3, r0
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	3370      	adds	r3, #112	; 0x70
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d00b      	beq.n	8005ade <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <_SendPacket+0x1c4>)
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <_SendPacket+0x1c4>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ad4:	f7ff fe42 	bl	800575c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ad8:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <_SendPacket+0x1c4>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20013414 	.word	0x20013414
 8005aec:	e0001004 	.word	0xe0001004
 8005af0:	20012f5c 	.word	0x20012f5c

08005af4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005afc:	f3ef 8311 	mrs	r3, BASEPRI
 8005b00:	f04f 0120 	mov.w	r1, #32
 8005b04:	f381 8811 	msr	BASEPRI, r1
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4808      	ldr	r0, [pc, #32]	; (8005b2c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005b0c:	f7ff fe19 	bl	8005742 <_PreparePacket>
 8005b10:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	68b8      	ldr	r0, [r7, #8]
 8005b18:	f7ff ff04 	bl	8005924 <_SendPacket>
  RECORD_END();
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f383 8811 	msr	BASEPRI, r3
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20013444 	.word	0x20013444

08005b30 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3e:	f04f 0120 	mov.w	r1, #32
 8005b42:	f381 8811 	msr	BASEPRI, r1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	4816      	ldr	r0, [pc, #88]	; (8005ba4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b4a:	f7ff fdfa 	bl	8005742 <_PreparePacket>
 8005b4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	e00b      	b.n	8005b76 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	1c59      	adds	r1, r3, #1
 8005b66:	61f9      	str	r1, [r7, #28]
 8005b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	09db      	lsrs	r3, r3, #7
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7a:	d8f0      	bhi.n	8005b5e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	61fa      	str	r2, [r7, #28]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	6938      	ldr	r0, [r7, #16]
 8005b92:	f7ff fec7 	bl	8005924 <_SendPacket>
  RECORD_END();
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f383 8811 	msr	BASEPRI, r3
}
 8005b9c:	bf00      	nop
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20013444 	.word	0x20013444

08005ba8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	; 0x30
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb8:	f04f 0120 	mov.w	r1, #32
 8005bbc:	f381 8811 	msr	BASEPRI, r1
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	4825      	ldr	r0, [pc, #148]	; (8005c58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005bc4:	f7ff fdbd 	bl	8005742 <_PreparePacket>
 8005bc8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd6:	e00b      	b.n	8005bf0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf4:	d8f0      	bhi.n	8005bd8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	e00b      	b.n	8005c28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	6279      	str	r1, [r7, #36]	; 0x24
 8005c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	09db      	lsrs	r3, r3, #7
 8005c26:	623b      	str	r3, [r7, #32]
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2c:	d8f0      	bhi.n	8005c10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	627a      	str	r2, [r7, #36]	; 0x24
 8005c34:	6a3a      	ldr	r2, [r7, #32]
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	6979      	ldr	r1, [r7, #20]
 8005c42:	69b8      	ldr	r0, [r7, #24]
 8005c44:	f7ff fe6e 	bl	8005924 <_SendPacket>
  RECORD_END();
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f383 8811 	msr	BASEPRI, r3
}
 8005c4e:	bf00      	nop
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20013444 	.word	0x20013444

08005c5c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08e      	sub	sp, #56	; 0x38
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6e:	f04f 0120 	mov.w	r1, #32
 8005c72:	f381 8811 	msr	BASEPRI, r1
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	4832      	ldr	r0, [pc, #200]	; (8005d44 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c7a:	f7ff fd62 	bl	8005742 <_PreparePacket>
 8005c7e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c8c:	e00b      	b.n	8005ca6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	1c59      	adds	r1, r3, #1
 8005c96:	6379      	str	r1, [r7, #52]	; 0x34
 8005c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	09db      	lsrs	r3, r3, #7
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8005caa:	d8f0      	bhi.n	8005c8e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	637a      	str	r2, [r7, #52]	; 0x34
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc4:	e00b      	b.n	8005cde <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	1c59      	adds	r1, r3, #1
 8005cce:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce2:	d8f0      	bhi.n	8005cc6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	e00b      	b.n	8005d16 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	6279      	str	r1, [r7, #36]	; 0x24
 8005d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	623b      	str	r3, [r7, #32]
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1a:	d8f0      	bhi.n	8005cfe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	627a      	str	r2, [r7, #36]	; 0x24
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	6979      	ldr	r1, [r7, #20]
 8005d30:	69b8      	ldr	r0, [r7, #24]
 8005d32:	f7ff fdf7 	bl	8005924 <_SendPacket>
  RECORD_END();
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	f383 8811 	msr	BASEPRI, r3
}
 8005d3c:	bf00      	nop
 8005d3e:	3738      	adds	r7, #56	; 0x38
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20013444 	.word	0x20013444

08005d48 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b090      	sub	sp, #64	; 0x40
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d56:	f3ef 8311 	mrs	r3, BASEPRI
 8005d5a:	f04f 0120 	mov.w	r1, #32
 8005d5e:	f381 8811 	msr	BASEPRI, r1
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	4840      	ldr	r0, [pc, #256]	; (8005e68 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d66:	f7ff fcec 	bl	8005742 <_PreparePacket>
 8005d6a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d78:	e00b      	b.n	8005d92 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d80:	1c59      	adds	r1, r3, #1
 8005d82:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	09db      	lsrs	r3, r3, #7
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b7f      	cmp	r3, #127	; 0x7f
 8005d96:	d8f0      	bhi.n	8005d7a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
 8005db0:	e00b      	b.n	8005dca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	1c59      	adds	r1, r3, #1
 8005dba:	6379      	str	r1, [r7, #52]	; 0x34
 8005dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	09db      	lsrs	r3, r3, #7
 8005dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dce:	d8f0      	bhi.n	8005db2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	637a      	str	r2, [r7, #52]	; 0x34
 8005dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de8:	e00b      	b.n	8005e02 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	09db      	lsrs	r3, r3, #7
 8005e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	2b7f      	cmp	r3, #127	; 0x7f
 8005e06:	d8f0      	bhi.n	8005dea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1e:	623b      	str	r3, [r7, #32]
 8005e20:	e00b      	b.n	8005e3a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	1c59      	adds	r1, r3, #1
 8005e2a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	09db      	lsrs	r3, r3, #7
 8005e38:	623b      	str	r3, [r7, #32]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3e:	d8f0      	bhi.n	8005e22 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	627a      	str	r2, [r7, #36]	; 0x24
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	69b8      	ldr	r0, [r7, #24]
 8005e56:	f7ff fd65 	bl	8005924 <_SendPacket>
  RECORD_END();
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f383 8811 	msr	BASEPRI, r3
}
 8005e60:	bf00      	nop
 8005e62:	3740      	adds	r7, #64	; 0x40
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20013444 	.word	0x20013444

08005e6c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	; 0x30
 8005e70:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005e72:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005e78:	f3ef 8311 	mrs	r3, BASEPRI
 8005e7c:	f04f 0120 	mov.w	r1, #32
 8005e80:	f381 8811 	msr	BASEPRI, r1
 8005e84:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005e88:	785b      	ldrb	r3, [r3, #1]
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	4953      	ldr	r1, [pc, #332]	; (8005fdc <SEGGER_SYSVIEW_Start+0x170>)
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa f9a6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005e9a:	f7ff fb17 	bl	80054cc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e9e:	200a      	movs	r0, #10
 8005ea0:	f7ff fe28 	bl	8005af4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	f04f 0120 	mov.w	r1, #32
 8005eac:	f381 8811 	msr	BASEPRI, r1
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	484b      	ldr	r0, [pc, #300]	; (8005fe0 <SEGGER_SYSVIEW_Start+0x174>)
 8005eb4:	f7ff fc45 	bl	8005742 <_PreparePacket>
 8005eb8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec2:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec8:	e00b      	b.n	8005ee2 <SEGGER_SYSVIEW_Start+0x76>
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee6:	d8f0      	bhi.n	8005eca <SEGGER_SYSVIEW_Start+0x5e>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	e00b      	b.n	8005f1c <SEGGER_SYSVIEW_Start+0xb0>
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	6279      	str	r1, [r7, #36]	; 0x24
 8005f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	09db      	lsrs	r3, r3, #7
 8005f1a:	623b      	str	r3, [r7, #32]
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f20:	d8f0      	bhi.n	8005f04 <SEGGER_SYSVIEW_Start+0x98>
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	627a      	str	r2, [r7, #36]	; 0x24
 8005f28:	6a3a      	ldr	r2, [r7, #32]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	61fb      	str	r3, [r7, #28]
 8005f36:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	e00b      	b.n	8005f56 <SEGGER_SYSVIEW_Start+0xea>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1c59      	adds	r1, r3, #1
 8005f46:	61f9      	str	r1, [r7, #28]
 8005f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	09db      	lsrs	r3, r3, #7
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d8f0      	bhi.n	8005f3e <SEGGER_SYSVIEW_Start+0xd2>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	2300      	movs	r3, #0
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	e00b      	b.n	8005f8e <SEGGER_SYSVIEW_Start+0x122>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1c59      	adds	r1, r3, #1
 8005f7e:	6179      	str	r1, [r7, #20]
 8005f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	09db      	lsrs	r3, r3, #7
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b7f      	cmp	r3, #127	; 0x7f
 8005f92:	d8f0      	bhi.n	8005f76 <SEGGER_SYSVIEW_Start+0x10a>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	617a      	str	r2, [r7, #20]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005fa4:	2218      	movs	r2, #24
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fcbb 	bl	8005924 <_SendPacket>
      RECORD_END();
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005fc2:	f000 f9c7 	bl	8006354 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005fc6:	f000 f9b1 	bl	800632c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005fca:	f000 fbff 	bl	80067cc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005fce:	bf00      	nop
 8005fd0:	3730      	adds	r7, #48	; 0x30
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20013414 	.word	0x20013414
 8005fdc:	08006a84 	.word	0x08006a84
 8005fe0:	20013444 	.word	0x20013444

08005fe4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fea:	f3ef 8311 	mrs	r3, BASEPRI
 8005fee:	f04f 0120 	mov.w	r1, #32
 8005ff2:	f381 8811 	msr	BASEPRI, r1
 8005ff6:	607b      	str	r3, [r7, #4]
 8005ff8:	480b      	ldr	r0, [pc, #44]	; (8006028 <SEGGER_SYSVIEW_Stop+0x44>)
 8005ffa:	f7ff fba2 	bl	8005742 <_PreparePacket>
 8005ffe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <SEGGER_SYSVIEW_Stop+0x48>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006008:	220b      	movs	r2, #11
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	f7ff fc89 	bl	8005924 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <SEGGER_SYSVIEW_Stop+0x48>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f383 8811 	msr	BASEPRI, r3
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20013444 	.word	0x20013444
 800602c:	20013414 	.word	0x20013414

08006030 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006036:	f3ef 8311 	mrs	r3, BASEPRI
 800603a:	f04f 0120 	mov.w	r1, #32
 800603e:	f381 8811 	msr	BASEPRI, r1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	4845      	ldr	r0, [pc, #276]	; (800615c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006046:	f7ff fb7c 	bl	8005742 <_PreparePacket>
 800604a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006054:	4b42      	ldr	r3, [pc, #264]	; (8006160 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
 800605a:	e00b      	b.n	8006074 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	b2da      	uxtb	r2, r3
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d8f0      	bhi.n	800605c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	e00b      	b.n	80060ae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	6279      	str	r1, [r7, #36]	; 0x24
 80060a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b7f      	cmp	r3, #127	; 0x7f
 80060b2:	d8f0      	bhi.n	8006096 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	627a      	str	r2, [r7, #36]	; 0x24
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	e00b      	b.n	80060e8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	1c59      	adds	r1, r3, #1
 80060d8:	61f9      	str	r1, [r7, #28]
 80060da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	09db      	lsrs	r3, r3, #7
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b7f      	cmp	r3, #127	; 0x7f
 80060ec:	d8f0      	bhi.n	80060d0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	61fa      	str	r2, [r7, #28]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e00b      	b.n	8006120 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	6179      	str	r1, [r7, #20]
 8006112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	613b      	str	r3, [r7, #16]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b7f      	cmp	r3, #127	; 0x7f
 8006124:	d8f0      	bhi.n	8006108 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	617a      	str	r2, [r7, #20]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006136:	2218      	movs	r2, #24
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	68b8      	ldr	r0, [r7, #8]
 800613c:	f7ff fbf2 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800614e:	4b04      	ldr	r3, [pc, #16]	; (8006160 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	4798      	blx	r3
  }
}
 8006154:	bf00      	nop
 8006156:	3730      	adds	r7, #48	; 0x30
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20013444 	.word	0x20013444
 8006160:	20013414 	.word	0x20013414

08006164 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b092      	sub	sp, #72	; 0x48
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800616c:	f3ef 8311 	mrs	r3, BASEPRI
 8006170:	f04f 0120 	mov.w	r1, #32
 8006174:	f381 8811 	msr	BASEPRI, r1
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	486a      	ldr	r0, [pc, #424]	; (8006324 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800617c:	f7ff fae1 	bl	8005742 <_PreparePacket>
 8006180:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	647b      	str	r3, [r7, #68]	; 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4b66      	ldr	r3, [pc, #408]	; (8006328 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	643b      	str	r3, [r7, #64]	; 0x40
 8006196:	e00b      	b.n	80061b0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	6479      	str	r1, [r7, #68]	; 0x44
 80061a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ac:	09db      	lsrs	r3, r3, #7
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	2b7f      	cmp	r3, #127	; 0x7f
 80061b4:	d8f0      	bhi.n	8006198 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80061b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	647a      	str	r2, [r7, #68]	; 0x44
 80061bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80061f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	4619      	mov	r1, r3
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fa4d 	bl	80056a8 <_EncodeStr>
 800620e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006210:	2209      	movs	r2, #9
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	6938      	ldr	r0, [r7, #16]
 8006216:	f7ff fb85 	bl	8005924 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b40      	ldr	r3, [pc, #256]	; (8006328 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	633b      	str	r3, [r7, #48]	; 0x30
 800622e:	e00b      	b.n	8006248 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	b2da      	uxtb	r2, r3
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	1c59      	adds	r1, r3, #1
 8006238:	6379      	str	r1, [r7, #52]	; 0x34
 800623a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	09db      	lsrs	r3, r3, #7
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2b7f      	cmp	r3, #127	; 0x7f
 800624c:	d8f0      	bhi.n	8006230 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800624e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	637a      	str	r2, [r7, #52]	; 0x34
 8006254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
 8006268:	e00b      	b.n	8006282 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	09db      	lsrs	r3, r3, #7
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	2b7f      	cmp	r3, #127	; 0x7f
 8006286:	d8f0      	bhi.n	800626a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	623b      	str	r3, [r7, #32]
 80062a2:	e00b      	b.n	80062bc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	6279      	str	r1, [r7, #36]	; 0x24
 80062ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	09db      	lsrs	r3, r3, #7
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	2b7f      	cmp	r3, #127	; 0x7f
 80062c0:	d8f0      	bhi.n	80062a4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	627a      	str	r2, [r7, #36]	; 0x24
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e00b      	b.n	80062f4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	1c59      	adds	r1, r3, #1
 80062e4:	61f9      	str	r1, [r7, #28]
 80062e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ea:	b2d2      	uxtb	r2, r2
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	09db      	lsrs	r3, r3, #7
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b7f      	cmp	r3, #127	; 0x7f
 80062f8:	d8f0      	bhi.n	80062dc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	61fa      	str	r2, [r7, #28]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800630a:	2215      	movs	r2, #21
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	6938      	ldr	r0, [r7, #16]
 8006310:	f7ff fb08 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f383 8811 	msr	BASEPRI, r3
}
 800631a:	bf00      	nop
 800631c:	3748      	adds	r7, #72	; 0x48
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20013444 	.word	0x20013444
 8006328:	20013414 	.word	0x20013414

0800632c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006342:	4b03      	ldr	r3, [pc, #12]	; (8006350 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4798      	blx	r3
  }
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20013414 	.word	0x20013414

08006354 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006354:	b590      	push	{r4, r7, lr}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800635a:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d01a      	beq.n	8006398 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800636c:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4798      	blx	r3
 8006374:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006378:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800637a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	000a      	movs	r2, r1
 8006388:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800638a:	4613      	mov	r3, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4621      	mov	r1, r4
 8006390:	200d      	movs	r0, #13
 8006392:	f7ff fc09 	bl	8005ba8 <SEGGER_SYSVIEW_RecordU32x2>
 8006396:	e006      	b.n	80063a6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006398:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4619      	mov	r1, r3
 800639e:	200c      	movs	r0, #12
 80063a0:	f7ff fbc6 	bl	8005b30 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20013414 	.word	0x20013414
 80063b4:	e0001004 	.word	0xe0001004

080063b8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	4819      	ldr	r0, [pc, #100]	; (8006434 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80063ce:	f7ff f9b8 	bl	8005742 <_PreparePacket>
 80063d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80063d8:	4b17      	ldr	r3, [pc, #92]	; (8006438 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	e00b      	b.n	8006404 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	1c59      	adds	r1, r3, #1
 80063f4:	6179      	str	r1, [r7, #20]
 80063f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b7f      	cmp	r3, #127	; 0x7f
 8006408:	d8f0      	bhi.n	80063ec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	617a      	str	r2, [r7, #20]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800641a:	2202      	movs	r2, #2
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	68b8      	ldr	r0, [r7, #8]
 8006420:	f7ff fa80 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f383 8811 	msr	BASEPRI, r3
}
 800642a:	bf00      	nop
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20013444 	.word	0x20013444
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006442:	f3ef 8311 	mrs	r3, BASEPRI
 8006446:	f04f 0120 	mov.w	r1, #32
 800644a:	f381 8811 	msr	BASEPRI, r1
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	4807      	ldr	r0, [pc, #28]	; (8006470 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006452:	f7ff f976 	bl	8005742 <_PreparePacket>
 8006456:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006458:	2203      	movs	r2, #3
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6838      	ldr	r0, [r7, #0]
 800645e:	f7ff fa61 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f383 8811 	msr	BASEPRI, r3
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20013444 	.word	0x20013444

08006474 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	f04f 0120 	mov.w	r1, #32
 8006482:	f381 8811 	msr	BASEPRI, r1
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	4807      	ldr	r0, [pc, #28]	; (80064a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800648a:	f7ff f95a 	bl	8005742 <_PreparePacket>
 800648e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006490:	2212      	movs	r2, #18
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6838      	ldr	r0, [r7, #0]
 8006496:	f7ff fa45 	bl	8005924 <_SendPacket>
  RECORD_END();
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f383 8811 	msr	BASEPRI, r3
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20013444 	.word	0x20013444

080064ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064b2:	f3ef 8311 	mrs	r3, BASEPRI
 80064b6:	f04f 0120 	mov.w	r1, #32
 80064ba:	f381 8811 	msr	BASEPRI, r1
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	4807      	ldr	r0, [pc, #28]	; (80064e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80064c2:	f7ff f93e 	bl	8005742 <_PreparePacket>
 80064c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80064c8:	2211      	movs	r2, #17
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6838      	ldr	r0, [r7, #0]
 80064ce:	f7ff fa29 	bl	8005924 <_SendPacket>
  RECORD_END();
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f383 8811 	msr	BASEPRI, r3
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20013444 	.word	0x20013444

080064e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064ec:	f3ef 8311 	mrs	r3, BASEPRI
 80064f0:	f04f 0120 	mov.w	r1, #32
 80064f4:	f381 8811 	msr	BASEPRI, r1
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	4819      	ldr	r0, [pc, #100]	; (8006560 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80064fc:	f7ff f921 	bl	8005742 <_PreparePacket>
 8006500:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006506:	4b17      	ldr	r3, [pc, #92]	; (8006564 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e00b      	b.n	8006532 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	1c59      	adds	r1, r3, #1
 8006522:	61f9      	str	r1, [r7, #28]
 8006524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	09db      	lsrs	r3, r3, #7
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	2b7f      	cmp	r3, #127	; 0x7f
 8006536:	d8f0      	bhi.n	800651a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	61fa      	str	r2, [r7, #28]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006548:	2208      	movs	r2, #8
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6938      	ldr	r0, [r7, #16]
 800654e:	f7ff f9e9 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f383 8811 	msr	BASEPRI, r3
}
 8006558:	bf00      	nop
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20013444 	.word	0x20013444
 8006564:	20013414 	.word	0x20013414

08006568 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006570:	f3ef 8311 	mrs	r3, BASEPRI
 8006574:	f04f 0120 	mov.w	r1, #32
 8006578:	f381 8811 	msr	BASEPRI, r1
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	4819      	ldr	r0, [pc, #100]	; (80065e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006580:	f7ff f8df 	bl	8005742 <_PreparePacket>
 8006584:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800658a:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	e00b      	b.n	80065b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	61f9      	str	r1, [r7, #28]
 80065a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ba:	d8f0      	bhi.n	800659e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	61fa      	str	r2, [r7, #28]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80065cc:	2204      	movs	r2, #4
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	6938      	ldr	r0, [r7, #16]
 80065d2:	f7ff f9a7 	bl	8005924 <_SendPacket>
  RECORD_END();
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f383 8811 	msr	BASEPRI, r3
}
 80065dc:	bf00      	nop
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20013444 	.word	0x20013444
 80065e8:	20013414 	.word	0x20013414

080065ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065f4:	f3ef 8311 	mrs	r3, BASEPRI
 80065f8:	f04f 0120 	mov.w	r1, #32
 80065fc:	f381 8811 	msr	BASEPRI, r1
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	4819      	ldr	r0, [pc, #100]	; (8006668 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006604:	f7ff f89d 	bl	8005742 <_PreparePacket>
 8006608:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800660e:	4b17      	ldr	r3, [pc, #92]	; (800666c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	e00b      	b.n	800663a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	b2da      	uxtb	r2, r3
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	1c59      	adds	r1, r3, #1
 800662a:	61f9      	str	r1, [r7, #28]
 800662c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	09db      	lsrs	r3, r3, #7
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b7f      	cmp	r3, #127	; 0x7f
 800663e:	d8f0      	bhi.n	8006622 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	61fa      	str	r2, [r7, #28]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006650:	2206      	movs	r2, #6
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	6938      	ldr	r0, [r7, #16]
 8006656:	f7ff f965 	bl	8005924 <_SendPacket>
  RECORD_END();
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f383 8811 	msr	BASEPRI, r3
}
 8006660:	bf00      	nop
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20013444 	.word	0x20013444
 800666c:	20013414 	.word	0x20013414

08006670 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006678:	4b04      	ldr	r3, [pc, #16]	; (800668c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	1ad3      	subs	r3, r2, r3
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20013414 	.word	0x20013414

08006690 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800669a:	4b3b      	ldr	r3, [pc, #236]	; (8006788 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d06d      	beq.n	800677e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80066a2:	4b39      	ldr	r3, [pc, #228]	; (8006788 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80066a8:	2300      	movs	r3, #0
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ac:	e008      	b.n	80066c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	3301      	adds	r3, #1
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3f2      	bcc.n	80066ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80066c8:	e000      	b.n	80066cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80066ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d055      	beq.n	800677e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066d2:	f3ef 8311 	mrs	r3, BASEPRI
 80066d6:	f04f 0120 	mov.w	r1, #32
 80066da:	f381 8811 	msr	BASEPRI, r1
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	482a      	ldr	r0, [pc, #168]	; (800678c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80066e2:	f7ff f82e 	bl	8005742 <_PreparePacket>
 80066e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_SendModule+0x7e>
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	6279      	str	r1, [r7, #36]	; 0x24
 8006700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	623b      	str	r3, [r7, #32]
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	2b7f      	cmp	r3, #127	; 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	627a      	str	r2, [r7, #36]	; 0x24
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	61f9      	str	r1, [r7, #28]
 800673a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b7f      	cmp	r3, #127	; 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_SendModule+0xa0>
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	61fa      	str	r2, [r7, #28]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	4619      	mov	r1, r3
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7fe ff9e 	bl	80056a8 <_EncodeStr>
 800676c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800676e:	2216      	movs	r2, #22
 8006770:	68f9      	ldr	r1, [r7, #12]
 8006772:	6938      	ldr	r0, [r7, #16]
 8006774:	f7ff f8d6 	bl	8005924 <_SendPacket>
      RECORD_END();
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800677e:	bf00      	nop
 8006780:	3730      	adds	r7, #48	; 0x30
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2001343c 	.word	0x2001343c
 800678c:	20013444 	.word	0x20013444

08006790 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00f      	beq.n	80067be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f2      	bne.n	80067a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	2001343c 	.word	0x2001343c

080067cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80067d2:	f3ef 8311 	mrs	r3, BASEPRI
 80067d6:	f04f 0120 	mov.w	r1, #32
 80067da:	f381 8811 	msr	BASEPRI, r1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4817      	ldr	r0, [pc, #92]	; (8006840 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80067e2:	f7fe ffae 	bl	8005742 <_PreparePacket>
 80067e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	4b14      	ldr	r3, [pc, #80]	; (8006844 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6179      	str	r1, [r7, #20]
 8006802:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b7f      	cmp	r3, #127	; 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	617a      	str	r2, [r7, #20]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006826:	221b      	movs	r2, #27
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	f7ff f87a 	bl	8005924 <_SendPacket>
  RECORD_END();
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20013444 	.word	0x20013444
 8006844:	20013440 	.word	0x20013440

08006848 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006850:	f3ef 8311 	mrs	r3, BASEPRI
 8006854:	f04f 0120 	mov.w	r1, #32
 8006858:	f381 8811 	msr	BASEPRI, r1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	4827      	ldr	r0, [pc, #156]	; (80068fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006860:	f7fe ff6f 	bl	8005742 <_PreparePacket>
 8006864:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006866:	2280      	movs	r2, #128	; 0x80
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	6938      	ldr	r0, [r7, #16]
 800686c:	f7fe ff1c 	bl	80056a8 <_EncodeStr>
 8006870:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	2301      	movs	r3, #1
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	e00b      	b.n	8006894 <SEGGER_SYSVIEW_Warn+0x4c>
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	b2da      	uxtb	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	6279      	str	r1, [r7, #36]	; 0x24
 8006886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	09db      	lsrs	r3, r3, #7
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2b7f      	cmp	r3, #127	; 0x7f
 8006898:	d8f0      	bhi.n	800687c <SEGGER_SYSVIEW_Warn+0x34>
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	627a      	str	r2, [r7, #36]	; 0x24
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	e00b      	b.n	80068cc <SEGGER_SYSVIEW_Warn+0x84>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	61f9      	str	r1, [r7, #28]
 80068be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b7f      	cmp	r3, #127	; 0x7f
 80068d0:	d8f0      	bhi.n	80068b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	61fa      	str	r2, [r7, #28]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068e2:	221a      	movs	r2, #26
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	6938      	ldr	r0, [r7, #16]
 80068e8:	f7ff f81c 	bl	8005924 <_SendPacket>
  RECORD_END();
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f383 8811 	msr	BASEPRI, r3
}
 80068f2:	bf00      	nop
 80068f4:	3728      	adds	r7, #40	; 0x28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20013444 	.word	0x20013444

08006900 <memcmp>:
 8006900:	b510      	push	{r4, lr}
 8006902:	3901      	subs	r1, #1
 8006904:	4402      	add	r2, r0
 8006906:	4290      	cmp	r0, r2
 8006908:	d101      	bne.n	800690e <memcmp+0xe>
 800690a:	2000      	movs	r0, #0
 800690c:	e005      	b.n	800691a <memcmp+0x1a>
 800690e:	7803      	ldrb	r3, [r0, #0]
 8006910:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006914:	42a3      	cmp	r3, r4
 8006916:	d001      	beq.n	800691c <memcmp+0x1c>
 8006918:	1b18      	subs	r0, r3, r4
 800691a:	bd10      	pop	{r4, pc}
 800691c:	3001      	adds	r0, #1
 800691e:	e7f2      	b.n	8006906 <memcmp+0x6>

08006920 <memset>:
 8006920:	4402      	add	r2, r0
 8006922:	4603      	mov	r3, r0
 8006924:	4293      	cmp	r3, r2
 8006926:	d100      	bne.n	800692a <memset+0xa>
 8006928:	4770      	bx	lr
 800692a:	f803 1b01 	strb.w	r1, [r3], #1
 800692e:	e7f9      	b.n	8006924 <memset+0x4>

08006930 <__libc_init_array>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4d0d      	ldr	r5, [pc, #52]	; (8006968 <__libc_init_array+0x38>)
 8006934:	4c0d      	ldr	r4, [pc, #52]	; (800696c <__libc_init_array+0x3c>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	2600      	movs	r6, #0
 800693c:	42a6      	cmp	r6, r4
 800693e:	d109      	bne.n	8006954 <__libc_init_array+0x24>
 8006940:	4d0b      	ldr	r5, [pc, #44]	; (8006970 <__libc_init_array+0x40>)
 8006942:	4c0c      	ldr	r4, [pc, #48]	; (8006974 <__libc_init_array+0x44>)
 8006944:	f000 f826 	bl	8006994 <_init>
 8006948:	1b64      	subs	r4, r4, r5
 800694a:	10a4      	asrs	r4, r4, #2
 800694c:	2600      	movs	r6, #0
 800694e:	42a6      	cmp	r6, r4
 8006950:	d105      	bne.n	800695e <__libc_init_array+0x2e>
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	f855 3b04 	ldr.w	r3, [r5], #4
 8006958:	4798      	blx	r3
 800695a:	3601      	adds	r6, #1
 800695c:	e7ee      	b.n	800693c <__libc_init_array+0xc>
 800695e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006962:	4798      	blx	r3
 8006964:	3601      	adds	r6, #1
 8006966:	e7f2      	b.n	800694e <__libc_init_array+0x1e>
 8006968:	08006a98 	.word	0x08006a98
 800696c:	08006a98 	.word	0x08006a98
 8006970:	08006a98 	.word	0x08006a98
 8006974:	08006a9c 	.word	0x08006a9c

08006978 <memcpy>:
 8006978:	440a      	add	r2, r1
 800697a:	4291      	cmp	r1, r2
 800697c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006980:	d100      	bne.n	8006984 <memcpy+0xc>
 8006982:	4770      	bx	lr
 8006984:	b510      	push	{r4, lr}
 8006986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800698e:	4291      	cmp	r1, r2
 8006990:	d1f9      	bne.n	8006986 <memcpy+0xe>
 8006992:	bd10      	pop	{r4, pc}

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
