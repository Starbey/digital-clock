
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080098d4  080098d4  000198d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab0  08009ab0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014744  20000070  08009b28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200147b4  08009b28  000247b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bb2  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e47  00000000  00000000  00038c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  0003e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b338  00000000  00000000  0003f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b907  00000000  00000000  0005a63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1abe  00000000  00000000  00075f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000632c  00000000  00000000  00117a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0011dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080098bc 	.word	0x080098bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080098bc 	.word	0x080098bc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013098 	.word	0x20013098

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000ac 	.word	0x200000ac

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 fbb0 	bl	8001ddc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 fba5 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 fb9a 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 fb8f 	bl	8001ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 fb86 	bl	8001ddc <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 fb80 	bl	8001ddc <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 fb77 	bl	8001ddc <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f001 f845 	bl	8001898 <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f001 f83f 	bl	8001898 <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f001 f839 	bl	8001898 <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f001 f833 	bl	8001898 <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f001 f82d 	bl	8001898 <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f827 	bl	8001898 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f001 f821 	bl	8001898 <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 f81b 	bl	8001898 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f001 f818 	bl	8001898 <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f001 f812 	bl	8001898 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 ffc5 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f8e3 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa21 	bl	8000cd4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f94b 	bl	8000b2c <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 f9cd 	bl	8000c34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 800089a:	4858      	ldr	r0, [pc, #352]	; (80009fc <main+0x17c>)
 800089c:	f002 fe66 	bl	800356c <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008a0:	f006 fb3e 	bl	8006f20 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008a4:	f007 fdee 	bl	8008484 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	200a      	movs	r0, #10
 80008ae:	f003 fbf1 	bl	8004094 <xQueueGenericCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a52      	ldr	r2, [pc, #328]	; (8000a00 <main+0x180>)
 80008b6:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <main+0x180>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>

  /*create timers */
  printTimerHandle = xTimerCreate("Print_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, printTimerCallback);
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <main+0x184>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008e2:	4849      	ldr	r0, [pc, #292]	; (8000a08 <main+0x188>)
 80008e4:	f005 fb7a 	bl	8005fdc <xTimerCreate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a48      	ldr	r2, [pc, #288]	; (8000a0c <main+0x18c>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <main+0x190>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	22fa      	movs	r2, #250	; 0xfa
 80008fa:	4946      	ldr	r1, [pc, #280]	; (8000a14 <main+0x194>)
 80008fc:	4846      	ldr	r0, [pc, #280]	; (8000a18 <main+0x198>)
 80008fe:	f004 f85d 	bl	80049bc <xTaskCreate>
 8000902:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00a      	beq.n	8000920 <main+0xa0>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	617b      	str	r3, [r7, #20]
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <main+0x9e>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000920:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <main+0x19c>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2303      	movs	r3, #3
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	22fa      	movs	r2, #250	; 0xfa
 800092c:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x1a0>)
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x1a4>)
 8000930:	f004 f844 	bl	80049bc <xTaskCreate>
 8000934:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00a      	beq.n	8000952 <main+0xd2>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	613b      	str	r3, [r7, #16]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0xd0>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <main+0x1a8>)
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	2302      	movs	r3, #2
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	22fa      	movs	r2, #250	; 0xfa
 800095e:	4933      	ldr	r1, [pc, #204]	; (8000a2c <main+0x1ac>)
 8000960:	4833      	ldr	r0, [pc, #204]	; (8000a30 <main+0x1b0>)
 8000962:	f004 f82b 	bl	80049bc <xTaskCreate>
 8000966:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d00a      	beq.n	8000984 <main+0x104>
        __asm volatile
 800096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	60fb      	str	r3, [r7, #12]
    }
 8000980:	bf00      	nop
 8000982:	e7fe      	b.n	8000982 <main+0x102>

  status = xTaskCreate(rtcSetTaskHandler, "RTC_Set_Task", 250, NULL, 2, &rtcSetTaskHandle);
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <main+0x1b4>)
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	2302      	movs	r3, #2
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	22fa      	movs	r2, #250	; 0xfa
 8000990:	4929      	ldr	r1, [pc, #164]	; (8000a38 <main+0x1b8>)
 8000992:	482a      	ldr	r0, [pc, #168]	; (8000a3c <main+0x1bc>)
 8000994:	f004 f812 	bl	80049bc <xTaskCreate>
 8000998:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d00a      	beq.n	80009b6 <main+0x136>
        __asm volatile
 80009a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a4:	f383 8811 	msr	BASEPRI, r3
 80009a8:	f3bf 8f6f 	isb	sy
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	60bb      	str	r3, [r7, #8]
    }
 80009b2:	bf00      	nop
 80009b4:	e7fe      	b.n	80009b4 <main+0x134>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <main+0x1c0>)
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	2302      	movs	r3, #2
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	22fa      	movs	r2, #250	; 0xfa
 80009c2:	4920      	ldr	r1, [pc, #128]	; (8000a44 <main+0x1c4>)
 80009c4:	4820      	ldr	r0, [pc, #128]	; (8000a48 <main+0x1c8>)
 80009c6:	f003 fff9 	bl	80049bc <xTaskCreate>
 80009ca:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d00a      	beq.n	80009e8 <main+0x168>
        __asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	607b      	str	r3, [r7, #4]
    }
 80009e4:	bf00      	nop
 80009e6:	e7fe      	b.n	80009e6 <main+0x166>

  HAL_RTC_SetAlarm(&hrtc, &rtcAlarm, RTC_FORMAT_BIN);
 80009e8:	2200      	movs	r2, #0
 80009ea:	4918      	ldr	r1, [pc, #96]	; (8000a4c <main+0x1cc>)
 80009ec:	4818      	ldr	r0, [pc, #96]	; (8000a50 <main+0x1d0>)
 80009ee:	f002 f9f4 	bl	8002dda <HAL_RTC_SetAlarm>

  lcdInit();
 80009f2:	f7ff ff07 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 80009f6:	f004 fa17 	bl	8004e28 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <main+0x17a>
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	20000108 	.word	0x20000108
 8000a04:	08001219 	.word	0x08001219
 8000a08:	080098d4 	.word	0x080098d4
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	200000f8 	.word	0x200000f8
 8000a14:	080098e0 	.word	0x080098e0
 8000a18:	080011e1 	.word	0x080011e1
 8000a1c:	200000f4 	.word	0x200000f4
 8000a20:	080098f4 	.word	0x080098f4
 8000a24:	08001189 	.word	0x08001189
 8000a28:	200000fc 	.word	0x200000fc
 8000a2c:	08009900 	.word	0x08009900
 8000a30:	08001589 	.word	0x08001589
 8000a34:	20000100 	.word	0x20000100
 8000a38:	08009910 	.word	0x08009910
 8000a3c:	0800168d 	.word	0x0800168d
 8000a40:	20000104 	.word	0x20000104
 8000a44:	08009920 	.word	0x08009920
 8000a48:	0800174d 	.word	0x0800174d
 8000a4c:	20000144 	.word	0x20000144
 8000a50:	2000008c 	.word	0x2000008c

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 faa6 	bl	8008fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a28      	ldr	r2, [pc, #160]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SystemClock_Config+0xd0>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa0:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <SystemClock_Config+0xd4>)
 8000aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <SystemClock_Config+0xd4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000acc:	2304      	movs	r3, #4
 8000ace:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ad0:	2354      	movs	r3, #84	; 0x54
 8000ad2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 f995 	bl	8001e10 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aec:	f000 f9d8 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	230f      	movs	r3, #15
 8000af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fbf7 	bl	8002300 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b18:	f000 f9c2 	bl	8000ea0 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3750      	adds	r7, #80	; 0x50
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b090      	sub	sp, #64	; 0x40
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2228      	movs	r2, #40	; 0x28
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 fa31 	bl	8008fb4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b54:	4a36      	ldr	r2, [pc, #216]	; (8000c30 <MX_RTC_Init+0x104>)
 8000b56:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b60:	227f      	movs	r2, #127	; 0x7f
 8000b62:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b64:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7c:	482b      	ldr	r0, [pc, #172]	; (8000c2c <MX_RTC_Init+0x100>)
 8000b7e:	f001 feeb 	bl	8002958 <HAL_RTC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b88:	f000 f98a 	bl	8000ea0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	2201      	movs	r2, #1
 8000bac:	4619      	mov	r1, r3
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <MX_RTC_Init+0x100>)
 8000bb0:	f001 ff48 	bl	8002a44 <HAL_RTC_SetTime>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000bba:	f000 f971 	bl	8000ea0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <MX_RTC_Init+0x100>)
 8000be0:	f002 f828 	bl	8002c34 <HAL_RTC_SetDate>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000bea:	f000 f959 	bl	8000ea0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x15;
 8000bf6:	2315      	movs	r3, #21
 8000bf8:	70bb      	strb	r3, [r7, #2]
  //sAlarm.AlarmTime.SubSeconds = 0x0;
  //sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  //sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000bfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000bfe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000c00:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000c04:	61bb      	str	r3, [r7, #24]
  //sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  //sAlarm.AlarmDateWeekDay = 0x1;
  sAlarm.Alarm = RTC_ALARM_A;
 8000c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_RTC_Init+0x100>)
 8000c14:	f002 fa0c 	bl	8003030 <HAL_RTC_SetAlarm_IT>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8000c1e:	f000 f93f 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3740      	adds	r7, #64	; 0x40
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	40002800 	.word	0x40002800

08000c34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <MX_TIM1_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c58:	2254      	movs	r2, #84	; 0x54
 8000c5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c7c:	4813      	ldr	r0, [pc, #76]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c7e:	f002 fc26 	bl	80034ce <HAL_TIM_Base_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c88:	f000 f90a 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000c9a:	f002 fe2b 	bl	80038f4 <HAL_TIM_ConfigClockSource>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ca4:	f000 f8fc 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM1_Init+0x98>)
 8000cb6:	f003 f827 	bl	8003d08 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cc0:	f000 f8ee 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	40010000 	.word	0x40010000

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <MX_GPIO_Init+0x178>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f240 6103 	movw	r1, #1539	; 0x603
 8000d60:	483b      	ldr	r0, [pc, #236]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000d62:	f001 f83b 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|E_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f248 0110 	movw	r1, #32784	; 0x8010
 8000d6c:	4839      	ldr	r0, [pc, #228]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000d6e:	f001 f835 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2181      	movs	r1, #129	; 0x81
 8000d76:	4838      	ldr	r0, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000d78:	f001 f830 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	482f      	ldr	r0, [pc, #188]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000d94:	f000 fe86 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin BUZZER_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10;
 8000d98:	f240 6303 	movw	r3, #1539	; 0x603
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4827      	ldr	r0, [pc, #156]	; (8000e50 <MX_GPIO_Init+0x17c>)
 8000db2:	f000 fe77 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db6:	230c      	movs	r3, #12
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000dd2:	f000 fe67 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|E_Pin;
 8000dd6:	f248 0310 	movw	r3, #32784	; 0x8010
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000df0:	f000 fe58 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|DEC_Pin;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_GPIO_Init+0x180>)
 8000e08:	f000 fe4c 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000e0c:	2381      	movs	r3, #129	; 0x81
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000e24:	f000 fe3e 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SELECT_Pin;
 8000e28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_GPIO_Init+0x184>)
 8000e3e:	f000 fe31 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400

08000e5c <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8000e6c:	f000 ffb6 	bl	8001ddc <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40020800 	.word	0x40020800

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 fce3 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000c00 	.word	0x40000c00

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_MspInit+0x50>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_MspInit+0x50>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_MspInit+0x50>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_MspInit+0x50>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <HAL_MspInit+0x50>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_MspInit+0x50>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 fda5 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 8000ef0:	f005 fc9a 	bl	8006828 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40023800 	.word	0x40023800

08000f00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_RTC_MspInit+0x60>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d119      	bne.n	8000f56 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f22:	2302      	movs	r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f2a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fc23 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f3c:	f7ff ffb0 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_RTC_MspInit+0x64>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2029      	movs	r0, #41	; 0x29
 8000f4c:	f000 fd80 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000f50:	2029      	movs	r0, #41	; 0x29
 8000f52:	f000 fd99 	bl	8001a88 <HAL_NVIC_EnableIRQ>
    /* enable RTC alarm IRQ in NVIC */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40002800 	.word	0x40002800
 8000f64:	42470e3c 	.word	0x42470e3c

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_TIM_Base_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10d      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_TIM_Base_MspInit+0x40>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	; 0x38
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_InitTick+0xe4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <HAL_InitTick+0xe4>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_InitTick+0xe4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd8:	f107 0210 	add.w	r2, r7, #16
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fb98 	bl	8002718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ff2:	f001 fb7d 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8000ff6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ff8:	e004      	b.n	8001004 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ffa:	f001 fb79 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8000ffe:	4603      	mov	r3, r0
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_InitTick+0xe8>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3b01      	subs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_InitTick+0xec>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <HAL_InitTick+0xf0>)
 8001016:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_InitTick+0xec>)
 800101a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_InitTick+0xec>)
 8001022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001024:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_InitTick+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_InitTick+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_InitTick+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <HAL_InitTick+0xec>)
 800103a:	f002 fa48 	bl	80034ce <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001044:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001048:	2b00      	cmp	r3, #0
 800104a:	d11b      	bne.n	8001084 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <HAL_InitTick+0xec>)
 800104e:	f002 fae7 	bl	8003620 <HAL_TIM_Base_Start_IT>
 8001052:	4603      	mov	r3, r0
 8001054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001060:	2032      	movs	r0, #50	; 0x32
 8001062:	f000 fd11 	bl	8001a88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d808      	bhi.n	800107e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f000 fced 	bl	8001a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_InitTick+0xf4>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e002      	b.n	8001084 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001088:	4618      	mov	r0, r3
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	431bde83 	.word	0x431bde83
 8001098:	2000016c 	.word	0x2000016c
 800109c:	40000c00 	.word	0x40000c00
 80010a0:	20000010 	.word	0x20000010

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <RTC_Alarm_IRQHandler+0x10>)
 80010d6:	f002 f8ed 	bl	80032b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000008c 	.word	0x2000008c

080010e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM5_IRQHandler+0x10>)
 80010ea:	f002 fafb 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000016c 	.word	0x2000016c

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f007 ff4c 	bl	8008fc4 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20018000 	.word	0x20018000
 8001158:	00000400 	.word	0x00000400
 800115c:	200001b4 	.word	0x200001b4
 8001160:	200147b8 	.word	0x200147b8

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <printTaskHandler>:

static void handleSetTime(RTC_TimeTypeDef *setTime);
static void handleSetDate(RTC_DateTypeDef *setDate);
static void handleSelect(void);

void printTaskHandler(void *parameters){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint32_t *str;

	while(1){
		/* print top row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <printTaskHandler+0x54>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f107 010c 	add.w	r1, r7, #12
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	4618      	mov	r0, r3
 800119e:	f003 f99b 	bl	80044d8 <xQueueReceive>
		lcdClear();
 80011a2:	f7ff fb04 	bl	80007ae <lcdClear>
		lcdMoveCursor(0, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fadd 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fb07 	bl	80007c4 <lcdSendString>

		/* print bottom row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <printTaskHandler+0x54>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	f04f 32ff 	mov.w	r2, #4294967295
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 f988 	bl	80044d8 <xQueueReceive>
		lcdMoveCursor(1, 0);
 80011c8:	2100      	movs	r1, #0
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff facc 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff faf6 	bl	80007c4 <lcdSendString>
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 80011d8:	e7da      	b.n	8001190 <printTaskHandler+0x8>
 80011da:	bf00      	nop
 80011dc:	20000108 	.word	0x20000108

080011e0 <startTimerTaskHandler>:
	}
}

void startTimerTaskHandler(void *parameters){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	6078      	str	r0, [r7, #4]
	while(1){
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <startTimerTaskHandler+0x30>)
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	f003 ff8c 	bl	8005108 <xTaskGetTickCount>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	2101      	movs	r1, #1
 80011fc:	4620      	mov	r0, r4
 80011fe:	f004 ff47 	bl	8006090 <xTimerGenericCommand>
		vTaskSuspend(startTimerTaskHandle);
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <startTimerTaskHandler+0x34>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fd60 	bl	8004ccc <vTaskSuspend>
		xTimerStart(printTimerHandle, portMAX_DELAY);
 800120c:	e7ec      	b.n	80011e8 <startTimerTaskHandler+0x8>
 800120e:	bf00      	nop
 8001210:	2000010c 	.word	0x2000010c
 8001214:	200000f8 	.word	0x200000f8

08001218 <printTimerCallback>:
	}
}

void printTimerCallback(TimerHandle_t xTimer){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	if (currMode == mDisplayRtc){
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <printTimerCallback+0x64>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <printTimerCallback+0x24>
		xTaskNotify(rtcUpdateTaskHandle, 0, eNoAction);
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <printTimerCallback+0x68>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	f004 fceb 	bl	8005c10 <xTaskGenericNotify>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
	}
	else if(currMode == mSetAlarm){
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
	}
}
 800123a:	e01a      	b.n	8001272 <printTimerCallback+0x5a>
	else if (currMode == mSetRtc){
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <printTimerCallback+0x64>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d109      	bne.n	8001258 <printTimerCallback+0x40>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <printTimerCallback+0x6c>)
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	f004 fcdd 	bl	8005c10 <xTaskGenericNotify>
}
 8001256:	e00c      	b.n	8001272 <printTimerCallback+0x5a>
	else if(currMode == mSetAlarm){
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <printTimerCallback+0x64>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d108      	bne.n	8001272 <printTimerCallback+0x5a>
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <printTimerCallback+0x70>)
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	f004 fccf 	bl	8005c10 <xTaskGenericNotify>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000110 	.word	0x20000110
 8001280:	200000fc 	.word	0x200000fc
 8001284:	20000100 	.word	0x20000100
 8001288:	20000104 	.word	0x20000104

0800128c <vApplicationIdleHook>:

void vApplicationIdleHook(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	481d      	ldr	r0, [pc, #116]	; (800130c <vApplicationIdleHook+0x80>)
 8001296:	f000 fd89 	bl	8001dac <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d122      	bne.n	80012e6 <vApplicationIdleHook+0x5a>
		if (currMode == mDisplayRtc){
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <vApplicationIdleHook+0x84>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <vApplicationIdleHook+0x2c>
			currMode = mSetRtc;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <vApplicationIdleHook+0x84>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 80012ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012b2:	f000 faf1 	bl	8001898 <HAL_Delay>
 80012b6:	e016      	b.n	80012e6 <vApplicationIdleHook+0x5a>
		}
		else if (currMode == mSetRtc){
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <vApplicationIdleHook+0x84>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d107      	bne.n	80012d0 <vApplicationIdleHook+0x44>
			currMode = mSetAlarm;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <vApplicationIdleHook+0x84>)
 80012c2:	2202      	movs	r2, #2
 80012c4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 80012c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012ca:	f000 fae5 	bl	8001898 <HAL_Delay>
 80012ce:	e00a      	b.n	80012e6 <vApplicationIdleHook+0x5a>
		}
		else if(currMode == mSetAlarm){
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <vApplicationIdleHook+0x84>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d106      	bne.n	80012e6 <vApplicationIdleHook+0x5a>
			currMode = mDisplayRtc;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <vApplicationIdleHook+0x84>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 80012de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012e2:	f000 fad9 	bl	8001898 <HAL_Delay>
		}
	}

	if (currMode == mSetRtc) {
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <vApplicationIdleHook+0x84>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d10c      	bne.n	8001308 <vApplicationIdleHook+0x7c>
		if(currSet <= 2){
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <vApplicationIdleHook+0x88>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d803      	bhi.n	80012fe <vApplicationIdleHook+0x72>
			handleSetTime(&setTime);
 80012f6:	4808      	ldr	r0, [pc, #32]	; (8001318 <vApplicationIdleHook+0x8c>)
 80012f8:	f000 f812 	bl	8001320 <handleSetTime>
 80012fc:	e002      	b.n	8001304 <vApplicationIdleHook+0x78>
		}
		else {
			handleSetDate(&setDate);
 80012fe:	4807      	ldr	r0, [pc, #28]	; (800131c <vApplicationIdleHook+0x90>)
 8001300:	f000 f88a 	bl	8001418 <handleSetDate>
		}
		handleSelect();
 8001304:	f000 f900 	bl	8001508 <handleSelect>
	}
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020400 	.word	0x40020400
 8001310:	20000110 	.word	0x20000110
 8001314:	20000111 	.word	0x20000111
 8001318:	20000130 	.word	0x20000130
 800131c:	2000012c 	.word	0x2000012c

08001320 <handleSetTime>:

static void handleSetTime(RTC_TimeTypeDef *setTime){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 8001328:	2120      	movs	r1, #32
 800132a:	4839      	ldr	r0, [pc, #228]	; (8001410 <handleSetTime+0xf0>)
 800132c:	f000 fd3e 	bl	8001dac <HAL_GPIO_ReadPin>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d130      	bne.n	8001398 <handleSetTime+0x78>
		if(currSet == sHour){
 8001336:	4b37      	ldr	r3, [pc, #220]	; (8001414 <handleSetTime+0xf4>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <handleSetTime+0x34>
			if(setTime->Hours < 23) setTime->Hours++;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b16      	cmp	r3, #22
 8001344:	d823      	bhi.n	800138e <handleSetTime+0x6e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e01c      	b.n	800138e <handleSetTime+0x6e>
		}
		else if(currSet == sMin){
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <handleSetTime+0xf4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10a      	bne.n	8001372 <handleSetTime+0x52>
			if(setTime->Minutes < 59) setTime->Minutes++;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	2b3a      	cmp	r3, #58	; 0x3a
 8001362:	d814      	bhi.n	800138e <handleSetTime+0x6e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	705a      	strb	r2, [r3, #1]
 8001370:	e00d      	b.n	800138e <handleSetTime+0x6e>
		}
		else if(currSet ==sSec){
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <handleSetTime+0xf4>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d109      	bne.n	800138e <handleSetTime+0x6e>
			if(setTime->Seconds < 59) setTime->Seconds++;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	2b3a      	cmp	r3, #58	; 0x3a
 8001380:	d805      	bhi.n	800138e <handleSetTime+0x6e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	3301      	adds	r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	709a      	strb	r2, [r3, #2]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 800138e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001392:	f000 fa81 	bl	8001898 <HAL_Delay>
		else if(currSet == sSec){
			if(setTime->Seconds > 0) setTime->Seconds--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 8001396:	e036      	b.n	8001406 <handleSetTime+0xe6>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	481d      	ldr	r0, [pc, #116]	; (8001410 <handleSetTime+0xf0>)
 800139c:	f000 fd06 	bl	8001dac <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d12f      	bne.n	8001406 <handleSetTime+0xe6>
		if(currSet == sHour){
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <handleSetTime+0xf4>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10a      	bne.n	80013c4 <handleSetTime+0xa4>
			if(setTime->Hours > 0) setTime->Hours--;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d023      	beq.n	80013fe <handleSetTime+0xde>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e01c      	b.n	80013fe <handleSetTime+0xde>
		else if(currSet == sMin){
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <handleSetTime+0xf4>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10a      	bne.n	80013e2 <handleSetTime+0xc2>
			if(setTime->Minutes > 0) setTime->Minutes--;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d014      	beq.n	80013fe <handleSetTime+0xde>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	705a      	strb	r2, [r3, #1]
 80013e0:	e00d      	b.n	80013fe <handleSetTime+0xde>
		else if(currSet == sSec){
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <handleSetTime+0xf4>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d109      	bne.n	80013fe <handleSetTime+0xde>
			if(setTime->Seconds > 0) setTime->Seconds--;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	789b      	ldrb	r3, [r3, #2]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <handleSetTime+0xde>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	709a      	strb	r2, [r3, #2]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80013fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001402:	f000 fa49 	bl	8001898 <HAL_Delay>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40020000 	.word	0x40020000
 8001414:	20000111 	.word	0x20000111

08001418 <handleSetDate>:

static void handleSetDate(RTC_DateTypeDef *setDate){
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 8001420:	2120      	movs	r1, #32
 8001422:	4837      	ldr	r0, [pc, #220]	; (8001500 <handleSetDate+0xe8>)
 8001424:	f000 fcc2 	bl	8001dac <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12c      	bne.n	8001488 <handleSetDate+0x70>
		if(currSet == sMonth){
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <handleSetDate+0xec>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d10a      	bne.n	800144c <handleSetDate+0x34>
			if(setDate->Month < 11) setDate->Month++;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d81f      	bhi.n	800147e <handleSetDate+0x66>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	705a      	strb	r2, [r3, #1]
 800144a:	e018      	b.n	800147e <handleSetDate+0x66>
		}
		else if(currSet == sDay) {
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <handleSetDate+0xec>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d10a      	bne.n	800146a <handleSetDate+0x52>
			if(setDate->Date < 30) setDate->Date++;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	2b1d      	cmp	r3, #29
 800145a:	d810      	bhi.n	800147e <handleSetDate+0x66>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	3301      	adds	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	709a      	strb	r2, [r3, #2]
 8001468:	e009      	b.n	800147e <handleSetDate+0x66>
		}
		else if(currSet == sYear) {
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <handleSetDate+0xec>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d105      	bne.n	800147e <handleSetDate+0x66>
			if(setDate->Year < 998) setDate->Year++;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	78db      	ldrb	r3, [r3, #3]
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	70da      	strb	r2, [r3, #3]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 800147e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001482:	f000 fa09 	bl	8001898 <HAL_Delay>
		else if(currSet == sYear) {
			if(setDate->Year > 0) setDate->Year--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 8001486:	e036      	b.n	80014f6 <handleSetDate+0xde>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <handleSetDate+0xe8>)
 800148c:	f000 fc8e 	bl	8001dac <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b01      	cmp	r3, #1
 8001494:	d12f      	bne.n	80014f6 <handleSetDate+0xde>
		if(currSet == sMonth){
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <handleSetDate+0xec>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b04      	cmp	r3, #4
 800149c:	d10a      	bne.n	80014b4 <handleSetDate+0x9c>
			if(setDate->Month > 1) setDate->Month--;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d923      	bls.n	80014ee <handleSetDate+0xd6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e01c      	b.n	80014ee <handleSetDate+0xd6>
		else if(currSet == sDay) {
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <handleSetDate+0xec>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d10a      	bne.n	80014d2 <handleSetDate+0xba>
			if(setDate->Date > 1) setDate->Date--;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d914      	bls.n	80014ee <handleSetDate+0xd6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	709a      	strb	r2, [r3, #2]
 80014d0:	e00d      	b.n	80014ee <handleSetDate+0xd6>
		else if(currSet == sYear) {
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <handleSetDate+0xec>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d109      	bne.n	80014ee <handleSetDate+0xd6>
			if(setDate->Year > 0) setDate->Year--;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	78db      	ldrb	r3, [r3, #3]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <handleSetDate+0xd6>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	70da      	strb	r2, [r3, #3]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80014ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014f2:	f000 f9d1 	bl	8001898 <HAL_Delay>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020000 	.word	0x40020000
 8001504:	20000111 	.word	0x20000111

08001508 <handleSelect>:

static void handleSelect(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET){
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	481b      	ldr	r0, [pc, #108]	; (8001580 <handleSelect+0x78>)
 8001512:	f000 fc4b 	bl	8001dac <HAL_GPIO_ReadPin>
 8001516:	4603      	mov	r3, r0
 8001518:	2b01      	cmp	r3, #1
 800151a:	d12f      	bne.n	800157c <handleSelect+0x74>
		switch(currSet){
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <handleSelect+0x7c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d827      	bhi.n	8001574 <handleSelect+0x6c>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <handleSelect+0x24>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	08001545 	.word	0x08001545
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001555 	.word	0x08001555
 8001538:	08001565 	.word	0x08001565
 800153c:	0800155d 	.word	0x0800155d
 8001540:	0800156d 	.word	0x0800156d
		case sHour:
			currSet = sMin;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <handleSelect+0x7c>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
			break;
 800154a:	e013      	b.n	8001574 <handleSelect+0x6c>
		case sMin:
			currSet = sSec;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <handleSelect+0x7c>)
 800154e:	2202      	movs	r2, #2
 8001550:	701a      	strb	r2, [r3, #0]
			break;
 8001552:	e00f      	b.n	8001574 <handleSelect+0x6c>
		case sSec:
			currSet = sMonth;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <handleSelect+0x7c>)
 8001556:	2204      	movs	r2, #4
 8001558:	701a      	strb	r2, [r3, #0]
			break;
 800155a:	e00b      	b.n	8001574 <handleSelect+0x6c>
		case sMonth:
			currSet = sDay;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <handleSelect+0x7c>)
 800155e:	2203      	movs	r2, #3
 8001560:	701a      	strb	r2, [r3, #0]
			break;
 8001562:	e007      	b.n	8001574 <handleSelect+0x6c>
		case sDay:
			currSet = sYear;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <handleSelect+0x7c>)
 8001566:	2205      	movs	r2, #5
 8001568:	701a      	strb	r2, [r3, #0]
			break;
 800156a:	e003      	b.n	8001574 <handleSelect+0x6c>
		case sYear:
			currSet = sHour;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <handleSelect+0x7c>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
			break;
 8001572:	bf00      	nop
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001578:	f000 f98e 	bl	8001898 <HAL_Delay>
	}
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020400 	.word	0x40020400
 8001584:	20000111 	.word	0x20000111

08001588 <rtcUpdateTaskHandler>:

void rtcUpdateTaskHandler(void *parameters){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8
 800158e:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2000      	movs	r0, #0
 800159e:	f004 faaf 	bl	8005b00 <xTaskGenericNotifyWait>

		memset( &rtcDate,0,sizeof(rtcDate) );
 80015a2:	2204      	movs	r2, #4
 80015a4:	2100      	movs	r1, #0
 80015a6:	482f      	ldr	r0, [pc, #188]	; (8001664 <rtcUpdateTaskHandler+0xdc>)
 80015a8:	f007 fd04 	bl	8008fb4 <memset>
		memset( &rtcTime,0,sizeof(rtcTime) );
 80015ac:	2214      	movs	r2, #20
 80015ae:	2100      	movs	r1, #0
 80015b0:	482d      	ldr	r0, [pc, #180]	; (8001668 <rtcUpdateTaskHandler+0xe0>)
 80015b2:	f007 fcff 	bl	8008fb4 <memset>

		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80015b6:	2200      	movs	r2, #0
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <rtcUpdateTaskHandler+0xe0>)
 80015ba:	482c      	ldr	r0, [pc, #176]	; (800166c <rtcUpdateTaskHandler+0xe4>)
 80015bc:	f001 fadc 	bl	8002b78 <HAL_RTC_GetTime>
		HAL_RTC_GetTime(&hrtc, &setTime, RTC_FORMAT_BIN); // sets time for "set" mode
 80015c0:	2200      	movs	r2, #0
 80015c2:	492b      	ldr	r1, [pc, #172]	; (8001670 <rtcUpdateTaskHandler+0xe8>)
 80015c4:	4829      	ldr	r0, [pc, #164]	; (800166c <rtcUpdateTaskHandler+0xe4>)
 80015c6:	f001 fad7 	bl	8002b78 <HAL_RTC_GetTime>

		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80015ca:	2200      	movs	r2, #0
 80015cc:	4925      	ldr	r1, [pc, #148]	; (8001664 <rtcUpdateTaskHandler+0xdc>)
 80015ce:	4827      	ldr	r0, [pc, #156]	; (800166c <rtcUpdateTaskHandler+0xe4>)
 80015d0:	f001 fbb4 	bl	8002d3c <HAL_RTC_GetDate>
		HAL_RTC_GetDate(&hrtc, &setDate, RTC_FORMAT_BIN); // sets date for "set" mode
 80015d4:	2200      	movs	r2, #0
 80015d6:	4927      	ldr	r1, [pc, #156]	; (8001674 <rtcUpdateTaskHandler+0xec>)
 80015d8:	4824      	ldr	r0, [pc, #144]	; (800166c <rtcUpdateTaskHandler+0xe4>)
 80015da:	f001 fbaf 	bl	8002d3c <HAL_RTC_GetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4825      	ldr	r0, [pc, #148]	; (8001678 <rtcUpdateTaskHandler+0xf0>)
 80015e4:	f007 fce6 	bl	8008fb4 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <rtcUpdateTaskHandler+0xe0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <rtcUpdateTaskHandler+0xe0>)
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <rtcUpdateTaskHandler+0xe0>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	460b      	mov	r3, r1
 80015fc:	491f      	ldr	r1, [pc, #124]	; (800167c <rtcUpdateTaskHandler+0xf4>)
 80015fe:	481e      	ldr	r0, [pc, #120]	; (8001678 <rtcUpdateTaskHandler+0xf0>)
 8001600:	f007 fca8 	bl	8008f54 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <rtcUpdateTaskHandler+0xf8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f007 fc33 	bl	8008e74 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <rtcUpdateTaskHandler+0xfc>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	4919      	ldr	r1, [pc, #100]	; (8001680 <rtcUpdateTaskHandler+0xf8>)
 800161a:	f002 fdad 	bl	8004178 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800161e:	2228      	movs	r2, #40	; 0x28
 8001620:	2100      	movs	r1, #0
 8001622:	4815      	ldr	r0, [pc, #84]	; (8001678 <rtcUpdateTaskHandler+0xf0>)
 8001624:	f007 fcc6 	bl	8008fb4 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <rtcUpdateTaskHandler+0xdc>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	461a      	mov	r2, r3
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <rtcUpdateTaskHandler+0xdc>)
 8001630:	789b      	ldrb	r3, [r3, #2]
 8001632:	4619      	mov	r1, r3
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <rtcUpdateTaskHandler+0xdc>)
 8001636:	78db      	ldrb	r3, [r3, #3]
 8001638:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	460b      	mov	r3, r1
 8001640:	4911      	ldr	r1, [pc, #68]	; (8001688 <rtcUpdateTaskHandler+0x100>)
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <rtcUpdateTaskHandler+0xf0>)
 8001644:	f007 fc86 	bl	8008f54 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <rtcUpdateTaskHandler+0xf8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f007 fc11 	bl	8008e74 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <rtcUpdateTaskHandler+0xfc>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	4908      	ldr	r1, [pc, #32]	; (8001680 <rtcUpdateTaskHandler+0xf8>)
 800165e:	f002 fd8b 	bl	8004178 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001662:	e795      	b.n	8001590 <rtcUpdateTaskHandler+0x8>
 8001664:	20000114 	.word	0x20000114
 8001668:	20000118 	.word	0x20000118
 800166c:	2000008c 	.word	0x2000008c
 8001670:	20000130 	.word	0x20000130
 8001674:	2000012c 	.word	0x2000012c
 8001678:	200001b8 	.word	0x200001b8
 800167c:	08009930 	.word	0x08009930
 8001680:	20000004 	.word	0x20000004
 8001684:	20000108 	.word	0x20000108
 8001688:	08009940 	.word	0x08009940

0800168c <rtcSetTaskHandler>:

	}
}

void rtcSetTaskHandler(void *parameters){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
 8001692:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f004 fa2d 	bl	8005b00 <xTaskGenericNotifyWait>

		HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 80016a6:	2200      	movs	r2, #0
 80016a8:	4920      	ldr	r1, [pc, #128]	; (800172c <rtcSetTaskHandler+0xa0>)
 80016aa:	4821      	ldr	r0, [pc, #132]	; (8001730 <rtcSetTaskHandler+0xa4>)
 80016ac:	f001 f9ca 	bl	8002a44 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN);
 80016b0:	2200      	movs	r2, #0
 80016b2:	4920      	ldr	r1, [pc, #128]	; (8001734 <rtcSetTaskHandler+0xa8>)
 80016b4:	481e      	ldr	r0, [pc, #120]	; (8001730 <rtcSetTaskHandler+0xa4>)
 80016b6:	f001 fabd 	bl	8002c34 <HAL_RTC_SetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80016ba:	2228      	movs	r2, #40	; 0x28
 80016bc:	2100      	movs	r1, #0
 80016be:	481e      	ldr	r0, [pc, #120]	; (8001738 <rtcSetTaskHandler+0xac>)
 80016c0:	f007 fc78 	bl	8008fb4 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",setTime.Hours, setTime.Minutes, setTime.Seconds);
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <rtcSetTaskHandler+0xa0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <rtcSetTaskHandler+0xa0>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <rtcSetTaskHandler+0xa0>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	460b      	mov	r3, r1
 80016d8:	4918      	ldr	r1, [pc, #96]	; (800173c <rtcSetTaskHandler+0xb0>)
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <rtcSetTaskHandler+0xac>)
 80016dc:	f007 fc3a 	bl	8008f54 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <rtcSetTaskHandler+0xb4>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ea:	4916      	ldr	r1, [pc, #88]	; (8001744 <rtcSetTaskHandler+0xb8>)
 80016ec:	f002 fd44 	bl	8004178 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80016f0:	2228      	movs	r2, #40	; 0x28
 80016f2:	2100      	movs	r1, #0
 80016f4:	4810      	ldr	r0, [pc, #64]	; (8001738 <rtcSetTaskHandler+0xac>)
 80016f6:	f007 fc5d 	bl	8008fb4 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", setDate.Month, setDate.Date, 2000 + setDate.Year);
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <rtcSetTaskHandler+0xa8>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	461a      	mov	r2, r3
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <rtcSetTaskHandler+0xa8>)
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	4619      	mov	r1, r3
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <rtcSetTaskHandler+0xa8>)
 8001708:	78db      	ldrb	r3, [r3, #3]
 800170a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	460b      	mov	r3, r1
 8001712:	490d      	ldr	r1, [pc, #52]	; (8001748 <rtcSetTaskHandler+0xbc>)
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <rtcSetTaskHandler+0xac>)
 8001716:	f007 fc1d 	bl	8008f54 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <rtcSetTaskHandler+0xb4>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <rtcSetTaskHandler+0xb8>)
 8001726:	f002 fd27 	bl	8004178 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800172a:	e7b3      	b.n	8001694 <rtcSetTaskHandler+0x8>
 800172c:	20000130 	.word	0x20000130
 8001730:	2000008c 	.word	0x2000008c
 8001734:	2000012c 	.word	0x2000012c
 8001738:	200001e0 	.word	0x200001e0
 800173c:	08009930 	.word	0x08009930
 8001740:	20000108 	.word	0x20000108
 8001744:	20000008 	.word	0x20000008
 8001748:	08009940 	.word	0x08009940

0800174c <alarmSetTaskHandler>:

	}
}

void alarmSetTaskHandler(void *parameters){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2000      	movs	r0, #0
 8001762:	f004 f9cd 	bl	8005b00 <xTaskGenericNotifyWait>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001766:	2228      	movs	r2, #40	; 0x28
 8001768:	2100      	movs	r1, #0
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <alarmSetTaskHandler+0x60>)
 800176c:	f007 fc22 	bl	8008fb4 <memset>
		sprintf( (char*) strBuffer, "Alarm" );
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <alarmSetTaskHandler+0x64>)
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <alarmSetTaskHandler+0x60>)
 8001774:	f007 fbee 	bl	8008f54 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <alarmSetTaskHandler+0x68>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	f04f 32ff 	mov.w	r2, #4294967295
 8001782:	490d      	ldr	r1, [pc, #52]	; (80017b8 <alarmSetTaskHandler+0x6c>)
 8001784:	f002 fcf8 	bl	8004178 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8001788:	2228      	movs	r2, #40	; 0x28
 800178a:	2100      	movs	r1, #0
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <alarmSetTaskHandler+0x60>)
 800178e:	f007 fc11 	bl	8008fb4 <memset>
		sprintf( (char*) strBuffer, "Mode" );
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <alarmSetTaskHandler+0x70>)
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <alarmSetTaskHandler+0x60>)
 8001796:	f007 fbdd 	bl	8008f54 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <alarmSetTaskHandler+0x68>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	4904      	ldr	r1, [pc, #16]	; (80017b8 <alarmSetTaskHandler+0x6c>)
 80017a6:	f002 fce7 	bl	8004178 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017aa:	e7d3      	b.n	8001754 <alarmSetTaskHandler+0x8>
 80017ac:	20000208 	.word	0x20000208
 80017b0:	08009950 	.word	0x08009950
 80017b4:	20000108 	.word	0x20000108
 80017b8:	2000000c 	.word	0x2000000c
 80017bc:	08009958 	.word	0x08009958

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff fcbb 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f007 fbef 	bl	8008fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff f845 	bl	8000880 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001804:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8001808:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800180c:	200147b4 	.word	0x200147b4

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f8fc 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fbb2 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fb30 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000014 	.word	0x20000014
 800187c:	20000230 	.word	0x20000230

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000230 	.word	0x20000230

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000014 	.word	0x20000014

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff4c 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a62:	f7ff ff61 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff ffb1 	bl	80019d4 <NVIC_EncodePriority>
 8001a72:	4602      	mov	r2, r0
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff80 	bl	8001980 <__NVIC_SetPriority>
}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff54 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e159      	b.n	8001d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 8148 	bne.w	8001d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a2 	beq.w	8001d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_GPIO_Init+0x2e8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x202>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2f4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x1fe>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2f8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x1fa>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a46      	ldr	r2, [pc, #280]	; (8001da0 <HAL_GPIO_Init+0x2fc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x1f6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_GPIO_Init+0x300>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x1f2>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x204>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2ec>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a24      	ldr	r2, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <HAL_GPIO_Init+0x304>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f aea2 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40013c00 	.word	0x40013c00

08001dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e267      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d075      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	4b88      	ldr	r3, [pc, #544]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b85      	ldr	r3, [pc, #532]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b82      	ldr	r3, [pc, #520]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e242      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b70      	ldr	r3, [pc, #448]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6f      	ldr	r2, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	4b69      	ldr	r3, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a68      	ldr	r2, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a65      	ldr	r2, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fcda 	bl	8001880 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fcd6 	bl	8001880 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e207      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xc0>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fcc6 	bl	8001880 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fcc2 	bl	8001880 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f3      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b51      	ldr	r3, [pc, #324]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xe8>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1c7      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4937      	ldr	r1, [pc, #220]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x244>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fc7b 	bl	8001880 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fc77 	bl	8001880 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1a8      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b28      	ldr	r3, [pc, #160]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4925      	ldr	r1, [pc, #148]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fc5a 	bl	8001880 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fc56 	bl	8001880 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e187      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d036      	beq.n	8002068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d016      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x248>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fc3a 	bl	8001880 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002010:	f7ff fc36 	bl	8001880 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e167      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x240>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x200>
 800202e:	e01b      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x248>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002036:	f7ff fc23 	bl	8001880 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	e00e      	b.n	800205c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800203e:	f7ff fc1f 	bl	8001880 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d907      	bls.n	800205c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e150      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002050:	40023800 	.word	0x40023800
 8002054:	42470000 	.word	0x42470000
 8002058:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ea      	bne.n	800203e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8097 	beq.w	80021a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b81      	ldr	r3, [pc, #516]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b7d      	ldr	r3, [pc, #500]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a7c      	ldr	r2, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b7a      	ldr	r3, [pc, #488]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a6:	4b77      	ldr	r3, [pc, #476]	; (8002284 <HAL_RCC_OscConfig+0x474>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a73      	ldr	r2, [pc, #460]	; (8002284 <HAL_RCC_OscConfig+0x474>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7ff fbdf 	bl	8001880 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7ff fbdb 	bl	8001880 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e10c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x474>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ea>
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a63      	ldr	r2, [pc, #396]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x30c>
 8002102:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a5e      	ldr	r2, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x324>
 800211c:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a54      	ldr	r2, [pc, #336]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fba0 	bl	8001880 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7ff fb9c 	bl	8001880 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0cb      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0ee      	beq.n	8002144 <HAL_RCC_OscConfig+0x334>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff fb8a 	bl	8001880 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002170:	f7ff fb86 	bl	8001880 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b5      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1ee      	bne.n	8002170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a1 	beq.w	80022f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d05c      	beq.n	8002274 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d141      	bne.n	8002246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_RCC_OscConfig+0x478>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fb5a 	bl	8001880 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb56 	bl	8001880 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e087      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	3b01      	subs	r3, #1
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x478>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7ff fb2f 	bl	8001880 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002226:	f7ff fb2b 	bl	8001880 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e05c      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x416>
 8002244:	e054      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x478>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7ff fb18 	bl	8001880 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff fb14 	bl	8001880 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e045      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x470>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e038      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d028      	beq.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa46 	bl	8001880 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa42 	bl	8001880 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f821 	bl	80024cc <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fd80 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08009a38 	.word	0x08009a38
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000010 	.word	0x20000010

080024cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b094      	sub	sp, #80	; 0x50
 80024d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	647b      	str	r3, [r7, #68]	; 0x44
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024dc:	2300      	movs	r3, #0
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e4:	4b79      	ldr	r3, [pc, #484]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d00d      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x40>
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	f200 80e1 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x34>
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x3a>
 80024fe:	e0db      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002504:	e0db      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800250a:	e0d8      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4b6f      	ldr	r3, [pc, #444]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002516:	4b6d      	ldr	r3, [pc, #436]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
 800252c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002570:	4659      	mov	r1, fp
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4651      	mov	r1, sl
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4651      	mov	r1, sl
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4651      	mov	r1, sl
 8002580:	ebb2 0801 	subs.w	r8, r2, r1
 8002584:	4659      	mov	r1, fp
 8002586:	eb63 0901 	sbc.w	r9, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002596:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800259a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800259e:	4690      	mov	r8, r2
 80025a0:	4699      	mov	r9, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb18 0303 	adds.w	r3, r8, r3
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb49 0303 	adc.w	r3, r9, r3
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025be:	4629      	mov	r1, r5
 80025c0:	024b      	lsls	r3, r1, #9
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025c8:	4621      	mov	r1, r4
 80025ca:	024a      	lsls	r2, r1, #9
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025dc:	f7fd fea8 	bl	8000330 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	e058      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	2200      	movs	r2, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	4611      	mov	r1, r2
 80025f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002604:	4642      	mov	r2, r8
 8002606:	464b      	mov	r3, r9
 8002608:	f04f 0000 	mov.w	r0, #0
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	0159      	lsls	r1, r3, #5
 8002612:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002616:	0150      	lsls	r0, r2, #5
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4641      	mov	r1, r8
 800261e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002622:	4649      	mov	r1, r9
 8002624:	eb63 0b01 	sbc.w	fp, r3, r1
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002634:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002638:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800263c:	ebb2 040a 	subs.w	r4, r2, sl
 8002640:	eb63 050b 	sbc.w	r5, r3, fp
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	61fa      	str	r2, [r7, #28]
 800268c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002690:	f7fd fe4e 	bl	8000330 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	3301      	adds	r3, #1
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3750      	adds	r7, #80	; 0x50
 80026c4:	46bd      	mov	sp, r7
 80026c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08009a48 	.word	0x08009a48

08002718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	220f      	movs	r2, #15
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_GetClockConfig+0x5c>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <HAL_RCC_GetClockConfig+0x60>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0207 	and.w	r2, r3, #7
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d035      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027aa:	f7ff f869 	bl	8001880 <HAL_GetTick>
 80027ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027b2:	f7ff f865 	bl	8001880 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e0ba      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027c4:	4b60      	ldr	r3, [pc, #384]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	019a      	lsls	r2, r3, #6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	071b      	lsls	r3, r3, #28
 80027dc:	495a      	ldr	r1, [pc, #360]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027ea:	f7ff f849 	bl	8001880 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027f2:	f7ff f845 	bl	8001880 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e09a      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8083 	beq.w	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b46      	ldr	r3, [pc, #280]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002846:	f7ff f81b 	bl	8001880 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7ff f817 	bl	8001880 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e06c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002874:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02f      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d028      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002892:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002896:	2201      	movs	r2, #1
 8002898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d114      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe ffe5 	bl	8001880 <HAL_GetTick>
 80028b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe ffe1 	bl	8001880 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e034      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ee      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e8:	d10d      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80028fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fe:	4912      	ldr	r1, [pc, #72]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
 8002904:	e005      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a0f      	ldr	r2, [pc, #60]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800290c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002910:	6093      	str	r3, [r2, #8]
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7c1a      	ldrb	r2, [r3, #16]
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002936:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	42470068 	.word	0x42470068
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
 8002950:	42470e40 	.word	0x42470e40
 8002954:	424711e0 	.word	0x424711e0

08002958 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e066      	b.n	8002a3c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7f5b      	ldrb	r3, [r3, #29]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fabe 	bl	8000f00 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	22ca      	movs	r2, #202	; 0xca
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2253      	movs	r2, #83	; 0x53
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fcf8 	bl	8003390 <RTC_EnterInitMode>
 80029a0:	4603      	mov	r3, r0
 80029a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d12c      	bne.n	8002a04 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	68d2      	ldr	r2, [r2, #12]
 80029e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fcff 	bl	80033fe <RTC_ExitInitMode>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d113      	bne.n	8002a32 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	7f1b      	ldrb	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_RTC_SetTime+0x1c>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e087      	b.n	8002b70 <HAL_RTC_SetTime+0x12c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d126      	bne.n	8002ac0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fcdc 	bl	8003448 <RTC_ByteToBcd2>
 8002a90:	4603      	mov	r3, r0
 8002a92:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	785b      	ldrb	r3, [r3, #1]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fcd5 	bl	8003448 <RTC_ByteToBcd2>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002aa2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fccd 	bl	8003448 <RTC_ByteToBcd2>
 8002aae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ab0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	78db      	ldrb	r3, [r3, #3]
 8002ab8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e018      	b.n	8002af2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002ae0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002ae6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	22ca      	movs	r2, #202	; 0xca
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2253      	movs	r2, #83	; 0x53
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fc44 	bl	8003390 <RTC_EnterInitMode>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d120      	bne.n	8002b54 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b1c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b20:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fc57 	bl	80033fe <RTC_ExitInitMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	771a      	strb	r2, [r3, #28]

  return status;
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002baa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0d9b      	lsrs	r3, r3, #22
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11a      	bne.n	8002c2a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fc42 	bl	8003482 <RTC_Bcd2ToByte>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fc39 	bl	8003482 <RTC_Bcd2ToByte>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fc30 	bl	8003482 <RTC_Bcd2ToByte>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_RTC_SetDate+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e071      	b.n	8002d34 <HAL_RTC_SetDate+0x100>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10e      	bne.n	8002c80 <HAL_RTC_SetDate+0x4c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	785b      	ldrb	r3, [r3, #1]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	330a      	adds	r3, #10
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11c      	bne.n	8002cc0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	78db      	ldrb	r3, [r3, #3]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fbdc 	bl	8003448 <RTC_ByteToBcd2>
 8002c90:	4603      	mov	r3, r0
 8002c92:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fbd5 	bl	8003448 <RTC_ByteToBcd2>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ca2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fbcd 	bl	8003448 <RTC_ByteToBcd2>
 8002cae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cb0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e00e      	b.n	8002cde <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	78db      	ldrb	r3, [r3, #3]
 8002cc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ccc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002cd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22ca      	movs	r2, #202	; 0xca
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2253      	movs	r2, #83	; 0x53
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb4e 	bl	8003390 <RTC_EnterInitMode>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d0c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fb75 	bl	80033fe <RTC_ExitInitMode>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	771a      	strb	r2, [r3, #28]

  return status;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	0b5b      	lsrs	r3, r3, #13
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb6f 	bl	8003482 <RTC_Bcd2ToByte>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fb66 	bl	8003482 <RTC_Bcd2ToByte>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fb5d 	bl	8003482 <RTC_Bcd2ToByte>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002dda:	b590      	push	{r4, r7, lr}
 8002ddc:	b089      	sub	sp, #36	; 0x24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_RTC_SetAlarm+0x24>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e113      	b.n	8003026 <HAL_RTC_SetAlarm+0x24c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d137      	bne.n	8002e80 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2200      	movs	r2, #0
 8002e22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fb0d 	bl	8003448 <RTC_ByteToBcd2>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	785b      	ldrb	r3, [r3, #1]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fb06 	bl	8003448 <RTC_ByteToBcd2>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e40:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	789b      	ldrb	r3, [r3, #2]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fafe 	bl	8003448 <RTC_ByteToBcd2>
 8002e4c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002e4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	78db      	ldrb	r3, [r3, #3]
 8002e56:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002e58:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 faf0 	bl	8003448 <RTC_ByteToBcd2>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002e6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002e74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e023      	b.n	8002ec8 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	785b      	ldrb	r3, [r3, #1]
 8002e9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002ea0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002ea6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002eae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002eb8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002ebe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	22ca      	movs	r2, #202	; 0xca
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2253      	movs	r2, #83	; 0x53
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d148      	bne.n	8002f80 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002f1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f20:	f7fe fcae 	bl	8001880 <HAL_GetTick>
 8002f24:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002f26:	e013      	b.n	8002f50 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f28:	f7fe fcaa 	bl	8001880 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d90b      	bls.n	8002f50 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2203      	movs	r2, #3
 8002f44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e06a      	b.n	8003026 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0e4      	beq.n	8002f28 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e047      	b.n	8003010 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f8e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002fb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fc65 	bl	8001880 <HAL_GetTick>
 8002fb6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002fb8:	e013      	b.n	8002fe2 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fba:	f7fe fc61 	bl	8001880 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc8:	d90b      	bls.n	8002fe2 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	22ff      	movs	r2, #255	; 0xff
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e021      	b.n	8003026 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0e4      	beq.n	8002fba <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}
	...

08003030 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800303c:	4b9a      	ldr	r3, [pc, #616]	; (80032a8 <HAL_RTC_SetAlarm_IT+0x278>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a9a      	ldr	r2, [pc, #616]	; (80032ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0adb      	lsrs	r3, r3, #11
 8003048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	7f1b      	ldrb	r3, [r3, #28]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_RTC_SetAlarm_IT+0x36>
 8003062:	2302      	movs	r3, #2
 8003064:	e11c      	b.n	80032a0 <HAL_RTC_SetAlarm_IT+0x270>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2202      	movs	r2, #2
 8003070:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d137      	bne.n	80030e8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d102      	bne.n	800308c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f9d9 	bl	8003448 <RTC_ByteToBcd2>
 8003096:	4603      	mov	r3, r0
 8003098:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f9d2 	bl	8003448 <RTC_ByteToBcd2>
 80030a4:	4603      	mov	r3, r0
 80030a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80030a8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	789b      	ldrb	r3, [r3, #2]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f9ca 	bl	8003448 <RTC_ByteToBcd2>
 80030b4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80030b6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	78db      	ldrb	r3, [r3, #3]
 80030be:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80030c0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f9bc 	bl	8003448 <RTC_ByteToBcd2>
 80030d0:	4603      	mov	r3, r0
 80030d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80030d4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80030dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e023      	b.n	8003130 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003108:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800310e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003116:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003120:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003126:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800312c:	4313      	orrs	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	22ca      	movs	r2, #202	; 0xca
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2253      	movs	r2, #83	; 0x53
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003154:	d141      	bne.n	80031da <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003164:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003176:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1e5a      	subs	r2, r3, #1
 800317c:	617a      	str	r2, [r7, #20]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	22ff      	movs	r2, #255	; 0xff
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2203      	movs	r2, #3
 800318e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e082      	b.n	80032a0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0e7      	beq.n	8003178 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	e04b      	b.n	8003272 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e8:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031fa:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RTC_SetAlarm_IT+0x278>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0adb      	lsrs	r3, r3, #11
 8003208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	617a      	str	r2, [r7, #20]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2203      	movs	r2, #3
 8003228:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e035      	b.n	80032a0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0e7      	beq.n	8003212 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800327e:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003288:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	22ff      	movs	r2, #255	; 0xff
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3724      	adds	r7, #36	; 0x24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	20000000 	.word	0x20000000
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fd fdbf 	bl	8000e5c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00b      	beq.n	8003324 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8d4 	bl	80034ba <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003322:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	775a      	strb	r2, [r3, #29]
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800335c:	f7fe fa90 	bl	8001880 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003362:	e009      	b.n	8003378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003364:	f7fe fa8c 	bl	8001880 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003372:	d901      	bls.n	8003378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e007      	b.n	8003388 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ee      	beq.n	8003364 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d122      	bne.n	80033f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033be:	f7fe fa5f 	bl	8001880 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033c4:	e00c      	b.n	80033e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033c6:	f7fe fa5b 	bl	8001880 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d4:	d904      	bls.n	80033e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <RTC_EnterInitMode+0x64>
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d1e8      	bne.n	80033c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff89 	bl	8003340 <HAL_RTC_WaitForSynchro>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2204      	movs	r2, #4
 8003438:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003456:	e005      	b.n	8003464 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	3301      	adds	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	3b0a      	subs	r3, #10
 8003462:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	2b09      	cmp	r3, #9
 8003468:	d8f6      	bhi.n	8003458 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	b2da      	uxtb	r2, r3
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	4313      	orrs	r3, r2
 8003474:	b2db      	uxtb	r3, r3
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	b2db      	uxtb	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	0092      	lsls	r2, r2, #2
 800349a:	4413      	add	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	4413      	add	r3, r2
 80034ac:	b2db      	uxtb	r3, r3
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e041      	b.n	8003564 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fd fd37 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 fae1 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e03c      	b.n	80035fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_TIM_Base_Start+0xa0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <HAL_TIM_Base_Start+0x5c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d013      	beq.n	80035c8 <HAL_TIM_Base_Start+0x5c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <HAL_TIM_Base_Start+0xa4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start+0x5c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_TIM_Base_Start+0xa8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start+0x5c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_TIM_Base_Start+0xac>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start+0x5c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a16      	ldr	r2, [pc, #88]	; (800361c <HAL_TIM_Base_Start+0xb0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d111      	bne.n	80035ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d010      	beq.n	80035fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e007      	b.n	80035fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e044      	b.n	80036c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d013      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_TIM_Base_Start_IT+0xbc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_Base_Start_IT+0x6c>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d010      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e007      	b.n	80036c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f9b5 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f9a7 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f9b8 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f98b 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f97d 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f98e 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f961 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f953 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f964 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f937 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f929 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f93a 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fb0a 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fab2 	bl	8003df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8ff 	bl	8003abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0220 	mvn.w	r2, #32
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa7c 	bl	8003de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIM_ConfigClockSource+0x1c>
 800390c:	2302      	movs	r3, #2
 800390e:	e0b4      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x186>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003948:	d03e      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0xd4>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	f200 8087 	bhi.w	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003956:	f000 8086 	beq.w	8003a66 <HAL_TIM_ConfigClockSource+0x172>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d87f      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b70      	cmp	r3, #112	; 0x70
 8003962:	d01a      	beq.n	800399a <HAL_TIM_ConfigClockSource+0xa6>
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d87b      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b60      	cmp	r3, #96	; 0x60
 800396a:	d050      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x11a>
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d877      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b50      	cmp	r3, #80	; 0x50
 8003972:	d03c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xfa>
 8003974:	2b50      	cmp	r3, #80	; 0x50
 8003976:	d873      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d058      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x13a>
 800397c:	2b40      	cmp	r3, #64	; 0x40
 800397e:	d86f      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b30      	cmp	r3, #48	; 0x30
 8003982:	d064      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	2b30      	cmp	r3, #48	; 0x30
 8003986:	d86b      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d060      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d867      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05c      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	2b10      	cmp	r3, #16
 8003996:	d05a      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	e062      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f000 f98d 	bl	8003cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e04f      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6899      	ldr	r1, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f000 f976 	bl	8003cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ea:	609a      	str	r2, [r3, #8]
      break;
 80039ec:	e03c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f000 f8ea 	bl	8003bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2150      	movs	r1, #80	; 0x50
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f943 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e02c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f000 f909 	bl	8003c32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2160      	movs	r1, #96	; 0x60
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f933 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a2c:	e01c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f000 f8ca 	bl	8003bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f923 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a4c:	e00c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f000 f91a 	bl	8003c92 <TIM_ITRx_SetConfig>
      break;
 8003a5e:	e003      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e000      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <TIM_Base_SetConfig+0xe4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00f      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d00b      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <TIM_Base_SetConfig+0xe8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <TIM_Base_SetConfig+0xec>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <TIM_Base_SetConfig+0xf0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0xe4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01b      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d017      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <TIM_Base_SetConfig+0xe8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a21      	ldr	r2, [pc, #132]	; (8003bc0 <TIM_Base_SetConfig+0xec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00f      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a20      	ldr	r2, [pc, #128]	; (8003bc4 <TIM_Base_SetConfig+0xf0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <TIM_Base_SetConfig+0xf4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a1e      	ldr	r2, [pc, #120]	; (8003bcc <TIM_Base_SetConfig+0xf8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <TIM_Base_SetConfig+0xfc>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <TIM_Base_SetConfig+0xe4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0201 	bic.w	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f023 030a 	bic.w	r3, r3, #10
 8003c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b087      	sub	sp, #28
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f023 0210 	bic.w	r2, r3, #16
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	031b      	lsls	r3, r3, #12
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f043 0307 	orr.w	r3, r3, #7
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	021a      	lsls	r2, r3, #8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e050      	b.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d013      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10c      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800
 8003ddc:	40000c00 	.word	0x40000c00
 8003de0:	40014000 	.word	0x40014000

08003de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f103 0208 	add.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295
 8003e24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0208 	add.w	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f103 0208 	add.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e00c      	b.n	8003ee8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <vListInsert+0x2e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d2f6      	bcs.n	8003ed6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d103      	bne.n	8003f54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGenericReset+0x2e>
        __asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60fb      	str	r3, [r7, #12]
    }
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05d      	beq.n	8004064 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d059      	beq.n	8004064 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2100      	movs	r1, #0
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d000      	beq.n	8003fc4 <xQueueGenericReset+0x50>
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d14c      	bne.n	8004064 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003fca:	f002 fcab 	bl	8006924 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	441a      	add	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6939      	ldr	r1, [r7, #16]
 8003ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	441a      	add	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	22ff      	movs	r2, #255	; 0xff
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d114      	bne.n	800404a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3310      	adds	r3, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fa89 	bl	8005544 <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <xQueueGenericReset+0x11c>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	e009      	b.n	800405e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3310      	adds	r3, #16
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fedc 	bl	8003e0c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fed7 	bl	8003e0c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800405e:	f002 fc91 	bl	8006984 <vPortExitCritical>
 8004062:	e001      	b.n	8004068 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <xQueueGenericReset+0x110>
        __asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60bb      	str	r3, [r7, #8]
    }
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004084:	697b      	ldr	r3, [r7, #20]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02e      	beq.n	800410a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040ac:	2100      	movs	r1, #0
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	fba3 2302 	umull	r2, r3, r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d000      	beq.n	80040bc <xQueueGenericCreate+0x28>
 80040ba:	2101      	movs	r1, #1
 80040bc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d123      	bne.n	800410a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80040ca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80040ce:	d81c      	bhi.n	800410a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	3350      	adds	r3, #80	; 0x50
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 fd44 	bl	8006b6c <pvPortMalloc>
 80040e4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01c      	beq.n	8004126 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3350      	adds	r3, #80	; 0x50
 80040f4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f6:	79fa      	ldrb	r2, [r7, #7]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f814 	bl	8004130 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004108:	e00d      	b.n	8004126 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xQueueGenericCreate+0x92>
        __asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	613b      	str	r3, [r7, #16]
    }
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004126:	69fb      	ldr	r3, [r7, #28]
    }
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e002      	b.n	8004152 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800415e:	2101      	movs	r1, #1
 8004160:	69b8      	ldr	r0, [r7, #24]
 8004162:	f7ff ff07 	bl	8003f74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004186:	2300      	movs	r3, #0
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xQueueGenericSend+0x32>
        __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <xQueueGenericSend+0x40>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <xQueueGenericSend+0x44>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <xQueueGenericSend+0x46>
 80041bc:	2300      	movs	r3, #0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xQueueGenericSend+0x60>
        __asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x6e>
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0x72>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0x74>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGenericSend+0x8e>
        __asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	623b      	str	r3, [r7, #32]
    }
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004206:	f001 fbb1 	bl	800596c <xTaskGetSchedulerState>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <xQueueGenericSend+0x9e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <xQueueGenericSend+0xa2>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSend+0xa4>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xQueueGenericSend+0xbe>
        __asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	61fb      	str	r3, [r7, #28]
    }
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004236:	f002 fb75 	bl	8006924 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <xQueueGenericSend+0xd4>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d129      	bne.n	80042a0 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004252:	f000 fa21 	bl	8004698 <prvCopyDataToQueue>
 8004256:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	3324      	adds	r3, #36	; 0x24
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f96d 	bl	8005544 <xTaskRemoveFromEventList>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004270:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <xQueueGenericSend+0x1f8>)
 8004272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	e00a      	b.n	8004298 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <xQueueGenericSend+0x1f8>)
 800428a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004298:	f002 fb74 	bl	8006984 <vPortExitCritical>
                return pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	e063      	b.n	8004368 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80042a6:	f002 fb6d 	bl	8006984 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e05c      	b.n	8004368 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fa1b 	bl	80056f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80042c2:	f002 fb5f 	bl	8006984 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80042c6:	f000 fe11 	bl	8004eec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80042ca:	f002 fb2b 	bl	8006924 <vPortEnterCritical>
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d103      	bne.n	80042e4 <xQueueGenericSend+0x16c>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ea:	b25b      	sxtb	r3, r3
 80042ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f0:	d103      	bne.n	80042fa <xQueueGenericSend+0x182>
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fa:	f002 fb43 	bl	8006984 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042fe:	1d3a      	adds	r2, r7, #4
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f001 fa0a 	bl	8005720 <xTaskCheckForTimeOut>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d124      	bne.n	800435c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004314:	f000 fab8 	bl	8004888 <prvIsQueueFull>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	3310      	adds	r3, #16
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f001 f8a0 	bl	800546c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800432c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800432e:	f000 fa43 	bl	80047b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004332:	f000 fde9 	bl	8004f08 <xTaskResumeAll>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f af7c 	bne.w	8004236 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <xQueueGenericSend+0x1f8>)
 8004340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	e772      	b.n	8004236 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004352:	f000 fa31 	bl	80047b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004356:	f000 fdd7 	bl	8004f08 <xTaskResumeAll>
 800435a:	e76c      	b.n	8004236 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800435c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435e:	f000 fa2b 	bl	80047b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004362:	f000 fdd1 	bl	8004f08 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004366:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004368:	4618      	mov	r0, r3
 800436a:	3738      	adds	r7, #56	; 0x38
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b092      	sub	sp, #72	; 0x48
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8004386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <xQueueGenericSendFromISR+0x3c>
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <xQueueGenericSendFromISR+0x40>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <xQueueGenericSendFromISR+0x42>
 80043b4:	2300      	movs	r3, #0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d103      	bne.n	80043de <xQueueGenericSendFromISR+0x6a>
 80043d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <xQueueGenericSendFromISR+0x6e>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueGenericSendFromISR+0x70>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043fe:	f002 fb75 	bl	8006aec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004402:	f3ef 8211 	mrs	r2, BASEPRI
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800441a:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800441c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800441e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <xQueueGenericSendFromISR+0xbc>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d146      	bne.n	80044be <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004446:	f000 f927 	bl	8004698 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800444a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d112      	bne.n	800447a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d02d      	beq.n	80044b8 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800445c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445e:	3324      	adds	r3, #36	; 0x24
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f86f 	bl	8005544 <xTaskRemoveFromEventList>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d025      	beq.n	80044b8 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d022      	beq.n	80044b8 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e01e      	b.n	80044b8 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800447a:	f000 fe67 	bl	800514c <uxTaskGetNumberOfTasks>
 800447e:	6338      	str	r0, [r7, #48]	; 0x30
 8004480:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004486:	429a      	cmp	r2, r3
 8004488:	d916      	bls.n	80044b8 <xQueueGenericSendFromISR+0x144>
 800448a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800448e:	2b7f      	cmp	r3, #127	; 0x7f
 8004490:	d10a      	bne.n	80044a8 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	61bb      	str	r3, [r7, #24]
    }
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xQueueGenericSendFromISR+0x132>
 80044a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80044ac:	3301      	adds	r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	b25a      	sxtb	r2, r3
 80044b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80044b8:	2301      	movs	r3, #1
 80044ba:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80044bc:	e001      	b.n	80044c2 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	647b      	str	r3, [r7, #68]	; 0x44
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80044cc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80044ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3748      	adds	r7, #72	; 0x48
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <xQueueReceive+0x30>
        __asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	623b      	str	r3, [r7, #32]
    }
 8004504:	bf00      	nop
 8004506:	e7fe      	b.n	8004506 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <xQueueReceive+0x3e>
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <xQueueReceive+0x42>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <xQueueReceive+0x44>
 800451a:	2300      	movs	r3, #0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueReceive+0x5e>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	61fb      	str	r3, [r7, #28]
    }
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004536:	f001 fa19 	bl	800596c <xTaskGetSchedulerState>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <xQueueReceive+0x6e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <xQueueReceive+0x72>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <xQueueReceive+0x74>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xQueueReceive+0x8e>
        __asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	61bb      	str	r3, [r7, #24]
    }
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004566:	f002 f9dd 	bl	8006924 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d01f      	beq.n	80045b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800457a:	f000 f8f7 	bl	800476c <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00f      	beq.n	80045ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004590:	3310      	adds	r3, #16
 8004592:	4618      	mov	r0, r3
 8004594:	f000 ffd6 	bl	8005544 <xTaskRemoveFromEventList>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <xQueueReceive+0x1bc>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80045ae:	f002 f9e9 	bl	8006984 <vPortExitCritical>
                return pdPASS;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e069      	b.n	800468a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d103      	bne.n	80045c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045bc:	f002 f9e2 	bl	8006984 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e062      	b.n	800468a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 f890 	bl	80056f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045d8:	f002 f9d4 	bl	8006984 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045dc:	f000 fc86 	bl	8004eec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045e0:	f002 f9a0 	bl	8006924 <vPortEnterCritical>
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d103      	bne.n	80045fa <xQueueReceive+0x122>
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004600:	b25b      	sxtb	r3, r3
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d103      	bne.n	8004610 <xQueueReceive+0x138>
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004610:	f002 f9b8 	bl	8006984 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004614:	1d3a      	adds	r2, r7, #4
 8004616:	f107 0310 	add.w	r3, r7, #16
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f001 f87f 	bl	8005720 <xTaskCheckForTimeOut>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d123      	bne.n	8004670 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800462a:	f000 f917 	bl	800485c <prvIsQueueEmpty>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	3324      	adds	r3, #36	; 0x24
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 ff15 	bl	800546c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004644:	f000 f8b8 	bl	80047b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004648:	f000 fc5e 	bl	8004f08 <xTaskResumeAll>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d189      	bne.n	8004566 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <xQueueReceive+0x1bc>)
 8004654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	e780      	b.n	8004566 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004666:	f000 f8a7 	bl	80047b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800466a:	f000 fc4d 	bl	8004f08 <xTaskResumeAll>
 800466e:	e77a      	b.n	8004566 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004672:	f000 f8a1 	bl	80047b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004676:	f000 fc47 	bl	8004f08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800467a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467c:	f000 f8ee 	bl	800485c <prvIsQueueEmpty>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	f43f af6f 	beq.w	8004566 <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004688:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800468a:	4618      	mov	r0, r3
 800468c:	3730      	adds	r7, #48	; 0x30
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10d      	bne.n	80046d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d14d      	bne.n	800475a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f970 	bl	80059a8 <xTaskPriorityDisinherit>
 80046c8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e043      	b.n	800475a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d119      	bne.n	800470c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6858      	ldr	r0, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	461a      	mov	r2, r3
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	f004 fc9a 	bl	800901c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d32b      	bcc.n	800475a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	e026      	b.n	800475a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	68d8      	ldr	r0, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	461a      	mov	r2, r3
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	f004 fc80 	bl	800901c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	425b      	negs	r3, r3
 8004726:	441a      	add	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d207      	bcs.n	8004748 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	425b      	negs	r3, r3
 8004742:	441a      	add	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d105      	bne.n	800475a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	3b01      	subs	r3, #1
 8004758:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	441a      	add	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	d303      	bcc.n	80047a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68d9      	ldr	r1, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	461a      	mov	r2, r3
 80047aa:	6838      	ldr	r0, [r7, #0]
 80047ac:	f004 fc36 	bl	800901c <memcpy>
    }
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80047c0:	f002 f8b0 	bl	8006924 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80047cc:	e011      	b.n	80047f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d012      	beq.n	80047fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 feb2 	bl	8005544 <xTaskRemoveFromEventList>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80047e6:	f001 f801 	bl	80057ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80047f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dce9      	bgt.n	80047ce <prvUnlockQueue+0x16>
 80047fa:	e000      	b.n	80047fe <prvUnlockQueue+0x46>
                    break;
 80047fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	22ff      	movs	r2, #255	; 0xff
 8004802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004806:	f002 f8bd 	bl	8006984 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800480a:	f002 f88b 	bl	8006924 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004814:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004816:	e011      	b.n	800483c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3310      	adds	r3, #16
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe8d 	bl	8005544 <xTaskRemoveFromEventList>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004830:	f000 ffdc 	bl	80057ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	3b01      	subs	r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800483c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004840:	2b00      	cmp	r3, #0
 8004842:	dce9      	bgt.n	8004818 <prvUnlockQueue+0x60>
 8004844:	e000      	b.n	8004848 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004846:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	22ff      	movs	r2, #255	; 0xff
 800484c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004850:	f002 f898 	bl	8006984 <vPortExitCritical>
}
 8004854:	bf00      	nop
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004864:	f002 f85e 	bl	8006924 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e001      	b.n	800487a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800487a:	f002 f883 	bl	8006984 <vPortExitCritical>

    return xReturn;
 800487e:	68fb      	ldr	r3, [r7, #12]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004890:	f002 f848 	bl	8006924 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	429a      	cmp	r2, r3
 800489e:	d102      	bne.n	80048a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e001      	b.n	80048aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80048aa:	f002 f86b 	bl	8006984 <vPortExitCritical>

    return xReturn;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60fb      	str	r3, [r7, #12]
    }
 80048de:	bf00      	nop
 80048e0:	e7fe      	b.n	80048e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d024      	beq.n	8004932 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e01e      	b.n	800492c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <vQueueAddToRegistry+0x98>)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d105      	bne.n	800490a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4a13      	ldr	r2, [pc, #76]	; (8004950 <vQueueAddToRegistry+0x98>)
 8004904:	4413      	add	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
                    break;
 8004908:	e013      	b.n	8004932 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <vQueueAddToRegistry+0x6e>
 8004910:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <vQueueAddToRegistry+0x98>)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4a0b      	ldr	r2, [pc, #44]	; (8004950 <vQueueAddToRegistry+0x98>)
 8004922:	4413      	add	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b07      	cmp	r3, #7
 8004930:	d9dd      	bls.n	80048ee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004944:	bf00      	nop
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000234 	.word	0x20000234

08004954 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004964:	f001 ffde 	bl	8006924 <vPortEnterCritical>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800496e:	b25b      	sxtb	r3, r3
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d103      	bne.n	800497e <vQueueWaitForMessageRestricted+0x2a>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004984:	b25b      	sxtb	r3, r3
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d103      	bne.n	8004994 <vQueueWaitForMessageRestricted+0x40>
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004994:	f001 fff6 	bl	8006984 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fd83 	bl	80054b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f7ff ff02 	bl	80047b8 <prvUnlockQueue>
    }
 80049b4:	bf00      	nop
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af04      	add	r7, sp, #16
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	4613      	mov	r3, r2
 80049ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f002 f8cb 	bl	8006b6c <pvPortMalloc>
 80049d6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049de:	2058      	movs	r0, #88	; 0x58
 80049e0:	f002 f8c4 	bl	8006b6c <pvPortMalloc>
 80049e4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80049ec:	2258      	movs	r2, #88	; 0x58
 80049ee:	2100      	movs	r1, #0
 80049f0:	69f8      	ldr	r0, [r7, #28]
 80049f2:	f004 fadf 	bl	8008fb4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
 80049fc:	e005      	b.n	8004a0a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f002 f96e 	bl	8006ce0 <vPortFree>
 8004a04:	e001      	b.n	8004a0a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d013      	beq.n	8004a38 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	2300      	movs	r3, #0
 8004a14:	9303      	str	r3, [sp, #12]
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	9302      	str	r3, [sp, #8]
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f80e 	bl	8004a48 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004a2c:	69f8      	ldr	r0, [r7, #28]
 8004a2e:	f000 f899 	bl	8004b64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e002      	b.n	8004a3e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
    }
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	461a      	mov	r2, r3
 8004a60:	21a5      	movs	r1, #165	; 0xa5
 8004a62:	f004 faa7 	bl	8008fb4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a70:	3b01      	subs	r3, #1
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	617b      	str	r3, [r7, #20]
    }
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01e      	beq.n	8004ae4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	e012      	b.n	8004ad2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	7819      	ldrb	r1, [r3, #0]
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3334      	adds	r3, #52	; 0x34
 8004abc:	460a      	mov	r2, r1
 8004abe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d006      	beq.n	8004ada <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b09      	cmp	r3, #9
 8004ad6:	d9e9      	bls.n	8004aac <prvInitialiseNewTask+0x64>
 8004ad8:	e000      	b.n	8004adc <prvInitialiseNewTask+0x94>
            {
                break;
 8004ada:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d90a      	bls.n	8004b00 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d901      	bls.n	8004b0a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b06:	2305      	movs	r3, #5
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f996 	bl	8003e4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	3318      	adds	r3, #24
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff f991 	bl	8003e4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	f1c3 0206 	rsb	r2, r3, #6
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	69b8      	ldr	r0, [r7, #24]
 8004b46:	f001 fd43 	bl	80065d0 <pxPortInitialiseStack>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b5c:	bf00      	nop
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004b64:	b5b0      	push	{r4, r5, r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004b6c:	f001 feda 	bl	8006924 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004b70:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <prvAddNewTaskToReadyList+0x14c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	4a4e      	ldr	r2, [pc, #312]	; (8004cb0 <prvAddNewTaskToReadyList+0x14c>)
 8004b78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004b7a:	4b4e      	ldr	r3, [pc, #312]	; (8004cb4 <prvAddNewTaskToReadyList+0x150>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d109      	bne.n	8004b96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004b82:	4a4c      	ldr	r2, [pc, #304]	; (8004cb4 <prvAddNewTaskToReadyList+0x150>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <prvAddNewTaskToReadyList+0x14c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d110      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004b90:	f000 fe52 	bl	8005838 <prvInitialiseTaskLists>
 8004b94:	e00d      	b.n	8004bb2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004b96:	4b48      	ldr	r3, [pc, #288]	; (8004cb8 <prvAddNewTaskToReadyList+0x154>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b9e:	4b45      	ldr	r3, [pc, #276]	; (8004cb4 <prvAddNewTaskToReadyList+0x150>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d802      	bhi.n	8004bb2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004bac:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <prvAddNewTaskToReadyList+0x150>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004bb2:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <prvAddNewTaskToReadyList+0x158>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <prvAddNewTaskToReadyList+0x158>)
 8004bba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <prvAddNewTaskToReadyList+0x158>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <prvAddNewTaskToReadyList+0x94>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f003 ff3f 	bl	8008a50 <SEGGER_SYSVIEW_OnTaskCreate>
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	461d      	mov	r5, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461c      	mov	r4, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	1ae3      	subs	r3, r4, r3
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	462b      	mov	r3, r5
 8004bf4:	f002 fa36 	bl	8007064 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 ffac 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <prvAddNewTaskToReadyList+0x15c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <prvAddNewTaskToReadyList+0x15c>)
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c16:	492b      	ldr	r1, [pc, #172]	; (8004cc4 <prvAddNewTaskToReadyList+0x160>)
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3304      	adds	r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	3204      	adds	r2, #4
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <prvAddNewTaskToReadyList+0x160>)
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	615a      	str	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	4918      	ldr	r1, [pc, #96]	; (8004cc4 <prvAddNewTaskToReadyList+0x160>)
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	4814      	ldr	r0, [pc, #80]	; (8004cc4 <prvAddNewTaskToReadyList+0x160>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4403      	add	r3, r0
 8004c7c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004c7e:	f001 fe81 	bl	8006984 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <prvAddNewTaskToReadyList+0x154>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvAddNewTaskToReadyList+0x150>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d207      	bcs.n	8004ca8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <prvAddNewTaskToReadyList+0x164>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb0:	20000360 	.word	0x20000360
 8004cb4:	20000274 	.word	0x20000274
 8004cb8:	2000036c 	.word	0x2000036c
 8004cbc:	2000037c 	.word	0x2000037c
 8004cc0:	20000368 	.word	0x20000368
 8004cc4:	20000278 	.word	0x20000278
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004cd4:	f001 fe26 	bl	8006924 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <vTaskSuspend+0x18>
 8004cde:	4b4a      	ldr	r3, [pc, #296]	; (8004e08 <vTaskSuspend+0x13c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	e000      	b.n	8004ce6 <vTaskSuspend+0x1a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f003 ffd6 	bl	8008c9c <SEGGER_SYSVIEW_ShrinkId>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	2029      	movs	r0, #41	; 0x29
 8004cf6:	f003 fa9d 	bl	8008234 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f90e 	bl	8003f20 <uxListRemove>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	493f      	ldr	r1, [pc, #252]	; (8004e0c <vTaskSuspend+0x140>)
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <vTaskSuspend+0x6a>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	2201      	movs	r2, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <vTaskSuspend+0x144>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4013      	ands	r3, r2
 8004d32:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <vTaskSuspend+0x144>)
 8004d34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3318      	adds	r3, #24
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff f8ec 	bl	8003f20 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	211b      	movs	r1, #27
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f003 ff45 	bl	8008bdc <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	482e      	ldr	r0, [pc, #184]	; (8004e14 <vTaskSuspend+0x148>)
 8004d5a:	f7ff f884 	bl	8003e66 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e010      	b.n	8004d86 <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	3354      	adds	r3, #84	; 0x54
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	3354      	adds	r3, #84	; 0x54
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3301      	adds	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	ddeb      	ble.n	8004d64 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004d8c:	f001 fdfa 	bl	8006984 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <vTaskSuspend+0x14c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004d98:	f001 fdc4 	bl	8006924 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004d9c:	f000 fdca 	bl	8005934 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004da0:	f001 fdf0 	bl	8006984 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004da4:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <vTaskSuspend+0x13c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d127      	bne.n	8004dfe <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <vTaskSuspend+0x14c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004db6:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <vTaskSuspend+0x150>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <vTaskSuspend+0x108>
        __asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	60fb      	str	r3, [r7, #12]
    }
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <vTaskSuspend+0x154>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004de4:	e00b      	b.n	8004dfe <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <vTaskSuspend+0x148>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <vTaskSuspend+0x158>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d103      	bne.n	8004dfa <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <vTaskSuspend+0x13c>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    }
 8004df8:	e001      	b.n	8004dfe <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8004dfa:	f000 facd 	bl	8005398 <vTaskSwitchContext>
    }
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000274 	.word	0x20000274
 8004e0c:	20000278 	.word	0x20000278
 8004e10:	20000368 	.word	0x20000368
 8004e14:	2000034c 	.word	0x2000034c
 8004e18:	2000036c 	.word	0x2000036c
 8004e1c:	20000388 	.word	0x20000388
 8004e20:	e000ed04 	.word	0xe000ed04
 8004e24:	20000360 	.word	0x20000360

08004e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8004e2e:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <vTaskStartScheduler+0xa4>)
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	2300      	movs	r3, #0
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2300      	movs	r3, #0
 8004e38:	2282      	movs	r2, #130	; 0x82
 8004e3a:	4925      	ldr	r1, [pc, #148]	; (8004ed0 <vTaskStartScheduler+0xa8>)
 8004e3c:	4825      	ldr	r0, [pc, #148]	; (8004ed4 <vTaskStartScheduler+0xac>)
 8004e3e:	f7ff fdbd 	bl	80049bc <xTaskCreate>
 8004e42:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8004e4a:	f001 f895 	bl	8005f78 <xTimerCreateTimerTask>
 8004e4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d124      	bne.n	8004ea0 <vTaskStartScheduler+0x78>
        __asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60bb      	str	r3, [r7, #8]
    }
 8004e68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <vTaskStartScheduler+0xb0>)
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004e72:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <vTaskStartScheduler+0xb4>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <vTaskStartScheduler+0xb8>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004e7e:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <vTaskStartScheduler+0xbc>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <vTaskStartScheduler+0xa4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d102      	bne.n	8004e90 <vTaskStartScheduler+0x68>
 8004e8a:	f003 fdc5 	bl	8008a18 <SEGGER_SYSVIEW_OnIdle>
 8004e8e:	e004      	b.n	8004e9a <vTaskStartScheduler+0x72>
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <vTaskStartScheduler+0xbc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f003 fe1d 	bl	8008ad4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004e9a:	f001 fc23 	bl	80066e4 <xPortStartScheduler>
 8004e9e:	e00e      	b.n	8004ebe <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d10a      	bne.n	8004ebe <vTaskStartScheduler+0x96>
        __asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	607b      	str	r3, [r7, #4]
    }
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <vTaskStartScheduler+0xc0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000384 	.word	0x20000384
 8004ed0:	08009960 	.word	0x08009960
 8004ed4:	08005805 	.word	0x08005805
 8004ed8:	20000380 	.word	0x20000380
 8004edc:	2000036c 	.word	0x2000036c
 8004ee0:	20000364 	.word	0x20000364
 8004ee4:	20000274 	.word	0x20000274
 8004ee8:	20000018 	.word	0x20000018

08004eec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <vTaskSuspendAll+0x18>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <vTaskSuspendAll+0x18>)
 8004ef8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000388 	.word	0x20000388

08004f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004f16:	4b73      	ldr	r3, [pc, #460]	; (80050e4 <xTaskResumeAll+0x1dc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <xTaskResumeAll+0x2c>
        __asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
    }
 8004f30:	bf00      	nop
 8004f32:	e7fe      	b.n	8004f32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004f34:	f001 fcf6 	bl	8006924 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004f38:	4b6a      	ldr	r3, [pc, #424]	; (80050e4 <xTaskResumeAll+0x1dc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	4a69      	ldr	r2, [pc, #420]	; (80050e4 <xTaskResumeAll+0x1dc>)
 8004f40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f42:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <xTaskResumeAll+0x1dc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 80c4 	bne.w	80050d4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f4c:	4b66      	ldr	r3, [pc, #408]	; (80050e8 <xTaskResumeAll+0x1e0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80bf 	beq.w	80050d4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f56:	e08e      	b.n	8005076 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f58:	4b64      	ldr	r3, [pc, #400]	; (80050ec <xTaskResumeAll+0x1e4>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	6a12      	ldr	r2, [r2, #32]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	69d2      	ldr	r2, [r2, #28]
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	3318      	adds	r3, #24
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d103      	bne.n	8004f8e <xTaskResumeAll+0x86>
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2200      	movs	r2, #0
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	68d2      	ldr	r2, [r2, #12]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	6892      	ldr	r2, [r2, #8]
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d103      	bne.n	8004fcc <xTaskResumeAll+0xc4>
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	615a      	str	r2, [r3, #20]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f003 fdba 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <xTaskResumeAll+0x1e8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	; (80050f0 <xTaskResumeAll+0x1e8>)
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	493e      	ldr	r1, [pc, #248]	; (80050f4 <xTaskResumeAll+0x1ec>)
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	3204      	adds	r2, #4
 8005022:	605a      	str	r2, [r3, #4]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <xTaskResumeAll+0x1ec>)
 800503a:	441a      	add	r2, r3
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	615a      	str	r2, [r3, #20]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	492b      	ldr	r1, [pc, #172]	; (80050f4 <xTaskResumeAll+0x1ec>)
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	4827      	ldr	r0, [pc, #156]	; (80050f4 <xTaskResumeAll+0x1ec>)
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4403      	add	r3, r0
 8005060:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <xTaskResumeAll+0x1f0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8005070:	4b22      	ldr	r3, [pc, #136]	; (80050fc <xTaskResumeAll+0x1f4>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <xTaskResumeAll+0x1e4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f47f af6c 	bne.w	8004f58 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005086:	f000 fc55 	bl	8005934 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <xTaskResumeAll+0x1f8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d010      	beq.n	80050b8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005096:	f000 f865 	bl	8005164 <xTaskIncrementTick>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <xTaskResumeAll+0x1f4>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f1      	bne.n	8005096 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <xTaskResumeAll+0x1f8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <xTaskResumeAll+0x1f4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80050c4:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <xTaskResumeAll+0x1fc>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80050d4:	f001 fc56 	bl	8006984 <vPortExitCritical>

    return xAlreadyYielded;
 80050d8:	69bb      	ldr	r3, [r7, #24]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000388 	.word	0x20000388
 80050e8:	20000360 	.word	0x20000360
 80050ec:	20000320 	.word	0x20000320
 80050f0:	20000368 	.word	0x20000368
 80050f4:	20000278 	.word	0x20000278
 80050f8:	20000274 	.word	0x20000274
 80050fc:	20000374 	.word	0x20000374
 8005100:	20000370 	.word	0x20000370
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <xTaskGetTickCount+0x1c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005114:	687b      	ldr	r3, [r7, #4]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000364 	.word	0x20000364

08005128 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800512e:	f001 fcdd 	bl	8006aec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005136:	4b04      	ldr	r3, [pc, #16]	; (8005148 <xTaskGetTickCountFromISR+0x20>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800513c:	683b      	ldr	r3, [r7, #0]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000364 	.word	0x20000364

0800514c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <uxTaskGetNumberOfTasks+0x14>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000360 	.word	0x20000360

08005164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800516e:	4b7f      	ldr	r3, [pc, #508]	; (800536c <xTaskIncrementTick+0x208>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80f0 	bne.w	8005358 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005178:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <xTaskIncrementTick+0x20c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005180:	4a7b      	ldr	r2, [pc, #492]	; (8005370 <xTaskIncrementTick+0x20c>)
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d120      	bne.n	80051ce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800518c:	4b79      	ldr	r3, [pc, #484]	; (8005374 <xTaskIncrementTick+0x210>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <xTaskIncrementTick+0x48>
        __asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	607b      	str	r3, [r7, #4]
    }
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <xTaskIncrementTick+0x46>
 80051ac:	4b71      	ldr	r3, [pc, #452]	; (8005374 <xTaskIncrementTick+0x210>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	4b71      	ldr	r3, [pc, #452]	; (8005378 <xTaskIncrementTick+0x214>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a6f      	ldr	r2, [pc, #444]	; (8005374 <xTaskIncrementTick+0x210>)
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4a6f      	ldr	r2, [pc, #444]	; (8005378 <xTaskIncrementTick+0x214>)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b6e      	ldr	r3, [pc, #440]	; (800537c <xTaskIncrementTick+0x218>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	4a6d      	ldr	r2, [pc, #436]	; (800537c <xTaskIncrementTick+0x218>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	f000 fbb3 	bl	8005934 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80051ce:	4b6c      	ldr	r3, [pc, #432]	; (8005380 <xTaskIncrementTick+0x21c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a3a      	ldr	r2, [r7, #32]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	f0c0 80aa 	bcc.w	800532e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051da:	4b66      	ldr	r3, [pc, #408]	; (8005374 <xTaskIncrementTick+0x210>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e4:	4b66      	ldr	r3, [pc, #408]	; (8005380 <xTaskIncrementTick+0x21c>)
 80051e6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ea:	601a      	str	r2, [r3, #0]
                    break;
 80051ec:	e09f      	b.n	800532e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ee:	4b61      	ldr	r3, [pc, #388]	; (8005374 <xTaskIncrementTick+0x210>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80051fe:	6a3a      	ldr	r2, [r7, #32]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	429a      	cmp	r2, r3
 8005204:	d203      	bcs.n	800520e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005206:	4a5e      	ldr	r2, [pc, #376]	; (8005380 <xTaskIncrementTick+0x21c>)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800520c:	e08f      	b.n	800532e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	68d2      	ldr	r2, [r2, #12]
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	3304      	adds	r3, #4
 8005230:	429a      	cmp	r2, r3
 8005232:	d103      	bne.n	800523c <xTaskIncrementTick+0xd8>
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2200      	movs	r2, #0
 8005240:	615a      	str	r2, [r3, #20]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01e      	beq.n	8005292 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	6a12      	ldr	r2, [r2, #32]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	69d2      	ldr	r2, [r2, #28]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	3318      	adds	r3, #24
 8005276:	429a      	cmp	r2, r3
 8005278:	d103      	bne.n	8005282 <xTaskIncrementTick+0x11e>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2200      	movs	r2, #0
 8005286:	629a      	str	r2, [r3, #40]	; 0x28
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	4618      	mov	r0, r3
 8005296:	f003 fc5f 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	2201      	movs	r2, #1
 80052a0:	409a      	lsls	r2, r3
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <xTaskIncrementTick+0x220>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	4a36      	ldr	r2, [pc, #216]	; (8005384 <xTaskIncrementTick+0x220>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4935      	ldr	r1, [pc, #212]	; (8005388 <xTaskIncrementTick+0x224>)
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3304      	adds	r3, #4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	3204      	adds	r2, #4
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1d1a      	adds	r2, r3, #4
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4a26      	ldr	r2, [pc, #152]	; (8005388 <xTaskIncrementTick+0x224>)
 80052f0:	441a      	add	r2, r3
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	615a      	str	r2, [r3, #20]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fa:	4923      	ldr	r1, [pc, #140]	; (8005388 <xTaskIncrementTick+0x224>)
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1c59      	adds	r1, r3, #1
 800530a:	481f      	ldr	r0, [pc, #124]	; (8005388 <xTaskIncrementTick+0x224>)
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4403      	add	r3, r0
 8005316:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <xTaskIncrementTick+0x228>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	429a      	cmp	r2, r3
 8005324:	f67f af59 	bls.w	80051da <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532c:	e755      	b.n	80051da <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <xTaskIncrementTick+0x228>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4914      	ldr	r1, [pc, #80]	; (8005388 <xTaskIncrementTick+0x224>)
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d901      	bls.n	800534a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <xTaskIncrementTick+0x22c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	e004      	b.n	8005362 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <xTaskIncrementTick+0x230>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <xTaskIncrementTick+0x230>)
 8005360:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000388 	.word	0x20000388
 8005370:	20000364 	.word	0x20000364
 8005374:	20000318 	.word	0x20000318
 8005378:	2000031c 	.word	0x2000031c
 800537c:	20000378 	.word	0x20000378
 8005380:	20000380 	.word	0x20000380
 8005384:	20000368 	.word	0x20000368
 8005388:	20000278 	.word	0x20000278
 800538c:	20000274 	.word	0x20000274
 8005390:	20000374 	.word	0x20000374
 8005394:	20000370 	.word	0x20000370

08005398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539e:	4b2d      	ldr	r3, [pc, #180]	; (8005454 <vTaskSwitchContext+0xbc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80053a6:	4b2c      	ldr	r3, [pc, #176]	; (8005458 <vTaskSwitchContext+0xc0>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80053ac:	e04d      	b.n	800544a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80053ae:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <vTaskSwitchContext+0xc0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	4b29      	ldr	r3, [pc, #164]	; (800545c <vTaskSwitchContext+0xc4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	f1c3 031f 	rsb	r3, r3, #31
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	4925      	ldr	r1, [pc, #148]	; (8005460 <vTaskSwitchContext+0xc8>)
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
    }
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <vTaskSwitchContext+0x5a>
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <vTaskSwitchContext+0xc8>)
 8005400:	4413      	add	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3308      	adds	r3, #8
 8005416:	429a      	cmp	r2, r3
 8005418:	d104      	bne.n	8005424 <vTaskSwitchContext+0x8c>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a0e      	ldr	r2, [pc, #56]	; (8005464 <vTaskSwitchContext+0xcc>)
 800542c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <vTaskSwitchContext+0xcc>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <vTaskSwitchContext+0xd0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d102      	bne.n	8005440 <vTaskSwitchContext+0xa8>
 800543a:	f003 faed 	bl	8008a18 <SEGGER_SYSVIEW_OnIdle>
}
 800543e:	e004      	b.n	800544a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <vTaskSwitchContext+0xcc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4618      	mov	r0, r3
 8005446:	f003 fb45 	bl	8008ad4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000388 	.word	0x20000388
 8005458:	20000374 	.word	0x20000374
 800545c:	20000368 	.word	0x20000368
 8005460:	20000278 	.word	0x20000278
 8005464:	20000274 	.word	0x20000274
 8005468:	20000384 	.word	0x20000384

0800546c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	60fb      	str	r3, [r7, #12]
    }
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005492:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <vTaskPlaceOnEventList+0x44>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3318      	adds	r3, #24
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fe fd07 	bl	8003eae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054a0:	2101      	movs	r1, #1
 80054a2:	6838      	ldr	r0, [r7, #0]
 80054a4:	f000 fce8 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000274 	.word	0x20000274

080054b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	613b      	str	r3, [r7, #16]
    }
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <vTaskPlaceOnEventListRestricted+0x8c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	61da      	str	r2, [r3, #28]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <vTaskPlaceOnEventListRestricted+0x8c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	621a      	str	r2, [r3, #32]
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <vTaskPlaceOnEventListRestricted+0x8c>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	3218      	adds	r2, #24
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f103 0218 	add.w	r2, r3, #24
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <vTaskPlaceOnEventListRestricted+0x8c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
 8005528:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800552a:	2024      	movs	r0, #36	; 0x24
 800552c:	f002 fe64 	bl	80081f8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	68b8      	ldr	r0, [r7, #8]
 8005534:	f000 fca0 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
    }
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000274 	.word	0x20000274

08005544 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60fb      	str	r3, [r7, #12]
    }
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	61fb      	str	r3, [r7, #28]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	6a3a      	ldr	r2, [r7, #32]
 800557c:	6a12      	ldr	r2, [r2, #32]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	69d2      	ldr	r2, [r2, #28]
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	3318      	adds	r3, #24
 8005592:	429a      	cmp	r2, r3
 8005594:	d103      	bne.n	800559e <xTaskRemoveFromEventList+0x5a>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1e5a      	subs	r2, r3, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <xTaskRemoveFromEventList+0x198>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d162      	bne.n	800567c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	68d2      	ldr	r2, [r2, #12]
 80055c4:	609a      	str	r2, [r3, #8]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	6892      	ldr	r2, [r2, #8]
 80055ce:	605a      	str	r2, [r3, #4]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	3304      	adds	r3, #4
 80055d8:	429a      	cmp	r2, r3
 80055da:	d103      	bne.n	80055e4 <xTaskRemoveFromEventList+0xa0>
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2200      	movs	r2, #0
 80055e8:	615a      	str	r2, [r3, #20]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	1e5a      	subs	r2, r3, #1
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f003 faae 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	2201      	movs	r2, #1
 8005602:	409a      	lsls	r2, r3
 8005604:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <xTaskRemoveFromEventList+0x19c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4313      	orrs	r3, r2
 800560a:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <xTaskRemoveFromEventList+0x19c>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4934      	ldr	r1, [pc, #208]	; (80056e4 <xTaskRemoveFromEventList+0x1a0>)
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	3304      	adds	r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	60da      	str	r2, [r3, #12]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	3204      	adds	r2, #4
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a24      	ldr	r2, [pc, #144]	; (80056e4 <xTaskRemoveFromEventList+0x1a0>)
 8005652:	441a      	add	r2, r3
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	615a      	str	r2, [r3, #20]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4921      	ldr	r1, [pc, #132]	; (80056e4 <xTaskRemoveFromEventList+0x1a0>)
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	481d      	ldr	r0, [pc, #116]	; (80056e4 <xTaskRemoveFromEventList+0x1a0>)
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4403      	add	r3, r0
 8005678:	6019      	str	r1, [r3, #0]
 800567a:	e01b      	b.n	80056b4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <xTaskRemoveFromEventList+0x1a4>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	61da      	str	r2, [r3, #28]
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	6a3a      	ldr	r2, [r7, #32]
 8005696:	3218      	adds	r2, #24
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	f103 0218 	add.w	r2, r3, #24
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <xTaskRemoveFromEventList+0x1a4>)
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <xTaskRemoveFromEventList+0x1a4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <xTaskRemoveFromEventList+0x1a4>)
 80056b2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <xTaskRemoveFromEventList+0x1a8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	429a      	cmp	r2, r3
 80056c0:	d905      	bls.n	80056ce <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <xTaskRemoveFromEventList+0x1ac>)
 80056c8:	2201      	movs	r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e001      	b.n	80056d2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000388 	.word	0x20000388
 80056e0:	20000368 	.word	0x20000368
 80056e4:	20000278 	.word	0x20000278
 80056e8:	20000320 	.word	0x20000320
 80056ec:	20000274 	.word	0x20000274
 80056f0:	20000374 	.word	0x20000374

080056f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <vTaskInternalSetTimeOutState+0x24>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <vTaskInternalSetTimeOutState+0x28>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000378 	.word	0x20000378
 800571c:	20000364 	.word	0x20000364

08005720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
    }
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
    }
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005762:	f001 f8df 	bl	8006924 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005766:	4b1f      	ldr	r3, [pc, #124]	; (80057e4 <xTaskCheckForTimeOut+0xc4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e026      	b.n	80057d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <xTaskCheckForTimeOut+0xc8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d00a      	beq.n	80057a8 <xTaskCheckForTimeOut+0x88>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	429a      	cmp	r2, r3
 800579a:	d305      	bcc.n	80057a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e015      	b.n	80057d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d20b      	bcs.n	80057ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad2      	subs	r2, r2, r3
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ff98 	bl	80056f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e004      	b.n	80057d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80057d4:	f001 f8d6 	bl	8006984 <vPortExitCritical>

    return xReturn;
 80057d8:	69fb      	ldr	r3, [r7, #28]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000364 	.word	0x20000364
 80057e8:	20000378 	.word	0x20000378

080057ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80057f0:	4b03      	ldr	r3, [pc, #12]	; (8005800 <vTaskMissedYield+0x14>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	20000374 	.word	0x20000374

08005804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800580c:	f000 f854 	bl	80058b8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <prvIdleTask+0x2c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d907      	bls.n	8005828 <prvIdleTask+0x24>
            {
                taskYIELD();
 8005818:	4b06      	ldr	r3, [pc, #24]	; (8005834 <prvIdleTask+0x30>)
 800581a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8005828:	f7fb fd30 	bl	800128c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 800582c:	e7ee      	b.n	800580c <prvIdleTask+0x8>
 800582e:	bf00      	nop
 8005830:	20000278 	.word	0x20000278
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	e00c      	b.n	800585e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <prvInitialiseTaskLists+0x60>)
 8005850:	4413      	add	r3, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe fada 	bl	8003e0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3301      	adds	r3, #1
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b05      	cmp	r3, #5
 8005862:	d9ef      	bls.n	8005844 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005864:	480d      	ldr	r0, [pc, #52]	; (800589c <prvInitialiseTaskLists+0x64>)
 8005866:	f7fe fad1 	bl	8003e0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800586a:	480d      	ldr	r0, [pc, #52]	; (80058a0 <prvInitialiseTaskLists+0x68>)
 800586c:	f7fe face 	bl	8003e0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005870:	480c      	ldr	r0, [pc, #48]	; (80058a4 <prvInitialiseTaskLists+0x6c>)
 8005872:	f7fe facb 	bl	8003e0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005876:	480c      	ldr	r0, [pc, #48]	; (80058a8 <prvInitialiseTaskLists+0x70>)
 8005878:	f7fe fac8 	bl	8003e0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800587c:	480b      	ldr	r0, [pc, #44]	; (80058ac <prvInitialiseTaskLists+0x74>)
 800587e:	f7fe fac5 	bl	8003e0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <prvInitialiseTaskLists+0x78>)
 8005884:	4a05      	ldr	r2, [pc, #20]	; (800589c <prvInitialiseTaskLists+0x64>)
 8005886:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <prvInitialiseTaskLists+0x7c>)
 800588a:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <prvInitialiseTaskLists+0x68>)
 800588c:	601a      	str	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000278 	.word	0x20000278
 800589c:	200002f0 	.word	0x200002f0
 80058a0:	20000304 	.word	0x20000304
 80058a4:	20000320 	.word	0x20000320
 80058a8:	20000334 	.word	0x20000334
 80058ac:	2000034c 	.word	0x2000034c
 80058b0:	20000318 	.word	0x20000318
 80058b4:	2000031c 	.word	0x2000031c

080058b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058be:	e019      	b.n	80058f4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80058c0:	f001 f830 	bl	8006924 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <prvCheckTasksWaitingTermination+0x50>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fb25 	bl	8003f20 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <prvCheckTasksWaitingTermination+0x54>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a0b      	ldr	r2, [pc, #44]	; (800590c <prvCheckTasksWaitingTermination+0x54>)
 80058de:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058e8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80058ea:	f001 f84b 	bl	8006984 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f810 	bl	8005914 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <prvCheckTasksWaitingTermination+0x58>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e1      	bne.n	80058c0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000334 	.word	0x20000334
 800590c:	20000360 	.word	0x20000360
 8005910:	20000348 	.word	0x20000348

08005914 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f9dd 	bl	8006ce0 <vPortFree>
            vPortFree( pxTCB );
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f9da 	bl	8006ce0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005938:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <prvResetNextTaskUnblockTime+0x30>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <prvResetNextTaskUnblockTime+0x34>)
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800594a:	e005      	b.n	8005958 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <prvResetNextTaskUnblockTime+0x30>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a04      	ldr	r2, [pc, #16]	; (8005968 <prvResetNextTaskUnblockTime+0x34>)
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000318 	.word	0x20000318
 8005968:	20000380 	.word	0x20000380

0800596c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005972:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <xTaskGetSchedulerState+0x34>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800597a:	2301      	movs	r3, #1
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	e008      	b.n	8005992 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <xTaskGetSchedulerState+0x38>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005988:	2302      	movs	r3, #2
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e001      	b.n	8005992 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005992:	687b      	ldr	r3, [r7, #4]
    }
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	2000036c 	.word	0x2000036c
 80059a4:	20000388 	.word	0x20000388

080059a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8095 	beq.w	8005aea <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80059c0:	4b4c      	ldr	r3, [pc, #304]	; (8005af4 <xTaskPriorityDisinherit+0x14c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d00a      	beq.n	80059e0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	613b      	str	r3, [r7, #16]
    }
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
    }
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d06a      	beq.n	8005aea <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d166      	bne.n	8005aea <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fa7d 	bl	8003f20 <uxListRemove>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	43da      	mvns	r2, r3
 8005a38:	4b2f      	ldr	r3, [pc, #188]	; (8005af8 <xTaskPriorityDisinherit+0x150>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	4a2e      	ldr	r2, [pc, #184]	; (8005af8 <xTaskPriorityDisinherit+0x150>)
 8005a40:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4619      	mov	r1, r3
 8005a46:	204a      	movs	r0, #74	; 0x4a
 8005a48:	f002 fbf4 	bl	8008234 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f1c3 0206 	rsb	r2, r3, #6
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f003 f878 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <xTaskPriorityDisinherit+0x150>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <xTaskPriorityDisinherit+0x150>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	491f      	ldr	r1, [pc, #124]	; (8005afc <xTaskPriorityDisinherit+0x154>)
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	440b      	add	r3, r1
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	609a      	str	r2, [r3, #8]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	60da      	str	r2, [r3, #12]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	3204      	adds	r2, #4
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <xTaskPriorityDisinherit+0x154>)
 8005abe:	441a      	add	r2, r3
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	615a      	str	r2, [r3, #20]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <xTaskPriorityDisinherit+0x154>)
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	1c59      	adds	r1, r3, #1
 8005ad8:	4808      	ldr	r0, [pc, #32]	; (8005afc <xTaskPriorityDisinherit+0x154>)
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4403      	add	r3, r0
 8005ae4:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005aea:	69fb      	ldr	r3, [r7, #28]
    }
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000274 	.word	0x20000274
 8005af8:	20000368 	.word	0x20000368
 8005afc:	20000278 	.word	0x20000278

08005b00 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	613b      	str	r3, [r7, #16]
    }
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005b2a:	f000 fefb 	bl	8006924 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005b2e:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4413      	add	r3, r2
 8005b36:	3354      	adds	r3, #84	; 0x54
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d022      	beq.n	8005b86 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005b40:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	3214      	adds	r2, #20
 8005b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	43d2      	mvns	r2, r2
 8005b50:	4011      	ands	r1, r2
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	3214      	adds	r2, #20
 8005b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005b5a:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4413      	add	r3, r2
 8005b62:	3354      	adds	r3, #84	; 0x54
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b6e:	2101      	movs	r1, #1
 8005b70:	6a38      	ldr	r0, [r7, #32]
 8005b72:	f000 f981 	bl	8005e78 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005b76:	4b25      	ldr	r3, [pc, #148]	; (8005c0c <xTaskGenericNotifyWait+0x10c>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005b86:	f000 fefd 	bl	8006984 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005b8a:	f000 fecb 	bl	8006924 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	2040      	movs	r0, #64	; 0x40
 8005b9c:	f002 fbe0 	bl	8008360 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	3214      	adds	r2, #20
 8005bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3354      	adds	r3, #84	; 0x54
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d002      	beq.n	8005bce <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e00e      	b.n	8005bec <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	3214      	adds	r2, #20
 8005bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	43d2      	mvns	r2, r2
 8005bde:	4011      	ands	r1, r2
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	3214      	adds	r2, #20
 8005be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <xTaskGenericNotifyWait+0x108>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3354      	adds	r3, #84	; 0x54
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005bfa:	f000 fec3 	bl	8006984 <vPortExitCritical>

        return xReturn;
 8005bfe:	697b      	ldr	r3, [r7, #20]
    }
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000274 	.word	0x20000274
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b090      	sub	sp, #64	; 0x40
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <xTaskGenericNotify+0x2e>
        __asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	623b      	str	r3, [r7, #32]
    }
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xTaskGenericNotify+0x4a>
        __asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61fb      	str	r3, [r7, #28]
    }
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8005c5e:	f000 fe61 	bl	8006924 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	3214      	adds	r2, #20
 8005c6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c74:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3354      	adds	r3, #84	; 0x54
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	3354      	adds	r3, #84	; 0x54
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d83b      	bhi.n	8005d0e <xTaskGenericNotify+0xfe>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <xTaskGenericNotify+0x8c>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005d2d 	.word	0x08005d2d
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005ce5 	.word	0x08005ce5
 8005cac:	08005cf3 	.word	0x08005cf3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	3214      	adds	r2, #20
 8005cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	ea42 0103 	orr.w	r1, r2, r3
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	3214      	adds	r2, #20
 8005cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005cca:	e032      	b.n	8005d32 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	3214      	adds	r2, #20
 8005cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd6:	1c59      	adds	r1, r3, #1
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	3214      	adds	r2, #20
 8005cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ce2:	e026      	b.n	8005d32 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	3214      	adds	r2, #20
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005cf0:	e01f      	b.n	8005d32 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d006      	beq.n	8005d08 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	3214      	adds	r2, #20
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005d06:	e014      	b.n	8005d32 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8005d0c:	e011      	b.n	8005d32 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005d0e:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <xTaskGenericNotify+0x254>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <xTaskGenericNotify+0x120>
        __asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61bb      	str	r3, [r7, #24]
    }
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xTaskGenericNotify+0x11a>
                    break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <xTaskGenericNotify+0x122>

                    break;
 8005d30:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	4618      	mov	r0, r3
 8005d36:	f002 ffb1 	bl	8008c9c <SEGGER_SYSVIEW_ShrinkId>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4613      	mov	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	203e      	movs	r0, #62	; 0x3e
 8005d48:	f002 fb0a 	bl	8008360 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d17f      	bne.n	8005e54 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d60:	68d2      	ldr	r2, [r2, #12]
 8005d62:	609a      	str	r2, [r3, #8]
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	6892      	ldr	r2, [r2, #8]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	3304      	adds	r3, #4
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d103      	bne.n	8005d82 <xTaskGenericNotify+0x172>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d84:	2200      	movs	r2, #0
 8005d86:	615a      	str	r2, [r3, #20]
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	4618      	mov	r0, r3
 8005d96:	f002 fedf 	bl	8008b58 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	2201      	movs	r2, #1
 8005da0:	409a      	lsls	r2, r3
 8005da2:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <xTaskGenericNotify+0x258>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <xTaskGenericNotify+0x258>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	492e      	ldr	r1, [pc, #184]	; (8005e6c <xTaskGenericNotify+0x25c>)
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd6:	3204      	adds	r2, #4
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	1d1a      	adds	r2, r3, #4
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4a1f      	ldr	r2, [pc, #124]	; (8005e6c <xTaskGenericNotify+0x25c>)
 8005df0:	441a      	add	r2, r3
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	615a      	str	r2, [r3, #20]
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	491c      	ldr	r1, [pc, #112]	; (8005e6c <xTaskGenericNotify+0x25c>)
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	4818      	ldr	r0, [pc, #96]	; (8005e6c <xTaskGenericNotify+0x25c>)
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4403      	add	r3, r0
 8005e16:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <xTaskGenericNotify+0x226>
        __asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	617b      	str	r3, [r7, #20]
    }
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <xTaskGenericNotify+0x260>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d907      	bls.n	8005e54 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <xTaskGenericNotify+0x264>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005e54:	f000 fd96 	bl	8006984 <vPortExitCritical>

        return xReturn;
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3738      	adds	r7, #56	; 0x38
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000364 	.word	0x20000364
 8005e68:	20000368 	.word	0x20000368
 8005e6c:	20000278 	.word	0x20000278
 8005e70:	20000274 	.word	0x20000274
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e82:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e88:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe f846 	bl	8003f20 <uxListRemove>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4013      	ands	r3, r2
 8005eae:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xec>)
 8005eb0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d124      	bne.n	8005f04 <prvAddCurrentTaskToDelayedList+0x8c>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d021      	beq.n	8005f04 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec0:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	609a      	str	r2, [r3, #8]
 8005ece:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	6892      	ldr	r2, [r2, #8]
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	3204      	adds	r2, #4
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	609a      	str	r2, [r3, #8]
 8005eee:	4b1c      	ldr	r3, [pc, #112]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ef4:	615a      	str	r2, [r3, #20]
 8005ef6:	4b1c      	ldr	r3, [pc, #112]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005f02:	e026      	b.n	8005f52 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4413      	add	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f0c:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d209      	bcs.n	8005f30 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xf4>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3304      	adds	r3, #4
 8005f26:	4619      	mov	r1, r3
 8005f28:	4610      	mov	r0, r2
 8005f2a:	f7fd ffc0 	bl	8003eae <vListInsert>
}
 8005f2e:	e010      	b.n	8005f52 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fd ffb6 	bl	8003eae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d202      	bcs.n	8005f52 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8005f4c:	4a09      	ldr	r2, [pc, #36]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6013      	str	r3, [r2, #0]
}
 8005f52:	bf00      	nop
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000364 	.word	0x20000364
 8005f60:	20000274 	.word	0x20000274
 8005f64:	20000368 	.word	0x20000368
 8005f68:	2000034c 	.word	0x2000034c
 8005f6c:	2000031c 	.word	0x2000031c
 8005f70:	20000318 	.word	0x20000318
 8005f74:	20000380 	.word	0x20000380

08005f78 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005f82:	f000 faef 	bl	8006564 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <xTimerCreateTimerTask+0x54>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <xTimerCreateTimerTask+0x58>)
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	2302      	movs	r3, #2
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f9c:	490d      	ldr	r1, [pc, #52]	; (8005fd4 <xTimerCreateTimerTask+0x5c>)
 8005f9e:	480e      	ldr	r0, [pc, #56]	; (8005fd8 <xTimerCreateTimerTask+0x60>)
 8005fa0:	f7fe fd0c 	bl	80049bc <xTaskCreate>
 8005fa4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	603b      	str	r3, [r7, #0]
    }
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005fc2:	687b      	ldr	r3, [r7, #4]
    }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200003bc 	.word	0x200003bc
 8005fd0:	200003c0 	.word	0x200003c0
 8005fd4:	08009968 	.word	0x08009968
 8005fd8:	080061d1 	.word	0x080061d1

08005fdc <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005fea:	202c      	movs	r0, #44	; 0x2c
 8005fec:	f000 fdbe 	bl	8006b6c <pvPortMalloc>
 8005ff0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f805 	bl	800601e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006014:	697b      	ldr	r3, [r7, #20]
        }
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	617b      	str	r3, [r7, #20]
    }
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006048:	f000 fa8c 	bl	8006564 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7fd feef 	bl	8003e4c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607a:	f043 0304 	orr.w	r3, r3, #4
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8006086:	bf00      	nop
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800609e:	2300      	movs	r3, #0
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xTimerGenericCommand+0x2e>
        __asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
    }
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <xTimerGenericCommand+0x98>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02a      	beq.n	800611c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	dc18      	bgt.n	800610a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060d8:	f7ff fc48 	bl	800596c <xTaskGetSchedulerState>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d109      	bne.n	80060f6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060e2:	4b11      	ldr	r3, [pc, #68]	; (8006128 <xTimerGenericCommand+0x98>)
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	f107 0114 	add.w	r1, r7, #20
 80060ea:	2300      	movs	r3, #0
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	f7fe f843 	bl	8004178 <xQueueGenericSend>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24
 80060f4:	e012      	b.n	800611c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <xTimerGenericCommand+0x98>)
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f107 0114 	add.w	r1, r7, #20
 80060fe:	2300      	movs	r3, #0
 8006100:	2200      	movs	r2, #0
 8006102:	f7fe f839 	bl	8004178 <xQueueGenericSend>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24
 8006108:	e008      	b.n	800611c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <xTimerGenericCommand+0x98>)
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f107 0114 	add.w	r1, r7, #20
 8006112:	2300      	movs	r3, #0
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	f7fe f92d 	bl	8004374 <xQueueGenericSendFromISR>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800611e:	4618      	mov	r0, r3
 8006120:	3728      	adds	r7, #40	; 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200003bc 	.word	0x200003bc

0800612c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006138:	e008      	b.n	800614c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4413      	add	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	18d1      	adds	r1, r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f8dd 	bl	8006318 <prvInsertTimerInActiveList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ea      	bne.n	800613a <prvReloadTimer+0xe>
        }
    }
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <prvProcessExpiredTimer+0x5c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd fec9 	bl	8003f20 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	d005      	beq.n	80061a8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ffc3 	bl	800612c <prvReloadTimer>
 80061a6:	e008      	b.n	80061ba <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	4798      	blx	r3
    }
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200003b4 	.word	0x200003b4

080061d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061d8:	f107 0308 	add.w	r3, r7, #8
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 f857 	bl	8006290 <prvGetNextExpireTime>
 80061e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4619      	mov	r1, r3
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f803 	bl	80061f4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80061ee:	f000 f8d5 	bl	800639c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061f2:	e7f1      	b.n	80061d8 <prvTimerTask+0x8>

080061f4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80061fe:	f7fe fe75 	bl	8004eec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f866 	bl	80062d8 <prvSampleTimeNow>
 800620c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d130      	bne.n	8006276 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <prvProcessTimerOrBlockTask+0x3c>
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	429a      	cmp	r2, r3
 8006220:	d806      	bhi.n	8006230 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006222:	f7fe fe71 	bl	8004f08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ffa1 	bl	8006170 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800622e:	e024      	b.n	800627a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d008      	beq.n	8006248 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <prvProcessTimerOrBlockTask+0x90>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <prvProcessTimerOrBlockTask+0x50>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <prvProcessTimerOrBlockTask+0x52>
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <prvProcessTimerOrBlockTask+0x94>)
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	4619      	mov	r1, r3
 8006256:	f7fe fb7d 	bl	8004954 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800625a:	f7fe fe55 	bl	8004f08 <xTaskResumeAll>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006264:	4b09      	ldr	r3, [pc, #36]	; (800628c <prvProcessTimerOrBlockTask+0x98>)
 8006266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	f3bf 8f6f 	isb	sy
    }
 8006274:	e001      	b.n	800627a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006276:	f7fe fe47 	bl	8004f08 <xTaskResumeAll>
    }
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200003b8 	.word	0x200003b8
 8006288:	200003bc 	.word	0x200003bc
 800628c:	e000ed04 	.word	0xe000ed04

08006290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <prvGetNextExpireTime+0x44>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <prvGetNextExpireTime+0x16>
 80062a2:	2201      	movs	r2, #1
 80062a4:	e000      	b.n	80062a8 <prvGetNextExpireTime+0x18>
 80062a6:	2200      	movs	r2, #0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <prvGetNextExpireTime+0x44>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e001      	b.n	80062c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80062c4:	68fb      	ldr	r3, [r7, #12]
    }
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	200003b4 	.word	0x200003b4

080062d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80062e0:	f7fe ff12 	bl	8005108 <xTaskGetTickCount>
 80062e4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <prvSampleTimeNow+0x3c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d205      	bcs.n	80062fc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80062f0:	f000 f912 	bl	8006518 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	e002      	b.n	8006302 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <prvSampleTimeNow+0x3c>)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006308:	68fb      	ldr	r3, [r7, #12]
    }
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200003c4 	.word	0x200003c4

08006318 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d812      	bhi.n	8006364 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e01b      	b.n	800638a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <prvInsertTimerInActiveList+0x7c>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f7fd fda6 	bl	8003eae <vListInsert>
 8006362:	e012      	b.n	800638a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d206      	bcs.n	800637a <prvInsertTimerInActiveList+0x62>
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d302      	bcc.n	800637a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e007      	b.n	800638a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <prvInsertTimerInActiveList+0x80>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7fd fd92 	bl	8003eae <vListInsert>
            }
        }

        return xProcessTimerNow;
 800638a:	697b      	ldr	r3, [r7, #20]
    }
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200003b8 	.word	0x200003b8
 8006398:	200003b4 	.word	0x200003b4

0800639c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063a2:	e0a6      	b.n	80064f2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f2c0 80a3 	blt.w	80064f2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fd fdaf 	bl	8003f20 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff ff87 	bl	80062d8 <prvSampleTimeNow>
 80063ca:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	f200 808d 	bhi.w	80064f0 <prvProcessReceivedCommands+0x154>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <prvProcessReceivedCommands+0x40>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006401 	.word	0x08006401
 80063e4:	08006469 	.word	0x08006469
 80063e8:	0800647d 	.word	0x0800647d
 80063ec:	080064c7 	.word	0x080064c7
 80063f0:	08006401 	.word	0x08006401
 80063f4:	08006401 	.word	0x08006401
 80063f8:	08006469 	.word	0x08006469
 80063fc:	0800647d 	.word	0x0800647d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	b2da      	uxtb	r2, r3
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	18d1      	adds	r1, r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	69f8      	ldr	r0, [r7, #28]
 8006420:	f7ff ff7a 	bl	8006318 <prvInsertTimerInActiveList>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d063      	beq.n	80064f2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	4413      	add	r3, r2
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4619      	mov	r1, r3
 8006444:	69f8      	ldr	r0, [r7, #28]
 8006446:	f7ff fe71 	bl	800612c <prvReloadTimer>
 800644a:	e008      	b.n	800645e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	69f8      	ldr	r0, [r7, #28]
 8006464:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006466:	e044      	b.n	80064f2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800647a:	e03a      	b.n	80064f2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	617b      	str	r3, [r7, #20]
    }
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	69f8      	ldr	r0, [r7, #28]
 80064c0:	f7ff ff2a 	bl	8006318 <prvInsertTimerInActiveList>
                        break;
 80064c4:	e015      	b.n	80064f2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80064d4:	69f8      	ldr	r0, [r7, #28]
 80064d6:	f000 fc03 	bl	8006ce0 <vPortFree>
 80064da:	e00a      	b.n	80064f2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80064ee:	e000      	b.n	80064f2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80064f0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <prvProcessReceivedCommands+0x178>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f107 0108 	add.w	r1, r7, #8
 80064fa:	2200      	movs	r2, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd ffeb 	bl	80044d8 <xQueueReceive>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	f47f af4d 	bne.w	80063a4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200003bc 	.word	0x200003bc

08006518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800651e:	e009      	b.n	8006534 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006520:	4b0e      	ldr	r3, [pc, #56]	; (800655c <prvSwitchTimerLists+0x44>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800652a:	f04f 31ff 	mov.w	r1, #4294967295
 800652e:	6838      	ldr	r0, [r7, #0]
 8006530:	f7ff fe1e 	bl	8006170 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006534:	4b09      	ldr	r3, [pc, #36]	; (800655c <prvSwitchTimerLists+0x44>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800653e:	4b07      	ldr	r3, [pc, #28]	; (800655c <prvSwitchTimerLists+0x44>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <prvSwitchTimerLists+0x48>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a04      	ldr	r2, [pc, #16]	; (800655c <prvSwitchTimerLists+0x44>)
 800654a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800654c:	4a04      	ldr	r2, [pc, #16]	; (8006560 <prvSwitchTimerLists+0x48>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6013      	str	r3, [r2, #0]
    }
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200003b4 	.word	0x200003b4
 8006560:	200003b8 	.word	0x200003b8

08006564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006568:	f000 f9dc 	bl	8006924 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <prvCheckForValidListAndQueue+0x54>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11d      	bne.n	80065b0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006574:	4811      	ldr	r0, [pc, #68]	; (80065bc <prvCheckForValidListAndQueue+0x58>)
 8006576:	f7fd fc49 	bl	8003e0c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800657a:	4811      	ldr	r0, [pc, #68]	; (80065c0 <prvCheckForValidListAndQueue+0x5c>)
 800657c:	f7fd fc46 	bl	8003e0c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006580:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <prvCheckForValidListAndQueue+0x60>)
 8006582:	4a0e      	ldr	r2, [pc, #56]	; (80065bc <prvCheckForValidListAndQueue+0x58>)
 8006584:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006586:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <prvCheckForValidListAndQueue+0x64>)
 8006588:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <prvCheckForValidListAndQueue+0x5c>)
 800658a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800658c:	2200      	movs	r2, #0
 800658e:	210c      	movs	r1, #12
 8006590:	200a      	movs	r0, #10
 8006592:	f7fd fd7f 	bl	8004094 <xQueueGenericCreate>
 8006596:	4603      	mov	r3, r0
 8006598:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <prvCheckForValidListAndQueue+0x54>)
 800659a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvCheckForValidListAndQueue+0x54>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065a4:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <prvCheckForValidListAndQueue+0x54>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4908      	ldr	r1, [pc, #32]	; (80065cc <prvCheckForValidListAndQueue+0x68>)
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f984 	bl	80048b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80065b0:	f000 f9e8 	bl	8006984 <vPortExitCritical>
    }
 80065b4:	bf00      	nop
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200003bc 	.word	0x200003bc
 80065bc:	2000038c 	.word	0x2000038c
 80065c0:	200003a0 	.word	0x200003a0
 80065c4:	200003b4 	.word	0x200003b4
 80065c8:	200003b8 	.word	0x200003b8
 80065cc:	08009970 	.word	0x08009970

080065d0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3b04      	subs	r3, #4
 80065e0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b04      	subs	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3b04      	subs	r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006600:	4a0c      	ldr	r2, [pc, #48]	; (8006634 <pxPortInitialiseStack+0x64>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3b14      	subs	r3, #20
 800660a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3b04      	subs	r3, #4
 8006616:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f06f 0202 	mvn.w	r2, #2
 800661e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b20      	subs	r3, #32
 8006624:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006626:	68fb      	ldr	r3, [r7, #12]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	08006639 	.word	0x08006639

08006638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <prvTaskExitError+0x54>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d00a      	beq.n	8006662 <prvTaskExitError+0x2a>
        __asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60fb      	str	r3, [r7, #12]
    }
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <prvTaskExitError+0x28>
        __asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
    }
 8006674:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006676:	bf00      	nop
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0fc      	beq.n	8006678 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	2000001c 	.word	0x2000001c

08006690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <pxCurrentTCBConst2>)
 8006692:	6819      	ldr	r1, [r3, #0]
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669a:	f380 8809 	msr	PSP, r0
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8811 	msr	BASEPRI, r0
 80066aa:	4770      	bx	lr
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst2>:
 80066b0:	20000274 	.word	0x20000274
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop

080066b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80066b8:	4808      	ldr	r0, [pc, #32]	; (80066dc <prvPortStartFirstTask+0x24>)
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	6800      	ldr	r0, [r0, #0]
 80066be:	f380 8808 	msr	MSP, r0
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f380 8814 	msr	CONTROL, r0
 80066ca:	b662      	cpsie	i
 80066cc:	b661      	cpsie	f
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	df00      	svc	0
 80066d8:	bf00      	nop
 80066da:	0000      	.short	0x0000
 80066dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop

080066e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066ea:	4b46      	ldr	r3, [pc, #280]	; (8006804 <xPortStartScheduler+0x120>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a46      	ldr	r2, [pc, #280]	; (8006808 <xPortStartScheduler+0x124>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10a      	bne.n	800670a <xPortStartScheduler+0x26>
        __asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
    }
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800670a:	4b3e      	ldr	r3, [pc, #248]	; (8006804 <xPortStartScheduler+0x120>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a3f      	ldr	r2, [pc, #252]	; (800680c <xPortStartScheduler+0x128>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10a      	bne.n	800672a <xPortStartScheduler+0x46>
        __asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60fb      	str	r3, [r7, #12]
    }
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800672a:	4b39      	ldr	r3, [pc, #228]	; (8006810 <xPortStartScheduler+0x12c>)
 800672c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	22ff      	movs	r2, #255	; 0xff
 800673a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800674c:	b2da      	uxtb	r2, r3
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <xPortStartScheduler+0x130>)
 8006750:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <xPortStartScheduler+0x134>)
 8006754:	2207      	movs	r2, #7
 8006756:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006758:	e009      	b.n	800676e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800675a:	4b2f      	ldr	r3, [pc, #188]	; (8006818 <xPortStartScheduler+0x134>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3b01      	subs	r3, #1
 8006760:	4a2d      	ldr	r2, [pc, #180]	; (8006818 <xPortStartScheduler+0x134>)
 8006762:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b80      	cmp	r3, #128	; 0x80
 8006778:	d0ef      	beq.n	800675a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800677a:	4b27      	ldr	r3, [pc, #156]	; (8006818 <xPortStartScheduler+0x134>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1c3 0307 	rsb	r3, r3, #7
 8006782:	2b04      	cmp	r3, #4
 8006784:	d00a      	beq.n	800679c <xPortStartScheduler+0xb8>
        __asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	60bb      	str	r3, [r7, #8]
    }
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <xPortStartScheduler+0x134>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <xPortStartScheduler+0x134>)
 80067a4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067a6:	4b1c      	ldr	r3, [pc, #112]	; (8006818 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <xPortStartScheduler+0x134>)
 80067b0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <xPortStartScheduler+0x138>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a17      	ldr	r2, [pc, #92]	; (800681c <xPortStartScheduler+0x138>)
 80067c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <xPortStartScheduler+0x138>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <xPortStartScheduler+0x138>)
 80067cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80067d2:	f000 f95b 	bl	8006a8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80067d6:	4b12      	ldr	r3, [pc, #72]	; (8006820 <xPortStartScheduler+0x13c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80067dc:	f000 f97a 	bl	8006ad4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <xPortStartScheduler+0x140>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a0f      	ldr	r2, [pc, #60]	; (8006824 <xPortStartScheduler+0x140>)
 80067e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80067ec:	f7ff ff64 	bl	80066b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80067f0:	f7fe fdd2 	bl	8005398 <vTaskSwitchContext>
    prvTaskExitError();
 80067f4:	f7ff ff20 	bl	8006638 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	e000ed00 	.word	0xe000ed00
 8006808:	410fc271 	.word	0x410fc271
 800680c:	410fc270 	.word	0x410fc270
 8006810:	e000e400 	.word	0xe000e400
 8006814:	200003c8 	.word	0x200003c8
 8006818:	200003cc 	.word	0x200003cc
 800681c:	e000ed20 	.word	0xe000ed20
 8006820:	2000001c 	.word	0x2000001c
 8006824:	e000ef34 	.word	0xe000ef34

08006828 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <vInitPrioGroupValue+0xe4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a37      	ldr	r2, [pc, #220]	; (8006910 <vInitPrioGroupValue+0xe8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10a      	bne.n	800684e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	613b      	str	r3, [r7, #16]
    }
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800684e:	4b2f      	ldr	r3, [pc, #188]	; (800690c <vInitPrioGroupValue+0xe4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a30      	ldr	r2, [pc, #192]	; (8006914 <vInitPrioGroupValue+0xec>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10a      	bne.n	800686e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	60fb      	str	r3, [r7, #12]
    }
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800686e:	4b2a      	ldr	r3, [pc, #168]	; (8006918 <vInitPrioGroupValue+0xf0>)
 8006870:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006888:	78fb      	ldrb	r3, [r7, #3]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006890:	b2da      	uxtb	r2, r3
 8006892:	4b22      	ldr	r3, [pc, #136]	; (800691c <vInitPrioGroupValue+0xf4>)
 8006894:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006896:	4b22      	ldr	r3, [pc, #136]	; (8006920 <vInitPrioGroupValue+0xf8>)
 8006898:	2207      	movs	r2, #7
 800689a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689c:	e009      	b.n	80068b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800689e:	4b20      	ldr	r3, [pc, #128]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	4a1e      	ldr	r2, [pc, #120]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d0ef      	beq.n	800689e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068be:	4b18      	ldr	r3, [pc, #96]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1c3 0307 	rsb	r3, r3, #7
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d00a      	beq.n	80068e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	60bb      	str	r3, [r7, #8]
    }
 80068dc:	bf00      	nop
 80068de:	e7fe      	b.n	80068de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068e0:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	4a0e      	ldr	r2, [pc, #56]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f2:	4a0b      	ldr	r2, [pc, #44]	; (8006920 <vInitPrioGroupValue+0xf8>)
 80068f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	e000ed00 	.word	0xe000ed00
 8006910:	410fc271 	.word	0x410fc271
 8006914:	410fc270 	.word	0x410fc270
 8006918:	e000e400 	.word	0xe000e400
 800691c:	200003c8 	.word	0x200003c8
 8006920:	200003cc 	.word	0x200003cc

08006924 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
        __asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
    }
 800693c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <vPortEnterCritical+0x58>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a0d      	ldr	r2, [pc, #52]	; (800697c <vPortEnterCritical+0x58>)
 8006946:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <vPortEnterCritical+0x58>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortEnterCritical+0x5c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <vPortEnterCritical+0x4c>
        __asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
    }
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <vPortEnterCritical+0x4a>
    }
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000001c 	.word	0x2000001c
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <vPortExitCritical+0x50>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <vPortExitCritical+0x24>
        __asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	607b      	str	r3, [r7, #4]
    }
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <vPortExitCritical+0x50>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <vPortExitCritical+0x50>)
 80069b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <vPortExitCritical+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <vPortExitCritical+0x42>
 80069ba:	2300      	movs	r3, #0
 80069bc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f383 8811 	msr	BASEPRI, r3
    }
 80069c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000001c 	.word	0x2000001c
	...

080069e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80069e0:	f3ef 8009 	mrs	r0, PSP
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <pxCurrentTCBConst>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f01e 0f10 	tst.w	lr, #16
 80069f0:	bf08      	it	eq
 80069f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	6010      	str	r0, [r2, #0]
 80069fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a04:	f380 8811 	msr	BASEPRI, r0
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f7fe fcc2 	bl	8005398 <vTaskSwitchContext>
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f380 8811 	msr	BASEPRI, r0
 8006a1c:	bc09      	pop	{r0, r3}
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	6808      	ldr	r0, [r1, #0]
 8006a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f01e 0f10 	tst.w	lr, #16
 8006a2a:	bf08      	it	eq
 8006a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a30:	f380 8809 	msr	PSP, r0
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst>:
 8006a40:	20000274 	.word	0x20000274
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
    }
 8006a60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006a62:	f7fe fb7f 	bl	8005164 <xTaskIncrementTick>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <SysTick_Handler+0x40>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
    }
 8006a7e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <vPortSetupTimerInterrupt+0x38>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <vPortSetupTimerInterrupt+0x3c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <vPortSetupTimerInterrupt+0x40>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <vPortSetupTimerInterrupt+0x44>)
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010
 8006ac4:	e000e018 	.word	0xe000e018
 8006ac8:	20000000 	.word	0x20000000
 8006acc:	10624dd3 	.word	0x10624dd3
 8006ad0:	e000e014 	.word	0xe000e014

08006ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ae4 <vPortEnableVFP+0x10>
 8006ad8:	6801      	ldr	r1, [r0, #0]
 8006ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ade:	6001      	str	r1, [r0, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	0000      	.short	0x0000
 8006ae4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop

08006aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006af2:	f3ef 8305 	mrs	r3, IPSR
 8006af6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b0f      	cmp	r3, #15
 8006afc:	d914      	bls.n	8006b28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006afe:	4a17      	ldr	r2, [pc, #92]	; (8006b5c <vPortValidateInterruptPriority+0x70>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <vPortValidateInterruptPriority+0x74>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	7afa      	ldrb	r2, [r7, #11]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d20a      	bcs.n	8006b28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	607b      	str	r3, [r7, #4]
    }
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b28:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <vPortValidateInterruptPriority+0x78>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <vPortValidateInterruptPriority+0x7c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d90a      	bls.n	8006b4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	603b      	str	r3, [r7, #0]
    }
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <vPortValidateInterruptPriority+0x60>
    }
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	e000e3f0 	.word	0xe000e3f0
 8006b60:	200003c8 	.word	0x200003c8
 8006b64:	e000ed0c 	.word	0xe000ed0c
 8006b68:	200003cc 	.word	0x200003cc

08006b6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006b78:	f7fe f9b8 	bl	8004eec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006b7c:	4b53      	ldr	r3, [pc, #332]	; (8006ccc <pvPortMalloc+0x160>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006b84:	f000 f908 	bl	8006d98 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d012      	beq.n	8006bb4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006b8e:	2208      	movs	r2, #8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	3308      	adds	r3, #8
 8006b9a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d804      	bhi.n	8006bb0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	4413      	add	r3, r2
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	e001      	b.n	8006bb4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	db70      	blt.n	8006c9c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06d      	beq.n	8006c9c <pvPortMalloc+0x130>
 8006bc0:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <pvPortMalloc+0x164>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d868      	bhi.n	8006c9c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006bca:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <pvPortMalloc+0x168>)
 8006bcc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006bce:	4b41      	ldr	r3, [pc, #260]	; (8006cd4 <pvPortMalloc+0x168>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bd4:	e004      	b.n	8006be0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d903      	bls.n	8006bf2 <pvPortMalloc+0x86>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f1      	bne.n	8006bd6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006bf2:	4b36      	ldr	r3, [pc, #216]	; (8006ccc <pvPortMalloc+0x160>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d04f      	beq.n	8006c9c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2208      	movs	r2, #8
 8006c02:	4413      	add	r3, r2
 8006c04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	2308      	movs	r3, #8
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d91f      	bls.n	8006c5e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <pvPortMalloc+0xda>
        __asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
    }
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f000 f8f9 	bl	8006e50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c5e:	4b1c      	ldr	r3, [pc, #112]	; (8006cd0 <pvPortMalloc+0x164>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	4a19      	ldr	r2, [pc, #100]	; (8006cd0 <pvPortMalloc+0x164>)
 8006c6a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c6c:	4b18      	ldr	r3, [pc, #96]	; (8006cd0 <pvPortMalloc+0x164>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <pvPortMalloc+0x16c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d203      	bcs.n	8006c80 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <pvPortMalloc+0x164>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <pvPortMalloc+0x16c>)
 8006c7e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006c92:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <pvPortMalloc+0x170>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <pvPortMalloc+0x170>)
 8006c9a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006c9c:	f7fe f934 	bl	8004f08 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <pvPortMalloc+0x154>
        __asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60fb      	str	r3, [r7, #12]
    }
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <pvPortMalloc+0x152>
    return pvReturn;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3728      	adds	r7, #40	; 0x28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20012fd8 	.word	0x20012fd8
 8006cd0:	20012fdc 	.word	0x20012fdc
 8006cd4:	20012fd0 	.word	0x20012fd0
 8006cd8:	20012fe0 	.word	0x20012fe0
 8006cdc:	20012fe4 	.word	0x20012fe4

08006ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d049      	beq.n	8006d86 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	db0a      	blt.n	8006d1e <vPortFree+0x3e>
        __asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	60fb      	str	r3, [r7, #12]
    }
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <vPortFree+0x5c>
        __asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60bb      	str	r3, [r7, #8]
    }
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	0fdb      	lsrs	r3, r3, #31
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01c      	beq.n	8006d86 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d118      	bne.n	8006d86 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006d60:	f7fe f8c4 	bl	8004eec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <vPortFree+0xb0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4a08      	ldr	r2, [pc, #32]	; (8006d90 <vPortFree+0xb0>)
 8006d70:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d72:	6938      	ldr	r0, [r7, #16]
 8006d74:	f000 f86c 	bl	8006e50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <vPortFree+0xb4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <vPortFree+0xb4>)
 8006d80:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006d82:	f7fe f8c1 	bl	8004f08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006d86:	bf00      	nop
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20012fdc 	.word	0x20012fdc
 8006d94:	20012fe8 	.word	0x20012fe8

08006d98 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d9e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006da2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006da4:	4b25      	ldr	r3, [pc, #148]	; (8006e3c <prvHeapInit+0xa4>)
 8006da6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <prvHeapInit+0xa4>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <prvHeapInit+0xa8>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006dd6:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <prvHeapInit+0xa8>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006de4:	2208      	movs	r2, #8
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0307 	bic.w	r3, r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a13      	ldr	r2, [pc, #76]	; (8006e44 <prvHeapInit+0xac>)
 8006df8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <prvHeapInit+0xac>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006e02:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <prvHeapInit+0xac>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <prvHeapInit+0xac>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <prvHeapInit+0xb0>)
 8006e26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <prvHeapInit+0xb4>)
 8006e2e:	6013      	str	r3, [r2, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	200003d0 	.word	0x200003d0
 8006e40:	20012fd0 	.word	0x20012fd0
 8006e44:	20012fd8 	.word	0x20012fd8
 8006e48:	20012fe0 	.word	0x20012fe0
 8006e4c:	20012fdc 	.word	0x20012fdc

08006e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e58:	4b28      	ldr	r3, [pc, #160]	; (8006efc <prvInsertBlockIntoFreeList+0xac>)
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e002      	b.n	8006e64 <prvInsertBlockIntoFreeList+0x14>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d8f7      	bhi.n	8006e5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d108      	bne.n	8006e92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	441a      	add	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d118      	bne.n	8006ed8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <prvInsertBlockIntoFreeList+0xb0>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d00d      	beq.n	8006ece <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	e008      	b.n	8006ee0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ece:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <prvInsertBlockIntoFreeList+0xb0>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e003      	b.n	8006ee0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d002      	beq.n	8006eee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	20012fd0 	.word	0x20012fd0
 8006f00:	20012fd8 	.word	0x20012fd8

08006f04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006f08:	4803      	ldr	r0, [pc, #12]	; (8006f18 <_cbSendSystemDesc+0x14>)
 8006f0a:	f001 fd2f 	bl	800896c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006f0e:	4803      	ldr	r0, [pc, #12]	; (8006f1c <_cbSendSystemDesc+0x18>)
 8006f10:	f001 fd2c 	bl	800896c <SEGGER_SYSVIEW_SendSysDesc>
}
 8006f14:	bf00      	nop
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	08009978 	.word	0x08009978
 8006f1c:	080099b0 	.word	0x080099b0

08006f20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <SEGGER_SYSVIEW_Conf+0x20>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <SEGGER_SYSVIEW_Conf+0x20>)
 8006f2a:	6819      	ldr	r1, [r3, #0]
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <SEGGER_SYSVIEW_Conf+0x24>)
 8006f2e:	4a06      	ldr	r2, [pc, #24]	; (8006f48 <SEGGER_SYSVIEW_Conf+0x28>)
 8006f30:	f001 f90e 	bl	8008150 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006f34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006f38:	f001 f94e 	bl	80081d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006f3c:	bf00      	nop
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000000 	.word	0x20000000
 8006f44:	08006f05 	.word	0x08006f05
 8006f48:	08009a50 	.word	0x08009a50

08006f4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006f52:	2300      	movs	r3, #0
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	e033      	b.n	8006fc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006f58:	491e      	ldr	r1, [pc, #120]	; (8006fd4 <_cbSendTaskList+0x88>)
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	491a      	ldr	r1, [pc, #104]	; (8006fd4 <_cbSendTaskList+0x88>)
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	3304      	adds	r3, #4
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	4c16      	ldr	r4, [pc, #88]	; (8006fd4 <_cbSendTaskList+0x88>)
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4423      	add	r3, r4
 8006f88:	3308      	adds	r3, #8
 8006f8a:	681c      	ldr	r4, [r3, #0]
 8006f8c:	4d11      	ldr	r5, [pc, #68]	; (8006fd4 <_cbSendTaskList+0x88>)
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	442b      	add	r3, r5
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	681d      	ldr	r5, [r3, #0]
 8006f9e:	4e0d      	ldr	r6, [pc, #52]	; (8006fd4 <_cbSendTaskList+0x88>)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4433      	add	r3, r6
 8006fac:	3310      	adds	r3, #16
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	f000 f8bd 	bl	8007134 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <_cbSendTaskList+0x8c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d3c6      	bcc.n	8006f58 <_cbSendTaskList+0xc>
  }
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd4:	20012fec 	.word	0x20012fec
 8006fd8:	2001308c 	.word	0x2001308c

08006fdc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006fe4:	f7fe f8a0 	bl	8005128 <xTaskGetTickCountFromISR>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2200      	movs	r2, #0
 8006fec:	469a      	mov	sl, r3
 8006fee:	4693      	mov	fp, r2
 8006ff0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	f04f 0a00 	mov.w	sl, #0
 8007000:	f04f 0b00 	mov.w	fp, #0
 8007004:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007008:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800700c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007010:	4652      	mov	r2, sl
 8007012:	465b      	mov	r3, fp
 8007014:	1a14      	subs	r4, r2, r0
 8007016:	eb63 0501 	sbc.w	r5, r3, r1
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	00ab      	lsls	r3, r5, #2
 8007024:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007028:	00a2      	lsls	r2, r4, #2
 800702a:	4614      	mov	r4, r2
 800702c:	461d      	mov	r5, r3
 800702e:	eb14 0800 	adds.w	r8, r4, r0
 8007032:	eb45 0901 	adc.w	r9, r5, r1
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800704a:	4690      	mov	r8, r2
 800704c:	4699      	mov	r9, r3
 800704e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007052:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007056:	4610      	mov	r0, r2
 8007058:	4619      	mov	r1, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007064 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007072:	2205      	movs	r2, #5
 8007074:	492b      	ldr	r1, [pc, #172]	; (8007124 <SYSVIEW_AddTask+0xc0>)
 8007076:	68b8      	ldr	r0, [r7, #8]
 8007078:	f001 ff8c 	bl	8008f94 <memcmp>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d04b      	beq.n	800711a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b07      	cmp	r3, #7
 8007088:	d903      	bls.n	8007092 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800708a:	4828      	ldr	r0, [pc, #160]	; (800712c <SYSVIEW_AddTask+0xc8>)
 800708c:	f001 ff06 	bl	8008e9c <SEGGER_SYSVIEW_Warn>
    return;
 8007090:	e044      	b.n	800711c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4926      	ldr	r1, [pc, #152]	; (8007130 <SYSVIEW_AddTask+0xcc>)
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80070a6:	4b20      	ldr	r3, [pc, #128]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4921      	ldr	r1, [pc, #132]	; (8007130 <SYSVIEW_AddTask+0xcc>)
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	3304      	adds	r3, #4
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	491b      	ldr	r1, [pc, #108]	; (8007130 <SYSVIEW_AddTask+0xcc>)
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3308      	adds	r3, #8
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4916      	ldr	r1, [pc, #88]	; (8007130 <SYSVIEW_AddTask+0xcc>)
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	330c      	adds	r3, #12
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4910      	ldr	r1, [pc, #64]	; (8007130 <SYSVIEW_AddTask+0xcc>)
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	3310      	adds	r3, #16
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a08      	ldr	r2, [pc, #32]	; (8007128 <SYSVIEW_AddTask+0xc4>)
 8007106:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f80e 	bl	8007134 <SYSVIEW_SendTaskInfo>
 8007118:	e000      	b.n	800711c <SYSVIEW_AddTask+0xb8>
    return;
 800711a:	bf00      	nop

}
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	080099c0 	.word	0x080099c0
 8007128:	2001308c 	.word	0x2001308c
 800712c:	080099c8 	.word	0x080099c8
 8007130:	20012fec 	.word	0x20012fec

08007134 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007142:	f107 0314 	add.w	r3, r7, #20
 8007146:	2214      	movs	r2, #20
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f001 ff32 	bl	8008fb4 <memset>
  TaskInfo.TaskID     = TaskID;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	4618      	mov	r0, r3
 800716a:	f001 fb07 	bl	800877c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800716e:	bf00      	nop
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800717e:	4b1e      	ldr	r3, [pc, #120]	; (80071f8 <USART2_IRQHandler+0x80>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d011      	beq.n	80071b2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800718e:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <USART2_IRQHandler+0x84>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 030b 	and.w	r3, r3, #11
 800719c:	2b00      	cmp	r3, #0
 800719e:	d108      	bne.n	80071b2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <USART2_IRQHandler+0x88>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <USART2_IRQHandler+0x88>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	79fa      	ldrb	r2, [r7, #7]
 80071ae:	4610      	mov	r0, r2
 80071b0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01a      	beq.n	80071f2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <USART2_IRQHandler+0x8c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d015      	beq.n	80071f0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <USART2_IRQHandler+0x8c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	1dfa      	adds	r2, r7, #7
 80071ca:	4610      	mov	r0, r2
 80071cc:	4798      	blx	r3
 80071ce:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <USART2_IRQHandler+0x90>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a0b      	ldr	r2, [pc, #44]	; (8007208 <USART2_IRQHandler+0x90>)
 80071dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	e006      	b.n	80071f2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <USART2_IRQHandler+0x80>)
 80071e6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80071e8:	79fa      	ldrb	r2, [r7, #7]
 80071ea:	4b04      	ldr	r3, [pc, #16]	; (80071fc <USART2_IRQHandler+0x84>)
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e000      	b.n	80071f2 <USART2_IRQHandler+0x7a>
      return;
 80071f0:	bf00      	nop
    }
  }
}
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40011000 	.word	0x40011000
 80071fc:	40011004 	.word	0x40011004
 8007200:	20013090 	.word	0x20013090
 8007204:	20013094 	.word	0x20013094
 8007208:	4001100c 	.word	0x4001100c

0800720c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a04      	ldr	r2, [pc, #16]	; (8007228 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	4001100c 	.word	0x4001100c

0800722c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <_DoInit+0x98>)
 8007234:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2203      	movs	r2, #3
 800723a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2203      	movs	r2, #3
 8007240:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <_DoInit+0x9c>)
 8007246:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a20      	ldr	r2, [pc, #128]	; (80072cc <_DoInit+0xa0>)
 800724c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007254:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <_DoInit+0x9c>)
 800726c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <_DoInit+0xa4>)
 8007272:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2210      	movs	r2, #16
 8007278:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3307      	adds	r3, #7
 8007290:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <_DoInit+0xa8>)
 8007292:	6810      	ldr	r0, [r2, #0]
 8007294:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007296:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <_DoInit+0xac>)
 800729e:	6810      	ldr	r0, [r2, #0]
 80072a0:	6018      	str	r0, [r3, #0]
 80072a2:	8891      	ldrh	r1, [r2, #4]
 80072a4:	7992      	ldrb	r2, [r2, #6]
 80072a6:	8099      	strh	r1, [r3, #4]
 80072a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80072aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80072b4:	f3bf 8f5f 	dmb	sy
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20013098 	.word	0x20013098
 80072c8:	08009a18 	.word	0x08009a18
 80072cc:	20013140 	.word	0x20013140
 80072d0:	20013540 	.word	0x20013540
 80072d4:	08009a24 	.word	0x08009a24
 80072d8:	08009a28 	.word	0x08009a28

080072dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80072e8:	4b3e      	ldr	r3, [pc, #248]	; (80073e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80072ea:	623b      	str	r3, [r7, #32]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <SEGGER_RTT_ReadNoLock+0x1e>
 80072f6:	f7ff ff99 	bl	800722c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4613      	mov	r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4413      	add	r3, r2
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	3360      	adds	r3, #96	; 0x60
 8007306:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8007308:	4413      	add	r3, r2
 800730a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800731c:	2300      	movs	r3, #0
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	429a      	cmp	r2, r3
 8007326:	d92b      	bls.n	8007380 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4293      	cmp	r3, r2
 8007338:	bf28      	it	cs
 800733a:	4613      	movcs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	4413      	add	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6939      	ldr	r1, [r7, #16]
 800734c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800734e:	f001 fe65 	bl	800901c <memcpy>
    NumBytesRead += NumBytesRem;
 8007352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800735a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	4413      	add	r3, r2
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007378:	429a      	cmp	r2, r3
 800737a:	d101      	bne.n	8007380 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800737c:	2300      	movs	r3, #0
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4293      	cmp	r3, r2
 800738e:	bf28      	it	cs
 8007390:	4613      	movcs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d019      	beq.n	80073ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	4413      	add	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	6939      	ldr	r1, [r7, #16]
 80073a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073aa:	f001 fe37 	bl	800901c <memcpy>
    NumBytesRead += NumBytesRem;
 80073ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	4413      	add	r3, r2
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80073b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4413      	add	r3, r2
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3730      	adds	r7, #48	; 0x30
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20013098 	.word	0x20013098

080073e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80073f6:	4b3d      	ldr	r3, [pc, #244]	; (80074ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007404:	f7ff ff12 	bl	800722c <_DoInit>
  SEGGER_RTT_LOCK();
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	f04f 0120 	mov.w	r1, #32
 8007410:	f381 8811 	msr	BASEPRI, r1
 8007414:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007416:	4b35      	ldr	r3, [pc, #212]	; (80074ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007418:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800741e:	6939      	ldr	r1, [r7, #16]
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	4613      	mov	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	440b      	add	r3, r1
 800742e:	3304      	adds	r3, #4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	429a      	cmp	r2, r3
 8007444:	dbeb      	blt.n	800741e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007446:	e000      	b.n	800744a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007448:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	429a      	cmp	r2, r3
 8007452:	da3f      	bge.n	80074d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007454:	6939      	ldr	r1, [r7, #16]
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	440b      	add	r3, r1
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007468:	6939      	ldr	r1, [r7, #16]
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	440b      	add	r3, r1
 8007478:	3304      	adds	r3, #4
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800747e:	6939      	ldr	r1, [r7, #16]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	3320      	adds	r3, #32
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007492:	6939      	ldr	r1, [r7, #16]
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	4613      	mov	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4413      	add	r3, r2
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	440b      	add	r3, r1
 80074a0:	3328      	adds	r3, #40	; 0x28
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80074a6:	6939      	ldr	r1, [r7, #16]
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	440b      	add	r3, r1
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80074ba:	6939      	ldr	r1, [r7, #16]
 80074bc:	69fa      	ldr	r2, [r7, #28]
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	332c      	adds	r3, #44	; 0x2c
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80074ce:	f3bf 8f5f 	dmb	sy
 80074d2:	e002      	b.n	80074da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80074e0:	69fb      	ldr	r3, [r7, #28]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20013098 	.word	0x20013098

080074f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80074fe:	4b33      	ldr	r3, [pc, #204]	; (80075cc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800750c:	f7ff fe8e 	bl	800722c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007510:	4b2e      	ldr	r3, [pc, #184]	; (80075cc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007512:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	461a      	mov	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4293      	cmp	r3, r2
 800751e:	d24d      	bcs.n	80075bc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8007520:	f3ef 8311 	mrs	r3, BASEPRI
 8007524:	f04f 0120 	mov.w	r1, #32
 8007528:	f381 8811 	msr	BASEPRI, r1
 800752c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d031      	beq.n	8007598 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007534:	6979      	ldr	r1, [r7, #20]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4613      	mov	r3, r2
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	4413      	add	r3, r2
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	440b      	add	r3, r1
 8007542:	3360      	adds	r3, #96	; 0x60
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007548:	6979      	ldr	r1, [r7, #20]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4613      	mov	r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	440b      	add	r3, r1
 8007556:	3364      	adds	r3, #100	; 0x64
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800755c:	6979      	ldr	r1, [r7, #20]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4613      	mov	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	00db      	lsls	r3, r3, #3
 8007568:	440b      	add	r3, r1
 800756a:	3368      	adds	r3, #104	; 0x68
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8007570:	6979      	ldr	r1, [r7, #20]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	4413      	add	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	440b      	add	r3, r1
 800757e:	3370      	adds	r3, #112	; 0x70
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	4413      	add	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	440b      	add	r3, r1
 8007592:	336c      	adds	r3, #108	; 0x6c
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007598:	6979      	ldr	r1, [r7, #20]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	440b      	add	r3, r1
 80075a6:	3374      	adds	r3, #116	; 0x74
 80075a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075aa:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80075ac:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e002      	b.n	80075c2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295
 80075c0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80075c2:	69fb      	ldr	r3, [r7, #28]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20013098 	.word	0x20013098

080075d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80075e0:	e002      	b.n	80075e8 <_EncodeStr+0x18>
    Len++;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	3301      	adds	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	4413      	add	r3, r2
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1f6      	bne.n	80075e2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d901      	bls.n	8007600 <_EncodeStr+0x30>
    Len = Limit;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2bfe      	cmp	r3, #254	; 0xfe
 8007604:	d806      	bhi.n	8007614 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	60fa      	str	r2, [r7, #12]
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e011      	b.n	8007638 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	60fa      	str	r2, [r7, #12]
 800761a:	22ff      	movs	r2, #255	; 0xff
 800761c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	60fa      	str	r2, [r7, #12]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	0a19      	lsrs	r1, r3, #8
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	60fa      	str	r2, [r7, #12]
 8007634:	b2ca      	uxtb	r2, r1
 8007636:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800763c:	e00a      	b.n	8007654 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	1c53      	adds	r3, r2, #1
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1c59      	adds	r1, r3, #1
 8007648:	60f9      	str	r1, [r7, #12]
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	701a      	strb	r2, [r3, #0]
    n++;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	3301      	adds	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	429a      	cmp	r2, r3
 800765a:	d3f0      	bcc.n	800763e <_EncodeStr+0x6e>
  }
  return pPayload;
 800765c:	68fb      	ldr	r3, [r7, #12]
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3304      	adds	r3, #4
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800768a:	4b35      	ldr	r3, [pc, #212]	; (8007760 <_HandleIncomingPacket+0xdc>)
 800768c:	7e1b      	ldrb	r3, [r3, #24]
 800768e:	4618      	mov	r0, r3
 8007690:	1cfb      	adds	r3, r7, #3
 8007692:	2201      	movs	r2, #1
 8007694:	4619      	mov	r1, r3
 8007696:	f7ff fe21 	bl	80072dc <SEGGER_RTT_ReadNoLock>
 800769a:	4603      	mov	r3, r0
 800769c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	dd59      	ble.n	8007758 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80076a4:	78fb      	ldrb	r3, [r7, #3]
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	d032      	beq.n	8007710 <_HandleIncomingPacket+0x8c>
 80076aa:	2b80      	cmp	r3, #128	; 0x80
 80076ac:	dc42      	bgt.n	8007734 <_HandleIncomingPacket+0xb0>
 80076ae:	2b07      	cmp	r3, #7
 80076b0:	dc16      	bgt.n	80076e0 <_HandleIncomingPacket+0x5c>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	dd3e      	ble.n	8007734 <_HandleIncomingPacket+0xb0>
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b06      	cmp	r3, #6
 80076ba:	d83b      	bhi.n	8007734 <_HandleIncomingPacket+0xb0>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <_HandleIncomingPacket+0x40>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076e7 	.word	0x080076e7
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076f3 	.word	0x080076f3
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	080076ff 	.word	0x080076ff
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800770b 	.word	0x0800770b
 80076e0:	2b7f      	cmp	r3, #127	; 0x7f
 80076e2:	d034      	beq.n	800774e <_HandleIncomingPacket+0xca>
 80076e4:	e026      	b.n	8007734 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80076e6:	f000 fecd 	bl	8008484 <SEGGER_SYSVIEW_Start>
      break;
 80076ea:	e035      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80076ec:	f000 ff86 	bl	80085fc <SEGGER_SYSVIEW_Stop>
      break;
 80076f0:	e032      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80076f2:	f001 f95f 	bl	80089b4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80076f6:	e02f      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80076f8:	f001 f924 	bl	8008944 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80076fc:	e02c      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80076fe:	f000 ffa3 	bl	8008648 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007702:	e029      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007704:	f001 fb78 	bl	8008df8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007708:	e026      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800770a:	f001 fb57 	bl	8008dbc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800770e:	e023      	b.n	8007758 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <_HandleIncomingPacket+0xdc>)
 8007712:	7e1b      	ldrb	r3, [r3, #24]
 8007714:	4618      	mov	r0, r3
 8007716:	1cfb      	adds	r3, r7, #3
 8007718:	2201      	movs	r2, #1
 800771a:	4619      	mov	r1, r3
 800771c:	f7ff fdde 	bl	80072dc <SEGGER_RTT_ReadNoLock>
 8007720:	4603      	mov	r3, r0
 8007722:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dd13      	ble.n	8007752 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fac5 	bl	8008cbc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007732:	e00e      	b.n	8007752 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007734:	78fb      	ldrb	r3, [r7, #3]
 8007736:	b25b      	sxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	da0c      	bge.n	8007756 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800773c:	4b08      	ldr	r3, [pc, #32]	; (8007760 <_HandleIncomingPacket+0xdc>)
 800773e:	7e1b      	ldrb	r3, [r3, #24]
 8007740:	4618      	mov	r0, r3
 8007742:	1cfb      	adds	r3, r7, #3
 8007744:	2201      	movs	r2, #1
 8007746:	4619      	mov	r1, r3
 8007748:	f7ff fdc8 	bl	80072dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800774c:	e003      	b.n	8007756 <_HandleIncomingPacket+0xd2>
      break;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <_HandleIncomingPacket+0xd4>
      break;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <_HandleIncomingPacket+0xd4>
      break;
 8007756:	bf00      	nop
    }
  }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20014558 	.word	0x20014558

08007764 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08c      	sub	sp, #48	; 0x30
 8007768:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800776a:	2301      	movs	r3, #1
 800776c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800776e:	1d3b      	adds	r3, r7, #4
 8007770:	3301      	adds	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007778:	4b32      	ldr	r3, [pc, #200]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
 800777e:	e00b      	b.n	8007798 <_TrySendOverflowPacket+0x34>
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	b2da      	uxtb	r2, r3
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	1c59      	adds	r1, r3, #1
 8007788:	62f9      	str	r1, [r7, #44]	; 0x2c
 800778a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	09db      	lsrs	r3, r3, #7
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b7f      	cmp	r3, #127	; 0x7f
 800779c:	d8f0      	bhi.n	8007780 <_TrySendOverflowPacket+0x1c>
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <_TrySendOverflowPacket+0xe4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80077b4:	4b23      	ldr	r3, [pc, #140]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	623b      	str	r3, [r7, #32]
 80077c6:	e00b      	b.n	80077e0 <_TrySendOverflowPacket+0x7c>
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	1c59      	adds	r1, r3, #1
 80077d0:	6279      	str	r1, [r7, #36]	; 0x24
 80077d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	09db      	lsrs	r3, r3, #7
 80077de:	623b      	str	r3, [r7, #32]
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	2b7f      	cmp	r3, #127	; 0x7f
 80077e4:	d8f0      	bhi.n	80077c8 <_TrySendOverflowPacket+0x64>
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	627a      	str	r2, [r7, #36]	; 0x24
 80077ec:	6a3a      	ldr	r2, [r7, #32]
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80077f6:	4b13      	ldr	r3, [pc, #76]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 80077f8:	785b      	ldrb	r3, [r3, #1]
 80077fa:	4618      	mov	r0, r3
 80077fc:	1d3b      	adds	r3, r7, #4
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	461a      	mov	r2, r3
 8007804:	1d3b      	adds	r3, r7, #4
 8007806:	4619      	mov	r1, r3
 8007808:	f7f8 fcea 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800780c:	4603      	mov	r3, r0
 800780e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007810:	f7ff fcfc 	bl	800720c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800781a:	4a0a      	ldr	r2, [pc, #40]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007820:	4b08      	ldr	r3, [pc, #32]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	3b01      	subs	r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	4b06      	ldr	r3, [pc, #24]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e004      	b.n	8007838 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	3301      	adds	r3, #1
 8007834:	4a03      	ldr	r2, [pc, #12]	; (8007844 <_TrySendOverflowPacket+0xe0>)
 8007836:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007838:	693b      	ldr	r3, [r7, #16]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3730      	adds	r7, #48	; 0x30
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20014558 	.word	0x20014558
 8007848:	e0001004 	.word	0xe0001004

0800784c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007858:	4b6d      	ldr	r3, [pc, #436]	; (8007a10 <_SendPacket+0x1c4>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d010      	beq.n	8007882 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007860:	4b6b      	ldr	r3, [pc, #428]	; (8007a10 <_SendPacket+0x1c4>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80a5 	beq.w	80079b4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800786a:	4b69      	ldr	r3, [pc, #420]	; (8007a10 <_SendPacket+0x1c4>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d109      	bne.n	8007886 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007872:	f7ff ff77 	bl	8007764 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007876:	4b66      	ldr	r3, [pc, #408]	; (8007a10 <_SendPacket+0x1c4>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b01      	cmp	r3, #1
 800787c:	f040 809c 	bne.w	80079b8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007880:	e001      	b.n	8007886 <_SendPacket+0x3a>
    goto Send;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <_SendPacket+0x3c>
Send:
 8007886:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b1f      	cmp	r3, #31
 800788c:	d809      	bhi.n	80078a2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800788e:	4b60      	ldr	r3, [pc, #384]	; (8007a10 <_SendPacket+0x1c4>)
 8007890:	69da      	ldr	r2, [r3, #28]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 808d 	bne.w	80079bc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b17      	cmp	r3, #23
 80078a6:	d807      	bhi.n	80078b8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	e03d      	b.n	8007934 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b7f      	cmp	r3, #127	; 0x7f
 80078c4:	d912      	bls.n	80078ec <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	09da      	lsrs	r2, r3, #7
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	3a01      	subs	r2, #1
 80078de:	60fa      	str	r2, [r7, #12]
 80078e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	701a      	strb	r2, [r3, #0]
 80078ea:	e006      	b.n	80078fa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b7f      	cmp	r3, #127	; 0x7f
 80078fe:	d912      	bls.n	8007926 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	09da      	lsrs	r2, r3, #7
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3b01      	subs	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	3a01      	subs	r2, #1
 8007918:	60fa      	str	r2, [r7, #12]
 800791a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e006      	b.n	8007934 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b01      	subs	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007934:	4b37      	ldr	r3, [pc, #220]	; (8007a14 <_SendPacket+0x1c8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800793a:	4b35      	ldr	r3, [pc, #212]	; (8007a10 <_SendPacket+0x1c4>)
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	623b      	str	r3, [r7, #32]
 800794c:	e00b      	b.n	8007966 <_SendPacket+0x11a>
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1c59      	adds	r1, r3, #1
 8007956:	6279      	str	r1, [r7, #36]	; 0x24
 8007958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800795c:	b2d2      	uxtb	r2, r2
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	09db      	lsrs	r3, r3, #7
 8007964:	623b      	str	r3, [r7, #32]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	2b7f      	cmp	r3, #127	; 0x7f
 800796a:	d8f0      	bhi.n	800794e <_SendPacket+0x102>
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	627a      	str	r2, [r7, #36]	; 0x24
 8007972:	6a3a      	ldr	r2, [r7, #32]
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800797c:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <_SendPacket+0x1c4>)
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	4618      	mov	r0, r3
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	461a      	mov	r2, r3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f7f8 fc28 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007990:	4603      	mov	r3, r0
 8007992:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007994:	f7ff fc3a 	bl	800720c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800799e:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <_SendPacket+0x1c4>)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	60d3      	str	r3, [r2, #12]
 80079a4:	e00b      	b.n	80079be <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <_SendPacket+0x1c4>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <_SendPacket+0x1c4>)
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	e004      	b.n	80079be <_SendPacket+0x172>
    goto SendDone;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <_SendPacket+0x172>
      goto SendDone;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <_SendPacket+0x172>
      goto SendDone;
 80079bc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079be:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <_SendPacket+0x1c4>)
 80079c0:	7e1b      	ldrb	r3, [r3, #24]
 80079c2:	4619      	mov	r1, r3
 80079c4:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <_SendPacket+0x1cc>)
 80079c6:	460b      	mov	r3, r1
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	440b      	add	r3, r1
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4413      	add	r3, r2
 80079d0:	336c      	adds	r3, #108	; 0x6c
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <_SendPacket+0x1c4>)
 80079d6:	7e1b      	ldrb	r3, [r3, #24]
 80079d8:	4618      	mov	r0, r3
 80079da:	490f      	ldr	r1, [pc, #60]	; (8007a18 <_SendPacket+0x1cc>)
 80079dc:	4603      	mov	r3, r0
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	4403      	add	r3, r0
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	440b      	add	r3, r1
 80079e6:	3370      	adds	r3, #112	; 0x70
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d00b      	beq.n	8007a06 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80079ee:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <_SendPacket+0x1c4>)
 80079f0:	789b      	ldrb	r3, [r3, #2]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d107      	bne.n	8007a06 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80079f6:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <_SendPacket+0x1c4>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80079fc:	f7ff fe42 	bl	8007684 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <_SendPacket+0x1c4>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007a06:	bf00      	nop
 8007a08:	3728      	adds	r7, #40	; 0x28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20014558 	.word	0x20014558
 8007a14:	e0001004 	.word	0xe0001004
 8007a18:	20013098 	.word	0x20013098

08007a1c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08a      	sub	sp, #40	; 0x28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	3301      	adds	r3, #1
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d80a      	bhi.n	8007a4c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	1c59      	adds	r1, r3, #1
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6051      	str	r1, [r2, #4]
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b80      	cmp	r3, #128	; 0x80
 8007a52:	d15a      	bne.n	8007b0a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	623b      	str	r3, [r7, #32]
 8007a74:	e00b      	b.n	8007a8e <_StoreChar+0x72>
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	1c59      	adds	r1, r3, #1
 8007a7e:	6279      	str	r1, [r7, #36]	; 0x24
 8007a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a84:	b2d2      	uxtb	r2, r2
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	09db      	lsrs	r3, r3, #7
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	2b7f      	cmp	r3, #127	; 0x7f
 8007a92:	d8f0      	bhi.n	8007a76 <_StoreChar+0x5a>
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	627a      	str	r2, [r7, #36]	; 0x24
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	b2d2      	uxtb	r2, r2
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
 8007aac:	e00b      	b.n	8007ac6 <_StoreChar+0xaa>
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	1c59      	adds	r1, r3, #1
 8007ab6:	61f9      	str	r1, [r7, #28]
 8007ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	09db      	lsrs	r3, r3, #7
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8007aca:	d8f0      	bhi.n	8007aae <_StoreChar+0x92>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	61fa      	str	r2, [r7, #28]
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	221a      	movs	r2, #26
 8007ae2:	6939      	ldr	r1, [r7, #16]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff feb1 	bl	800784c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff fdbb 	bl	800766a <_PreparePacket>
 8007af4:	4602      	mov	r2, r0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	611a      	str	r2, [r3, #16]
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8007b26:	2301      	movs	r3, #1
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8007b2e:	e007      	b.n	8007b40 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8007b30:	6a3a      	ldr	r2, [r7, #32]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b38:	623b      	str	r3, [r7, #32]
    Width++;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d2f3      	bcs.n	8007b30 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d901      	bls.n	8007b54 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11f      	bne.n	8007b9e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01c      	beq.n	8007b9e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <_PrintUnsigned+0x66>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d102      	bne.n	8007b7a <_PrintUnsigned+0x66>
        c = '0';
 8007b74:	2330      	movs	r3, #48	; 0x30
 8007b76:	76fb      	strb	r3, [r7, #27]
 8007b78:	e001      	b.n	8007b7e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8007b7a:	2320      	movs	r3, #32
 8007b7c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007b7e:	e007      	b.n	8007b90 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	3b01      	subs	r3, #1
 8007b84:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8007b86:	7efb      	ldrb	r3, [r7, #27]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff ff46 	bl	8007a1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <_PrintUnsigned+0x8a>
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d3f0      	bcc.n	8007b80 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d903      	bls.n	8007bac <_PrintUnsigned+0x98>
      NumDigits--;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	603b      	str	r3, [r7, #0]
 8007baa:	e009      	b.n	8007bc0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d200      	bcs.n	8007bc0 <_PrintUnsigned+0xac>
        break;
 8007bbe:	e005      	b.n	8007bcc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8007bca:	e7e8      	b.n	8007b9e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8007be4:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <_PrintUnsigned+0x128>)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff ff14 	bl	8007a1c <_StoreChar>
    Digit /= Base;
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e3      	bne.n	8007bcc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d011      	beq.n	8007c32 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00e      	beq.n	8007c32 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007c14:	e006      	b.n	8007c24 <_PrintUnsigned+0x110>
        FieldWidth--;
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8007c1c:	2120      	movs	r1, #32
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff fefc 	bl	8007a1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <_PrintUnsigned+0x11e>
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d3f1      	bcc.n	8007c16 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8007c32:	bf00      	nop
 8007c34:	3728      	adds	r7, #40	; 0x28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	08009a64 	.word	0x08009a64

08007c40 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
 8007c4c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bfb8      	it	lt
 8007c54:	425b      	neglt	r3, r3
 8007c56:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8007c5c:	e007      	b.n	8007c6e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8007c66:	613b      	str	r3, [r7, #16]
    Width++;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	daf3      	bge.n	8007c5e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d901      	bls.n	8007c82 <_PrintInt+0x42>
    Width = NumDigits;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <_PrintInt+0x5e>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	db04      	blt.n	8007c98 <_PrintInt+0x58>
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <_PrintInt+0x5e>
    FieldWidth--;
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <_PrintInt+0x6e>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <_PrintInt+0x9c>
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d111      	bne.n	8007cdc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00e      	beq.n	8007cdc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007cbe:	e006      	b.n	8007cce <_PrintInt+0x8e>
        FieldWidth--;
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8007cc6:	2120      	movs	r1, #32
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff fea7 	bl	8007a1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <_PrintInt+0x9c>
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d3f1      	bcc.n	8007cc0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da07      	bge.n	8007cf2 <_PrintInt+0xb2>
    v = -v;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8007ce8:	212d      	movs	r1, #45	; 0x2d
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fe96 	bl	8007a1c <_StoreChar>
 8007cf0:	e008      	b.n	8007d04 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8007cfc:	212b      	movs	r1, #43	; 0x2b
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fe8c 	bl	8007a1c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d019      	beq.n	8007d42 <_PrintInt+0x102>
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d114      	bne.n	8007d42 <_PrintInt+0x102>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d111      	bne.n	8007d42 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00e      	beq.n	8007d42 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007d24:	e006      	b.n	8007d34 <_PrintInt+0xf4>
        FieldWidth--;
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8007d2c:	2130      	movs	r1, #48	; 0x30
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff fe74 	bl	8007a1c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <_PrintInt+0x102>
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d3f1      	bcc.n	8007d26 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	9301      	str	r3, [sp, #4]
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fedf 	bl	8007b14 <_PrintUnsigned>
}
 8007d56:	bf00      	nop
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b098      	sub	sp, #96	; 0x60
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007d70:	f04f 0120 	mov.w	r1, #32
 8007d74:	f381 8811 	msr	BASEPRI, r1
 8007d78:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7a:	48b7      	ldr	r0, [pc, #732]	; (8008058 <_VPrintTarget+0x2f8>)
 8007d7c:	f7ff fc75 	bl	800766a <_PreparePacket>
 8007d80:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8007d82:	4bb5      	ldr	r3, [pc, #724]	; (8008058 <_VPrintTarget+0x2f8>)
 8007d84:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8007d86:	2300      	movs	r3, #0
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	3301      	adds	r3, #1
 8007d92:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8007da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8183 	beq.w	80080b6 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8007db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007db4:	2b25      	cmp	r3, #37	; 0x25
 8007db6:	f040 8170 	bne.w	800809a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8007dca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dce:	3b23      	subs	r3, #35	; 0x23
 8007dd0:	2b0d      	cmp	r3, #13
 8007dd2:	d83f      	bhi.n	8007e54 <_VPrintTarget+0xf4>
 8007dd4:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <_VPrintTarget+0x7c>)
 8007dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dda:	bf00      	nop
 8007ddc:	08007e45 	.word	0x08007e45
 8007de0:	08007e55 	.word	0x08007e55
 8007de4:	08007e55 	.word	0x08007e55
 8007de8:	08007e55 	.word	0x08007e55
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007e55 	.word	0x08007e55
 8007df8:	08007e55 	.word	0x08007e55
 8007dfc:	08007e35 	.word	0x08007e35
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007e15 	.word	0x08007e15
 8007e08:	08007e55 	.word	0x08007e55
 8007e0c:	08007e55 	.word	0x08007e55
 8007e10:	08007e25 	.word	0x08007e25
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8007e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	e01a      	b.n	8007e5a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8007e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e26:	f043 0302 	orr.w	r3, r3, #2
 8007e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e012      	b.n	8007e5a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8007e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e36:	f043 0304 	orr.w	r3, r3, #4
 8007e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e00a      	b.n	8007e5a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8007e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e46:	f043 0308 	orr.w	r3, r3, #8
 8007e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e002      	b.n	8007e5a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8007e54:	2300      	movs	r3, #0
 8007e56:	653b      	str	r3, [r7, #80]	; 0x50
 8007e58:	bf00      	nop
        }
      } while (v);
 8007e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1b0      	bne.n	8007dc2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8007e60:	2300      	movs	r3, #0
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8007e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e70:	2b2f      	cmp	r3, #47	; 0x2f
 8007e72:	d912      	bls.n	8007e9a <_VPrintTarget+0x13a>
 8007e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e78:	2b39      	cmp	r3, #57	; 0x39
 8007e7a:	d80e      	bhi.n	8007e9a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8007e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e92:	4413      	add	r3, r2
 8007e94:	3b30      	subs	r3, #48	; 0x30
 8007e96:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8007e98:	e7e4      	b.n	8007e64 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8007ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8007eac:	d11d      	bne.n	8007eea <_VPrintTarget+0x18a>
        sFormat++;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8007ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8007ec2:	d912      	bls.n	8007eea <_VPrintTarget+0x18a>
 8007ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ec8:	2b39      	cmp	r3, #57	; 0x39
 8007eca:	d80e      	bhi.n	8007eea <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8007ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	461a      	mov	r2, r3
 8007ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ee2:	4413      	add	r3, r2
 8007ee4:	3b30      	subs	r3, #48	; 0x30
 8007ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8007ee8:	e7e4      	b.n	8007eb4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8007ef2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef6:	2b6c      	cmp	r3, #108	; 0x6c
 8007ef8:	d003      	beq.n	8007f02 <_VPrintTarget+0x1a2>
 8007efa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007efe:	2b68      	cmp	r3, #104	; 0x68
 8007f00:	d107      	bne.n	8007f12 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8007f10:	e7ef      	b.n	8007ef2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8007f12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f16:	2b25      	cmp	r3, #37	; 0x25
 8007f18:	f000 80b3 	beq.w	8008082 <_VPrintTarget+0x322>
 8007f1c:	2b25      	cmp	r3, #37	; 0x25
 8007f1e:	f2c0 80b7 	blt.w	8008090 <_VPrintTarget+0x330>
 8007f22:	2b78      	cmp	r3, #120	; 0x78
 8007f24:	f300 80b4 	bgt.w	8008090 <_VPrintTarget+0x330>
 8007f28:	2b58      	cmp	r3, #88	; 0x58
 8007f2a:	f2c0 80b1 	blt.w	8008090 <_VPrintTarget+0x330>
 8007f2e:	3b58      	subs	r3, #88	; 0x58
 8007f30:	2b20      	cmp	r3, #32
 8007f32:	f200 80ad 	bhi.w	8008090 <_VPrintTarget+0x330>
 8007f36:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <_VPrintTarget+0x1dc>)
 8007f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3c:	08008033 	.word	0x08008033
 8007f40:	08008091 	.word	0x08008091
 8007f44:	08008091 	.word	0x08008091
 8007f48:	08008091 	.word	0x08008091
 8007f4c:	08008091 	.word	0x08008091
 8007f50:	08008091 	.word	0x08008091
 8007f54:	08008091 	.word	0x08008091
 8007f58:	08008091 	.word	0x08008091
 8007f5c:	08008091 	.word	0x08008091
 8007f60:	08008091 	.word	0x08008091
 8007f64:	08008091 	.word	0x08008091
 8007f68:	08007fc1 	.word	0x08007fc1
 8007f6c:	08007fe7 	.word	0x08007fe7
 8007f70:	08008091 	.word	0x08008091
 8007f74:	08008091 	.word	0x08008091
 8007f78:	08008091 	.word	0x08008091
 8007f7c:	08008091 	.word	0x08008091
 8007f80:	08008091 	.word	0x08008091
 8007f84:	08008091 	.word	0x08008091
 8007f88:	08008091 	.word	0x08008091
 8007f8c:	08008091 	.word	0x08008091
 8007f90:	08008091 	.word	0x08008091
 8007f94:	08008091 	.word	0x08008091
 8007f98:	08008091 	.word	0x08008091
 8007f9c:	0800805d 	.word	0x0800805d
 8007fa0:	08008091 	.word	0x08008091
 8007fa4:	08008091 	.word	0x08008091
 8007fa8:	08008091 	.word	0x08008091
 8007fac:	08008091 	.word	0x08008091
 8007fb0:	0800800d 	.word	0x0800800d
 8007fb4:	08008091 	.word	0x08008091
 8007fb8:	08008091 	.word	0x08008091
 8007fbc:	08008033 	.word	0x08008033
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	1d19      	adds	r1, r3, #4
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6011      	str	r1, [r2, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8007fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8007fd4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd1c 	bl	8007a1c <_StoreChar>
        break;
 8007fe4:	e055      	b.n	8008092 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	1d19      	adds	r1, r3, #4
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6011      	str	r1, [r2, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8007ff4:	f107 0014 	add.w	r0, r7, #20
 8007ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008002:	220a      	movs	r2, #10
 8008004:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008006:	f7ff fe1b 	bl	8007c40 <_PrintInt>
        break;
 800800a:	e042      	b.n	8008092 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	1d19      	adds	r1, r3, #4
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6011      	str	r1, [r2, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800801a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800801c:	f107 0014 	add.w	r0, r7, #20
 8008020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802a:	220a      	movs	r2, #10
 800802c:	f7ff fd72 	bl	8007b14 <_PrintUnsigned>
        break;
 8008030:	e02f      	b.n	8008092 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	1d19      	adds	r1, r3, #4
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6011      	str	r1, [r2, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8008040:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008042:	f107 0014 	add.w	r0, r7, #20
 8008046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008050:	2210      	movs	r2, #16
 8008052:	f7ff fd5f 	bl	8007b14 <_PrintUnsigned>
        break;
 8008056:	e01c      	b.n	8008092 <_VPrintTarget+0x332>
 8008058:	20014588 	.word	0x20014588
      case 'p':
        v = va_arg(*pParamList, int);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	1d19      	adds	r1, r3, #4
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6011      	str	r1, [r2, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800806a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800806c:	f107 0014 	add.w	r0, r7, #20
 8008070:	2300      	movs	r3, #0
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	2308      	movs	r3, #8
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2308      	movs	r3, #8
 800807a:	2210      	movs	r2, #16
 800807c:	f7ff fd4a 	bl	8007b14 <_PrintUnsigned>
        break;
 8008080:	e007      	b.n	8008092 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8008082:	f107 0314 	add.w	r3, r7, #20
 8008086:	2125      	movs	r1, #37	; 0x25
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff fcc7 	bl	8007a1c <_StoreChar>
        break;
 800808e:	e000      	b.n	8008092 <_VPrintTarget+0x332>
      default:
        break;
 8008090:	bf00      	nop
      }
      sFormat++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e007      	b.n	80080aa <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800809a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff fcb9 	bl	8007a1c <_StoreChar>
    }
  } while (*sFormat);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f47f ae72 	bne.w	8007d98 <_VPrintTarget+0x38>
 80080b4:	e000      	b.n	80080b8 <_VPrintTarget+0x358>
      break;
 80080b6:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d041      	beq.n	8008142 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80080be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080ce:	e00b      	b.n	80080e8 <_VPrintTarget+0x388>
 80080d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d6:	1c59      	adds	r1, r3, #1
 80080d8:	6439      	str	r1, [r7, #64]	; 0x40
 80080da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	09db      	lsrs	r3, r3, #7
 80080e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ea:	2b7f      	cmp	r3, #127	; 0x7f
 80080ec:	d8f0      	bhi.n	80080d0 <_VPrintTarget+0x370>
 80080ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	643a      	str	r2, [r7, #64]	; 0x40
 80080f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	63bb      	str	r3, [r7, #56]	; 0x38
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
 8008106:	e00b      	b.n	8008120 <_VPrintTarget+0x3c0>
 8008108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810a:	b2da      	uxtb	r2, r3
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	1c59      	adds	r1, r3, #1
 8008110:	63b9      	str	r1, [r7, #56]	; 0x38
 8008112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	09db      	lsrs	r3, r3, #7
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
 8008120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008122:	2b7f      	cmp	r3, #127	; 0x7f
 8008124:	d8f0      	bhi.n	8008108 <_VPrintTarget+0x3a8>
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	63ba      	str	r2, [r7, #56]	; 0x38
 800812c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	69b9      	ldr	r1, [r7, #24]
 800813a:	221a      	movs	r2, #26
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fb85 	bl	800784c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8008148:	bf00      	nop
 800814a:	3758      	adds	r7, #88	; 0x58
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af02      	add	r7, sp, #8
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800815e:	2300      	movs	r3, #0
 8008160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008164:	4917      	ldr	r1, [pc, #92]	; (80081c4 <SEGGER_SYSVIEW_Init+0x74>)
 8008166:	4818      	ldr	r0, [pc, #96]	; (80081c8 <SEGGER_SYSVIEW_Init+0x78>)
 8008168:	f7ff f93e 	bl	80073e8 <SEGGER_RTT_AllocUpBuffer>
 800816c:	4603      	mov	r3, r0
 800816e:	b2da      	uxtb	r2, r3
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 8008172:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008174:	4b15      	ldr	r3, [pc, #84]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 8008176:	785a      	ldrb	r2, [r3, #1]
 8008178:	4b14      	ldr	r3, [pc, #80]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 800817a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800817c:	4b13      	ldr	r3, [pc, #76]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 800817e:	7e1b      	ldrb	r3, [r3, #24]
 8008180:	4618      	mov	r0, r3
 8008182:	2300      	movs	r3, #0
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2308      	movs	r3, #8
 8008188:	4a11      	ldr	r2, [pc, #68]	; (80081d0 <SEGGER_SYSVIEW_Init+0x80>)
 800818a:	490f      	ldr	r1, [pc, #60]	; (80081c8 <SEGGER_SYSVIEW_Init+0x78>)
 800818c:	f7ff f9b0 	bl	80074f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008190:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 8008192:	2200      	movs	r2, #0
 8008194:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008196:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <SEGGER_SYSVIEW_Init+0x84>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0c      	ldr	r2, [pc, #48]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 800819c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80081a4:	4a09      	ldr	r2, [pc, #36]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80081aa:	4a08      	ldr	r2, [pc, #32]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80081b0:	4a06      	ldr	r2, [pc, #24]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <SEGGER_SYSVIEW_Init+0x7c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20013550 	.word	0x20013550
 80081c8:	08009a30 	.word	0x08009a30
 80081cc:	20014558 	.word	0x20014558
 80081d0:	20014550 	.word	0x20014550
 80081d4:	e0001004 	.word	0xe0001004

080081d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80081e0:	4a04      	ldr	r2, [pc, #16]	; (80081f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6113      	str	r3, [r2, #16]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20014558 	.word	0x20014558

080081f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008200:	f3ef 8311 	mrs	r3, BASEPRI
 8008204:	f04f 0120 	mov.w	r1, #32
 8008208:	f381 8811 	msr	BASEPRI, r1
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008210:	f7ff fa2b 	bl	800766a <_PreparePacket>
 8008214:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f7ff fb16 	bl	800784c <_SendPacket>
  RECORD_END();
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f383 8811 	msr	BASEPRI, r3
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20014588 	.word	0x20014588

08008234 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800823e:	f3ef 8311 	mrs	r3, BASEPRI
 8008242:	f04f 0120 	mov.w	r1, #32
 8008246:	f381 8811 	msr	BASEPRI, r1
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	4816      	ldr	r0, [pc, #88]	; (80082a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800824e:	f7ff fa0c 	bl	800766a <_PreparePacket>
 8008252:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e00b      	b.n	800827a <SEGGER_SYSVIEW_RecordU32+0x46>
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	61f9      	str	r1, [r7, #28]
 800826c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	09db      	lsrs	r3, r3, #7
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b7f      	cmp	r3, #127	; 0x7f
 800827e:	d8f0      	bhi.n	8008262 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	61fa      	str	r2, [r7, #28]
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	6938      	ldr	r0, [r7, #16]
 8008296:	f7ff fad9 	bl	800784c <_SendPacket>
  RECORD_END();
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f383 8811 	msr	BASEPRI, r3
}
 80082a0:	bf00      	nop
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20014588 	.word	0x20014588

080082ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08c      	sub	sp, #48	; 0x30
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80082b8:	f3ef 8311 	mrs	r3, BASEPRI
 80082bc:	f04f 0120 	mov.w	r1, #32
 80082c0:	f381 8811 	msr	BASEPRI, r1
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	4825      	ldr	r0, [pc, #148]	; (800835c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80082c8:	f7ff f9cf 	bl	800766a <_PreparePacket>
 80082cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082da:	e00b      	b.n	80082f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	1c59      	adds	r1, r3, #1
 80082e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f0:	09db      	lsrs	r3, r3, #7
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2b7f      	cmp	r3, #127	; 0x7f
 80082f8:	d8f0      	bhi.n	80082dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	623b      	str	r3, [r7, #32]
 8008312:	e00b      	b.n	800832c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	6279      	str	r1, [r7, #36]	; 0x24
 800831e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	09db      	lsrs	r3, r3, #7
 800832a:	623b      	str	r3, [r7, #32]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2b7f      	cmp	r3, #127	; 0x7f
 8008330:	d8f0      	bhi.n	8008314 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	627a      	str	r2, [r7, #36]	; 0x24
 8008338:	6a3a      	ldr	r2, [r7, #32]
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	701a      	strb	r2, [r3, #0]
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	6979      	ldr	r1, [r7, #20]
 8008346:	69b8      	ldr	r0, [r7, #24]
 8008348:	f7ff fa80 	bl	800784c <_SendPacket>
  RECORD_END();
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f383 8811 	msr	BASEPRI, r3
}
 8008352:	bf00      	nop
 8008354:	3730      	adds	r7, #48	; 0x30
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20014588 	.word	0x20014588

08008360 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008360:	b580      	push	{r7, lr}
 8008362:	b090      	sub	sp, #64	; 0x40
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800836e:	f3ef 8311 	mrs	r3, BASEPRI
 8008372:	f04f 0120 	mov.w	r1, #32
 8008376:	f381 8811 	msr	BASEPRI, r1
 800837a:	61fb      	str	r3, [r7, #28]
 800837c:	4840      	ldr	r0, [pc, #256]	; (8008480 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800837e:	f7ff f974 	bl	800766a <_PreparePacket>
 8008382:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008390:	e00b      	b.n	80083aa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	b2da      	uxtb	r2, r3
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	1c59      	adds	r1, r3, #1
 800839a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800839c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a0:	b2d2      	uxtb	r2, r2
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	09db      	lsrs	r3, r3, #7
 80083a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	2b7f      	cmp	r3, #127	; 0x7f
 80083ae:	d8f0      	bhi.n	8008392 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80083b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80083b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]
 80083bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	633b      	str	r3, [r7, #48]	; 0x30
 80083c8:	e00b      	b.n	80083e2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d0:	1c59      	adds	r1, r3, #1
 80083d2:	6379      	str	r1, [r7, #52]	; 0x34
 80083d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083d8:	b2d2      	uxtb	r2, r2
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	09db      	lsrs	r3, r3, #7
 80083e0:	633b      	str	r3, [r7, #48]	; 0x30
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	2b7f      	cmp	r3, #127	; 0x7f
 80083e6:	d8f0      	bhi.n	80083ca <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80083e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	637a      	str	r2, [r7, #52]	; 0x34
 80083ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f0:	b2d2      	uxtb	r2, r2
 80083f2:	701a      	strb	r2, [r3, #0]
 80083f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008400:	e00b      	b.n	800841a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	b2da      	uxtb	r2, r3
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	1c59      	adds	r1, r3, #1
 800840a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800840c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	09db      	lsrs	r3, r3, #7
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	2b7f      	cmp	r3, #127	; 0x7f
 800841e:	d8f0      	bhi.n	8008402 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
 8008434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008436:	623b      	str	r3, [r7, #32]
 8008438:	e00b      	b.n	8008452 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	1c59      	adds	r1, r3, #1
 8008442:	6279      	str	r1, [r7, #36]	; 0x24
 8008444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	09db      	lsrs	r3, r3, #7
 8008450:	623b      	str	r3, [r7, #32]
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	2b7f      	cmp	r3, #127	; 0x7f
 8008456:	d8f0      	bhi.n	800843a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	627a      	str	r2, [r7, #36]	; 0x24
 800845e:	6a3a      	ldr	r2, [r7, #32]
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	6979      	ldr	r1, [r7, #20]
 800846c:	69b8      	ldr	r0, [r7, #24]
 800846e:	f7ff f9ed 	bl	800784c <_SendPacket>
  RECORD_END();
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f383 8811 	msr	BASEPRI, r3
}
 8008478:	bf00      	nop
 800847a:	3740      	adds	r7, #64	; 0x40
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20014588 	.word	0x20014588

08008484 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	; 0x30
 8008488:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800848a:	4b59      	ldr	r3, [pc, #356]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008490:	f3ef 8311 	mrs	r3, BASEPRI
 8008494:	f04f 0120 	mov.w	r1, #32
 8008498:	f381 8811 	msr	BASEPRI, r1
 800849c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800849e:	4b54      	ldr	r3, [pc, #336]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	220a      	movs	r2, #10
 80084a4:	4953      	ldr	r1, [pc, #332]	; (80085f4 <SEGGER_SYSVIEW_Start+0x170>)
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7f7 fe9a 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80084b2:	f7fe feab 	bl	800720c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80084b6:	200a      	movs	r0, #10
 80084b8:	f7ff fe9e 	bl	80081f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80084bc:	f3ef 8311 	mrs	r3, BASEPRI
 80084c0:	f04f 0120 	mov.w	r1, #32
 80084c4:	f381 8811 	msr	BASEPRI, r1
 80084c8:	60bb      	str	r3, [r7, #8]
 80084ca:	484b      	ldr	r0, [pc, #300]	; (80085f8 <SEGGER_SYSVIEW_Start+0x174>)
 80084cc:	f7ff f8cd 	bl	800766a <_PreparePacket>
 80084d0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084da:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
 80084e0:	e00b      	b.n	80084fa <SEGGER_SYSVIEW_Start+0x76>
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	1c59      	adds	r1, r3, #1
 80084ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80084ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	09db      	lsrs	r3, r3, #7
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	2b7f      	cmp	r3, #127	; 0x7f
 80084fe:	d8f0      	bhi.n	80084e2 <SEGGER_SYSVIEW_Start+0x5e>
 8008500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
 8008514:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	623b      	str	r3, [r7, #32]
 800851a:	e00b      	b.n	8008534 <SEGGER_SYSVIEW_Start+0xb0>
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	b2da      	uxtb	r2, r3
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	1c59      	adds	r1, r3, #1
 8008524:	6279      	str	r1, [r7, #36]	; 0x24
 8008526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	09db      	lsrs	r3, r3, #7
 8008532:	623b      	str	r3, [r7, #32]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	2b7f      	cmp	r3, #127	; 0x7f
 8008538:	d8f0      	bhi.n	800851c <SEGGER_SYSVIEW_Start+0x98>
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	627a      	str	r2, [r7, #36]	; 0x24
 8008540:	6a3a      	ldr	r2, [r7, #32]
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e00b      	b.n	800856e <SEGGER_SYSVIEW_Start+0xea>
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	b2da      	uxtb	r2, r3
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	1c59      	adds	r1, r3, #1
 800855e:	61f9      	str	r1, [r7, #28]
 8008560:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	09db      	lsrs	r3, r3, #7
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b7f      	cmp	r3, #127	; 0x7f
 8008572:	d8f0      	bhi.n	8008556 <SEGGER_SYSVIEW_Start+0xd2>
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	61fa      	str	r2, [r7, #28]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	2300      	movs	r3, #0
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	e00b      	b.n	80085a6 <SEGGER_SYSVIEW_Start+0x122>
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	1c59      	adds	r1, r3, #1
 8008596:	6179      	str	r1, [r7, #20]
 8008598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	701a      	strb	r2, [r3, #0]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	09db      	lsrs	r3, r3, #7
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2b7f      	cmp	r3, #127	; 0x7f
 80085aa:	d8f0      	bhi.n	800858e <SEGGER_SYSVIEW_Start+0x10a>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	1c5a      	adds	r2, r3, #1
 80085b0:	617a      	str	r2, [r7, #20]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80085bc:	2218      	movs	r2, #24
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff f943 	bl	800784c <_SendPacket>
      RECORD_END();
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80085cc:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <SEGGER_SYSVIEW_Start+0x16c>)
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80085da:	f000 f9eb 	bl	80089b4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80085de:	f000 f9b1 	bl	8008944 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80085e2:	f000 fc09 	bl	8008df8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80085e6:	bf00      	nop
 80085e8:	3730      	adds	r7, #48	; 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20014558 	.word	0x20014558
 80085f4:	08009a58 	.word	0x08009a58
 80085f8:	20014588 	.word	0x20014588

080085fc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008602:	f3ef 8311 	mrs	r3, BASEPRI
 8008606:	f04f 0120 	mov.w	r1, #32
 800860a:	f381 8811 	msr	BASEPRI, r1
 800860e:	607b      	str	r3, [r7, #4]
 8008610:	480b      	ldr	r0, [pc, #44]	; (8008640 <SEGGER_SYSVIEW_Stop+0x44>)
 8008612:	f7ff f82a 	bl	800766a <_PreparePacket>
 8008616:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <SEGGER_SYSVIEW_Stop+0x48>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d007      	beq.n	8008630 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008620:	220b      	movs	r2, #11
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6838      	ldr	r0, [r7, #0]
 8008626:	f7ff f911 	bl	800784c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <SEGGER_SYSVIEW_Stop+0x48>)
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f383 8811 	msr	BASEPRI, r3
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20014588 	.word	0x20014588
 8008644:	20014558 	.word	0x20014558

08008648 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b08c      	sub	sp, #48	; 0x30
 800864c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800864e:	f3ef 8311 	mrs	r3, BASEPRI
 8008652:	f04f 0120 	mov.w	r1, #32
 8008656:	f381 8811 	msr	BASEPRI, r1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	4845      	ldr	r0, [pc, #276]	; (8008774 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800865e:	f7ff f804 	bl	800766a <_PreparePacket>
 8008662:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800866c:	4b42      	ldr	r3, [pc, #264]	; (8008778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
 8008672:	e00b      	b.n	800868c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	b2da      	uxtb	r2, r3
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	1c59      	adds	r1, r3, #1
 800867c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800867e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	09db      	lsrs	r3, r3, #7
 800868a:	62bb      	str	r3, [r7, #40]	; 0x28
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	2b7f      	cmp	r3, #127	; 0x7f
 8008690:	d8f0      	bhi.n	8008674 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
 80086a6:	4b34      	ldr	r3, [pc, #208]	; (8008778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	623b      	str	r3, [r7, #32]
 80086ac:	e00b      	b.n	80086c6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	1c59      	adds	r1, r3, #1
 80086b6:	6279      	str	r1, [r7, #36]	; 0x24
 80086b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	09db      	lsrs	r3, r3, #7
 80086c4:	623b      	str	r3, [r7, #32]
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	2b7f      	cmp	r3, #127	; 0x7f
 80086ca:	d8f0      	bhi.n	80086ae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	627a      	str	r2, [r7, #36]	; 0x24
 80086d2:	6a3a      	ldr	r2, [r7, #32]
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	4b25      	ldr	r3, [pc, #148]	; (8008778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	e00b      	b.n	8008700 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	1c59      	adds	r1, r3, #1
 80086f0:	61f9      	str	r1, [r7, #28]
 80086f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	09db      	lsrs	r3, r3, #7
 80086fe:	61bb      	str	r3, [r7, #24]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b7f      	cmp	r3, #127	; 0x7f
 8008704:	d8f0      	bhi.n	80086e8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	61fa      	str	r2, [r7, #28]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
 800871e:	e00b      	b.n	8008738 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	b2da      	uxtb	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	1c59      	adds	r1, r3, #1
 8008728:	6179      	str	r1, [r7, #20]
 800872a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	09db      	lsrs	r3, r3, #7
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b7f      	cmp	r3, #127	; 0x7f
 800873c:	d8f0      	bhi.n	8008720 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	617a      	str	r2, [r7, #20]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800874e:	2218      	movs	r2, #24
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f7ff f87a 	bl	800784c <_SendPacket>
  RECORD_END();
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008766:	4b04      	ldr	r3, [pc, #16]	; (8008778 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	4798      	blx	r3
  }
}
 800876c:	bf00      	nop
 800876e:	3730      	adds	r7, #48	; 0x30
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20014588 	.word	0x20014588
 8008778:	20014558 	.word	0x20014558

0800877c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800877c:	b580      	push	{r7, lr}
 800877e:	b092      	sub	sp, #72	; 0x48
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008784:	f3ef 8311 	mrs	r3, BASEPRI
 8008788:	f04f 0120 	mov.w	r1, #32
 800878c:	f381 8811 	msr	BASEPRI, r1
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	486a      	ldr	r0, [pc, #424]	; (800893c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008794:	f7fe ff69 	bl	800766a <_PreparePacket>
 8008798:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	647b      	str	r3, [r7, #68]	; 0x44
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b66      	ldr	r3, [pc, #408]	; (8008940 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	643b      	str	r3, [r7, #64]	; 0x40
 80087ae:	e00b      	b.n	80087c8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80087b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	6479      	str	r1, [r7, #68]	; 0x44
 80087ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c4:	09db      	lsrs	r3, r3, #7
 80087c6:	643b      	str	r3, [r7, #64]	; 0x40
 80087c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ca:	2b7f      	cmp	r3, #127	; 0x7f
 80087cc:	d8f0      	bhi.n	80087b0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80087ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	647a      	str	r2, [r7, #68]	; 0x44
 80087d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087e8:	e00b      	b.n	8008802 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f0:	1c59      	adds	r1, r3, #1
 80087f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80087f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	09db      	lsrs	r3, r3, #7
 8008800:	63bb      	str	r3, [r7, #56]	; 0x38
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	2b7f      	cmp	r3, #127	; 0x7f
 8008806:	d8f0      	bhi.n	80087ea <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800880e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008816:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2220      	movs	r2, #32
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7fe fed5 	bl	80075d0 <_EncodeStr>
 8008826:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008828:	2209      	movs	r2, #9
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	6938      	ldr	r0, [r7, #16]
 800882e:	f7ff f80d 	bl	800784c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b40      	ldr	r3, [pc, #256]	; (8008940 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
 8008846:	e00b      	b.n	8008860 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	b2da      	uxtb	r2, r3
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	1c59      	adds	r1, r3, #1
 8008850:	6379      	str	r1, [r7, #52]	; 0x34
 8008852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	09db      	lsrs	r3, r3, #7
 800885e:	633b      	str	r3, [r7, #48]	; 0x30
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	2b7f      	cmp	r3, #127	; 0x7f
 8008864:	d8f0      	bhi.n	8008848 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	637a      	str	r2, [r7, #52]	; 0x34
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	b2d2      	uxtb	r2, r2
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008880:	e00b      	b.n	800889a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	b2da      	uxtb	r2, r3
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	1c59      	adds	r1, r3, #1
 800888a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800888c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	09db      	lsrs	r3, r3, #7
 8008898:	62bb      	str	r3, [r7, #40]	; 0x28
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	2b7f      	cmp	r3, #127	; 0x7f
 800889e:	d8f0      	bhi.n	8008882 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	623b      	str	r3, [r7, #32]
 80088ba:	e00b      	b.n	80088d4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	6279      	str	r1, [r7, #36]	; 0x24
 80088c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	09db      	lsrs	r3, r3, #7
 80088d2:	623b      	str	r3, [r7, #32]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	2b7f      	cmp	r3, #127	; 0x7f
 80088d8:	d8f0      	bhi.n	80088bc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	627a      	str	r2, [r7, #36]	; 0x24
 80088e0:	6a3a      	ldr	r2, [r7, #32]
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	2300      	movs	r3, #0
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e00b      	b.n	800890c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	61f9      	str	r1, [r7, #28]
 80088fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	09db      	lsrs	r3, r3, #7
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b7f      	cmp	r3, #127	; 0x7f
 8008910:	d8f0      	bhi.n	80088f4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	61fa      	str	r2, [r7, #28]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008922:	2215      	movs	r2, #21
 8008924:	68f9      	ldr	r1, [r7, #12]
 8008926:	6938      	ldr	r0, [r7, #16]
 8008928:	f7fe ff90 	bl	800784c <_SendPacket>
  RECORD_END();
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f383 8811 	msr	BASEPRI, r3
}
 8008932:	bf00      	nop
 8008934:	3748      	adds	r7, #72	; 0x48
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20014588 	.word	0x20014588
 8008940:	20014558 	.word	0x20014558

08008944 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008944:	b580      	push	{r7, lr}
 8008946:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d008      	beq.n	8008962 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800895a:	4b03      	ldr	r3, [pc, #12]	; (8008968 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4798      	blx	r3
  }
}
 8008962:	bf00      	nop
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20014558 	.word	0x20014558

0800896c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008974:	f3ef 8311 	mrs	r3, BASEPRI
 8008978:	f04f 0120 	mov.w	r1, #32
 800897c:	f381 8811 	msr	BASEPRI, r1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	480b      	ldr	r0, [pc, #44]	; (80089b0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008984:	f7fe fe71 	bl	800766a <_PreparePacket>
 8008988:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800898a:	2280      	movs	r2, #128	; 0x80
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	6938      	ldr	r0, [r7, #16]
 8008990:	f7fe fe1e 	bl	80075d0 <_EncodeStr>
 8008994:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008996:	220e      	movs	r2, #14
 8008998:	68f9      	ldr	r1, [r7, #12]
 800899a:	6938      	ldr	r0, [r7, #16]
 800899c:	f7fe ff56 	bl	800784c <_SendPacket>
  RECORD_END();
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f383 8811 	msr	BASEPRI, r3
}
 80089a6:	bf00      	nop
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20014588 	.word	0x20014588

080089b4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01a      	beq.n	80089f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d015      	beq.n	80089f8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80089cc:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4798      	blx	r3
 80089d4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80089d8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80089da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	f04f 0300 	mov.w	r3, #0
 80089e6:	000a      	movs	r2, r1
 80089e8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80089ea:	4613      	mov	r3, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	4621      	mov	r1, r4
 80089f0:	200d      	movs	r0, #13
 80089f2:	f7ff fc5b 	bl	80082ac <SEGGER_SYSVIEW_RecordU32x2>
 80089f6:	e006      	b.n	8008a06 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	200c      	movs	r0, #12
 8008a00:	f7ff fc18 	bl	8008234 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20014558 	.word	0x20014558
 8008a14:	e0001004 	.word	0xe0001004

08008a18 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a22:	f04f 0120 	mov.w	r1, #32
 8008a26:	f381 8811 	msr	BASEPRI, r1
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	4807      	ldr	r0, [pc, #28]	; (8008a4c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008a2e:	f7fe fe1c 	bl	800766a <_PreparePacket>
 8008a32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008a34:	2211      	movs	r2, #17
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6838      	ldr	r0, [r7, #0]
 8008a3a:	f7fe ff07 	bl	800784c <_SendPacket>
  RECORD_END();
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f383 8811 	msr	BASEPRI, r3
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20014588 	.word	0x20014588

08008a50 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008a58:	f3ef 8311 	mrs	r3, BASEPRI
 8008a5c:	f04f 0120 	mov.w	r1, #32
 8008a60:	f381 8811 	msr	BASEPRI, r1
 8008a64:	617b      	str	r3, [r7, #20]
 8008a66:	4819      	ldr	r0, [pc, #100]	; (8008acc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008a68:	f7fe fdff 	bl	800766a <_PreparePacket>
 8008a6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	61bb      	str	r3, [r7, #24]
 8008a84:	e00b      	b.n	8008a9e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	1c59      	adds	r1, r3, #1
 8008a8e:	61f9      	str	r1, [r7, #28]
 8008a90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a94:	b2d2      	uxtb	r2, r2
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	09db      	lsrs	r3, r3, #7
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa2:	d8f0      	bhi.n	8008a86 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	61fa      	str	r2, [r7, #28]
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008ab4:	2208      	movs	r2, #8
 8008ab6:	68f9      	ldr	r1, [r7, #12]
 8008ab8:	6938      	ldr	r0, [r7, #16]
 8008aba:	f7fe fec7 	bl	800784c <_SendPacket>
  RECORD_END();
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f383 8811 	msr	BASEPRI, r3
}
 8008ac4:	bf00      	nop
 8008ac6:	3720      	adds	r7, #32
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20014588 	.word	0x20014588
 8008ad0:	20014558 	.word	0x20014558

08008ad4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008adc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ae0:	f04f 0120 	mov.w	r1, #32
 8008ae4:	f381 8811 	msr	BASEPRI, r1
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	4819      	ldr	r0, [pc, #100]	; (8008b50 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008aec:	f7fe fdbd 	bl	800766a <_PreparePacket>
 8008af0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008af6:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e00b      	b.n	8008b22 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	1c59      	adds	r1, r3, #1
 8008b12:	61f9      	str	r1, [r7, #28]
 8008b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b18:	b2d2      	uxtb	r2, r2
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	09db      	lsrs	r3, r3, #7
 8008b20:	61bb      	str	r3, [r7, #24]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b7f      	cmp	r3, #127	; 0x7f
 8008b26:	d8f0      	bhi.n	8008b0a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	61fa      	str	r2, [r7, #28]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	b2d2      	uxtb	r2, r2
 8008b32:	701a      	strb	r2, [r3, #0]
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008b38:	2204      	movs	r2, #4
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6938      	ldr	r0, [r7, #16]
 8008b3e:	f7fe fe85 	bl	800784c <_SendPacket>
  RECORD_END();
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f383 8811 	msr	BASEPRI, r3
}
 8008b48:	bf00      	nop
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20014588 	.word	0x20014588
 8008b54:	20014558 	.word	0x20014558

08008b58 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008b60:	f3ef 8311 	mrs	r3, BASEPRI
 8008b64:	f04f 0120 	mov.w	r1, #32
 8008b68:	f381 8811 	msr	BASEPRI, r1
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	4819      	ldr	r0, [pc, #100]	; (8008bd4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008b70:	f7fe fd7b 	bl	800766a <_PreparePacket>
 8008b74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008b7a:	4b17      	ldr	r3, [pc, #92]	; (8008bd8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	61fb      	str	r3, [r7, #28]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e00b      	b.n	8008ba6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	1c59      	adds	r1, r3, #1
 8008b96:	61f9      	str	r1, [r7, #28]
 8008b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	09db      	lsrs	r3, r3, #7
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8008baa:	d8f0      	bhi.n	8008b8e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	1c5a      	adds	r2, r3, #1
 8008bb0:	61fa      	str	r2, [r7, #28]
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	701a      	strb	r2, [r3, #0]
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008bbc:	2206      	movs	r2, #6
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	6938      	ldr	r0, [r7, #16]
 8008bc2:	f7fe fe43 	bl	800784c <_SendPacket>
  RECORD_END();
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f383 8811 	msr	BASEPRI, r3
}
 8008bcc:	bf00      	nop
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20014588 	.word	0x20014588
 8008bd8:	20014558 	.word	0x20014558

08008bdc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008be6:	f3ef 8311 	mrs	r3, BASEPRI
 8008bea:	f04f 0120 	mov.w	r1, #32
 8008bee:	f381 8811 	msr	BASEPRI, r1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	4827      	ldr	r0, [pc, #156]	; (8008c94 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008bf6:	f7fe fd38 	bl	800766a <_PreparePacket>
 8008bfa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	623b      	str	r3, [r7, #32]
 8008c12:	e00b      	b.n	8008c2c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	1c59      	adds	r1, r3, #1
 8008c1c:	6279      	str	r1, [r7, #36]	; 0x24
 8008c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	09db      	lsrs	r3, r3, #7
 8008c2a:	623b      	str	r3, [r7, #32]
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c30:	d8f0      	bhi.n	8008c14 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	627a      	str	r2, [r7, #36]	; 0x24
 8008c38:	6a3a      	ldr	r2, [r7, #32]
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	61fb      	str	r3, [r7, #28]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	61bb      	str	r3, [r7, #24]
 8008c4a:	e00b      	b.n	8008c64 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	1c59      	adds	r1, r3, #1
 8008c54:	61f9      	str	r1, [r7, #28]
 8008c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	09db      	lsrs	r3, r3, #7
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b7f      	cmp	r3, #127	; 0x7f
 8008c68:	d8f0      	bhi.n	8008c4c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	61fa      	str	r2, [r7, #28]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008c7a:	2207      	movs	r2, #7
 8008c7c:	68f9      	ldr	r1, [r7, #12]
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f7fe fde4 	bl	800784c <_SendPacket>
  RECORD_END();
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f383 8811 	msr	BASEPRI, r3
}
 8008c8a:	bf00      	nop
 8008c8c:	3728      	adds	r7, #40	; 0x28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20014588 	.word	0x20014588
 8008c98:	20014558 	.word	0x20014558

08008c9c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008ca4:	4b04      	ldr	r3, [pc, #16]	; (8008cb8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	1ad3      	subs	r3, r2, r3
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	20014558 	.word	0x20014558

08008cbc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08c      	sub	sp, #48	; 0x30
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008cc6:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d06d      	beq.n	8008daa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008cce:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cd8:	e008      	b.n	8008cec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	3301      	adds	r3, #1
 8008cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cec:	79fb      	ldrb	r3, [r7, #7]
 8008cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d3f2      	bcc.n	8008cda <SEGGER_SYSVIEW_SendModule+0x1e>
 8008cf4:	e000      	b.n	8008cf8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008cf6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d055      	beq.n	8008daa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8008d02:	f04f 0120 	mov.w	r1, #32
 8008d06:	f381 8811 	msr	BASEPRI, r1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	482a      	ldr	r0, [pc, #168]	; (8008db8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008d0e:	f7fe fcac 	bl	800766a <_PreparePacket>
 8008d12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	623b      	str	r3, [r7, #32]
 8008d20:	e00b      	b.n	8008d3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	1c59      	adds	r1, r3, #1
 8008d2a:	6279      	str	r1, [r7, #36]	; 0x24
 8008d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d30:	b2d2      	uxtb	r2, r2
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	09db      	lsrs	r3, r3, #7
 8008d38:	623b      	str	r3, [r7, #32]
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8008d3e:	d8f0      	bhi.n	8008d22 <SEGGER_SYSVIEW_SendModule+0x66>
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	627a      	str	r2, [r7, #36]	; 0x24
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	e00b      	b.n	8008d74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	b2da      	uxtb	r2, r3
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	1c59      	adds	r1, r3, #1
 8008d64:	61f9      	str	r1, [r7, #28]
 8008d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	09db      	lsrs	r3, r3, #7
 8008d72:	61bb      	str	r3, [r7, #24]
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	2b7f      	cmp	r3, #127	; 0x7f
 8008d78:	d8f0      	bhi.n	8008d5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	61fa      	str	r2, [r7, #28]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2280      	movs	r2, #128	; 0x80
 8008d90:	4619      	mov	r1, r3
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7fe fc1c 	bl	80075d0 <_EncodeStr>
 8008d98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008d9a:	2216      	movs	r2, #22
 8008d9c:	68f9      	ldr	r1, [r7, #12]
 8008d9e:	6938      	ldr	r0, [r7, #16]
 8008da0:	f7fe fd54 	bl	800784c <_SendPacket>
      RECORD_END();
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008daa:	bf00      	nop
 8008dac:	3730      	adds	r7, #48	; 0x30
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20014580 	.word	0x20014580
 8008db8:	20014588 	.word	0x20014588

08008dbc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00f      	beq.n	8008dea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f2      	bne.n	8008dd0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20014580 	.word	0x20014580

08008df8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8008e02:	f04f 0120 	mov.w	r1, #32
 8008e06:	f381 8811 	msr	BASEPRI, r1
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	4817      	ldr	r0, [pc, #92]	; (8008e6c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008e0e:	f7fe fc2c 	bl	800766a <_PreparePacket>
 8008e12:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	4b14      	ldr	r3, [pc, #80]	; (8008e70 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	e00b      	b.n	8008e3c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	1c59      	adds	r1, r3, #1
 8008e2c:	6179      	str	r1, [r7, #20]
 8008e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	09db      	lsrs	r3, r3, #7
 8008e3a:	613b      	str	r3, [r7, #16]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e40:	d8f0      	bhi.n	8008e24 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	1c5a      	adds	r2, r3, #1
 8008e46:	617a      	str	r2, [r7, #20]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008e52:	221b      	movs	r2, #27
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	68b8      	ldr	r0, [r7, #8]
 8008e58:	f7fe fcf8 	bl	800784c <_SendPacket>
  RECORD_END();
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f383 8811 	msr	BASEPRI, r3
}
 8008e62:	bf00      	nop
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20014588 	.word	0x20014588
 8008e70:	20014584 	.word	0x20014584

08008e74 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8008e74:	b40f      	push	{r0, r1, r2, r3}
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8008e7c:	f107 0314 	add.w	r3, r7, #20
 8008e80:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	461a      	mov	r2, r3
 8008e86:	2100      	movs	r1, #0
 8008e88:	6938      	ldr	r0, [r7, #16]
 8008e8a:	f7fe ff69 	bl	8007d60 <_VPrintTarget>
  va_end(ParamList);
}
 8008e8e:	bf00      	nop
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e98:	b004      	add	sp, #16
 8008e9a:	4770      	bx	lr

08008e9c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08a      	sub	sp, #40	; 0x28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea8:	f04f 0120 	mov.w	r1, #32
 8008eac:	f381 8811 	msr	BASEPRI, r1
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	4827      	ldr	r0, [pc, #156]	; (8008f50 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008eb4:	f7fe fbd9 	bl	800766a <_PreparePacket>
 8008eb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008eba:	2280      	movs	r2, #128	; 0x80
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	6938      	ldr	r0, [r7, #16]
 8008ec0:	f7fe fb86 	bl	80075d0 <_EncodeStr>
 8008ec4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	2301      	movs	r3, #1
 8008ecc:	623b      	str	r3, [r7, #32]
 8008ece:	e00b      	b.n	8008ee8 <SEGGER_SYSVIEW_Warn+0x4c>
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	1c59      	adds	r1, r3, #1
 8008ed8:	6279      	str	r1, [r7, #36]	; 0x24
 8008eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	09db      	lsrs	r3, r3, #7
 8008ee6:	623b      	str	r3, [r7, #32]
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	2b7f      	cmp	r3, #127	; 0x7f
 8008eec:	d8f0      	bhi.n	8008ed0 <SEGGER_SYSVIEW_Warn+0x34>
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	627a      	str	r2, [r7, #36]	; 0x24
 8008ef4:	6a3a      	ldr	r2, [r7, #32]
 8008ef6:	b2d2      	uxtb	r2, r2
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	61fb      	str	r3, [r7, #28]
 8008f02:	2300      	movs	r3, #0
 8008f04:	61bb      	str	r3, [r7, #24]
 8008f06:	e00b      	b.n	8008f20 <SEGGER_SYSVIEW_Warn+0x84>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	1c59      	adds	r1, r3, #1
 8008f10:	61f9      	str	r1, [r7, #28]
 8008f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	09db      	lsrs	r3, r3, #7
 8008f1e:	61bb      	str	r3, [r7, #24]
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	2b7f      	cmp	r3, #127	; 0x7f
 8008f24:	d8f0      	bhi.n	8008f08 <SEGGER_SYSVIEW_Warn+0x6c>
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	61fa      	str	r2, [r7, #28]
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008f36:	221a      	movs	r2, #26
 8008f38:	68f9      	ldr	r1, [r7, #12]
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f7fe fc86 	bl	800784c <_SendPacket>
  RECORD_END();
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f383 8811 	msr	BASEPRI, r3
}
 8008f46:	bf00      	nop
 8008f48:	3728      	adds	r7, #40	; 0x28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20014588 	.word	0x20014588

08008f54 <siprintf>:
 8008f54:	b40e      	push	{r1, r2, r3}
 8008f56:	b500      	push	{lr}
 8008f58:	b09c      	sub	sp, #112	; 0x70
 8008f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f5c:	9002      	str	r0, [sp, #8]
 8008f5e:	9006      	str	r0, [sp, #24]
 8008f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f64:	4809      	ldr	r0, [pc, #36]	; (8008f8c <siprintf+0x38>)
 8008f66:	9107      	str	r1, [sp, #28]
 8008f68:	9104      	str	r1, [sp, #16]
 8008f6a:	4909      	ldr	r1, [pc, #36]	; (8008f90 <siprintf+0x3c>)
 8008f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f70:	9105      	str	r1, [sp, #20]
 8008f72:	6800      	ldr	r0, [r0, #0]
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	a902      	add	r1, sp, #8
 8008f78:	f000 f9b0 	bl	80092dc <_svfiprintf_r>
 8008f7c:	9b02      	ldr	r3, [sp, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	b01c      	add	sp, #112	; 0x70
 8008f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f88:	b003      	add	sp, #12
 8008f8a:	4770      	bx	lr
 8008f8c:	2000006c 	.word	0x2000006c
 8008f90:	ffff0208 	.word	0xffff0208

08008f94 <memcmp>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	3901      	subs	r1, #1
 8008f98:	4402      	add	r2, r0
 8008f9a:	4290      	cmp	r0, r2
 8008f9c:	d101      	bne.n	8008fa2 <memcmp+0xe>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e005      	b.n	8008fae <memcmp+0x1a>
 8008fa2:	7803      	ldrb	r3, [r0, #0]
 8008fa4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d001      	beq.n	8008fb0 <memcmp+0x1c>
 8008fac:	1b18      	subs	r0, r3, r4
 8008fae:	bd10      	pop	{r4, pc}
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	e7f2      	b.n	8008f9a <memcmp+0x6>

08008fb4 <memset>:
 8008fb4:	4402      	add	r2, r0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d100      	bne.n	8008fbe <memset+0xa>
 8008fbc:	4770      	bx	lr
 8008fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc2:	e7f9      	b.n	8008fb8 <memset+0x4>

08008fc4 <__errno>:
 8008fc4:	4b01      	ldr	r3, [pc, #4]	; (8008fcc <__errno+0x8>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	2000006c 	.word	0x2000006c

08008fd0 <__libc_init_array>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	4d0d      	ldr	r5, [pc, #52]	; (8009008 <__libc_init_array+0x38>)
 8008fd4:	4c0d      	ldr	r4, [pc, #52]	; (800900c <__libc_init_array+0x3c>)
 8008fd6:	1b64      	subs	r4, r4, r5
 8008fd8:	10a4      	asrs	r4, r4, #2
 8008fda:	2600      	movs	r6, #0
 8008fdc:	42a6      	cmp	r6, r4
 8008fde:	d109      	bne.n	8008ff4 <__libc_init_array+0x24>
 8008fe0:	4d0b      	ldr	r5, [pc, #44]	; (8009010 <__libc_init_array+0x40>)
 8008fe2:	4c0c      	ldr	r4, [pc, #48]	; (8009014 <__libc_init_array+0x44>)
 8008fe4:	f000 fc6a 	bl	80098bc <_init>
 8008fe8:	1b64      	subs	r4, r4, r5
 8008fea:	10a4      	asrs	r4, r4, #2
 8008fec:	2600      	movs	r6, #0
 8008fee:	42a6      	cmp	r6, r4
 8008ff0:	d105      	bne.n	8008ffe <__libc_init_array+0x2e>
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff8:	4798      	blx	r3
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7ee      	b.n	8008fdc <__libc_init_array+0xc>
 8008ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009002:	4798      	blx	r3
 8009004:	3601      	adds	r6, #1
 8009006:	e7f2      	b.n	8008fee <__libc_init_array+0x1e>
 8009008:	08009ab0 	.word	0x08009ab0
 800900c:	08009ab0 	.word	0x08009ab0
 8009010:	08009ab0 	.word	0x08009ab0
 8009014:	08009ab4 	.word	0x08009ab4

08009018 <__retarget_lock_acquire_recursive>:
 8009018:	4770      	bx	lr

0800901a <__retarget_lock_release_recursive>:
 800901a:	4770      	bx	lr

0800901c <memcpy>:
 800901c:	440a      	add	r2, r1
 800901e:	4291      	cmp	r1, r2
 8009020:	f100 33ff 	add.w	r3, r0, #4294967295
 8009024:	d100      	bne.n	8009028 <memcpy+0xc>
 8009026:	4770      	bx	lr
 8009028:	b510      	push	{r4, lr}
 800902a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009032:	4291      	cmp	r1, r2
 8009034:	d1f9      	bne.n	800902a <memcpy+0xe>
 8009036:	bd10      	pop	{r4, pc}

08009038 <_free_r>:
 8009038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800903a:	2900      	cmp	r1, #0
 800903c:	d044      	beq.n	80090c8 <_free_r+0x90>
 800903e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009042:	9001      	str	r0, [sp, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f1a1 0404 	sub.w	r4, r1, #4
 800904a:	bfb8      	it	lt
 800904c:	18e4      	addlt	r4, r4, r3
 800904e:	f000 f8df 	bl	8009210 <__malloc_lock>
 8009052:	4a1e      	ldr	r2, [pc, #120]	; (80090cc <_free_r+0x94>)
 8009054:	9801      	ldr	r0, [sp, #4]
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	b933      	cbnz	r3, 8009068 <_free_r+0x30>
 800905a:	6063      	str	r3, [r4, #4]
 800905c:	6014      	str	r4, [r2, #0]
 800905e:	b003      	add	sp, #12
 8009060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009064:	f000 b8da 	b.w	800921c <__malloc_unlock>
 8009068:	42a3      	cmp	r3, r4
 800906a:	d908      	bls.n	800907e <_free_r+0x46>
 800906c:	6825      	ldr	r5, [r4, #0]
 800906e:	1961      	adds	r1, r4, r5
 8009070:	428b      	cmp	r3, r1
 8009072:	bf01      	itttt	eq
 8009074:	6819      	ldreq	r1, [r3, #0]
 8009076:	685b      	ldreq	r3, [r3, #4]
 8009078:	1949      	addeq	r1, r1, r5
 800907a:	6021      	streq	r1, [r4, #0]
 800907c:	e7ed      	b.n	800905a <_free_r+0x22>
 800907e:	461a      	mov	r2, r3
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	b10b      	cbz	r3, 8009088 <_free_r+0x50>
 8009084:	42a3      	cmp	r3, r4
 8009086:	d9fa      	bls.n	800907e <_free_r+0x46>
 8009088:	6811      	ldr	r1, [r2, #0]
 800908a:	1855      	adds	r5, r2, r1
 800908c:	42a5      	cmp	r5, r4
 800908e:	d10b      	bne.n	80090a8 <_free_r+0x70>
 8009090:	6824      	ldr	r4, [r4, #0]
 8009092:	4421      	add	r1, r4
 8009094:	1854      	adds	r4, r2, r1
 8009096:	42a3      	cmp	r3, r4
 8009098:	6011      	str	r1, [r2, #0]
 800909a:	d1e0      	bne.n	800905e <_free_r+0x26>
 800909c:	681c      	ldr	r4, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	6053      	str	r3, [r2, #4]
 80090a2:	440c      	add	r4, r1
 80090a4:	6014      	str	r4, [r2, #0]
 80090a6:	e7da      	b.n	800905e <_free_r+0x26>
 80090a8:	d902      	bls.n	80090b0 <_free_r+0x78>
 80090aa:	230c      	movs	r3, #12
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	e7d6      	b.n	800905e <_free_r+0x26>
 80090b0:	6825      	ldr	r5, [r4, #0]
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	428b      	cmp	r3, r1
 80090b6:	bf04      	itt	eq
 80090b8:	6819      	ldreq	r1, [r3, #0]
 80090ba:	685b      	ldreq	r3, [r3, #4]
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	bf04      	itt	eq
 80090c0:	1949      	addeq	r1, r1, r5
 80090c2:	6021      	streq	r1, [r4, #0]
 80090c4:	6054      	str	r4, [r2, #4]
 80090c6:	e7ca      	b.n	800905e <_free_r+0x26>
 80090c8:	b003      	add	sp, #12
 80090ca:	bd30      	pop	{r4, r5, pc}
 80090cc:	200147ac 	.word	0x200147ac

080090d0 <sbrk_aligned>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4e0e      	ldr	r6, [pc, #56]	; (800910c <sbrk_aligned+0x3c>)
 80090d4:	460c      	mov	r4, r1
 80090d6:	6831      	ldr	r1, [r6, #0]
 80090d8:	4605      	mov	r5, r0
 80090da:	b911      	cbnz	r1, 80090e2 <sbrk_aligned+0x12>
 80090dc:	f000 fba6 	bl	800982c <_sbrk_r>
 80090e0:	6030      	str	r0, [r6, #0]
 80090e2:	4621      	mov	r1, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 fba1 	bl	800982c <_sbrk_r>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	d00a      	beq.n	8009104 <sbrk_aligned+0x34>
 80090ee:	1cc4      	adds	r4, r0, #3
 80090f0:	f024 0403 	bic.w	r4, r4, #3
 80090f4:	42a0      	cmp	r0, r4
 80090f6:	d007      	beq.n	8009108 <sbrk_aligned+0x38>
 80090f8:	1a21      	subs	r1, r4, r0
 80090fa:	4628      	mov	r0, r5
 80090fc:	f000 fb96 	bl	800982c <_sbrk_r>
 8009100:	3001      	adds	r0, #1
 8009102:	d101      	bne.n	8009108 <sbrk_aligned+0x38>
 8009104:	f04f 34ff 	mov.w	r4, #4294967295
 8009108:	4620      	mov	r0, r4
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	200147b0 	.word	0x200147b0

08009110 <_malloc_r>:
 8009110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009114:	1ccd      	adds	r5, r1, #3
 8009116:	f025 0503 	bic.w	r5, r5, #3
 800911a:	3508      	adds	r5, #8
 800911c:	2d0c      	cmp	r5, #12
 800911e:	bf38      	it	cc
 8009120:	250c      	movcc	r5, #12
 8009122:	2d00      	cmp	r5, #0
 8009124:	4607      	mov	r7, r0
 8009126:	db01      	blt.n	800912c <_malloc_r+0x1c>
 8009128:	42a9      	cmp	r1, r5
 800912a:	d905      	bls.n	8009138 <_malloc_r+0x28>
 800912c:	230c      	movs	r3, #12
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	2600      	movs	r6, #0
 8009132:	4630      	mov	r0, r6
 8009134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800920c <_malloc_r+0xfc>
 800913c:	f000 f868 	bl	8009210 <__malloc_lock>
 8009140:	f8d8 3000 	ldr.w	r3, [r8]
 8009144:	461c      	mov	r4, r3
 8009146:	bb5c      	cbnz	r4, 80091a0 <_malloc_r+0x90>
 8009148:	4629      	mov	r1, r5
 800914a:	4638      	mov	r0, r7
 800914c:	f7ff ffc0 	bl	80090d0 <sbrk_aligned>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	4604      	mov	r4, r0
 8009154:	d155      	bne.n	8009202 <_malloc_r+0xf2>
 8009156:	f8d8 4000 	ldr.w	r4, [r8]
 800915a:	4626      	mov	r6, r4
 800915c:	2e00      	cmp	r6, #0
 800915e:	d145      	bne.n	80091ec <_malloc_r+0xdc>
 8009160:	2c00      	cmp	r4, #0
 8009162:	d048      	beq.n	80091f6 <_malloc_r+0xe6>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	4631      	mov	r1, r6
 8009168:	4638      	mov	r0, r7
 800916a:	eb04 0903 	add.w	r9, r4, r3
 800916e:	f000 fb5d 	bl	800982c <_sbrk_r>
 8009172:	4581      	cmp	r9, r0
 8009174:	d13f      	bne.n	80091f6 <_malloc_r+0xe6>
 8009176:	6821      	ldr	r1, [r4, #0]
 8009178:	1a6d      	subs	r5, r5, r1
 800917a:	4629      	mov	r1, r5
 800917c:	4638      	mov	r0, r7
 800917e:	f7ff ffa7 	bl	80090d0 <sbrk_aligned>
 8009182:	3001      	adds	r0, #1
 8009184:	d037      	beq.n	80091f6 <_malloc_r+0xe6>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	442b      	add	r3, r5
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	f8d8 3000 	ldr.w	r3, [r8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d038      	beq.n	8009206 <_malloc_r+0xf6>
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	42a2      	cmp	r2, r4
 8009198:	d12b      	bne.n	80091f2 <_malloc_r+0xe2>
 800919a:	2200      	movs	r2, #0
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	e00f      	b.n	80091c0 <_malloc_r+0xb0>
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	1b52      	subs	r2, r2, r5
 80091a4:	d41f      	bmi.n	80091e6 <_malloc_r+0xd6>
 80091a6:	2a0b      	cmp	r2, #11
 80091a8:	d917      	bls.n	80091da <_malloc_r+0xca>
 80091aa:	1961      	adds	r1, r4, r5
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	6025      	str	r5, [r4, #0]
 80091b0:	bf18      	it	ne
 80091b2:	6059      	strne	r1, [r3, #4]
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	bf08      	it	eq
 80091b8:	f8c8 1000 	streq.w	r1, [r8]
 80091bc:	5162      	str	r2, [r4, r5]
 80091be:	604b      	str	r3, [r1, #4]
 80091c0:	4638      	mov	r0, r7
 80091c2:	f104 060b 	add.w	r6, r4, #11
 80091c6:	f000 f829 	bl	800921c <__malloc_unlock>
 80091ca:	f026 0607 	bic.w	r6, r6, #7
 80091ce:	1d23      	adds	r3, r4, #4
 80091d0:	1af2      	subs	r2, r6, r3
 80091d2:	d0ae      	beq.n	8009132 <_malloc_r+0x22>
 80091d4:	1b9b      	subs	r3, r3, r6
 80091d6:	50a3      	str	r3, [r4, r2]
 80091d8:	e7ab      	b.n	8009132 <_malloc_r+0x22>
 80091da:	42a3      	cmp	r3, r4
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	d1dd      	bne.n	800919c <_malloc_r+0x8c>
 80091e0:	f8c8 2000 	str.w	r2, [r8]
 80091e4:	e7ec      	b.n	80091c0 <_malloc_r+0xb0>
 80091e6:	4623      	mov	r3, r4
 80091e8:	6864      	ldr	r4, [r4, #4]
 80091ea:	e7ac      	b.n	8009146 <_malloc_r+0x36>
 80091ec:	4634      	mov	r4, r6
 80091ee:	6876      	ldr	r6, [r6, #4]
 80091f0:	e7b4      	b.n	800915c <_malloc_r+0x4c>
 80091f2:	4613      	mov	r3, r2
 80091f4:	e7cc      	b.n	8009190 <_malloc_r+0x80>
 80091f6:	230c      	movs	r3, #12
 80091f8:	603b      	str	r3, [r7, #0]
 80091fa:	4638      	mov	r0, r7
 80091fc:	f000 f80e 	bl	800921c <__malloc_unlock>
 8009200:	e797      	b.n	8009132 <_malloc_r+0x22>
 8009202:	6025      	str	r5, [r4, #0]
 8009204:	e7dc      	b.n	80091c0 <_malloc_r+0xb0>
 8009206:	605b      	str	r3, [r3, #4]
 8009208:	deff      	udf	#255	; 0xff
 800920a:	bf00      	nop
 800920c:	200147ac 	.word	0x200147ac

08009210 <__malloc_lock>:
 8009210:	4801      	ldr	r0, [pc, #4]	; (8009218 <__malloc_lock+0x8>)
 8009212:	f7ff bf01 	b.w	8009018 <__retarget_lock_acquire_recursive>
 8009216:	bf00      	nop
 8009218:	200147a8 	.word	0x200147a8

0800921c <__malloc_unlock>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__malloc_unlock+0x8>)
 800921e:	f7ff befc 	b.w	800901a <__retarget_lock_release_recursive>
 8009222:	bf00      	nop
 8009224:	200147a8 	.word	0x200147a8

08009228 <__ssputs_r>:
 8009228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800922c:	688e      	ldr	r6, [r1, #8]
 800922e:	461f      	mov	r7, r3
 8009230:	42be      	cmp	r6, r7
 8009232:	680b      	ldr	r3, [r1, #0]
 8009234:	4682      	mov	sl, r0
 8009236:	460c      	mov	r4, r1
 8009238:	4690      	mov	r8, r2
 800923a:	d82c      	bhi.n	8009296 <__ssputs_r+0x6e>
 800923c:	898a      	ldrh	r2, [r1, #12]
 800923e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009242:	d026      	beq.n	8009292 <__ssputs_r+0x6a>
 8009244:	6965      	ldr	r5, [r4, #20]
 8009246:	6909      	ldr	r1, [r1, #16]
 8009248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800924c:	eba3 0901 	sub.w	r9, r3, r1
 8009250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009254:	1c7b      	adds	r3, r7, #1
 8009256:	444b      	add	r3, r9
 8009258:	106d      	asrs	r5, r5, #1
 800925a:	429d      	cmp	r5, r3
 800925c:	bf38      	it	cc
 800925e:	461d      	movcc	r5, r3
 8009260:	0553      	lsls	r3, r2, #21
 8009262:	d527      	bpl.n	80092b4 <__ssputs_r+0x8c>
 8009264:	4629      	mov	r1, r5
 8009266:	f7ff ff53 	bl	8009110 <_malloc_r>
 800926a:	4606      	mov	r6, r0
 800926c:	b360      	cbz	r0, 80092c8 <__ssputs_r+0xa0>
 800926e:	6921      	ldr	r1, [r4, #16]
 8009270:	464a      	mov	r2, r9
 8009272:	f7ff fed3 	bl	800901c <memcpy>
 8009276:	89a3      	ldrh	r3, [r4, #12]
 8009278:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800927c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	6126      	str	r6, [r4, #16]
 8009284:	6165      	str	r5, [r4, #20]
 8009286:	444e      	add	r6, r9
 8009288:	eba5 0509 	sub.w	r5, r5, r9
 800928c:	6026      	str	r6, [r4, #0]
 800928e:	60a5      	str	r5, [r4, #8]
 8009290:	463e      	mov	r6, r7
 8009292:	42be      	cmp	r6, r7
 8009294:	d900      	bls.n	8009298 <__ssputs_r+0x70>
 8009296:	463e      	mov	r6, r7
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	4632      	mov	r2, r6
 800929c:	4641      	mov	r1, r8
 800929e:	f000 faab 	bl	80097f8 <memmove>
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	1b9b      	subs	r3, r3, r6
 80092a6:	60a3      	str	r3, [r4, #8]
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	4433      	add	r3, r6
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	2000      	movs	r0, #0
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	462a      	mov	r2, r5
 80092b6:	f000 fac9 	bl	800984c <_realloc_r>
 80092ba:	4606      	mov	r6, r0
 80092bc:	2800      	cmp	r0, #0
 80092be:	d1e0      	bne.n	8009282 <__ssputs_r+0x5a>
 80092c0:	6921      	ldr	r1, [r4, #16]
 80092c2:	4650      	mov	r0, sl
 80092c4:	f7ff feb8 	bl	8009038 <_free_r>
 80092c8:	230c      	movs	r3, #12
 80092ca:	f8ca 3000 	str.w	r3, [sl]
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295
 80092da:	e7e9      	b.n	80092b0 <__ssputs_r+0x88>

080092dc <_svfiprintf_r>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4698      	mov	r8, r3
 80092e2:	898b      	ldrh	r3, [r1, #12]
 80092e4:	061b      	lsls	r3, r3, #24
 80092e6:	b09d      	sub	sp, #116	; 0x74
 80092e8:	4607      	mov	r7, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	d50e      	bpl.n	800930e <_svfiprintf_r+0x32>
 80092f0:	690b      	ldr	r3, [r1, #16]
 80092f2:	b963      	cbnz	r3, 800930e <_svfiprintf_r+0x32>
 80092f4:	2140      	movs	r1, #64	; 0x40
 80092f6:	f7ff ff0b 	bl	8009110 <_malloc_r>
 80092fa:	6028      	str	r0, [r5, #0]
 80092fc:	6128      	str	r0, [r5, #16]
 80092fe:	b920      	cbnz	r0, 800930a <_svfiprintf_r+0x2e>
 8009300:	230c      	movs	r3, #12
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	f04f 30ff 	mov.w	r0, #4294967295
 8009308:	e0d0      	b.n	80094ac <_svfiprintf_r+0x1d0>
 800930a:	2340      	movs	r3, #64	; 0x40
 800930c:	616b      	str	r3, [r5, #20]
 800930e:	2300      	movs	r3, #0
 8009310:	9309      	str	r3, [sp, #36]	; 0x24
 8009312:	2320      	movs	r3, #32
 8009314:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009318:	f8cd 800c 	str.w	r8, [sp, #12]
 800931c:	2330      	movs	r3, #48	; 0x30
 800931e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80094c4 <_svfiprintf_r+0x1e8>
 8009322:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009326:	f04f 0901 	mov.w	r9, #1
 800932a:	4623      	mov	r3, r4
 800932c:	469a      	mov	sl, r3
 800932e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009332:	b10a      	cbz	r2, 8009338 <_svfiprintf_r+0x5c>
 8009334:	2a25      	cmp	r2, #37	; 0x25
 8009336:	d1f9      	bne.n	800932c <_svfiprintf_r+0x50>
 8009338:	ebba 0b04 	subs.w	fp, sl, r4
 800933c:	d00b      	beq.n	8009356 <_svfiprintf_r+0x7a>
 800933e:	465b      	mov	r3, fp
 8009340:	4622      	mov	r2, r4
 8009342:	4629      	mov	r1, r5
 8009344:	4638      	mov	r0, r7
 8009346:	f7ff ff6f 	bl	8009228 <__ssputs_r>
 800934a:	3001      	adds	r0, #1
 800934c:	f000 80a9 	beq.w	80094a2 <_svfiprintf_r+0x1c6>
 8009350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009352:	445a      	add	r2, fp
 8009354:	9209      	str	r2, [sp, #36]	; 0x24
 8009356:	f89a 3000 	ldrb.w	r3, [sl]
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 80a1 	beq.w	80094a2 <_svfiprintf_r+0x1c6>
 8009360:	2300      	movs	r3, #0
 8009362:	f04f 32ff 	mov.w	r2, #4294967295
 8009366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800936a:	f10a 0a01 	add.w	sl, sl, #1
 800936e:	9304      	str	r3, [sp, #16]
 8009370:	9307      	str	r3, [sp, #28]
 8009372:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009376:	931a      	str	r3, [sp, #104]	; 0x68
 8009378:	4654      	mov	r4, sl
 800937a:	2205      	movs	r2, #5
 800937c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009380:	4850      	ldr	r0, [pc, #320]	; (80094c4 <_svfiprintf_r+0x1e8>)
 8009382:	f7f6 ff85 	bl	8000290 <memchr>
 8009386:	9a04      	ldr	r2, [sp, #16]
 8009388:	b9d8      	cbnz	r0, 80093c2 <_svfiprintf_r+0xe6>
 800938a:	06d0      	lsls	r0, r2, #27
 800938c:	bf44      	itt	mi
 800938e:	2320      	movmi	r3, #32
 8009390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009394:	0711      	lsls	r1, r2, #28
 8009396:	bf44      	itt	mi
 8009398:	232b      	movmi	r3, #43	; 0x2b
 800939a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939e:	f89a 3000 	ldrb.w	r3, [sl]
 80093a2:	2b2a      	cmp	r3, #42	; 0x2a
 80093a4:	d015      	beq.n	80093d2 <_svfiprintf_r+0xf6>
 80093a6:	9a07      	ldr	r2, [sp, #28]
 80093a8:	4654      	mov	r4, sl
 80093aa:	2000      	movs	r0, #0
 80093ac:	f04f 0c0a 	mov.w	ip, #10
 80093b0:	4621      	mov	r1, r4
 80093b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b6:	3b30      	subs	r3, #48	; 0x30
 80093b8:	2b09      	cmp	r3, #9
 80093ba:	d94d      	bls.n	8009458 <_svfiprintf_r+0x17c>
 80093bc:	b1b0      	cbz	r0, 80093ec <_svfiprintf_r+0x110>
 80093be:	9207      	str	r2, [sp, #28]
 80093c0:	e014      	b.n	80093ec <_svfiprintf_r+0x110>
 80093c2:	eba0 0308 	sub.w	r3, r0, r8
 80093c6:	fa09 f303 	lsl.w	r3, r9, r3
 80093ca:	4313      	orrs	r3, r2
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	46a2      	mov	sl, r4
 80093d0:	e7d2      	b.n	8009378 <_svfiprintf_r+0x9c>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	9103      	str	r1, [sp, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bfbb      	ittet	lt
 80093de:	425b      	neglt	r3, r3
 80093e0:	f042 0202 	orrlt.w	r2, r2, #2
 80093e4:	9307      	strge	r3, [sp, #28]
 80093e6:	9307      	strlt	r3, [sp, #28]
 80093e8:	bfb8      	it	lt
 80093ea:	9204      	strlt	r2, [sp, #16]
 80093ec:	7823      	ldrb	r3, [r4, #0]
 80093ee:	2b2e      	cmp	r3, #46	; 0x2e
 80093f0:	d10c      	bne.n	800940c <_svfiprintf_r+0x130>
 80093f2:	7863      	ldrb	r3, [r4, #1]
 80093f4:	2b2a      	cmp	r3, #42	; 0x2a
 80093f6:	d134      	bne.n	8009462 <_svfiprintf_r+0x186>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d1a      	adds	r2, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9203      	str	r2, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfb8      	it	lt
 8009404:	f04f 33ff 	movlt.w	r3, #4294967295
 8009408:	3402      	adds	r4, #2
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094d4 <_svfiprintf_r+0x1f8>
 8009410:	7821      	ldrb	r1, [r4, #0]
 8009412:	2203      	movs	r2, #3
 8009414:	4650      	mov	r0, sl
 8009416:	f7f6 ff3b 	bl	8000290 <memchr>
 800941a:	b138      	cbz	r0, 800942c <_svfiprintf_r+0x150>
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	eba0 000a 	sub.w	r0, r0, sl
 8009422:	2240      	movs	r2, #64	; 0x40
 8009424:	4082      	lsls	r2, r0
 8009426:	4313      	orrs	r3, r2
 8009428:	3401      	adds	r4, #1
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	4825      	ldr	r0, [pc, #148]	; (80094c8 <_svfiprintf_r+0x1ec>)
 8009432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009436:	2206      	movs	r2, #6
 8009438:	f7f6 ff2a 	bl	8000290 <memchr>
 800943c:	2800      	cmp	r0, #0
 800943e:	d038      	beq.n	80094b2 <_svfiprintf_r+0x1d6>
 8009440:	4b22      	ldr	r3, [pc, #136]	; (80094cc <_svfiprintf_r+0x1f0>)
 8009442:	bb1b      	cbnz	r3, 800948c <_svfiprintf_r+0x1b0>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	3307      	adds	r3, #7
 8009448:	f023 0307 	bic.w	r3, r3, #7
 800944c:	3308      	adds	r3, #8
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009452:	4433      	add	r3, r6
 8009454:	9309      	str	r3, [sp, #36]	; 0x24
 8009456:	e768      	b.n	800932a <_svfiprintf_r+0x4e>
 8009458:	fb0c 3202 	mla	r2, ip, r2, r3
 800945c:	460c      	mov	r4, r1
 800945e:	2001      	movs	r0, #1
 8009460:	e7a6      	b.n	80093b0 <_svfiprintf_r+0xd4>
 8009462:	2300      	movs	r3, #0
 8009464:	3401      	adds	r4, #1
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	4619      	mov	r1, r3
 800946a:	f04f 0c0a 	mov.w	ip, #10
 800946e:	4620      	mov	r0, r4
 8009470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009474:	3a30      	subs	r2, #48	; 0x30
 8009476:	2a09      	cmp	r2, #9
 8009478:	d903      	bls.n	8009482 <_svfiprintf_r+0x1a6>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0c6      	beq.n	800940c <_svfiprintf_r+0x130>
 800947e:	9105      	str	r1, [sp, #20]
 8009480:	e7c4      	b.n	800940c <_svfiprintf_r+0x130>
 8009482:	fb0c 2101 	mla	r1, ip, r1, r2
 8009486:	4604      	mov	r4, r0
 8009488:	2301      	movs	r3, #1
 800948a:	e7f0      	b.n	800946e <_svfiprintf_r+0x192>
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <_svfiprintf_r+0x1f4>)
 8009494:	a904      	add	r1, sp, #16
 8009496:	4638      	mov	r0, r7
 8009498:	f3af 8000 	nop.w
 800949c:	1c42      	adds	r2, r0, #1
 800949e:	4606      	mov	r6, r0
 80094a0:	d1d6      	bne.n	8009450 <_svfiprintf_r+0x174>
 80094a2:	89ab      	ldrh	r3, [r5, #12]
 80094a4:	065b      	lsls	r3, r3, #25
 80094a6:	f53f af2d 	bmi.w	8009304 <_svfiprintf_r+0x28>
 80094aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ac:	b01d      	add	sp, #116	; 0x74
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	ab03      	add	r3, sp, #12
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	462a      	mov	r2, r5
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <_svfiprintf_r+0x1f4>)
 80094ba:	a904      	add	r1, sp, #16
 80094bc:	4638      	mov	r0, r7
 80094be:	f000 f879 	bl	80095b4 <_printf_i>
 80094c2:	e7eb      	b.n	800949c <_svfiprintf_r+0x1c0>
 80094c4:	08009a74 	.word	0x08009a74
 80094c8:	08009a7e 	.word	0x08009a7e
 80094cc:	00000000 	.word	0x00000000
 80094d0:	08009229 	.word	0x08009229
 80094d4:	08009a7a 	.word	0x08009a7a

080094d8 <_printf_common>:
 80094d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	4616      	mov	r6, r2
 80094de:	4699      	mov	r9, r3
 80094e0:	688a      	ldr	r2, [r1, #8]
 80094e2:	690b      	ldr	r3, [r1, #16]
 80094e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e8:	4293      	cmp	r3, r2
 80094ea:	bfb8      	it	lt
 80094ec:	4613      	movlt	r3, r2
 80094ee:	6033      	str	r3, [r6, #0]
 80094f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094f4:	4607      	mov	r7, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	b10a      	cbz	r2, 80094fe <_printf_common+0x26>
 80094fa:	3301      	adds	r3, #1
 80094fc:	6033      	str	r3, [r6, #0]
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	0699      	lsls	r1, r3, #26
 8009502:	bf42      	ittt	mi
 8009504:	6833      	ldrmi	r3, [r6, #0]
 8009506:	3302      	addmi	r3, #2
 8009508:	6033      	strmi	r3, [r6, #0]
 800950a:	6825      	ldr	r5, [r4, #0]
 800950c:	f015 0506 	ands.w	r5, r5, #6
 8009510:	d106      	bne.n	8009520 <_printf_common+0x48>
 8009512:	f104 0a19 	add.w	sl, r4, #25
 8009516:	68e3      	ldr	r3, [r4, #12]
 8009518:	6832      	ldr	r2, [r6, #0]
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	42ab      	cmp	r3, r5
 800951e:	dc26      	bgt.n	800956e <_printf_common+0x96>
 8009520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009524:	1e13      	subs	r3, r2, #0
 8009526:	6822      	ldr	r2, [r4, #0]
 8009528:	bf18      	it	ne
 800952a:	2301      	movne	r3, #1
 800952c:	0692      	lsls	r2, r2, #26
 800952e:	d42b      	bmi.n	8009588 <_printf_common+0xb0>
 8009530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009534:	4649      	mov	r1, r9
 8009536:	4638      	mov	r0, r7
 8009538:	47c0      	blx	r8
 800953a:	3001      	adds	r0, #1
 800953c:	d01e      	beq.n	800957c <_printf_common+0xa4>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	6922      	ldr	r2, [r4, #16]
 8009542:	f003 0306 	and.w	r3, r3, #6
 8009546:	2b04      	cmp	r3, #4
 8009548:	bf02      	ittt	eq
 800954a:	68e5      	ldreq	r5, [r4, #12]
 800954c:	6833      	ldreq	r3, [r6, #0]
 800954e:	1aed      	subeq	r5, r5, r3
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	bf0c      	ite	eq
 8009554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009558:	2500      	movne	r5, #0
 800955a:	4293      	cmp	r3, r2
 800955c:	bfc4      	itt	gt
 800955e:	1a9b      	subgt	r3, r3, r2
 8009560:	18ed      	addgt	r5, r5, r3
 8009562:	2600      	movs	r6, #0
 8009564:	341a      	adds	r4, #26
 8009566:	42b5      	cmp	r5, r6
 8009568:	d11a      	bne.n	80095a0 <_printf_common+0xc8>
 800956a:	2000      	movs	r0, #0
 800956c:	e008      	b.n	8009580 <_printf_common+0xa8>
 800956e:	2301      	movs	r3, #1
 8009570:	4652      	mov	r2, sl
 8009572:	4649      	mov	r1, r9
 8009574:	4638      	mov	r0, r7
 8009576:	47c0      	blx	r8
 8009578:	3001      	adds	r0, #1
 800957a:	d103      	bne.n	8009584 <_printf_common+0xac>
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	3501      	adds	r5, #1
 8009586:	e7c6      	b.n	8009516 <_printf_common+0x3e>
 8009588:	18e1      	adds	r1, r4, r3
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	2030      	movs	r0, #48	; 0x30
 800958e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009592:	4422      	add	r2, r4
 8009594:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800959c:	3302      	adds	r3, #2
 800959e:	e7c7      	b.n	8009530 <_printf_common+0x58>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4622      	mov	r2, r4
 80095a4:	4649      	mov	r1, r9
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c0      	blx	r8
 80095aa:	3001      	adds	r0, #1
 80095ac:	d0e6      	beq.n	800957c <_printf_common+0xa4>
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7d9      	b.n	8009566 <_printf_common+0x8e>
	...

080095b4 <_printf_i>:
 80095b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	7e0f      	ldrb	r7, [r1, #24]
 80095ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095bc:	2f78      	cmp	r7, #120	; 0x78
 80095be:	4691      	mov	r9, r2
 80095c0:	4680      	mov	r8, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	469a      	mov	sl, r3
 80095c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095ca:	d807      	bhi.n	80095dc <_printf_i+0x28>
 80095cc:	2f62      	cmp	r7, #98	; 0x62
 80095ce:	d80a      	bhi.n	80095e6 <_printf_i+0x32>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80d4 	beq.w	800977e <_printf_i+0x1ca>
 80095d6:	2f58      	cmp	r7, #88	; 0x58
 80095d8:	f000 80c0 	beq.w	800975c <_printf_i+0x1a8>
 80095dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095e4:	e03a      	b.n	800965c <_printf_i+0xa8>
 80095e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ea:	2b15      	cmp	r3, #21
 80095ec:	d8f6      	bhi.n	80095dc <_printf_i+0x28>
 80095ee:	a101      	add	r1, pc, #4	; (adr r1, 80095f4 <_printf_i+0x40>)
 80095f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080095dd 	.word	0x080095dd
 8009600:	080095dd 	.word	0x080095dd
 8009604:	080095dd 	.word	0x080095dd
 8009608:	080095dd 	.word	0x080095dd
 800960c:	08009661 	.word	0x08009661
 8009610:	080095dd 	.word	0x080095dd
 8009614:	080095dd 	.word	0x080095dd
 8009618:	080095dd 	.word	0x080095dd
 800961c:	080095dd 	.word	0x080095dd
 8009620:	08009765 	.word	0x08009765
 8009624:	0800968d 	.word	0x0800968d
 8009628:	0800971f 	.word	0x0800971f
 800962c:	080095dd 	.word	0x080095dd
 8009630:	080095dd 	.word	0x080095dd
 8009634:	08009787 	.word	0x08009787
 8009638:	080095dd 	.word	0x080095dd
 800963c:	0800968d 	.word	0x0800968d
 8009640:	080095dd 	.word	0x080095dd
 8009644:	080095dd 	.word	0x080095dd
 8009648:	08009727 	.word	0x08009727
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	602a      	str	r2, [r5, #0]
 8009654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009658:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800965c:	2301      	movs	r3, #1
 800965e:	e09f      	b.n	80097a0 <_printf_i+0x1ec>
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	0607      	lsls	r7, r0, #24
 8009666:	f103 0104 	add.w	r1, r3, #4
 800966a:	6029      	str	r1, [r5, #0]
 800966c:	d501      	bpl.n	8009672 <_printf_i+0xbe>
 800966e:	681e      	ldr	r6, [r3, #0]
 8009670:	e003      	b.n	800967a <_printf_i+0xc6>
 8009672:	0646      	lsls	r6, r0, #25
 8009674:	d5fb      	bpl.n	800966e <_printf_i+0xba>
 8009676:	f9b3 6000 	ldrsh.w	r6, [r3]
 800967a:	2e00      	cmp	r6, #0
 800967c:	da03      	bge.n	8009686 <_printf_i+0xd2>
 800967e:	232d      	movs	r3, #45	; 0x2d
 8009680:	4276      	negs	r6, r6
 8009682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009686:	485a      	ldr	r0, [pc, #360]	; (80097f0 <_printf_i+0x23c>)
 8009688:	230a      	movs	r3, #10
 800968a:	e012      	b.n	80096b2 <_printf_i+0xfe>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	6820      	ldr	r0, [r4, #0]
 8009690:	1d19      	adds	r1, r3, #4
 8009692:	6029      	str	r1, [r5, #0]
 8009694:	0605      	lsls	r5, r0, #24
 8009696:	d501      	bpl.n	800969c <_printf_i+0xe8>
 8009698:	681e      	ldr	r6, [r3, #0]
 800969a:	e002      	b.n	80096a2 <_printf_i+0xee>
 800969c:	0641      	lsls	r1, r0, #25
 800969e:	d5fb      	bpl.n	8009698 <_printf_i+0xe4>
 80096a0:	881e      	ldrh	r6, [r3, #0]
 80096a2:	4853      	ldr	r0, [pc, #332]	; (80097f0 <_printf_i+0x23c>)
 80096a4:	2f6f      	cmp	r7, #111	; 0x6f
 80096a6:	bf0c      	ite	eq
 80096a8:	2308      	moveq	r3, #8
 80096aa:	230a      	movne	r3, #10
 80096ac:	2100      	movs	r1, #0
 80096ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096b2:	6865      	ldr	r5, [r4, #4]
 80096b4:	60a5      	str	r5, [r4, #8]
 80096b6:	2d00      	cmp	r5, #0
 80096b8:	bfa2      	ittt	ge
 80096ba:	6821      	ldrge	r1, [r4, #0]
 80096bc:	f021 0104 	bicge.w	r1, r1, #4
 80096c0:	6021      	strge	r1, [r4, #0]
 80096c2:	b90e      	cbnz	r6, 80096c8 <_printf_i+0x114>
 80096c4:	2d00      	cmp	r5, #0
 80096c6:	d04b      	beq.n	8009760 <_printf_i+0x1ac>
 80096c8:	4615      	mov	r5, r2
 80096ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ce:	fb03 6711 	mls	r7, r3, r1, r6
 80096d2:	5dc7      	ldrb	r7, [r0, r7]
 80096d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096d8:	4637      	mov	r7, r6
 80096da:	42bb      	cmp	r3, r7
 80096dc:	460e      	mov	r6, r1
 80096de:	d9f4      	bls.n	80096ca <_printf_i+0x116>
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d10b      	bne.n	80096fc <_printf_i+0x148>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07de      	lsls	r6, r3, #31
 80096e8:	d508      	bpl.n	80096fc <_printf_i+0x148>
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	6861      	ldr	r1, [r4, #4]
 80096ee:	4299      	cmp	r1, r3
 80096f0:	bfde      	ittt	le
 80096f2:	2330      	movle	r3, #48	; 0x30
 80096f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096fc:	1b52      	subs	r2, r2, r5
 80096fe:	6122      	str	r2, [r4, #16]
 8009700:	f8cd a000 	str.w	sl, [sp]
 8009704:	464b      	mov	r3, r9
 8009706:	aa03      	add	r2, sp, #12
 8009708:	4621      	mov	r1, r4
 800970a:	4640      	mov	r0, r8
 800970c:	f7ff fee4 	bl	80094d8 <_printf_common>
 8009710:	3001      	adds	r0, #1
 8009712:	d14a      	bne.n	80097aa <_printf_i+0x1f6>
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b004      	add	sp, #16
 800971a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f043 0320 	orr.w	r3, r3, #32
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	4833      	ldr	r0, [pc, #204]	; (80097f4 <_printf_i+0x240>)
 8009728:	2778      	movs	r7, #120	; 0x78
 800972a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	061f      	lsls	r7, r3, #24
 8009734:	f851 6b04 	ldr.w	r6, [r1], #4
 8009738:	d402      	bmi.n	8009740 <_printf_i+0x18c>
 800973a:	065f      	lsls	r7, r3, #25
 800973c:	bf48      	it	mi
 800973e:	b2b6      	uxthmi	r6, r6
 8009740:	07df      	lsls	r7, r3, #31
 8009742:	bf48      	it	mi
 8009744:	f043 0320 	orrmi.w	r3, r3, #32
 8009748:	6029      	str	r1, [r5, #0]
 800974a:	bf48      	it	mi
 800974c:	6023      	strmi	r3, [r4, #0]
 800974e:	b91e      	cbnz	r6, 8009758 <_printf_i+0x1a4>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	f023 0320 	bic.w	r3, r3, #32
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	2310      	movs	r3, #16
 800975a:	e7a7      	b.n	80096ac <_printf_i+0xf8>
 800975c:	4824      	ldr	r0, [pc, #144]	; (80097f0 <_printf_i+0x23c>)
 800975e:	e7e4      	b.n	800972a <_printf_i+0x176>
 8009760:	4615      	mov	r5, r2
 8009762:	e7bd      	b.n	80096e0 <_printf_i+0x12c>
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	6826      	ldr	r6, [r4, #0]
 8009768:	6961      	ldr	r1, [r4, #20]
 800976a:	1d18      	adds	r0, r3, #4
 800976c:	6028      	str	r0, [r5, #0]
 800976e:	0635      	lsls	r5, r6, #24
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	d501      	bpl.n	8009778 <_printf_i+0x1c4>
 8009774:	6019      	str	r1, [r3, #0]
 8009776:	e002      	b.n	800977e <_printf_i+0x1ca>
 8009778:	0670      	lsls	r0, r6, #25
 800977a:	d5fb      	bpl.n	8009774 <_printf_i+0x1c0>
 800977c:	8019      	strh	r1, [r3, #0]
 800977e:	2300      	movs	r3, #0
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	4615      	mov	r5, r2
 8009784:	e7bc      	b.n	8009700 <_printf_i+0x14c>
 8009786:	682b      	ldr	r3, [r5, #0]
 8009788:	1d1a      	adds	r2, r3, #4
 800978a:	602a      	str	r2, [r5, #0]
 800978c:	681d      	ldr	r5, [r3, #0]
 800978e:	6862      	ldr	r2, [r4, #4]
 8009790:	2100      	movs	r1, #0
 8009792:	4628      	mov	r0, r5
 8009794:	f7f6 fd7c 	bl	8000290 <memchr>
 8009798:	b108      	cbz	r0, 800979e <_printf_i+0x1ea>
 800979a:	1b40      	subs	r0, r0, r5
 800979c:	6060      	str	r0, [r4, #4]
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	2300      	movs	r3, #0
 80097a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a8:	e7aa      	b.n	8009700 <_printf_i+0x14c>
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	462a      	mov	r2, r5
 80097ae:	4649      	mov	r1, r9
 80097b0:	4640      	mov	r0, r8
 80097b2:	47d0      	blx	sl
 80097b4:	3001      	adds	r0, #1
 80097b6:	d0ad      	beq.n	8009714 <_printf_i+0x160>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	079b      	lsls	r3, r3, #30
 80097bc:	d413      	bmi.n	80097e6 <_printf_i+0x232>
 80097be:	68e0      	ldr	r0, [r4, #12]
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	4298      	cmp	r0, r3
 80097c4:	bfb8      	it	lt
 80097c6:	4618      	movlt	r0, r3
 80097c8:	e7a6      	b.n	8009718 <_printf_i+0x164>
 80097ca:	2301      	movs	r3, #1
 80097cc:	4632      	mov	r2, r6
 80097ce:	4649      	mov	r1, r9
 80097d0:	4640      	mov	r0, r8
 80097d2:	47d0      	blx	sl
 80097d4:	3001      	adds	r0, #1
 80097d6:	d09d      	beq.n	8009714 <_printf_i+0x160>
 80097d8:	3501      	adds	r5, #1
 80097da:	68e3      	ldr	r3, [r4, #12]
 80097dc:	9903      	ldr	r1, [sp, #12]
 80097de:	1a5b      	subs	r3, r3, r1
 80097e0:	42ab      	cmp	r3, r5
 80097e2:	dcf2      	bgt.n	80097ca <_printf_i+0x216>
 80097e4:	e7eb      	b.n	80097be <_printf_i+0x20a>
 80097e6:	2500      	movs	r5, #0
 80097e8:	f104 0619 	add.w	r6, r4, #25
 80097ec:	e7f5      	b.n	80097da <_printf_i+0x226>
 80097ee:	bf00      	nop
 80097f0:	08009a85 	.word	0x08009a85
 80097f4:	08009a96 	.word	0x08009a96

080097f8 <memmove>:
 80097f8:	4288      	cmp	r0, r1
 80097fa:	b510      	push	{r4, lr}
 80097fc:	eb01 0402 	add.w	r4, r1, r2
 8009800:	d902      	bls.n	8009808 <memmove+0x10>
 8009802:	4284      	cmp	r4, r0
 8009804:	4623      	mov	r3, r4
 8009806:	d807      	bhi.n	8009818 <memmove+0x20>
 8009808:	1e43      	subs	r3, r0, #1
 800980a:	42a1      	cmp	r1, r4
 800980c:	d008      	beq.n	8009820 <memmove+0x28>
 800980e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009816:	e7f8      	b.n	800980a <memmove+0x12>
 8009818:	4402      	add	r2, r0
 800981a:	4601      	mov	r1, r0
 800981c:	428a      	cmp	r2, r1
 800981e:	d100      	bne.n	8009822 <memmove+0x2a>
 8009820:	bd10      	pop	{r4, pc}
 8009822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800982a:	e7f7      	b.n	800981c <memmove+0x24>

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f7 fc5e 	bl	80010f8 <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	200147a4 	.word	0x200147a4

0800984c <_realloc_r>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	4680      	mov	r8, r0
 8009852:	4614      	mov	r4, r2
 8009854:	460e      	mov	r6, r1
 8009856:	b921      	cbnz	r1, 8009862 <_realloc_r+0x16>
 8009858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985c:	4611      	mov	r1, r2
 800985e:	f7ff bc57 	b.w	8009110 <_malloc_r>
 8009862:	b92a      	cbnz	r2, 8009870 <_realloc_r+0x24>
 8009864:	f7ff fbe8 	bl	8009038 <_free_r>
 8009868:	4625      	mov	r5, r4
 800986a:	4628      	mov	r0, r5
 800986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009870:	f000 f81b 	bl	80098aa <_malloc_usable_size_r>
 8009874:	4284      	cmp	r4, r0
 8009876:	4607      	mov	r7, r0
 8009878:	d802      	bhi.n	8009880 <_realloc_r+0x34>
 800987a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800987e:	d812      	bhi.n	80098a6 <_realloc_r+0x5a>
 8009880:	4621      	mov	r1, r4
 8009882:	4640      	mov	r0, r8
 8009884:	f7ff fc44 	bl	8009110 <_malloc_r>
 8009888:	4605      	mov	r5, r0
 800988a:	2800      	cmp	r0, #0
 800988c:	d0ed      	beq.n	800986a <_realloc_r+0x1e>
 800988e:	42bc      	cmp	r4, r7
 8009890:	4622      	mov	r2, r4
 8009892:	4631      	mov	r1, r6
 8009894:	bf28      	it	cs
 8009896:	463a      	movcs	r2, r7
 8009898:	f7ff fbc0 	bl	800901c <memcpy>
 800989c:	4631      	mov	r1, r6
 800989e:	4640      	mov	r0, r8
 80098a0:	f7ff fbca 	bl	8009038 <_free_r>
 80098a4:	e7e1      	b.n	800986a <_realloc_r+0x1e>
 80098a6:	4635      	mov	r5, r6
 80098a8:	e7df      	b.n	800986a <_realloc_r+0x1e>

080098aa <_malloc_usable_size_r>:
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	1f18      	subs	r0, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bfbc      	itt	lt
 80098b4:	580b      	ldrlt	r3, [r1, r0]
 80098b6:	18c0      	addlt	r0, r0, r3
 80098b8:	4770      	bx	lr
	...

080098bc <_init>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	bf00      	nop
 80098c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098c2:	bc08      	pop	{r3}
 80098c4:	469e      	mov	lr, r3
 80098c6:	4770      	bx	lr

080098c8 <_fini>:
 80098c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ca:	bf00      	nop
 80098cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ce:	bc08      	pop	{r3}
 80098d0:	469e      	mov	lr, r3
 80098d2:	4770      	bx	lr
