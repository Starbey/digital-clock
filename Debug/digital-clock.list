
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08009eb4  08009eb4  00019eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c8  0800a0c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d0  0800a0d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d0  0800a0d0  0001a0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0d4  0800a0d4  0001a0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a0d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001479c  20000070  0800a148  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001480c  0800a148  0002480c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018df4  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e86  00000000  00000000  00038ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118e  00000000  00000000  0003e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b35d  00000000  00000000  0003f5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba4d  00000000  00000000  0005a933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1bf8  00000000  00000000  00076380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006400  00000000  00000000  00117f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0011e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e9c 	.word	0x08009e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009e9c 	.word	0x08009e9c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200130f0 	.word	0x200130f0

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000ac 	.word	0x200000ac

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 fd12 	bl	80020a0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 fd07 	bl	80020a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 fcfc 	bl	80020a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 fcf1 	bl	80020a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 fce8 	bl	80020a0 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 fce2 	bl	80020a0 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 fcd9 	bl	80020a0 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f001 f9a7 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f001 f9a1 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f001 f99b 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f001 f995 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f001 f98f 	bl	8001b5c <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 f989 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f001 f983 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f001 f97d 	bl	8001b5c <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f001 f97a 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f001 f974 	bl	8001b5c <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f001 f927 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f93d 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fabf 	bl	8000e10 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f9a5 	bl	8000be0 <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 fa31 	bl	8000cfc <MX_TIM1_Init>
  MX_TIM9_Init();
 800089a:	f000 fa7f 	bl	8000d9c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)
 800089e:	4b76      	ldr	r3, [pc, #472]	; (8000a78 <main+0x1f8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a75      	ldr	r2, [pc, #468]	; (8000a78 <main+0x1f8>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start(&htim1);
 80008aa:	4874      	ldr	r0, [pc, #464]	; (8000a7c <main+0x1fc>)
 80008ac:	f002 ffda 	bl	8003864 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim9);
 80008b0:	4873      	ldr	r0, [pc, #460]	; (8000a80 <main+0x200>)
 80008b2:	f002 ffd7 	bl	8003864 <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008b6:	f006 fe23 	bl	8007500 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008ba:	f008 f8d3 	bl	8008a64 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008be:	2200      	movs	r2, #0
 80008c0:	2104      	movs	r1, #4
 80008c2:	200a      	movs	r0, #10
 80008c4:	f003 fd62 	bl	800438c <xQueueGenericCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a6e      	ldr	r2, [pc, #440]	; (8000a84 <main+0x204>)
 80008cc:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008ce:	4b6d      	ldr	r3, [pc, #436]	; (8000a84 <main+0x204>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10a      	bne.n	80008ec <main+0x6c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008e8:	bf00      	nop
 80008ea:	e7fe      	b.n	80008ea <main+0x6a>

  /*create timers */
  printTimerHandle = xTimerCreate("Print_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, printTimerCallback);
 80008ec:	4b66      	ldr	r3, [pc, #408]	; (8000a88 <main+0x208>)
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008f8:	4864      	ldr	r0, [pc, #400]	; (8000a8c <main+0x20c>)
 80008fa:	f005 fe5b 	bl	80065b4 <xTimerCreate>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a63      	ldr	r2, [pc, #396]	; (8000a90 <main+0x210>)
 8000902:	6013      	str	r3, [r2, #0]

  alarmTimerHandle = xTimerCreate("Alarm_Timer", pdMS_TO_TICKS(ALARM_LEN), pdFALSE, NULL, alarmTimerCallback);
 8000904:	4b63      	ldr	r3, [pc, #396]	; (8000a94 <main+0x214>)
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2300      	movs	r3, #0
 800090a:	2200      	movs	r2, #0
 800090c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000910:	4861      	ldr	r0, [pc, #388]	; (8000a98 <main+0x218>)
 8000912:	f005 fe4f 	bl	80065b4 <xTimerCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a60      	ldr	r2, [pc, #384]	; (8000a9c <main+0x21c>)
 800091a:	6013      	str	r3, [r2, #0]
  alarmLedTimerHandle = xTimerCreate("LED_Timer", pdMS_TO_TICKS(ALARM_LED_PERIOD), pdTRUE, NULL, alarmLedTimerCallback);
 800091c:	4b60      	ldr	r3, [pc, #384]	; (8000aa0 <main+0x220>)
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <main+0x224>)
 800092a:	f005 fe43 	bl	80065b4 <xTimerCreate>
 800092e:	4603      	mov	r3, r0
 8000930:	4a5d      	ldr	r2, [pc, #372]	; (8000aa8 <main+0x228>)
 8000932:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 8000934:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <main+0x22c>)
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2302      	movs	r3, #2
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	22fa      	movs	r2, #250	; 0xfa
 8000940:	495b      	ldr	r1, [pc, #364]	; (8000ab0 <main+0x230>)
 8000942:	485c      	ldr	r0, [pc, #368]	; (8000ab4 <main+0x234>)
 8000944:	f004 f9b6 	bl	8004cb4 <xTaskCreate>
 8000948:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d00a      	beq.n	8000966 <main+0xe6>
        __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	617b      	str	r3, [r7, #20]
    }
 8000962:	bf00      	nop
 8000964:	e7fe      	b.n	8000964 <main+0xe4>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000966:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <main+0x238>)
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	2303      	movs	r3, #3
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	22fa      	movs	r2, #250	; 0xfa
 8000972:	4952      	ldr	r1, [pc, #328]	; (8000abc <main+0x23c>)
 8000974:	4852      	ldr	r0, [pc, #328]	; (8000ac0 <main+0x240>)
 8000976:	f004 f99d 	bl	8004cb4 <xTaskCreate>
 800097a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00a      	beq.n	8000998 <main+0x118>
        __asm volatile
 8000982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000986:	f383 8811 	msr	BASEPRI, r3
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	f3bf 8f4f 	dsb	sy
 8000992:	613b      	str	r3, [r7, #16]
    }
 8000994:	bf00      	nop
 8000996:	e7fe      	b.n	8000996 <main+0x116>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <main+0x244>)
 800099a:	9301      	str	r3, [sp, #4]
 800099c:	2302      	movs	r3, #2
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2300      	movs	r3, #0
 80009a2:	22fa      	movs	r2, #250	; 0xfa
 80009a4:	4948      	ldr	r1, [pc, #288]	; (8000ac8 <main+0x248>)
 80009a6:	4849      	ldr	r0, [pc, #292]	; (8000acc <main+0x24c>)
 80009a8:	f004 f984 	bl	8004cb4 <xTaskCreate>
 80009ac:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d00a      	beq.n	80009ca <main+0x14a>
        __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	60fb      	str	r3, [r7, #12]
    }
 80009c6:	bf00      	nop
 80009c8:	e7fe      	b.n	80009c8 <main+0x148>

  status = xTaskCreate(rtcSetTaskHandler, "RTC_Set_Task", 250, NULL, 2, &rtcSetTaskHandle);
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <main+0x250>)
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	2302      	movs	r3, #2
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	22fa      	movs	r2, #250	; 0xfa
 80009d6:	493f      	ldr	r1, [pc, #252]	; (8000ad4 <main+0x254>)
 80009d8:	483f      	ldr	r0, [pc, #252]	; (8000ad8 <main+0x258>)
 80009da:	f004 f96b 	bl	8004cb4 <xTaskCreate>
 80009de:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d00a      	beq.n	80009fc <main+0x17c>
        __asm volatile
 80009e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ea:	f383 8811 	msr	BASEPRI, r3
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f3bf 8f4f 	dsb	sy
 80009f6:	60bb      	str	r3, [r7, #8]
    }
 80009f8:	bf00      	nop
 80009fa:	e7fe      	b.n	80009fa <main+0x17a>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <main+0x25c>)
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	2302      	movs	r3, #2
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	22fa      	movs	r2, #250	; 0xfa
 8000a08:	4935      	ldr	r1, [pc, #212]	; (8000ae0 <main+0x260>)
 8000a0a:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <main+0x264>)
 8000a0c:	f004 f952 	bl	8004cb4 <xTaskCreate>
 8000a10:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d00a      	beq.n	8000a2e <main+0x1ae>
        __asm volatile
 8000a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1c:	f383 8811 	msr	BASEPRI, r3
 8000a20:	f3bf 8f6f 	isb	sy
 8000a24:	f3bf 8f4f 	dsb	sy
 8000a28:	607b      	str	r3, [r7, #4]
    }
 8000a2a:	bf00      	nop
 8000a2c:	e7fe      	b.n	8000a2c <main+0x1ac>

  status = xTaskCreate(alarmStartTaskHandler, "Alarm_Start_Task", 250, NULL, 3, &alarmStartTaskHandle);
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <main+0x268>)
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2303      	movs	r3, #3
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	22fa      	movs	r2, #250	; 0xfa
 8000a3a:	492c      	ldr	r1, [pc, #176]	; (8000aec <main+0x26c>)
 8000a3c:	482c      	ldr	r0, [pc, #176]	; (8000af0 <main+0x270>)
 8000a3e:	f004 f939 	bl	8004cb4 <xTaskCreate>
 8000a42:	61f8      	str	r0, [r7, #28]
  configASSERT(status = pdPASS);
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]

  status = xTaskCreate(alarmBuzzerTaskHandler, "Alarm_Buzzer_Task", 250, NULL, 2, &alarmBuzzerTaskHandle);
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <main+0x274>)
 8000a4a:	9301      	str	r3, [sp, #4]
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	22fa      	movs	r2, #250	; 0xfa
 8000a54:	4928      	ldr	r1, [pc, #160]	; (8000af8 <main+0x278>)
 8000a56:	4829      	ldr	r0, [pc, #164]	; (8000afc <main+0x27c>)
 8000a58:	f004 f92c 	bl	8004cb4 <xTaskCreate>
 8000a5c:	61f8      	str	r0, [r7, #28]
  configASSERT(status = pdPASS);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]

  HAL_RTC_SetAlarm(&hrtc, &rtcAlarm, RTC_FORMAT_BIN);
 8000a62:	2200      	movs	r2, #0
 8000a64:	4926      	ldr	r1, [pc, #152]	; (8000b00 <main+0x280>)
 8000a66:	4827      	ldr	r0, [pc, #156]	; (8000b04 <main+0x284>)
 8000a68:	f002 fb33 	bl	80030d2 <HAL_RTC_SetAlarm>

  lcdInit();
 8000a6c:	f7ff feca 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 8000a70:	f004 fcc6 	bl	8005400 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x1f4>
 8000a76:	bf00      	nop
 8000a78:	e0001000 	.word	0xe0001000
 8000a7c:	200000ac 	.word	0x200000ac
 8000a80:	200000f4 	.word	0x200000f4
 8000a84:	20000158 	.word	0x20000158
 8000a88:	080013dd 	.word	0x080013dd
 8000a8c:	08009eb4 	.word	0x08009eb4
 8000a90:	2000015c 	.word	0x2000015c
 8000a94:	080019f1 	.word	0x080019f1
 8000a98:	08009ec0 	.word	0x08009ec0
 8000a9c:	20000164 	.word	0x20000164
 8000aa0:	08001a45 	.word	0x08001a45
 8000aa4:	08009ecc 	.word	0x08009ecc
 8000aa8:	20000160 	.word	0x20000160
 8000aac:	20000140 	.word	0x20000140
 8000ab0:	08009ed8 	.word	0x08009ed8
 8000ab4:	08001399 	.word	0x08001399
 8000ab8:	2000013c 	.word	0x2000013c
 8000abc:	08009eec 	.word	0x08009eec
 8000ac0:	08001341 	.word	0x08001341
 8000ac4:	20000144 	.word	0x20000144
 8000ac8:	08009ef8 	.word	0x08009ef8
 8000acc:	0800174d 	.word	0x0800174d
 8000ad0:	20000148 	.word	0x20000148
 8000ad4:	08009f08 	.word	0x08009f08
 8000ad8:	08001851 	.word	0x08001851
 8000adc:	2000014c 	.word	0x2000014c
 8000ae0:	08009f18 	.word	0x08009f18
 8000ae4:	08001911 	.word	0x08001911
 8000ae8:	20000150 	.word	0x20000150
 8000aec:	08009f28 	.word	0x08009f28
 8000af0:	08001985 	.word	0x08001985
 8000af4:	20000154 	.word	0x20000154
 8000af8:	08009f3c 	.word	0x08009f3c
 8000afc:	08001a65 	.word	0x08001a65
 8000b00:	2000019c 	.word	0x2000019c
 8000b04:	2000008c 	.word	0x2000008c

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	; 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fd3c 	bl	8009594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <SystemClock_Config+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <SystemClock_Config+0xd4>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <SystemClock_Config+0xd4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b68:	2309      	movs	r3, #9
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b72:	2301      	movs	r3, #1
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b84:	2354      	movs	r3, #84	; 0x54
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0320 	add.w	r3, r7, #32
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fab7 	bl	8002108 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ba0:	f000 fa44 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fd19 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000bcc:	f000 fa2e 	bl	800102c <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	; 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2228      	movs	r2, #40	; 0x28
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 fcc7 	bl	8009594 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c08:	4a3b      	ldr	r2, [pc, #236]	; (8000cf8 <MX_RTC_Init+0x118>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c14:	227f      	movs	r2, #127	; 0x7f
 8000c16:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2a:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c30:	4830      	ldr	r0, [pc, #192]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c32:	f002 f80d 	bl	8002c50 <HAL_RTC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c3c:	f000 f9f6 	bl	800102c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c64:	f002 f86a 	bl	8002d3c <HAL_RTC_SetTime>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000c6e:	f000 f9dd 	bl	800102c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000c94:	f002 f94a 	bl	8002f2c <HAL_RTC_SetDate>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000c9e:	f000 f9c5 	bl	800102c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x5;
 8000caa:	2305      	movs	r3, #5
 8000cac:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8000cba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000cbe:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000cc0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000cc4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_RTC_Init+0x114>)
 8000cde:	f002 fb23 	bl	8003328 <HAL_RTC_SetAlarm_IT>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000ce8:	f000 f9a0 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3740      	adds	r7, #64	; 0x40
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000008c 	.word	0x2000008c
 8000cf8:	40002800 	.word	0x40002800

08000cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <MX_TIM1_Init+0x9c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d20:	2254      	movs	r2, #84	; 0x54
 8000d22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d46:	f002 fd3e 	bl	80037c6 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f96c 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d62:	f002 ff43 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d6c:	f000 f95e 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM1_Init+0x98>)
 8000d7e:	f003 f93f 	bl	8004000 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d88:	f000 f950 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000ac 	.word	0x200000ac
 8000d98:	40010000 	.word	0x40010000

08000d9c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000db0:	4a16      	ldr	r2, [pc, #88]	; (8000e0c <MX_TIM9_Init+0x70>)
 8000db2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000db6:	2254      	movs	r2, #84	; 0x54
 8000db8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000dd6:	f002 fcf6 	bl	80037c6 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000de0:	f000 f924 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <MX_TIM9_Init+0x6c>)
 8000df0:	f002 fefc 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000dfa:	f000 f917 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000f4 	.word	0x200000f4
 8000e0c:	40014000 	.word	0x40014000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b57      	ldr	r3, [pc, #348]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a56      	ldr	r2, [pc, #344]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b54      	ldr	r3, [pc, #336]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b50      	ldr	r3, [pc, #320]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b49      	ldr	r3, [pc, #292]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b46      	ldr	r3, [pc, #280]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b42      	ldr	r3, [pc, #264]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a41      	ldr	r2, [pc, #260]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <MX_GPIO_Init+0x178>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|RED_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f240 6103 	movw	r1, #1539	; 0x603
 8000e9c:	483b      	ldr	r0, [pc, #236]	; (8000f8c <MX_GPIO_Init+0x17c>)
 8000e9e:	f001 f8ff 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|BUZZER_Pin|E_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f248 0190 	movw	r1, #32912	; 0x8090
 8000ea8:	4839      	ldr	r0, [pc, #228]	; (8000f90 <MX_GPIO_Init+0x180>)
 8000eaa:	f001 f8f9 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2181      	movs	r1, #129	; 0x81
 8000eb2:	4838      	ldr	r0, [pc, #224]	; (8000f94 <MX_GPIO_Init+0x184>)
 8000eb4:	f001 f8f4 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ebe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	482f      	ldr	r0, [pc, #188]	; (8000f8c <MX_GPIO_Init+0x17c>)
 8000ed0:	f000 ff4a 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin RED_LED_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|RED_LED_Pin|GPIO_PIN_10;
 8000ed4:	f240 6303 	movw	r3, #1539	; 0x603
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <MX_GPIO_Init+0x17c>)
 8000eee:	f000 ff3b 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4820      	ldr	r0, [pc, #128]	; (8000f90 <MX_GPIO_Init+0x180>)
 8000f0e:	f000 ff2b 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin BUZZER_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|BUZZER_Pin|E_Pin;
 8000f12:	f248 0390 	movw	r3, #32912	; 0x8090
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4819      	ldr	r0, [pc, #100]	; (8000f90 <MX_GPIO_Init+0x180>)
 8000f2c:	f000 ff1c 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|DEC_Pin;
 8000f30:	2360      	movs	r3, #96	; 0x60
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4813      	ldr	r0, [pc, #76]	; (8000f90 <MX_GPIO_Init+0x180>)
 8000f44:	f000 ff10 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000f48:	2381      	movs	r3, #129	; 0x81
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f50:	2302      	movs	r3, #2
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_GPIO_Init+0x184>)
 8000f60:	f000 ff02 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SELECT_Pin;
 8000f64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <MX_GPIO_Init+0x184>)
 8000f7a:	f000 fef5 	bl	8001d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400

08000f98 <delayUs>:

/* USER CODE BEGIN 4 */

void delayUs(uint16_t us){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim9, 0);
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <delayUs+0x30>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim9) < us);
 8000faa:	bf00      	nop
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <delayUs+0x30>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f9      	bcc.n	8000fac <delayUs+0x14>
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000f4 	.word	0x200000f4

08000fcc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	BaseType_t isYieldRequired;
	isYieldRequired = xTaskResumeFromISR(alarmStartTaskHandle);
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 f965 	bl	80052a8 <xTaskResumeFromISR>
 8000fde:	60f8      	str	r0, [r7, #12]

	portYIELD_FROM_ISR(isYieldRequired);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_RTC_AlarmAEventCallback+0x2a>
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_RTC_AlarmAEventCallback+0x38>)
 8000fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	f3bf 8f6f 	isb	sy

}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000150 	.word	0x20000150
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101a:	f000 fd7f 	bl	8001b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000c00 	.word	0x40000c00

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_MspInit+0x50>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_MspInit+0x50>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_MspInit+0x50>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x50>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_MspInit+0x50>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_MspInit+0x50>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 fe41 	bl	8001cfe <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 800107c:	f005 fec4 	bl	8006e08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800

0800108c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <HAL_RTC_MspInit+0x60>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d119      	bne.n	80010e2 <HAL_RTC_MspInit+0x56>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010ae:	2302      	movs	r3, #2
 80010b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80010b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fcd9 	bl	8002a74 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80010c8:	f7ff ffb0 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_RTC_MspInit+0x64>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	210f      	movs	r1, #15
 80010d6:	2029      	movs	r0, #41	; 0x29
 80010d8:	f000 fe1c 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010dc:	2029      	movs	r0, #41	; 0x29
 80010de:	f000 fe35 	bl	8001d4c <HAL_NVIC_EnableIRQ>
    /* enable RTC alarm IRQ in NVIC */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40002800 	.word	0x40002800
 80010f0:	42470e3c 	.word	0x42470e3c

080010f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a15      	ldr	r2, [pc, #84]	; (8001158 <HAL_TIM_Base_MspInit+0x64>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10e      	bne.n	8001124 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001122:	e012      	b.n	800114a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_TIM_Base_MspInit+0x6c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d10d      	bne.n	800114a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <HAL_TIM_Base_MspInit+0x68>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40010000 	.word	0x40010000
 800115c:	40023800 	.word	0x40023800
 8001160:	40014000 	.word	0x40014000

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	4b33      	ldr	r3, [pc, #204]	; (8001248 <HAL_InitTick+0xe4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a32      	ldr	r2, [pc, #200]	; (8001248 <HAL_InitTick+0xe4>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_InitTick+0xe4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fc38 	bl	8002a10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011aa:	f001 fc1d 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80011ae:	6378      	str	r0, [r7, #52]	; 0x34
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 fc19 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	4a23      	ldr	r2, [pc, #140]	; (800124c <HAL_InitTick+0xe8>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	0c9b      	lsrs	r3, r3, #18
 80011c6:	3b01      	subs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_InitTick+0xec>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_InitTick+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_InitTick+0xec>)
 80011d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_InitTick+0xec>)
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_InitTick+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_InitTick+0xec>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_InitTick+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <HAL_InitTick+0xec>)
 80011f2:	f002 fae8 	bl	80037c6 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001200:	2b00      	cmp	r3, #0
 8001202:	d11b      	bne.n	800123c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <HAL_InitTick+0xec>)
 8001206:	f002 fb87 	bl	8003918 <HAL_TIM_Base_Start_IT>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001210:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001214:	2b00      	cmp	r3, #0
 8001216:	d111      	bne.n	800123c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001218:	2032      	movs	r0, #50	; 0x32
 800121a:	f000 fd97 	bl	8001d4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d808      	bhi.n	8001236 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f000 fd73 	bl	8001d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_InitTick+0xf4>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	e002      	b.n	800123c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800123c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001240:	4618      	mov	r0, r3
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	431bde83 	.word	0x431bde83
 8001250:	200001c4 	.word	0x200001c4
 8001254:	40000c00 	.word	0x40000c00
 8001258:	20000010 	.word	0x20000010

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <RTC_Alarm_IRQHandler+0x10>)
 800128e:	f002 f98d 	bl	80035ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000008c 	.word	0x2000008c

0800129c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM5_IRQHandler+0x10>)
 80012a2:	f002 fb9b 	bl	80039dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001c4 	.word	0x200001c4

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f008 f960 	bl	80095a4 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20018000 	.word	0x20018000
 8001310:	00000400 	.word	0x00000400
 8001314:	2000020c 	.word	0x2000020c
 8001318:	20014810 	.word	0x20014810

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <printTaskHandler>:

static void handleSetTime(RTC_TimeTypeDef *setTime);
static void handleSetDate(RTC_DateTypeDef *setDate);
static void handleSelect(void);

void printTaskHandler(void *parameters){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint32_t *str;

	while(1){
		/* print top row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <printTaskHandler+0x54>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f107 010c 	add.w	r1, r7, #12
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	4618      	mov	r0, r3
 8001356:	f003 fa3b 	bl	80047d0 <xQueueReceive>
		lcdClear();
 800135a:	f7ff fa28 	bl	80007ae <lcdClear>
		lcdMoveCursor(0, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fa01 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fa2b 	bl	80007c4 <lcdSendString>

		/* print bottom row */
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <printTaskHandler+0x54>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f107 010c 	add.w	r1, r7, #12
 8001376:	f04f 32ff 	mov.w	r2, #4294967295
 800137a:	4618      	mov	r0, r3
 800137c:	f003 fa28 	bl	80047d0 <xQueueReceive>
		lcdMoveCursor(1, 0);
 8001380:	2100      	movs	r1, #0
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff f9f0 	bl	8000768 <lcdMoveCursor>
		lcdSendString( (char*) str );
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa1a 	bl	80007c4 <lcdSendString>
		xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8001390:	e7da      	b.n	8001348 <printTaskHandler+0x8>
 8001392:	bf00      	nop
 8001394:	20000158 	.word	0x20000158

08001398 <startTimerTaskHandler>:
	}
}

void startTimerTaskHandler(void *parameters){
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b085      	sub	sp, #20
 800139c:	af02      	add	r7, sp, #8
 800139e:	6078      	str	r0, [r7, #4]
	while(1){
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <startTimerTaskHandler+0x38>)
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	f004 f99c 	bl	80056e0 <xTaskGetTickCount>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	2101      	movs	r1, #1
 80013b4:	4620      	mov	r0, r4
 80013b6:	f005 f957 	bl	8006668 <xTimerGenericCommand>
		vTaskSuspend(alarmBuzzerTaskHandle);
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <startTimerTaskHandler+0x3c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fe00 	bl	8004fc4 <vTaskSuspend>
		vTaskSuspend(startTimerTaskHandle);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <startTimerTaskHandler+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fdfb 	bl	8004fc4 <vTaskSuspend>
		xTimerStart(printTimerHandle, portMAX_DELAY);
 80013ce:	e7e7      	b.n	80013a0 <startTimerTaskHandler+0x8>
 80013d0:	2000015c 	.word	0x2000015c
 80013d4:	20000154 	.word	0x20000154
 80013d8:	20000140 	.word	0x20000140

080013dc <printTimerCallback>:
	}
}

void printTimerCallback(TimerHandle_t xTimer){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	6078      	str	r0, [r7, #4]
	if (currMode == mDisplayRtc){
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <printTimerCallback+0x64>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <printTimerCallback+0x24>
		xTaskNotify(rtcUpdateTaskHandle, 0, eNoAction);
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <printTimerCallback+0x68>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	f004 fef5 	bl	80061e8 <xTaskGenericNotify>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
	}
	else if(currMode == mSetAlarm){
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
	}
}
 80013fe:	e01a      	b.n	8001436 <printTimerCallback+0x5a>
	else if (currMode == mSetRtc){
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <printTimerCallback+0x64>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d109      	bne.n	800141c <printTimerCallback+0x40>
		xTaskNotify(rtcSetTaskHandle, 0, eNoAction);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <printTimerCallback+0x6c>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	f004 fee7 	bl	80061e8 <xTaskGenericNotify>
}
 800141a:	e00c      	b.n	8001436 <printTimerCallback+0x5a>
	else if(currMode == mSetAlarm){
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <printTimerCallback+0x64>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b02      	cmp	r3, #2
 8001422:	d108      	bne.n	8001436 <printTimerCallback+0x5a>
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <printTimerCallback+0x70>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	f004 fed9 	bl	80061e8 <xTaskGenericNotify>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000168 	.word	0x20000168
 8001444:	20000144 	.word	0x20000144
 8001448:	20000148 	.word	0x20000148
 800144c:	2000014c 	.word	0x2000014c

08001450 <vApplicationIdleHook>:

void vApplicationIdleHook(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8001454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <vApplicationIdleHook+0x80>)
 800145a:	f000 fe09 	bl	8002070 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d122      	bne.n	80014aa <vApplicationIdleHook+0x5a>
		if (currMode == mDisplayRtc){
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <vApplicationIdleHook+0x84>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <vApplicationIdleHook+0x2c>
			currMode = mSetRtc;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <vApplicationIdleHook+0x84>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001472:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001476:	f000 fb71 	bl	8001b5c <HAL_Delay>
 800147a:	e016      	b.n	80014aa <vApplicationIdleHook+0x5a>
		}
		else if (currMode == mSetRtc){
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <vApplicationIdleHook+0x84>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <vApplicationIdleHook+0x44>
			currMode = mSetAlarm;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <vApplicationIdleHook+0x84>)
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 800148a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800148e:	f000 fb65 	bl	8001b5c <HAL_Delay>
 8001492:	e00a      	b.n	80014aa <vApplicationIdleHook+0x5a>
		}
		else if(currMode == mSetAlarm){
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <vApplicationIdleHook+0x84>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d106      	bne.n	80014aa <vApplicationIdleHook+0x5a>
			currMode = mDisplayRtc;
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <vApplicationIdleHook+0x84>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
			HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 80014a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014a6:	f000 fb59 	bl	8001b5c <HAL_Delay>
		}
	}

	if (currMode == mSetRtc) {
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <vApplicationIdleHook+0x84>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10c      	bne.n	80014cc <vApplicationIdleHook+0x7c>
		if(currSet <= 2){
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <vApplicationIdleHook+0x88>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d803      	bhi.n	80014c2 <vApplicationIdleHook+0x72>
			handleSetTime(&setTime);
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <vApplicationIdleHook+0x8c>)
 80014bc:	f000 f812 	bl	80014e4 <handleSetTime>
 80014c0:	e002      	b.n	80014c8 <vApplicationIdleHook+0x78>
		}
		else {
			handleSetDate(&setDate);
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <vApplicationIdleHook+0x90>)
 80014c4:	f000 f88a 	bl	80015dc <handleSetDate>
		}
		handleSelect();
 80014c8:	f000 f900 	bl	80016cc <handleSelect>
	}
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020400 	.word	0x40020400
 80014d4:	20000168 	.word	0x20000168
 80014d8:	20000169 	.word	0x20000169
 80014dc:	20000188 	.word	0x20000188
 80014e0:	20000184 	.word	0x20000184

080014e4 <handleSetTime>:

static void handleSetTime(RTC_TimeTypeDef *setTime){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 80014ec:	2120      	movs	r1, #32
 80014ee:	4839      	ldr	r0, [pc, #228]	; (80015d4 <handleSetTime+0xf0>)
 80014f0:	f000 fdbe 	bl	8002070 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d130      	bne.n	800155c <handleSetTime+0x78>
		if(currSet == sHour){
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <handleSetTime+0xf4>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10a      	bne.n	8001518 <handleSetTime+0x34>
			if(setTime->Hours < 23) setTime->Hours++;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b16      	cmp	r3, #22
 8001508:	d823      	bhi.n	8001552 <handleSetTime+0x6e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	e01c      	b.n	8001552 <handleSetTime+0x6e>
		}
		else if(currSet == sMin){
 8001518:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <handleSetTime+0xf4>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d10a      	bne.n	8001536 <handleSetTime+0x52>
			if(setTime->Minutes < 59) setTime->Minutes++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	2b3a      	cmp	r3, #58	; 0x3a
 8001526:	d814      	bhi.n	8001552 <handleSetTime+0x6e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	3301      	adds	r3, #1
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	705a      	strb	r2, [r3, #1]
 8001534:	e00d      	b.n	8001552 <handleSetTime+0x6e>
		}
		else if(currSet ==sSec){
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <handleSetTime+0xf4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d109      	bne.n	8001552 <handleSetTime+0x6e>
			if(setTime->Seconds < 59) setTime->Seconds++;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	2b3a      	cmp	r3, #58	; 0x3a
 8001544:	d805      	bhi.n	8001552 <handleSetTime+0x6e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	709a      	strb	r2, [r3, #2]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 8001552:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001556:	f000 fb01 	bl	8001b5c <HAL_Delay>
		else if(currSet == sSec){
			if(setTime->Seconds > 0) setTime->Seconds--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 800155a:	e036      	b.n	80015ca <handleSetTime+0xe6>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	481d      	ldr	r0, [pc, #116]	; (80015d4 <handleSetTime+0xf0>)
 8001560:	f000 fd86 	bl	8002070 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d12f      	bne.n	80015ca <handleSetTime+0xe6>
		if(currSet == sHour){
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <handleSetTime+0xf4>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <handleSetTime+0xa4>
			if(setTime->Hours > 0) setTime->Hours--;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d023      	beq.n	80015c2 <handleSetTime+0xde>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e01c      	b.n	80015c2 <handleSetTime+0xde>
		else if(currSet == sMin){
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <handleSetTime+0xf4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d10a      	bne.n	80015a6 <handleSetTime+0xc2>
			if(setTime->Minutes > 0) setTime->Minutes--;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d014      	beq.n	80015c2 <handleSetTime+0xde>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	3b01      	subs	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	705a      	strb	r2, [r3, #1]
 80015a4:	e00d      	b.n	80015c2 <handleSetTime+0xde>
		else if(currSet == sSec){
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <handleSetTime+0xf4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d109      	bne.n	80015c2 <handleSetTime+0xde>
			if(setTime->Seconds > 0) setTime->Seconds--;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	789b      	ldrb	r3, [r3, #2]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <handleSetTime+0xde>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	709a      	strb	r2, [r3, #2]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80015c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015c6:	f000 fac9 	bl	8001b5c <HAL_Delay>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020000 	.word	0x40020000
 80015d8:	20000169 	.word	0x20000169

080015dc <handleSetDate>:

static void handleSetDate(RTC_DateTypeDef *setDate){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin) == GPIO_PIN_SET){
 80015e4:	2120      	movs	r1, #32
 80015e6:	4837      	ldr	r0, [pc, #220]	; (80016c4 <handleSetDate+0xe8>)
 80015e8:	f000 fd42 	bl	8002070 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d12c      	bne.n	800164c <handleSetDate+0x70>
		if(currSet == sMonth){
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <handleSetDate+0xec>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d10a      	bne.n	8001610 <handleSetDate+0x34>
			if(setDate->Month < 11) setDate->Month++;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	2b0a      	cmp	r3, #10
 8001600:	d81f      	bhi.n	8001642 <handleSetDate+0x66>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	705a      	strb	r2, [r3, #1]
 800160e:	e018      	b.n	8001642 <handleSetDate+0x66>
		}
		else if(currSet == sDay) {
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <handleSetDate+0xec>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d10a      	bne.n	800162e <handleSetDate+0x52>
			if(setDate->Date < 30) setDate->Date++;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	2b1d      	cmp	r3, #29
 800161e:	d810      	bhi.n	8001642 <handleSetDate+0x66>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	3301      	adds	r3, #1
 8001626:	b2da      	uxtb	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	709a      	strb	r2, [r3, #2]
 800162c:	e009      	b.n	8001642 <handleSetDate+0x66>
		}
		else if(currSet == sYear) {
 800162e:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <handleSetDate+0xec>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d105      	bne.n	8001642 <handleSetDate+0x66>
			if(setDate->Year < 998) setDate->Year++;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	78db      	ldrb	r3, [r3, #3]
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	70da      	strb	r2, [r3, #3]
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 8001642:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001646:	f000 fa89 	bl	8001b5c <HAL_Delay>
		else if(currSet == sYear) {
			if(setDate->Year > 0) setDate->Year--;
		}
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
	}
}
 800164a:	e036      	b.n	80016ba <handleSetDate+0xde>
	else if (HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin) == GPIO_PIN_SET){
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <handleSetDate+0xe8>)
 8001650:	f000 fd0e 	bl	8002070 <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	2b01      	cmp	r3, #1
 8001658:	d12f      	bne.n	80016ba <handleSetDate+0xde>
		if(currSet == sMonth){
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <handleSetDate+0xec>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b04      	cmp	r3, #4
 8001660:	d10a      	bne.n	8001678 <handleSetDate+0x9c>
			if(setDate->Month > 1) setDate->Month--;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d923      	bls.n	80016b2 <handleSetDate+0xd6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	3b01      	subs	r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	705a      	strb	r2, [r3, #1]
 8001676:	e01c      	b.n	80016b2 <handleSetDate+0xd6>
		else if(currSet == sDay) {
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <handleSetDate+0xec>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d10a      	bne.n	8001696 <handleSetDate+0xba>
			if(setDate->Date > 1) setDate->Date--;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d914      	bls.n	80016b2 <handleSetDate+0xd6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	3b01      	subs	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	709a      	strb	r2, [r3, #2]
 8001694:	e00d      	b.n	80016b2 <handleSetDate+0xd6>
		else if(currSet == sYear) {
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <handleSetDate+0xec>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d109      	bne.n	80016b2 <handleSetDate+0xd6>
			if(setDate->Year > 0) setDate->Year--;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	78db      	ldrb	r3, [r3, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <handleSetDate+0xd6>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	78db      	ldrb	r3, [r3, #3]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	70da      	strb	r2, [r3, #3]
		HAL_Delay(DEBOUNCE_DELAY_PERIOD); // putting delay here improves responsiveness for some reason
 80016b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016b6:	f000 fa51 	bl	8001b5c <HAL_Delay>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020000 	.word	0x40020000
 80016c8:	20000169 	.word	0x20000169

080016cc <handleSelect>:

static void handleSelect(void){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET){
 80016d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d4:	481b      	ldr	r0, [pc, #108]	; (8001744 <handleSelect+0x78>)
 80016d6:	f000 fccb 	bl	8002070 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d12f      	bne.n	8001740 <handleSelect+0x74>
		switch(currSet){
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <handleSelect+0x7c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d827      	bhi.n	8001738 <handleSelect+0x6c>
 80016e8:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <handleSelect+0x24>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001709 	.word	0x08001709
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001729 	.word	0x08001729
 8001700:	08001721 	.word	0x08001721
 8001704:	08001731 	.word	0x08001731
		case sHour:
			currSet = sMin;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <handleSelect+0x7c>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
			break;
 800170e:	e013      	b.n	8001738 <handleSelect+0x6c>
		case sMin:
			currSet = sSec;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <handleSelect+0x7c>)
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
			break;
 8001716:	e00f      	b.n	8001738 <handleSelect+0x6c>
		case sSec:
			currSet = sMonth;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <handleSelect+0x7c>)
 800171a:	2204      	movs	r2, #4
 800171c:	701a      	strb	r2, [r3, #0]
			break;
 800171e:	e00b      	b.n	8001738 <handleSelect+0x6c>
		case sMonth:
			currSet = sDay;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <handleSelect+0x7c>)
 8001722:	2203      	movs	r2, #3
 8001724:	701a      	strb	r2, [r3, #0]
			break;
 8001726:	e007      	b.n	8001738 <handleSelect+0x6c>
		case sDay:
			currSet = sYear;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <handleSelect+0x7c>)
 800172a:	2205      	movs	r2, #5
 800172c:	701a      	strb	r2, [r3, #0]
			break;
 800172e:	e003      	b.n	8001738 <handleSelect+0x6c>
		case sYear:
			currSet = sHour;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <handleSelect+0x7c>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
			break;
 8001736:	bf00      	nop
		}

		HAL_Delay(DEBOUNCE_DELAY_PERIOD);
 8001738:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800173c:	f000 fa0e 	bl	8001b5c <HAL_Delay>
	}
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40020400 	.word	0x40020400
 8001748:	20000169 	.word	0x20000169

0800174c <rtcUpdateTaskHandler>:

void rtcUpdateTaskHandler(void *parameters){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2000      	movs	r0, #0
 8001762:	f004 fcb9 	bl	80060d8 <xTaskGenericNotifyWait>

		memset( &rtcDate,0,sizeof(rtcDate) );
 8001766:	2204      	movs	r2, #4
 8001768:	2100      	movs	r1, #0
 800176a:	482f      	ldr	r0, [pc, #188]	; (8001828 <rtcUpdateTaskHandler+0xdc>)
 800176c:	f007 ff12 	bl	8009594 <memset>
		memset( &rtcTime,0,sizeof(rtcTime) );
 8001770:	2214      	movs	r2, #20
 8001772:	2100      	movs	r1, #0
 8001774:	482d      	ldr	r0, [pc, #180]	; (800182c <rtcUpdateTaskHandler+0xe0>)
 8001776:	f007 ff0d 	bl	8009594 <memset>

		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800177a:	2200      	movs	r2, #0
 800177c:	492b      	ldr	r1, [pc, #172]	; (800182c <rtcUpdateTaskHandler+0xe0>)
 800177e:	482c      	ldr	r0, [pc, #176]	; (8001830 <rtcUpdateTaskHandler+0xe4>)
 8001780:	f001 fb76 	bl	8002e70 <HAL_RTC_GetTime>
		HAL_RTC_GetTime(&hrtc, &setTime, RTC_FORMAT_BIN); // sets time for "set" mode
 8001784:	2200      	movs	r2, #0
 8001786:	492b      	ldr	r1, [pc, #172]	; (8001834 <rtcUpdateTaskHandler+0xe8>)
 8001788:	4829      	ldr	r0, [pc, #164]	; (8001830 <rtcUpdateTaskHandler+0xe4>)
 800178a:	f001 fb71 	bl	8002e70 <HAL_RTC_GetTime>

		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800178e:	2200      	movs	r2, #0
 8001790:	4925      	ldr	r1, [pc, #148]	; (8001828 <rtcUpdateTaskHandler+0xdc>)
 8001792:	4827      	ldr	r0, [pc, #156]	; (8001830 <rtcUpdateTaskHandler+0xe4>)
 8001794:	f001 fc4e 	bl	8003034 <HAL_RTC_GetDate>
		HAL_RTC_GetDate(&hrtc, &setDate, RTC_FORMAT_BIN); // sets date for "set" mode
 8001798:	2200      	movs	r2, #0
 800179a:	4927      	ldr	r1, [pc, #156]	; (8001838 <rtcUpdateTaskHandler+0xec>)
 800179c:	4824      	ldr	r0, [pc, #144]	; (8001830 <rtcUpdateTaskHandler+0xe4>)
 800179e:	f001 fc49 	bl	8003034 <HAL_RTC_GetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80017a2:	2228      	movs	r2, #40	; 0x28
 80017a4:	2100      	movs	r1, #0
 80017a6:	4825      	ldr	r0, [pc, #148]	; (800183c <rtcUpdateTaskHandler+0xf0>)
 80017a8:	f007 fef4 	bl	8009594 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds);
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <rtcUpdateTaskHandler+0xe0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <rtcUpdateTaskHandler+0xe0>)
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <rtcUpdateTaskHandler+0xe0>)
 80017ba:	789b      	ldrb	r3, [r3, #2]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	460b      	mov	r3, r1
 80017c0:	491f      	ldr	r1, [pc, #124]	; (8001840 <rtcUpdateTaskHandler+0xf4>)
 80017c2:	481e      	ldr	r0, [pc, #120]	; (800183c <rtcUpdateTaskHandler+0xf0>)
 80017c4:	f007 feb6 	bl	8009534 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <rtcUpdateTaskHandler+0xf8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f007 fe41 	bl	8009454 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <rtcUpdateTaskHandler+0xfc>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	4919      	ldr	r1, [pc, #100]	; (8001844 <rtcUpdateTaskHandler+0xf8>)
 80017de:	f002 fe47 	bl	8004470 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80017e2:	2228      	movs	r2, #40	; 0x28
 80017e4:	2100      	movs	r1, #0
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <rtcUpdateTaskHandler+0xf0>)
 80017e8:	f007 fed4 	bl	8009594 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <rtcUpdateTaskHandler+0xdc>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <rtcUpdateTaskHandler+0xdc>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <rtcUpdateTaskHandler+0xdc>)
 80017fa:	78db      	ldrb	r3, [r3, #3]
 80017fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	460b      	mov	r3, r1
 8001804:	4911      	ldr	r1, [pc, #68]	; (800184c <rtcUpdateTaskHandler+0x100>)
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <rtcUpdateTaskHandler+0xf0>)
 8001808:	f007 fe94 	bl	8009534 <siprintf>
		SEGGER_SYSVIEW_PrintfTarget(str);
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <rtcUpdateTaskHandler+0xf8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f007 fe1f 	bl	8009454 <SEGGER_SYSVIEW_PrintfTarget>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <rtcUpdateTaskHandler+0xfc>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <rtcUpdateTaskHandler+0xf8>)
 8001822:	f002 fe25 	bl	8004470 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001826:	e795      	b.n	8001754 <rtcUpdateTaskHandler+0x8>
 8001828:	2000016c 	.word	0x2000016c
 800182c:	20000170 	.word	0x20000170
 8001830:	2000008c 	.word	0x2000008c
 8001834:	20000188 	.word	0x20000188
 8001838:	20000184 	.word	0x20000184
 800183c:	20000210 	.word	0x20000210
 8001840:	08009f50 	.word	0x08009f50
 8001844:	20000004 	.word	0x20000004
 8001848:	20000158 	.word	0x20000158
 800184c:	08009f60 	.word	0x08009f60

08001850 <rtcSetTaskHandler>:

	}
}

void rtcSetTaskHandler(void *parameters){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af02      	add	r7, sp, #8
 8001856:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2000      	movs	r0, #0
 8001866:	f004 fc37 	bl	80060d8 <xTaskGenericNotifyWait>

		HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 800186a:	2200      	movs	r2, #0
 800186c:	4920      	ldr	r1, [pc, #128]	; (80018f0 <rtcSetTaskHandler+0xa0>)
 800186e:	4821      	ldr	r0, [pc, #132]	; (80018f4 <rtcSetTaskHandler+0xa4>)
 8001870:	f001 fa64 	bl	8002d3c <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &setDate, RTC_FORMAT_BIN);
 8001874:	2200      	movs	r2, #0
 8001876:	4920      	ldr	r1, [pc, #128]	; (80018f8 <rtcSetTaskHandler+0xa8>)
 8001878:	481e      	ldr	r0, [pc, #120]	; (80018f4 <rtcSetTaskHandler+0xa4>)
 800187a:	f001 fb57 	bl	8002f2c <HAL_RTC_SetDate>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	481e      	ldr	r0, [pc, #120]	; (80018fc <rtcSetTaskHandler+0xac>)
 8001884:	f007 fe86 	bl	8009594 <memset>

		sprintf( (char*) strBuffer, "%02d:%02d:%02d",setTime.Hours, setTime.Minutes, setTime.Seconds);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <rtcSetTaskHandler+0xa0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <rtcSetTaskHandler+0xa0>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	4619      	mov	r1, r3
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <rtcSetTaskHandler+0xa0>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	460b      	mov	r3, r1
 800189c:	4918      	ldr	r1, [pc, #96]	; (8001900 <rtcSetTaskHandler+0xb0>)
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <rtcSetTaskHandler+0xac>)
 80018a0:	f007 fe48 	bl	8009534 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <rtcSetTaskHandler+0xb4>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	f04f 32ff 	mov.w	r2, #4294967295
 80018ae:	4916      	ldr	r1, [pc, #88]	; (8001908 <rtcSetTaskHandler+0xb8>)
 80018b0:	f002 fdde 	bl	8004470 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 80018b4:	2228      	movs	r2, #40	; 0x28
 80018b6:	2100      	movs	r1, #0
 80018b8:	4810      	ldr	r0, [pc, #64]	; (80018fc <rtcSetTaskHandler+0xac>)
 80018ba:	f007 fe6b 	bl	8009594 <memset>
		sprintf( (char*) strBuffer, "%02d-%02d-%2d", setDate.Month, setDate.Date, 2000 + setDate.Year);
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <rtcSetTaskHandler+0xa8>)
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <rtcSetTaskHandler+0xa8>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	4619      	mov	r1, r3
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <rtcSetTaskHandler+0xa8>)
 80018cc:	78db      	ldrb	r3, [r3, #3]
 80018ce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	460b      	mov	r3, r1
 80018d6:	490d      	ldr	r1, [pc, #52]	; (800190c <rtcSetTaskHandler+0xbc>)
 80018d8:	4808      	ldr	r0, [pc, #32]	; (80018fc <rtcSetTaskHandler+0xac>)
 80018da:	f007 fe2b 	bl	8009534 <siprintf>
		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <rtcSetTaskHandler+0xb4>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	4907      	ldr	r1, [pc, #28]	; (8001908 <rtcSetTaskHandler+0xb8>)
 80018ea:	f002 fdc1 	bl	8004470 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80018ee:	e7b3      	b.n	8001858 <rtcSetTaskHandler+0x8>
 80018f0:	20000188 	.word	0x20000188
 80018f4:	2000008c 	.word	0x2000008c
 80018f8:	20000184 	.word	0x20000184
 80018fc:	20000238 	.word	0x20000238
 8001900:	08009f50 	.word	0x08009f50
 8001904:	20000158 	.word	0x20000158
 8001908:	20000008 	.word	0x20000008
 800190c:	08009f60 	.word	0x08009f60

08001910 <alarmSetTaskHandler>:

	}
}

void alarmSetTaskHandler(void *parameters){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
	static char strBuffer[40];
	static char *str = strBuffer;

	while(1){
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2000      	movs	r0, #0
 8001926:	f004 fbd7 	bl	80060d8 <xTaskGenericNotifyWait>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800192a:	2228      	movs	r2, #40	; 0x28
 800192c:	2100      	movs	r1, #0
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <alarmSetTaskHandler+0x60>)
 8001930:	f007 fe30 	bl	8009594 <memset>
		sprintf( (char*) strBuffer, "Alarm" );
 8001934:	490f      	ldr	r1, [pc, #60]	; (8001974 <alarmSetTaskHandler+0x64>)
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <alarmSetTaskHandler+0x60>)
 8001938:	f007 fdfc 	bl	8009534 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <alarmSetTaskHandler+0x68>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <alarmSetTaskHandler+0x6c>)
 8001948:	f002 fd92 	bl	8004470 <xQueueGenericSend>

		memset(&strBuffer, 0, sizeof(strBuffer) );
 800194c:	2228      	movs	r2, #40	; 0x28
 800194e:	2100      	movs	r1, #0
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <alarmSetTaskHandler+0x60>)
 8001952:	f007 fe1f 	bl	8009594 <memset>
		sprintf( (char*) strBuffer, "Mode" );
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <alarmSetTaskHandler+0x70>)
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <alarmSetTaskHandler+0x60>)
 800195a:	f007 fdeb 	bl	8009534 <siprintf>
		xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <alarmSetTaskHandler+0x68>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	2300      	movs	r3, #0
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <alarmSetTaskHandler+0x6c>)
 800196a:	f002 fd81 	bl	8004470 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800196e:	e7d3      	b.n	8001918 <alarmSetTaskHandler+0x8>
 8001970:	20000260 	.word	0x20000260
 8001974:	08009f70 	.word	0x08009f70
 8001978:	20000158 	.word	0x20000158
 800197c:	2000000c 	.word	0x2000000c
 8001980:	08009f78 	.word	0x08009f78

08001984 <alarmStartTaskHandler>:

	}
}

/* starts buzzer */
void alarmStartTaskHandler(void *parameters){
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b085      	sub	sp, #20
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
	while(1){
		vTaskSuspend(NULL);
 800198c:	2000      	movs	r0, #0
 800198e:	f003 fb19 	bl	8004fc4 <vTaskSuspend>

		xTimerStart(alarmTimerHandle, portMAX_DELAY);
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <alarmStartTaskHandler+0x5c>)
 8001994:	681c      	ldr	r4, [r3, #0]
 8001996:	f003 fea3 	bl	80056e0 <xTaskGetTickCount>
 800199a:	4602      	mov	r2, r0
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2101      	movs	r1, #1
 80019a6:	4620      	mov	r0, r4
 80019a8:	f004 fe5e 	bl	8006668 <xTimerGenericCommand>
		xTimerStart(alarmLedTimerHandle, portMAX_DELAY);
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <alarmStartTaskHandler+0x60>)
 80019ae:	681c      	ldr	r4, [r3, #0]
 80019b0:	f003 fe96 	bl	80056e0 <xTaskGetTickCount>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	2101      	movs	r1, #1
 80019c0:	4620      	mov	r0, r4
 80019c2:	f004 fe51 	bl	8006668 <xTimerGenericCommand>
		HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET); // ensure LED is on as soon as alarm starts
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <alarmStartTaskHandler+0x64>)
 80019ce:	f000 fb67 	bl	80020a0 <HAL_GPIO_WritePin>
		vTaskResume(alarmBuzzerTaskHandle);
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <alarmStartTaskHandler+0x68>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fbd4 	bl	8005184 <vTaskResume>
		vTaskSuspend(NULL);
 80019dc:	e7d6      	b.n	800198c <alarmStartTaskHandler+0x8>
 80019de:	bf00      	nop
 80019e0:	20000164 	.word	0x20000164
 80019e4:	20000160 	.word	0x20000160
 80019e8:	40020800 	.word	0x40020800
 80019ec:	20000154 	.word	0x20000154

080019f0 <alarmTimerCallback>:
	}
}

/* determines length of alarm, not auto-reload */
void alarmTimerCallback(TimerHandle_t xTimer){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]
	xTimerStop(alarmLedTimerHandle, portMAX_DELAY);
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <alarmTimerCallback+0x44>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2200      	movs	r2, #0
 8001a06:	2103      	movs	r1, #3
 8001a08:	f004 fe2e 	bl	8006668 <xTimerGenericCommand>
	vTaskSuspend(alarmBuzzerTaskHandle);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <alarmTimerCallback+0x48>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fad7 	bl	8004fc4 <vTaskSuspend>

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <alarmTimerCallback+0x4c>)
 8001a1c:	f000 fb40 	bl	80020a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <alarmTimerCallback+0x50>)
 8001a28:	f000 fb3a 	bl	80020a0 <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000160 	.word	0x20000160
 8001a38:	20000154 	.word	0x20000154
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020800 	.word	0x40020800

08001a44 <alarmLedTimerCallback>:

/* determines LED frequency */
void alarmLedTimerCallback(TimerHandle_t xTimer){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8001a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <alarmLedTimerCallback+0x1c>)
 8001a52:	f000 fb3e 	bl	80020d2 <HAL_GPIO_TogglePin>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40020800 	.word	0x40020800

08001a64 <alarmBuzzerTaskHandler>:

/* determines buzzer frequency */
void alarmBuzzerTaskHandler(void *parameters){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4804      	ldr	r0, [pc, #16]	; (8001a80 <alarmBuzzerTaskHandler+0x1c>)
 8001a70:	f000 fb2f 	bl	80020d2 <HAL_GPIO_TogglePin>
		delayUs(ALARM_BUZZ_PERIOD);
 8001a74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a78:	f7ff fa8e 	bl	8000f98 <delayUs>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001a7c:	e7f6      	b.n	8001a6c <alarmBuzzerTaskHandler+0x8>
 8001a7e:	bf00      	nop
 8001a80:	40020000 	.word	0x40020000

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff fc35 	bl	800131c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f007 fd7d 	bl	80095b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7fe fee3 	bl	8000880 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001abc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ac8:	0800a0d8 	.word	0x0800a0d8
  ldr r2, =_sbss
 8001acc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ad0:	2001480c 	.word	0x2001480c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f8fc 	bl	8001cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fb2c 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fa94 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000014 	.word	0x20000014
 8001b40:	20000288 	.word	0x20000288

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000288 	.word	0x20000288

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000014 	.word	0x20000014

08001ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	60d3      	str	r3, [r2, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	f003 0307 	and.w	r3, r3, #7
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0b      	blt.n	8001c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	4907      	ldr	r1, [pc, #28]	; (8001c40 <__NVIC_EnableIRQ+0x38>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	095b      	lsrs	r3, r3, #5
 8001c28:	2001      	movs	r0, #1
 8001c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff4c 	bl	8001ba4 <__NVIC_SetPriorityGrouping>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d26:	f7ff ff61 	bl	8001bec <__NVIC_GetPriorityGrouping>
 8001d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	6978      	ldr	r0, [r7, #20]
 8001d32:	f7ff ffb1 	bl	8001c98 <NVIC_EncodePriority>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff80 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d44:	bf00      	nop
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff54 	bl	8001c08 <__NVIC_EnableIRQ>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e159      	b.n	8002038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8148 	bne.w	8002032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80a2 	beq.w	8002032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0a:	4a52      	ldr	r2, [pc, #328]	; (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_GPIO_Init+0x2f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d019      	beq.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_GPIO_Init+0x2f4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x1fe>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a47      	ldr	r2, [pc, #284]	; (8002060 <HAL_GPIO_Init+0x2f8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x1fa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a46      	ldr	r2, [pc, #280]	; (8002064 <HAL_GPIO_Init+0x2fc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x1f6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a45      	ldr	r2, [pc, #276]	; (8002068 <HAL_GPIO_Init+0x300>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x1f2>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	f002 0203 	and.w	r2, r2, #3
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x2ec>)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_GPIO_Init+0x304>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x304>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002002:	4a1a      	ldr	r2, [pc, #104]	; (800206c <HAL_GPIO_Init+0x304>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_GPIO_Init+0x304>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202c:	4a0f      	ldr	r2, [pc, #60]	; (800206c <HAL_GPIO_Init+0x304>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	f67f aea2 	bls.w	8001d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	40013800 	.word	0x40013800
 8002058:	40020000 	.word	0x40020000
 800205c:	40020400 	.word	0x40020400
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020bc:	e003      	b.n	80020c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020be:	887b      	ldrh	r3, [r7, #2]
 80020c0:	041a      	lsls	r2, r3, #16
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	041a      	lsls	r2, r3, #16
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	400b      	ands	r3, r1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e267      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800213a:	2b08      	cmp	r3, #8
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b82      	ldr	r3, [pc, #520]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e242      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x74>
 800216e:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6f      	ldr	r2, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6c      	ldr	r2, [pc, #432]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b66      	ldr	r3, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a65      	ldr	r2, [pc, #404]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fcc0 	bl	8001b44 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fcbc 	bl	8001b44 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e207      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xc0>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fcac 	bl	8001b44 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fca8 	bl	8001b44 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1f3      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe8>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c7      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4937      	ldr	r1, [pc, #220]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x244>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7ff fc61 	bl	8001b44 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fc5d 	bl	8001b44 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a8      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x244>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff fc40 	bl	8001b44 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff fc3c 	bl	8001b44 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e187      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7ff fc20 	bl	8001b44 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fc1c 	bl	8001b44 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e167      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_OscConfig+0x240>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x200>
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x248>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7ff fc09 	bl	8001b44 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff fc05 	bl	8001b44 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d907      	bls.n	8002354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e150      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b88      	ldr	r3, [pc, #544]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ea      	bne.n	8002336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b81      	ldr	r3, [pc, #516]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b7d      	ldr	r3, [pc, #500]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a7c      	ldr	r2, [pc, #496]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b7a      	ldr	r3, [pc, #488]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b77      	ldr	r3, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b74      	ldr	r3, [pc, #464]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a73      	ldr	r2, [pc, #460]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fbc5 	bl	8001b44 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff fbc1 	bl	8001b44 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e10c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x474>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2ea>
 80023e4:	4b64      	ldr	r3, [pc, #400]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x30c>
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 8002414:	4b58      	ldr	r3, [pc, #352]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a57      	ldr	r2, [pc, #348]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
 8002420:	4b55      	ldr	r3, [pc, #340]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a54      	ldr	r2, [pc, #336]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff fb86 	bl	8001b44 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7ff fb82 	bl	8001b44 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0cb      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x334>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7ff fb70 	bl	8001b44 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7ff fb6c 	bl	8001b44 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b5      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	4b3e      	ldr	r3, [pc, #248]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a1 	beq.w	80025e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b34      	ldr	r3, [pc, #208]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d05c      	beq.n	800256c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d141      	bne.n	800253e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fb40 	bl	8001b44 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fb3c 	bl	8001b44 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e087      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	491b      	ldr	r1, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fb15 	bl	8001b44 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251e:	f7ff fb11 	bl	8001b44 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e05c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x416>
 800253c:	e054      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fafe 	bl	8001b44 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7ff fafa 	bl	8001b44 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e045      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e038      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4ec>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7ff fa2c 	bl	8001b44 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7ff fa28 	bl	8001b44 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fce0 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	0800a058 	.word	0x0800a058
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000010 	.word	0x20000010

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b094      	sub	sp, #80	; 0x50
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	2300      	movs	r3, #0
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d4:	2300      	movs	r3, #0
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80e1 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e0db      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b73      	ldr	r3, [pc, #460]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027fc:	e0db      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002802:	e0d8      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b6f      	ldr	r3, [pc, #444]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280e:	4b6d      	ldr	r3, [pc, #436]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b6a      	ldr	r3, [pc, #424]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
 8002824:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
 8002832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4621      	mov	r1, r4
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	6139      	str	r1, [r7, #16]
 8002854:	4629      	mov	r1, r5
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002868:	4659      	mov	r1, fp
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002872:	4651      	mov	r1, sl
 8002874:	018a      	lsls	r2, r1, #6
 8002876:	4651      	mov	r1, sl
 8002878:	ebb2 0801 	subs.w	r8, r2, r1
 800287c:	4659      	mov	r1, fp
 800287e:	eb63 0901 	sbc.w	r9, r3, r1
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002896:	4690      	mov	r8, r2
 8002898:	4699      	mov	r9, r3
 800289a:	4623      	mov	r3, r4
 800289c:	eb18 0303 	adds.w	r3, r8, r3
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	462b      	mov	r3, r5
 80028a4:	eb49 0303 	adc.w	r3, r9, r3
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b6:	4629      	mov	r1, r5
 80028b8:	024b      	lsls	r3, r1, #9
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028c0:	4621      	mov	r1, r4
 80028c2:	024a      	lsls	r2, r1, #9
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028d4:	f7fd fd2c 	bl	8000330 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028e0:	e058      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	4611      	mov	r1, r2
 80028ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028fc:	4642      	mov	r2, r8
 80028fe:	464b      	mov	r3, r9
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4641      	mov	r1, r8
 8002916:	ebb2 0a01 	subs.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800292c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002934:	ebb2 040a 	subs.w	r4, r2, sl
 8002938:	eb63 050b 	sbc.w	r5, r3, fp
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
 8002950:	4643      	mov	r3, r8
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	464b      	mov	r3, r9
 8002958:	eb45 0303 	adc.w	r3, r5, r3
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	61fa      	str	r2, [r7, #28]
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	f7fd fcd2 	bl	8000330 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3750      	adds	r7, #80	; 0x50
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029ec:	f7ff fff0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	0800a068 	.word	0x0800a068

08002a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_GetClockConfig+0x5c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_RCC_GetClockConfig+0x60>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0207 	and.w	r2, r3, #7
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d035      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a9c:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa2:	f7ff f84f 	bl	8001b44 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aaa:	f7ff f84b 	bl	8001b44 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0ba      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002abc:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	019a      	lsls	r2, r3, #6
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	071b      	lsls	r3, r3, #28
 8002ad4:	495a      	ldr	r1, [pc, #360]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae2:	f7ff f82f 	bl	8001b44 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aea:	f7ff f82b 	bl	8001b44 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e09a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a43      	ldr	r2, [pc, #268]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff f801 	bl	8001b44 <HAL_GetTick>
 8002b42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fe fffd 	bl	8001b44 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e06c      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b58:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02f      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d028      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002b98:	4a29      	ldr	r2, [pc, #164]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d114      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe ffcb 	bl	8001b44 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe ffc7 	bl	8001b44 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e034      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ee      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be0:	d10d      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	4912      	ldr	r1, [pc, #72]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]
 8002bfc:	e005      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	490a      	ldr	r1, [pc, #40]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7c1a      	ldrb	r2, [r3, #16]
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c2e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	42470068 	.word	0x42470068
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	42470e40 	.word	0x42470e40
 8002c4c:	424711e0 	.word	0x424711e0

08002c50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e066      	b.n	8002d34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7f5b      	ldrb	r3, [r3, #29]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fa08 	bl	800108c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	22ca      	movs	r2, #202	; 0xca
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2253      	movs	r2, #83	; 0x53
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fcf8 	bl	8003688 <RTC_EnterInitMode>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d12c      	bne.n	8002cfc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6899      	ldr	r1, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68d2      	ldr	r2, [r2, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6919      	ldr	r1, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	041a      	lsls	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fcff 	bl	80036f6 <RTC_ExitInitMode>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d113      	bne.n	8002d2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ff      	movs	r2, #255	; 0xff
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	7f1b      	ldrb	r3, [r3, #28]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_RTC_SetTime+0x1c>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e087      	b.n	8002e68 <HAL_RTC_SetTime+0x12c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2202      	movs	r2, #2
 8002d62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d126      	bne.n	8002db8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fcdc 	bl	8003740 <RTC_ByteToBcd2>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	785b      	ldrb	r3, [r3, #1]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fcd5 	bl	8003740 <RTC_ByteToBcd2>
 8002d96:	4603      	mov	r3, r0
 8002d98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002d9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	789b      	ldrb	r3, [r3, #2]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fccd 	bl	8003740 <RTC_ByteToBcd2>
 8002da6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002da8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	78db      	ldrb	r3, [r3, #3]
 8002db0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e018      	b.n	8002dea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002dd8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002dde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	78db      	ldrb	r3, [r3, #3]
 8002de4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	22ca      	movs	r2, #202	; 0xca
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2253      	movs	r2, #83	; 0x53
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fc44 	bl	8003688 <RTC_EnterInitMode>
 8002e00:	4603      	mov	r3, r0
 8002e02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d120      	bne.n	8002e4c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fc57 	bl	80036f6 <RTC_ExitInitMode>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	771a      	strb	r2, [r3, #28]

  return status;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ea2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	0d9b      	lsrs	r3, r3, #22
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11a      	bne.n	8002f22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fc42 	bl	800377a <RTC_Bcd2ToByte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fc39 	bl	800377a <RTC_Bcd2ToByte>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	789b      	ldrb	r3, [r3, #2]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fc30 	bl	800377a <RTC_Bcd2ToByte>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	7f1b      	ldrb	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_RTC_SetDate+0x1c>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e071      	b.n	800302c <HAL_RTC_SetDate+0x100>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2202      	movs	r2, #2
 8002f52:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10e      	bne.n	8002f78 <HAL_RTC_SetDate+0x4c>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	f023 0310 	bic.w	r3, r3, #16
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	330a      	adds	r3, #10
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	78db      	ldrb	r3, [r3, #3]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fbdc 	bl	8003740 <RTC_ByteToBcd2>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fbd5 	bl	8003740 <RTC_ByteToBcd2>
 8002f96:	4603      	mov	r3, r0
 8002f98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fbcd 	bl	8003740 <RTC_ByteToBcd2>
 8002fa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e00e      	b.n	8002fd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	78db      	ldrb	r3, [r3, #3]
 8002fbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fc4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002fca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	22ca      	movs	r2, #202	; 0xca
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2253      	movs	r2, #83	; 0x53
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fb4e 	bl	8003688 <RTC_EnterInitMode>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003000:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003004:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fb75 	bl	80036f6 <RTC_ExitInitMode>
 800300c:	4603      	mov	r3, r0
 800300e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	771a      	strb	r2, [r3, #28]

  return status;
 800302a:	7cfb      	ldrb	r3, [r7, #19]
}
 800302c:	4618      	mov	r0, r3
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd90      	pop	{r4, r7, pc}

08003034 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800304e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003052:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	0b5b      	lsrs	r3, r3, #13
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11a      	bne.n	80030c8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	78db      	ldrb	r3, [r3, #3]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb6f 	bl	800377a <RTC_Bcd2ToByte>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fb66 	bl	800377a <RTC_Bcd2ToByte>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb5d 	bl	800377a <RTC_Bcd2ToByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80030d2:	b590      	push	{r4, r7, lr}
 80030d4:	b089      	sub	sp, #36	; 0x24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	7f1b      	ldrb	r3, [r3, #28]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_RTC_SetAlarm+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e113      	b.n	800331e <HAL_RTC_SetAlarm+0x24c>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2202      	movs	r2, #2
 8003100:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d137      	bne.n	8003178 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fb0d 	bl	8003740 <RTC_ByteToBcd2>
 8003126:	4603      	mov	r3, r0
 8003128:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fb06 	bl	8003740 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
 8003136:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003138:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fafe 	bl	8003740 <RTC_ByteToBcd2>
 8003144:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003146:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003150:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 faf0 	bl	8003740 <RTC_ByteToBcd2>
 8003160:	4603      	mov	r3, r0
 8003162:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003164:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800316c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003172:	4313      	orrs	r3, r2
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e023      	b.n	80031c0 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003198:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800319e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	78db      	ldrb	r3, [r3, #3]
 80031a4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80031a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80031b0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80031b6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80031bc:	4313      	orrs	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22ca      	movs	r2, #202	; 0xca
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2253      	movs	r2, #83	; 0x53
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e4:	d148      	bne.n	8003278 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003204:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003216:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003218:	f7fe fc94 	bl	8001b44 <HAL_GetTick>
 800321c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800321e:	e013      	b.n	8003248 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003220:	f7fe fc90 	bl	8001b44 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800322e:	d90b      	bls.n	8003248 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	22ff      	movs	r2, #255	; 0xff
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2203      	movs	r2, #3
 800323c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e06a      	b.n	800331e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0e4      	beq.n	8003220 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	e047      	b.n	8003308 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003286:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003296:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80032a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032aa:	f7fe fc4b 	bl	8001b44 <HAL_GetTick>
 80032ae:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032b0:	e013      	b.n	80032da <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032b2:	f7fe fc47 	bl	8001b44 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c0:	d90b      	bls.n	80032da <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2203      	movs	r2, #3
 80032ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e021      	b.n	800331e <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0e4      	beq.n	80032b2 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	; 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}
	...

08003328 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003334:	4b9a      	ldr	r3, [pc, #616]	; (80035a0 <HAL_RTC_SetAlarm_IT+0x278>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a9a      	ldr	r2, [pc, #616]	; (80035a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0adb      	lsrs	r3, r3, #11
 8003340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	7f1b      	ldrb	r3, [r3, #28]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_RTC_SetAlarm_IT+0x36>
 800335a:	2302      	movs	r3, #2
 800335c:	e11c      	b.n	8003598 <HAL_RTC_SetAlarm_IT+0x270>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2202      	movs	r2, #2
 8003368:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d137      	bne.n	80033e0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2200      	movs	r2, #0
 8003382:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f9d9 	bl	8003740 <RTC_ByteToBcd2>
 800338e:	4603      	mov	r3, r0
 8003390:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f9d2 	bl	8003740 <RTC_ByteToBcd2>
 800339c:	4603      	mov	r3, r0
 800339e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033a0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	789b      	ldrb	r3, [r3, #2]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f9ca 	bl	8003740 <RTC_ByteToBcd2>
 80033ac:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033ae:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80033b8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f9bc 	bl	8003740 <RTC_ByteToBcd2>
 80033c8:	4603      	mov	r3, r0
 80033ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80033cc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80033d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80033da:	4313      	orrs	r3, r2
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e023      	b.n	8003428 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003400:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003406:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800340e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003416:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003418:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800341e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003424:	4313      	orrs	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	22ca      	movs	r2, #202	; 0xca
 800343a:	625a      	str	r2, [r3, #36]	; 0x24
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2253      	movs	r2, #83	; 0x53
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d141      	bne.n	80034d2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800346e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1e5a      	subs	r2, r3, #1
 8003474:	617a      	str	r2, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2203      	movs	r2, #3
 8003486:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e082      	b.n	8003598 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0e7      	beq.n	8003470 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034be:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	e04b      	b.n	800356a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034e0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f462 7220 	orn	r2, r2, #640	; 0x280
 80034f2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80034f4:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_RTC_SetAlarm_IT+0x278>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	; (80035a4 <HAL_RTC_SetAlarm_IT+0x27c>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0adb      	lsrs	r3, r3, #11
 8003500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	1e5a      	subs	r2, r3, #1
 800350e:	617a      	str	r2, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	22ff      	movs	r2, #255	; 0xff
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2203      	movs	r2, #3
 8003520:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e035      	b.n	8003598 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0e7      	beq.n	800350a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003558:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_RTC_SetAlarm_IT+0x280>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RTC_SetAlarm_IT+0x280>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	22ff      	movs	r2, #255	; 0xff
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3724      	adds	r7, #36	; 0x24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	20000000 	.word	0x20000000
 80035a4:	10624dd3 	.word	0x10624dd3
 80035a8:	40013c00 	.word	0x40013c00

080035ac <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fd fcfb 	bl	8000fcc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80035e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8d4 	bl	80037b2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f462 7220 	orn	r2, r2, #640	; 0x280
 800361a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RTC_AlarmIRQHandler+0x88>)
 800361e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003622:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	775a      	strb	r2, [r3, #29]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40013c00 	.word	0x40013c00

08003638 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003652:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003654:	f7fe fa76 	bl	8001b44 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800365a:	e009      	b.n	8003670 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800365c:	f7fe fa72 	bl	8001b44 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800366a:	d901      	bls.n	8003670 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e007      	b.n	8003680 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d122      	bne.n	80036ec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036b6:	f7fe fa45 	bl	8001b44 <HAL_GetTick>
 80036ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036bc:	e00c      	b.n	80036d8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036be:	f7fe fa41 	bl	8001b44 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036cc:	d904      	bls.n	80036d8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <RTC_EnterInitMode+0x64>
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d1e8      	bne.n	80036be <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003710:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff89 	bl	8003638 <HAL_RTC_WaitForSynchro>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2204      	movs	r2, #4
 8003730:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800374e:	e005      	b.n	800375c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	3301      	adds	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	3b0a      	subs	r3, #10
 800375a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b09      	cmp	r3, #9
 8003760:	d8f6      	bhi.n	8003750 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	b2da      	uxtb	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	4313      	orrs	r3, r2
 800376c:	b2db      	uxtb	r3, r3
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	4413      	add	r3, r2
 80037a4:	b2db      	uxtb	r3, r3
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e041      	b.n	800385c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd fc81 	bl	80010f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	4619      	mov	r1, r3
 8003804:	4610      	mov	r0, r2
 8003806:	f000 fae1 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e03c      	b.n	80038f6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_TIM_Base_Start+0xa0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d018      	beq.n	80038c0 <HAL_TIM_Base_Start+0x5c>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d013      	beq.n	80038c0 <HAL_TIM_Base_Start+0x5c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <HAL_TIM_Base_Start+0xa4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_TIM_Base_Start+0x5c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a19      	ldr	r2, [pc, #100]	; (800390c <HAL_TIM_Base_Start+0xa8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_TIM_Base_Start+0x5c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a17      	ldr	r2, [pc, #92]	; (8003910 <HAL_TIM_Base_Start+0xac>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_TIM_Base_Start+0x5c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIM_Base_Start+0xb0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d111      	bne.n	80038e4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d010      	beq.n	80038f4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e2:	e007      	b.n	80038f4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40014000 	.word	0x40014000

08003918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d001      	beq.n	8003930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e044      	b.n	80039ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x6c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395a:	d013      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x6c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <HAL_TIM_Base_Start_IT+0xb4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x6c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x6c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x6c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d010      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e007      	b.n	80039b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40014000 	.word	0x40014000

080039dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0202 	mvn.w	r2, #2
 8003a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9b5 	bl	8003d8e <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9a7 	bl	8003d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f9b8 	bl	8003da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0204 	mvn.w	r2, #4
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f98b 	bl	8003d8e <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f97d 	bl	8003d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f98e 	bl	8003da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0208 	mvn.w	r2, #8
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f961 	bl	8003d8e <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f953 	bl	8003d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f964 	bl	8003da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0210 	mvn.w	r2, #16
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f937 	bl	8003d8e <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f929 	bl	8003d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f93a 	bl	8003da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0201 	mvn.w	r2, #1
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fa54 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b80      	cmp	r3, #128	; 0x80
 8003b6c:	d10e      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b78:	2b80      	cmp	r3, #128	; 0x80
 8003b7a:	d107      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fab2 	bl	80040f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d10e      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d107      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8ff 	bl	8003db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0220 	mvn.w	r2, #32
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa7c 	bl	80040dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0b4      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x186>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d03e      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	f200 8087 	bhi.w	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	f000 8086 	beq.w	8003d5e <HAL_TIM_ConfigClockSource+0x172>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d87f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d01a      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xa6>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d87b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d050      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x11a>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d877      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b50      	cmp	r3, #80	; 0x50
 8003c6a:	d03c      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d873      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d058      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x13a>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d86f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d064      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d86b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d060      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d867      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d05c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d05a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	e062      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f000 f98d 	bl	8003fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
      break;
 8003cbe:	e04f      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f000 f976 	bl	8003fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce2:	609a      	str	r2, [r3, #8]
      break;
 8003ce4:	e03c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 f8ea 	bl	8003ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2150      	movs	r1, #80	; 0x50
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f943 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003d04:	e02c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 f909 	bl	8003f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2160      	movs	r1, #96	; 0x60
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f933 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003d24:	e01c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 f8ca 	bl	8003ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f923 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f000 f91a 	bl	8003f8a <TIM_ITRx_SetConfig>
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00f      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <TIM_Base_SetConfig+0xf0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d017      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00f      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <TIM_Base_SetConfig+0xf0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <TIM_Base_SetConfig+0xf4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <TIM_Base_SetConfig+0xf8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <TIM_Base_SetConfig+0xfc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40000800 	.word	0x40000800
 8003ebc:	40000c00 	.word	0x40000c00
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800

08003ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 030a 	bic.w	r3, r3, #10
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0210 	bic.w	r2, r3, #16
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	031b      	lsls	r3, r3, #12
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f043 0307 	orr.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004014:	2302      	movs	r3, #2
 8004016:	e050      	b.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d013      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a16      	ldr	r2, [pc, #88]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d10c      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40014000 	.word	0x40014000

080040dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f103 0208 	add.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f04f 32ff 	mov.w	r2, #4294967295
 800411c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f103 0208 	add.w	r2, r3, #8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f103 0208 	add.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
}
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d103      	bne.n	80041c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00c      	b.n	80041e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3308      	adds	r3, #8
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e002      	b.n	80041d4 <vListInsert+0x2e>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d2f6      	bcs.n	80041ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	601a      	str	r2, [r3, #0]
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6852      	ldr	r2, [r2, #4]
 8004238:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d103      	bne.n	800424c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericReset+0x2e>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60fb      	str	r3, [r7, #12]
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05d      	beq.n	800435c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d059      	beq.n	800435c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2100      	movs	r1, #0
 80042b2:	fba3 2302 	umull	r2, r3, r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <xQueueGenericReset+0x50>
 80042ba:	2101      	movs	r1, #1
 80042bc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d14c      	bne.n	800435c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80042c2:	f002 fe1f 	bl	8006f04 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ce:	6939      	ldr	r1, [r7, #16]
 80042d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	441a      	add	r2, r3
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2200      	movs	r2, #0
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6939      	ldr	r1, [r7, #16]
 80042f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	441a      	add	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d114      	bne.n	8004342 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fbf9 	bl	8005b1c <xTaskRemoveFromEventList>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d012      	beq.n	8004356 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004330:	4b15      	ldr	r3, [pc, #84]	; (8004388 <xQueueGenericReset+0x11c>)
 8004332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	e009      	b.n	8004356 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3310      	adds	r3, #16
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fedc 	bl	8004104 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	3324      	adds	r3, #36	; 0x24
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fed7 	bl	8004104 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004356:	f002 fe05 	bl	8006f64 <vPortExitCritical>
 800435a:	e001      	b.n	8004360 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <xQueueGenericReset+0x110>
        __asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60bb      	str	r3, [r7, #8]
    }
 8004378:	bf00      	nop
 800437a:	e7fe      	b.n	800437a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800437c:	697b      	ldr	r3, [r7, #20]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02e      	beq.n	8004402 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043a4:	2100      	movs	r1, #0
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d000      	beq.n	80043b4 <xQueueGenericCreate+0x28>
 80043b2:	2101      	movs	r1, #1
 80043b4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d123      	bne.n	8004402 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80043c2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80043c6:	d81c      	bhi.n	8004402 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	3350      	adds	r3, #80	; 0x50
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 feb8 	bl	800714c <pvPortMalloc>
 80043dc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01c      	beq.n	800441e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3350      	adds	r3, #80	; 0x50
 80043ec:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ee:	79fa      	ldrb	r2, [r7, #7]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f814 	bl	8004428 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004400:	e00d      	b.n	800441e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xQueueGenericCreate+0x92>
        __asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
    }
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800441e:	69fb      	ldr	r3, [r7, #28]
    }
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e002      	b.n	800444a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004456:	2101      	movs	r1, #1
 8004458:	69b8      	ldr	r0, [r7, #24]
 800445a:	f7ff ff07 	bl	800426c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800447e:	2300      	movs	r3, #0
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericSend+0x32>
        __asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <xQueueGenericSend+0x40>
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <xQueueGenericSend+0x44>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <xQueueGenericSend+0x46>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <xQueueGenericSend+0x60>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d103      	bne.n	80044de <xQueueGenericSend+0x6e>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <xQueueGenericSend+0x72>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xQueueGenericSend+0x74>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueGenericSend+0x8e>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	623b      	str	r3, [r7, #32]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044fe:	f001 fd21 	bl	8005f44 <xTaskGetSchedulerState>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <xQueueGenericSend+0x9e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <xQueueGenericSend+0xa2>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <xQueueGenericSend+0xa4>
 8004512:	2300      	movs	r3, #0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <xQueueGenericSend+0xbe>
        __asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	61fb      	str	r3, [r7, #28]
    }
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800452e:	f002 fce9 	bl	8006f04 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453a:	429a      	cmp	r2, r3
 800453c:	d302      	bcc.n	8004544 <xQueueGenericSend+0xd4>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d129      	bne.n	8004598 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800454a:	f000 fa21 	bl	8004990 <prvCopyDataToQueue>
 800454e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d010      	beq.n	800457a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fadd 	bl	8005b1c <xTaskRemoveFromEventList>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <xQueueGenericSend+0x1f8>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	e00a      	b.n	8004590 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004580:	4b39      	ldr	r3, [pc, #228]	; (8004668 <xQueueGenericSend+0x1f8>)
 8004582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004590:	f002 fce8 	bl	8006f64 <vPortExitCritical>
                return pdPASS;
 8004594:	2301      	movs	r3, #1
 8004596:	e063      	b.n	8004660 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800459e:	f002 fce1 	bl	8006f64 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e05c      	b.n	8004660 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 fb8b 	bl	8005ccc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045ba:	f002 fcd3 	bl	8006f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045be:	f000 ff81 	bl	80054c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045c2:	f002 fc9f 	bl	8006f04 <vPortEnterCritical>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045cc:	b25b      	sxtb	r3, r3
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d103      	bne.n	80045dc <xQueueGenericSend+0x16c>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e2:	b25b      	sxtb	r3, r3
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSend+0x182>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f2:	f002 fcb7 	bl	8006f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f6:	1d3a      	adds	r2, r7, #4
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 fb7a 	bl	8005cf8 <xTaskCheckForTimeOut>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d124      	bne.n	8004654 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800460a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460c:	f000 fab8 	bl	8004b80 <prvIsQueueFull>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	3310      	adds	r3, #16
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fa10 	bl	8005a44 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004626:	f000 fa43 	bl	8004ab0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800462a:	f000 ff59 	bl	80054e0 <xTaskResumeAll>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af7c 	bne.w	800452e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <xQueueGenericSend+0x1f8>)
 8004638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	e772      	b.n	800452e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800464a:	f000 fa31 	bl	8004ab0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800464e:	f000 ff47 	bl	80054e0 <xTaskResumeAll>
 8004652:	e76c      	b.n	800452e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004656:	f000 fa2b 	bl	8004ab0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800465a:	f000 ff41 	bl	80054e0 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800465e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004660:	4618      	mov	r0, r3
 8004662:	3738      	adds	r7, #56	; 0x38
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	e000ed04 	.word	0xe000ed04

0800466c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b092      	sub	sp, #72	; 0x48
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 800467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <xQueueGenericSendFromISR+0x3c>
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueGenericSendFromISR+0x40>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xQueueGenericSendFromISR+0x42>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d103      	bne.n	80046d6 <xQueueGenericSendFromISR+0x6a>
 80046ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <xQueueGenericSendFromISR+0x6e>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericSendFromISR+0x70>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046f6:	f002 fce9 	bl	80070cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80046fa:	f3ef 8211 	mrs	r2, BASEPRI
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	623a      	str	r2, [r7, #32]
 8004710:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004712:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <xQueueGenericSendFromISR+0xbc>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d146      	bne.n	80047b6 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800472e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800473e:	f000 f927 	bl	8004990 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004742:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d112      	bne.n	8004772 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02d      	beq.n	80047b0 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	4618      	mov	r0, r3
 800475a:	f001 f9df 	bl	8005b1c <xTaskRemoveFromEventList>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d025      	beq.n	80047b0 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d022      	beq.n	80047b0 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	e01e      	b.n	80047b0 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004772:	f000 ffd7 	bl	8005724 <uxTaskGetNumberOfTasks>
 8004776:	6338      	str	r0, [r7, #48]	; 0x30
 8004778:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800477c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477e:	429a      	cmp	r2, r3
 8004780:	d916      	bls.n	80047b0 <xQueueGenericSendFromISR+0x144>
 8004782:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004786:	2b7f      	cmp	r3, #127	; 0x7f
 8004788:	d10a      	bne.n	80047a0 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	61bb      	str	r3, [r7, #24]
    }
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xQueueGenericSendFromISR+0x132>
 80047a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80047a4:	3301      	adds	r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	b25a      	sxtb	r2, r3
 80047aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80047b0:	2301      	movs	r3, #1
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80047b4:	e001      	b.n	80047ba <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047bc:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80047c4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80047c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3748      	adds	r7, #72	; 0x48
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <xQueueReceive+0x30>
        __asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	623b      	str	r3, [r7, #32]
    }
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <xQueueReceive+0x3e>
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <xQueueReceive+0x42>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <xQueueReceive+0x44>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xQueueReceive+0x5e>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	61fb      	str	r3, [r7, #28]
    }
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800482e:	f001 fb89 	bl	8005f44 <xTaskGetSchedulerState>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <xQueueReceive+0x6e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <xQueueReceive+0x72>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <xQueueReceive+0x74>
 8004842:	2300      	movs	r3, #0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueReceive+0x8e>
        __asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61bb      	str	r3, [r7, #24]
    }
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800485e:	f002 fb51 	bl	8006f04 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01f      	beq.n	80048ae <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004872:	f000 f8f7 	bl	8004a64 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00f      	beq.n	80048a6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	3310      	adds	r3, #16
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f946 	bl	8005b1c <xTaskRemoveFromEventList>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <xQueueReceive+0x1bc>)
 8004898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80048a6:	f002 fb5d 	bl	8006f64 <vPortExitCritical>
                return pdPASS;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e069      	b.n	8004982 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80048b4:	f002 fb56 	bl	8006f64 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80048b8:	2300      	movs	r3, #0
 80048ba:	e062      	b.n	8004982 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80048c2:	f107 0310 	add.w	r3, r7, #16
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fa00 	bl	8005ccc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80048d0:	f002 fb48 	bl	8006f64 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80048d4:	f000 fdf6 	bl	80054c4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80048d8:	f002 fb14 	bl	8006f04 <vPortEnterCritical>
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e2:	b25b      	sxtb	r3, r3
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d103      	bne.n	80048f2 <xQueueReceive+0x122>
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d103      	bne.n	8004908 <xQueueReceive+0x138>
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004908:	f002 fb2c 	bl	8006f64 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800490c:	1d3a      	adds	r2, r7, #4
 800490e:	f107 0310 	add.w	r3, r7, #16
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f9ef 	bl	8005cf8 <xTaskCheckForTimeOut>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d123      	bne.n	8004968 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004922:	f000 f917 	bl	8004b54 <prvIsQueueEmpty>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	3324      	adds	r3, #36	; 0x24
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f001 f885 	bl	8005a44 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800493a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800493c:	f000 f8b8 	bl	8004ab0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004940:	f000 fdce 	bl	80054e0 <xTaskResumeAll>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d189      	bne.n	800485e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <xQueueReceive+0x1bc>)
 800494c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	e780      	b.n	800485e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800495c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800495e:	f000 f8a7 	bl	8004ab0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004962:	f000 fdbd 	bl	80054e0 <xTaskResumeAll>
 8004966:	e77a      	b.n	800485e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496a:	f000 f8a1 	bl	8004ab0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800496e:	f000 fdb7 	bl	80054e0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004974:	f000 f8ee 	bl	8004b54 <prvIsQueueEmpty>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	f43f af6f 	beq.w	800485e <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004980:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004982:	4618      	mov	r0, r3
 8004984:	3730      	adds	r7, #48	; 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d14d      	bne.n	8004a52 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f001 fae0 	bl	8005f80 <xTaskPriorityDisinherit>
 80049c0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e043      	b.n	8004a52 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d119      	bne.n	8004a04 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6858      	ldr	r0, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	461a      	mov	r2, r3
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	f004 fe0e 	bl	80095fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d32b      	bcc.n	8004a52 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	e026      	b.n	8004a52 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	68d8      	ldr	r0, [r3, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	f004 fdf4 	bl	80095fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	425b      	negs	r3, r3
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d207      	bcs.n	8004a40 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	425b      	negs	r3, r3
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d105      	bne.n	8004a52 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004a5a:	697b      	ldr	r3, [r7, #20]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d018      	beq.n	8004aa8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	441a      	add	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d303      	bcc.n	8004a98 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68d9      	ldr	r1, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f004 fdaa 	bl	80095fc <memcpy>
    }
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004ab8:	f002 fa24 	bl	8006f04 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ac4:	e011      	b.n	8004aea <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3324      	adds	r3, #36	; 0x24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 f822 	bl	8005b1c <xTaskRemoveFromEventList>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004ade:	f001 f971 	bl	8005dc4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	dce9      	bgt.n	8004ac6 <prvUnlockQueue+0x16>
 8004af2:	e000      	b.n	8004af6 <prvUnlockQueue+0x46>
                    break;
 8004af4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004afe:	f002 fa31 	bl	8006f64 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004b02:	f002 f9ff 	bl	8006f04 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b0e:	e011      	b.n	8004b34 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3310      	adds	r3, #16
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fffd 	bl	8005b1c <xTaskRemoveFromEventList>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004b28:	f001 f94c 	bl	8005dc4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004b2c:	7bbb      	ldrb	r3, [r7, #14]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dce9      	bgt.n	8004b10 <prvUnlockQueue+0x60>
 8004b3c:	e000      	b.n	8004b40 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b3e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	22ff      	movs	r2, #255	; 0xff
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004b48:	f002 fa0c 	bl	8006f64 <vPortExitCritical>
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b5c:	f002 f9d2 	bl	8006f04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e001      	b.n	8004b72 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b72:	f002 f9f7 	bl	8006f64 <vPortExitCritical>

    return xReturn;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b88:	f002 f9bc 	bl	8006f04 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d102      	bne.n	8004b9e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e001      	b.n	8004ba2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004ba2:	f002 f9df 	bl	8006f64 <vPortExitCritical>

    return xReturn;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
    }
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d024      	beq.n	8004c2a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e01e      	b.n	8004c24 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004be6:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <vQueueAddToRegistry+0x98>)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d105      	bne.n	8004c02 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <vQueueAddToRegistry+0x98>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
                    break;
 8004c00:	e013      	b.n	8004c2a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <vQueueAddToRegistry+0x6e>
 8004c08:	4a0f      	ldr	r2, [pc, #60]	; (8004c48 <vQueueAddToRegistry+0x98>)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <vQueueAddToRegistry+0x98>)
 8004c1a:	4413      	add	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	3301      	adds	r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b07      	cmp	r3, #7
 8004c28:	d9dd      	bls.n	8004be6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	2000028c 	.word	0x2000028c

08004c4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c5c:	f002 f952 	bl	8006f04 <vPortEnterCritical>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <vQueueWaitForMessageRestricted+0x2a>
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c7c:	b25b      	sxtb	r3, r3
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d103      	bne.n	8004c8c <vQueueWaitForMessageRestricted+0x40>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c8c:	f002 f96a 	bl	8006f64 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d106      	bne.n	8004ca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fef3 	bl	8005a8c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7ff ff02 	bl	8004ab0 <prvUnlockQueue>
    }
 8004cac:	bf00      	nop
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af04      	add	r7, sp, #16
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cc4:	88fb      	ldrh	r3, [r7, #6]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f002 fa3f 	bl	800714c <pvPortMalloc>
 8004cce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d013      	beq.n	8004cfe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cd6:	2058      	movs	r0, #88	; 0x58
 8004cd8:	f002 fa38 	bl	800714c <pvPortMalloc>
 8004cdc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004ce4:	2258      	movs	r2, #88	; 0x58
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	69f8      	ldr	r0, [r7, #28]
 8004cea:	f004 fc53 	bl	8009594 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cf4:	e005      	b.n	8004d02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f002 fae2 	bl	80072c0 <vPortFree>
 8004cfc:	e001      	b.n	8004d02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d013      	beq.n	8004d30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	9302      	str	r3, [sp, #8]
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f80e 	bl	8004d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004d24:	69f8      	ldr	r0, [r7, #28]
 8004d26:	f000 f899 	bl	8004e5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e002      	b.n	8004d36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d30:	f04f 33ff 	mov.w	r3, #4294967295
 8004d34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004d36:	69bb      	ldr	r3, [r7, #24]
    }
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	461a      	mov	r2, r3
 8004d58:	21a5      	movs	r1, #165	; 0xa5
 8004d5a:	f004 fc1b 	bl	8009594 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	617b      	str	r3, [r7, #20]
    }
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01e      	beq.n	8004ddc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e012      	b.n	8004dca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	4413      	add	r3, r2
 8004daa:	7819      	ldrb	r1, [r3, #0]
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	3334      	adds	r3, #52	; 0x34
 8004db4:	460a      	mov	r2, r1
 8004db6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d006      	beq.n	8004dd2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d9e9      	bls.n	8004da4 <prvInitialiseNewTask+0x64>
 8004dd0:	e000      	b.n	8004dd4 <prvInitialiseNewTask+0x94>
            {
                break;
 8004dd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d90a      	bls.n	8004df8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	613b      	str	r3, [r7, #16]
    }
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d901      	bls.n	8004e02 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dfe:	2305      	movs	r3, #5
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	3304      	adds	r3, #4
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f996 	bl	8004144 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	3318      	adds	r3, #24
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f991 	bl	8004144 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e26:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	f1c3 0206 	rsb	r2, r3, #6
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	69b8      	ldr	r0, [r7, #24]
 8004e3e:	f001 feb3 	bl	8006ba8 <pxPortInitialiseStack>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004e5c:	b5b0      	push	{r4, r5, r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004e64:	f002 f84e 	bl	8006f04 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004e68:	4b4f      	ldr	r3, [pc, #316]	; (8004fa8 <prvAddNewTaskToReadyList+0x14c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	4a4e      	ldr	r2, [pc, #312]	; (8004fa8 <prvAddNewTaskToReadyList+0x14c>)
 8004e70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004e72:	4b4e      	ldr	r3, [pc, #312]	; (8004fac <prvAddNewTaskToReadyList+0x150>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004e7a:	4a4c      	ldr	r2, [pc, #304]	; (8004fac <prvAddNewTaskToReadyList+0x150>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e80:	4b49      	ldr	r3, [pc, #292]	; (8004fa8 <prvAddNewTaskToReadyList+0x14c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d110      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004e88:	f000 ffc2 	bl	8005e10 <prvInitialiseTaskLists>
 8004e8c:	e00d      	b.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b48      	ldr	r3, [pc, #288]	; (8004fb0 <prvAddNewTaskToReadyList+0x154>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e96:	4b45      	ldr	r3, [pc, #276]	; (8004fac <prvAddNewTaskToReadyList+0x150>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d802      	bhi.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004ea4:	4a41      	ldr	r2, [pc, #260]	; (8004fac <prvAddNewTaskToReadyList+0x150>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004eaa:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <prvAddNewTaskToReadyList+0x158>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a40      	ldr	r2, [pc, #256]	; (8004fb4 <prvAddNewTaskToReadyList+0x158>)
 8004eb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <prvAddNewTaskToReadyList+0x158>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <prvAddNewTaskToReadyList+0x94>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f004 f8b3 	bl	8009030 <SEGGER_SYSVIEW_OnTaskCreate>
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	461d      	mov	r5, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	1ae3      	subs	r3, r4, r3
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	462b      	mov	r3, r5
 8004eec:	f002 fbaa 	bl	8007644 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f004 f920 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	2201      	movs	r2, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <prvAddNewTaskToReadyList+0x15c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <prvAddNewTaskToReadyList+0x15c>)
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0e:	492b      	ldr	r1, [pc, #172]	; (8004fbc <prvAddNewTaskToReadyList+0x160>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	609a      	str	r2, [r3, #8]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	3204      	adds	r2, #4
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <prvAddNewTaskToReadyList+0x160>)
 8004f4e:	441a      	add	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	615a      	str	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4918      	ldr	r1, [pc, #96]	; (8004fbc <prvAddNewTaskToReadyList+0x160>)
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	4814      	ldr	r0, [pc, #80]	; (8004fbc <prvAddNewTaskToReadyList+0x160>)
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4403      	add	r3, r0
 8004f74:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004f76:	f001 fff5 	bl	8006f64 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <prvAddNewTaskToReadyList+0x154>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00e      	beq.n	8004fa0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <prvAddNewTaskToReadyList+0x150>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d207      	bcs.n	8004fa0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <prvAddNewTaskToReadyList+0x164>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa8:	200003b8 	.word	0x200003b8
 8004fac:	200002cc 	.word	0x200002cc
 8004fb0:	200003c4 	.word	0x200003c4
 8004fb4:	200003d4 	.word	0x200003d4
 8004fb8:	200003c0 	.word	0x200003c0
 8004fbc:	200002d0 	.word	0x200002d0
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004fcc:	f001 ff9a 	bl	8006f04 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <vTaskSuspend+0x18>
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <vTaskSuspend+0x13c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	e000      	b.n	8004fde <vTaskSuspend+0x1a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f004 f94a 	bl	800927c <SEGGER_SYSVIEW_ShrinkId>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4619      	mov	r1, r3
 8004fec:	2029      	movs	r0, #41	; 0x29
 8004fee:	f003 fc11 	bl	8008814 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff f90e 	bl	8004218 <uxListRemove>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d115      	bne.n	800502e <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005006:	493f      	ldr	r1, [pc, #252]	; (8005104 <vTaskSuspend+0x140>)
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <vTaskSuspend+0x6a>
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	2201      	movs	r2, #1
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43da      	mvns	r2, r3
 8005024:	4b38      	ldr	r3, [pc, #224]	; (8005108 <vTaskSuspend+0x144>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4013      	ands	r3, r2
 800502a:	4a37      	ldr	r2, [pc, #220]	; (8005108 <vTaskSuspend+0x144>)
 800502c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3318      	adds	r3, #24
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff f8ec 	bl	8004218 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	211b      	movs	r1, #27
 8005044:	4618      	mov	r0, r3
 8005046:	f004 f8b9 	bl	80091bc <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3304      	adds	r3, #4
 800504e:	4619      	mov	r1, r3
 8005050:	482e      	ldr	r0, [pc, #184]	; (800510c <vTaskSuspend+0x148>)
 8005052:	f7ff f884 	bl	800415e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e010      	b.n	800507e <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4413      	add	r3, r2
 8005062:	3354      	adds	r3, #84	; 0x54
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d105      	bne.n	8005078 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	3354      	adds	r3, #84	; 0x54
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3301      	adds	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	ddeb      	ble.n	800505c <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8005084:	f001 ff6e 	bl	8006f64 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005088:	4b21      	ldr	r3, [pc, #132]	; (8005110 <vTaskSuspend+0x14c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8005090:	f001 ff38 	bl	8006f04 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8005094:	f000 ff3a 	bl	8005f0c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8005098:	f001 ff64 	bl	8006f64 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800509c:	4b18      	ldr	r3, [pc, #96]	; (8005100 <vTaskSuspend+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d127      	bne.n	80050f6 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <vTaskSuspend+0x14c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d017      	beq.n	80050de <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80050ae:	4b19      	ldr	r3, [pc, #100]	; (8005114 <vTaskSuspend+0x150>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <vTaskSuspend+0x108>
        __asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	60fb      	str	r3, [r7, #12]
    }
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <vTaskSuspend+0x154>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80050dc:	e00b      	b.n	80050f6 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <vTaskSuspend+0x148>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <vTaskSuspend+0x158>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d103      	bne.n	80050f2 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <vTaskSuspend+0x13c>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
    }
 80050f0:	e001      	b.n	80050f6 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80050f2:	f000 fc3d 	bl	8005970 <vTaskSwitchContext>
    }
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200002cc 	.word	0x200002cc
 8005104:	200002d0 	.word	0x200002d0
 8005108:	200003c0 	.word	0x200003c0
 800510c:	200003a4 	.word	0x200003a4
 8005110:	200003c4 	.word	0x200003c4
 8005114:	200003e0 	.word	0x200003e0
 8005118:	e000ed04 	.word	0xe000ed04
 800511c:	200003b8 	.word	0x200003b8

08005120 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
    }
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <prvTaskIsTaskSuspended+0x5c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10a      	bne.n	800516c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	4a09      	ldr	r2, [pc, #36]	; (8005180 <prvTaskIsTaskSuspended+0x60>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d005      	beq.n	800516c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	200003a4 	.word	0x200003a4
 8005180:	20000378 	.word	0x20000378

08005184 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <vTaskResume+0x28>
        __asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	60fb      	str	r3, [r7, #12]
    }
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80051ac:	4b3a      	ldr	r3, [pc, #232]	; (8005298 <vTaskResume+0x114>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d06c      	beq.n	8005290 <vTaskResume+0x10c>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d069      	beq.n	8005290 <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 80051bc:	f001 fea2 	bl	8006f04 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80051c0:	6978      	ldr	r0, [r7, #20]
 80051c2:	f7ff ffad 	bl	8005120 <prvTaskIsTaskSuspended>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d05f      	beq.n	800528c <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 f854 	bl	800927c <SEGGER_SYSVIEW_ShrinkId>
 80051d4:	4603      	mov	r3, r0
 80051d6:	4619      	mov	r1, r3
 80051d8:	202a      	movs	r0, #42	; 0x2a
 80051da:	f003 fb1b 	bl	8008814 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff f818 	bl	8004218 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 ffa4 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	4b28      	ldr	r3, [pc, #160]	; (800529c <vTaskResume+0x118>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <vTaskResume+0x118>)
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005206:	4926      	ldr	r1, [pc, #152]	; (80052a0 <vTaskResume+0x11c>)
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	3304      	adds	r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	3204      	adds	r2, #4
 800522e:	605a      	str	r2, [r3, #4]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1d1a      	adds	r2, r3, #4
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <vTaskResume+0x11c>)
 8005246:	441a      	add	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	615a      	str	r2, [r3, #20]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4913      	ldr	r1, [pc, #76]	; (80052a0 <vTaskResume+0x11c>)
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	480f      	ldr	r0, [pc, #60]	; (80052a0 <vTaskResume+0x11c>)
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4403      	add	r3, r0
 800526c:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <vTaskResume+0x114>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	429a      	cmp	r2, r3
 800527a:	d307      	bcc.n	800528c <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <vTaskResume+0x120>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800528c:	f001 fe6a 	bl	8006f64 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	200002cc 	.word	0x200002cc
 800529c:	200003c0 	.word	0x200003c0
 80052a0:	200002d0 	.word	0x200002d0
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
        BaseType_t xYieldRequired = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
        TCB_t * const pxTCB = xTaskToResume;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	623b      	str	r3, [r7, #32]
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xTaskResumeFromISR+0x2c>
        __asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
    }
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xTaskResumeFromISR+0x2a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052d4:	f001 fefa 	bl	80070cc <vPortValidateInterruptPriority>
        __asm volatile
 80052d8:	f3ef 8211 	mrs	r2, BASEPRI
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	613a      	str	r2, [r7, #16]
 80052ee:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 80052f0:	693b      	ldr	r3, [r7, #16]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f2:	61fb      	str	r3, [r7, #28]
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80052f4:	6a38      	ldr	r0, [r7, #32]
 80052f6:	f7ff ff13 	bl	8005120 <prvTaskIsTaskSuspended>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d067      	beq.n	80053d0 <xTaskResumeFromISR+0x128>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	4618      	mov	r0, r3
 8005304:	f003 ffba 	bl	800927c <SEGGER_SYSVIEW_ShrinkId>
 8005308:	4603      	mov	r3, r0
 800530a:	4619      	mov	r1, r3
 800530c:	202b      	movs	r0, #43	; 0x2b
 800530e:	f003 fa81 	bl	8008814 <SEGGER_SYSVIEW_RecordU32>

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005312:	4b35      	ldr	r3, [pc, #212]	; (80053e8 <xTaskResumeFromISR+0x140>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d154      	bne.n	80053c4 <xTaskResumeFromISR+0x11c>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	4b33      	ldr	r3, [pc, #204]	; (80053ec <xTaskResumeFromISR+0x144>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d304      	bcc.n	8005332 <xTaskResumeFromISR+0x8a>
                    {
                        xYieldRequired = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
 800532c:	4b30      	ldr	r3, [pc, #192]	; (80053f0 <xTaskResumeFromISR+0x148>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe ff6e 	bl	8004218 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	4618      	mov	r0, r3
 8005340:	f003 fefa 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	2201      	movs	r2, #1
 800534a:	409a      	lsls	r2, r3
 800534c:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <xTaskResumeFromISR+0x14c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <xTaskResumeFromISR+0x14c>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535a:	4927      	ldr	r1, [pc, #156]	; (80053f8 <xTaskResumeFromISR+0x150>)
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3304      	adds	r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	609a      	str	r2, [r3, #8]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	6a3b      	ldr	r3, [r7, #32]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	6a3a      	ldr	r2, [r7, #32]
 8005380:	3204      	adds	r2, #4
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4a17      	ldr	r2, [pc, #92]	; (80053f8 <xTaskResumeFromISR+0x150>)
 800539a:	441a      	add	r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	615a      	str	r2, [r3, #20]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a4:	4914      	ldr	r1, [pc, #80]	; (80053f8 <xTaskResumeFromISR+0x150>)
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	4810      	ldr	r0, [pc, #64]	; (80053f8 <xTaskResumeFromISR+0x150>)
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4403      	add	r3, r0
 80053c0:	6019      	str	r1, [r3, #0]
 80053c2:	e005      	b.n	80053d0 <xTaskResumeFromISR+0x128>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	3318      	adds	r3, #24
 80053c8:	4619      	mov	r1, r3
 80053ca:	480c      	ldr	r0, [pc, #48]	; (80053fc <xTaskResumeFromISR+0x154>)
 80053cc:	f7fe fec7 	bl	800415e <vListInsertEnd>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f383 8811 	msr	BASEPRI, r3
    }
 80053da:	bf00      	nop
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200003e0 	.word	0x200003e0
 80053ec:	200002cc 	.word	0x200002cc
 80053f0:	200003cc 	.word	0x200003cc
 80053f4:	200003c0 	.word	0x200003c0
 80053f8:	200002d0 	.word	0x200002d0
 80053fc:	20000378 	.word	0x20000378

08005400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005406:	4b27      	ldr	r3, [pc, #156]	; (80054a4 <vTaskStartScheduler+0xa4>)
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	2300      	movs	r3, #0
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	2282      	movs	r2, #130	; 0x82
 8005412:	4925      	ldr	r1, [pc, #148]	; (80054a8 <vTaskStartScheduler+0xa8>)
 8005414:	4825      	ldr	r0, [pc, #148]	; (80054ac <vTaskStartScheduler+0xac>)
 8005416:	f7ff fc4d 	bl	8004cb4 <xTaskCreate>
 800541a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d102      	bne.n	8005428 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005422:	f001 f895 	bl	8006550 <xTimerCreateTimerTask>
 8005426:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d124      	bne.n	8005478 <vTaskStartScheduler+0x78>
        __asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
    }
 8005440:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <vTaskStartScheduler+0xb0>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <vTaskStartScheduler+0xb4>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005450:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <vTaskStartScheduler+0xb8>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005456:	4b19      	ldr	r3, [pc, #100]	; (80054bc <vTaskStartScheduler+0xbc>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <vTaskStartScheduler+0xa4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d102      	bne.n	8005468 <vTaskStartScheduler+0x68>
 8005462:	f003 fdc9 	bl	8008ff8 <SEGGER_SYSVIEW_OnIdle>
 8005466:	e004      	b.n	8005472 <vTaskStartScheduler+0x72>
 8005468:	4b14      	ldr	r3, [pc, #80]	; (80054bc <vTaskStartScheduler+0xbc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f003 fe21 	bl	80090b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005472:	f001 fc27 	bl	8006cc4 <xPortStartScheduler>
 8005476:	e00e      	b.n	8005496 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d10a      	bne.n	8005496 <vTaskStartScheduler+0x96>
        __asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	607b      	str	r3, [r7, #4]
    }
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <vTaskStartScheduler+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	200003dc 	.word	0x200003dc
 80054a8:	08009f80 	.word	0x08009f80
 80054ac:	08005ddd 	.word	0x08005ddd
 80054b0:	200003d8 	.word	0x200003d8
 80054b4:	200003c4 	.word	0x200003c4
 80054b8:	200003bc 	.word	0x200003bc
 80054bc:	200002cc 	.word	0x200002cc
 80054c0:	20000018 	.word	0x20000018

080054c4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <vTaskSuspendAll+0x18>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a03      	ldr	r2, [pc, #12]	; (80054dc <vTaskSuspendAll+0x18>)
 80054d0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80054d2:	bf00      	nop
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	200003e0 	.word	0x200003e0

080054e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80054ee:	4b73      	ldr	r3, [pc, #460]	; (80056bc <xTaskResumeAll+0x1dc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xTaskResumeAll+0x2c>
        __asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	607b      	str	r3, [r7, #4]
    }
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800550c:	f001 fcfa 	bl	8006f04 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005510:	4b6a      	ldr	r3, [pc, #424]	; (80056bc <xTaskResumeAll+0x1dc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3b01      	subs	r3, #1
 8005516:	4a69      	ldr	r2, [pc, #420]	; (80056bc <xTaskResumeAll+0x1dc>)
 8005518:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800551a:	4b68      	ldr	r3, [pc, #416]	; (80056bc <xTaskResumeAll+0x1dc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 80c4 	bne.w	80056ac <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005524:	4b66      	ldr	r3, [pc, #408]	; (80056c0 <xTaskResumeAll+0x1e0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80bf 	beq.w	80056ac <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800552e:	e08e      	b.n	800564e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	4b64      	ldr	r3, [pc, #400]	; (80056c4 <xTaskResumeAll+0x1e4>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	6a12      	ldr	r2, [r2, #32]
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	69d2      	ldr	r2, [r2, #28]
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3318      	adds	r3, #24
 800555a:	429a      	cmp	r2, r3
 800555c:	d103      	bne.n	8005566 <xTaskResumeAll+0x86>
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2200      	movs	r2, #0
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	68d2      	ldr	r2, [r2, #12]
 8005584:	609a      	str	r2, [r3, #8]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	6892      	ldr	r2, [r2, #8]
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3304      	adds	r3, #4
 8005598:	429a      	cmp	r2, r3
 800559a:	d103      	bne.n	80055a4 <xTaskResumeAll+0xc4>
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2200      	movs	r2, #0
 80055a8:	615a      	str	r2, [r3, #20]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1e5a      	subs	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f003 fdbe 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	2201      	movs	r2, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	4b40      	ldr	r3, [pc, #256]	; (80056c8 <xTaskResumeAll+0x1e8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <xTaskResumeAll+0x1e8>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	493e      	ldr	r1, [pc, #248]	; (80056cc <xTaskResumeAll+0x1ec>)
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	3204      	adds	r2, #4
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <xTaskResumeAll+0x1ec>)
 8005612:	441a      	add	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	615a      	str	r2, [r3, #20]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	492b      	ldr	r1, [pc, #172]	; (80056cc <xTaskResumeAll+0x1ec>)
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	4827      	ldr	r0, [pc, #156]	; (80056cc <xTaskResumeAll+0x1ec>)
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4403      	add	r3, r0
 8005638:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <xTaskResumeAll+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	429a      	cmp	r2, r3
 8005646:	d302      	bcc.n	800564e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8005648:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <xTaskResumeAll+0x1f4>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800564e:	4b1d      	ldr	r3, [pc, #116]	; (80056c4 <xTaskResumeAll+0x1e4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f47f af6c 	bne.w	8005530 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800565e:	f000 fc55 	bl	8005f0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <xTaskResumeAll+0x1f8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800566e:	f000 f865 	bl	800573c <xTaskIncrementTick>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8005678:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <xTaskResumeAll+0x1f4>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	3b01      	subs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f1      	bne.n	800566e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800568a:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <xTaskResumeAll+0x1f8>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005690:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <xTaskResumeAll+0x1f4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d009      	beq.n	80056ac <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <xTaskResumeAll+0x1fc>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80056ac:	f001 fc5a 	bl	8006f64 <vPortExitCritical>

    return xAlreadyYielded;
 80056b0:	69bb      	ldr	r3, [r7, #24]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	200003e0 	.word	0x200003e0
 80056c0:	200003b8 	.word	0x200003b8
 80056c4:	20000378 	.word	0x20000378
 80056c8:	200003c0 	.word	0x200003c0
 80056cc:	200002d0 	.word	0x200002d0
 80056d0:	200002cc 	.word	0x200002cc
 80056d4:	200003cc 	.word	0x200003cc
 80056d8:	200003c8 	.word	0x200003c8
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <xTaskGetTickCount+0x1c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80056ec:	687b      	ldr	r3, [r7, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200003bc 	.word	0x200003bc

08005700 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005706:	f001 fce1 	bl	80070cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800570e:	4b04      	ldr	r3, [pc, #16]	; (8005720 <xTaskGetTickCountFromISR+0x20>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005714:	683b      	ldr	r3, [r7, #0]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200003bc 	.word	0x200003bc

08005724 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <uxTaskGetNumberOfTasks+0x14>)
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	200003b8 	.word	0x200003b8

0800573c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	; 0x28
 8005740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005746:	4b7f      	ldr	r3, [pc, #508]	; (8005944 <xTaskIncrementTick+0x208>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 80f0 	bne.w	8005930 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005750:	4b7d      	ldr	r3, [pc, #500]	; (8005948 <xTaskIncrementTick+0x20c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005758:	4a7b      	ldr	r2, [pc, #492]	; (8005948 <xTaskIncrementTick+0x20c>)
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d120      	bne.n	80057a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005764:	4b79      	ldr	r3, [pc, #484]	; (800594c <xTaskIncrementTick+0x210>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <xTaskIncrementTick+0x48>
        __asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	607b      	str	r3, [r7, #4]
    }
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <xTaskIncrementTick+0x46>
 8005784:	4b71      	ldr	r3, [pc, #452]	; (800594c <xTaskIncrementTick+0x210>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	4b71      	ldr	r3, [pc, #452]	; (8005950 <xTaskIncrementTick+0x214>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a6f      	ldr	r2, [pc, #444]	; (800594c <xTaskIncrementTick+0x210>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4a6f      	ldr	r2, [pc, #444]	; (8005950 <xTaskIncrementTick+0x214>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b6e      	ldr	r3, [pc, #440]	; (8005954 <xTaskIncrementTick+0x218>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a6d      	ldr	r2, [pc, #436]	; (8005954 <xTaskIncrementTick+0x218>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	f000 fbb3 	bl	8005f0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80057a6:	4b6c      	ldr	r3, [pc, #432]	; (8005958 <xTaskIncrementTick+0x21c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	f0c0 80aa 	bcc.w	8005906 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b2:	4b66      	ldr	r3, [pc, #408]	; (800594c <xTaskIncrementTick+0x210>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	4b66      	ldr	r3, [pc, #408]	; (8005958 <xTaskIncrementTick+0x21c>)
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	601a      	str	r2, [r3, #0]
                    break;
 80057c4:	e09f      	b.n	8005906 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c6:	4b61      	ldr	r3, [pc, #388]	; (800594c <xTaskIncrementTick+0x210>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d203      	bcs.n	80057e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80057de:	4a5e      	ldr	r2, [pc, #376]	; (8005958 <xTaskIncrementTick+0x21c>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80057e4:	e08f      	b.n	8005906 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	68d2      	ldr	r2, [r2, #12]
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	6892      	ldr	r2, [r2, #8]
 80057fe:	605a      	str	r2, [r3, #4]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	3304      	adds	r3, #4
 8005808:	429a      	cmp	r2, r3
 800580a:	d103      	bne.n	8005814 <xTaskIncrementTick+0xd8>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	605a      	str	r2, [r3, #4]
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	2200      	movs	r2, #0
 8005818:	615a      	str	r2, [r3, #20]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	6a12      	ldr	r2, [r2, #32]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	69d2      	ldr	r2, [r2, #28]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3318      	adds	r3, #24
 800584e:	429a      	cmp	r2, r3
 8005850:	d103      	bne.n	800585a <xTaskIncrementTick+0x11e>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6a1a      	ldr	r2, [r3, #32]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	2200      	movs	r2, #0
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	4618      	mov	r0, r3
 800586e:	f003 fc63 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	2201      	movs	r2, #1
 8005878:	409a      	lsls	r2, r3
 800587a:	4b38      	ldr	r3, [pc, #224]	; (800595c <xTaskIncrementTick+0x220>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	4a36      	ldr	r2, [pc, #216]	; (800595c <xTaskIncrementTick+0x220>)
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	4935      	ldr	r1, [pc, #212]	; (8005960 <xTaskIncrementTick+0x224>)
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3304      	adds	r3, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	3204      	adds	r2, #4
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058be:	4613      	mov	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4a26      	ldr	r2, [pc, #152]	; (8005960 <xTaskIncrementTick+0x224>)
 80058c8:	441a      	add	r2, r3
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	615a      	str	r2, [r3, #20]
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4923      	ldr	r1, [pc, #140]	; (8005960 <xTaskIncrementTick+0x224>)
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	481f      	ldr	r0, [pc, #124]	; (8005960 <xTaskIncrementTick+0x224>)
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4403      	add	r3, r0
 80058ee:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <xTaskIncrementTick+0x228>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	f67f af59 	bls.w	80057b2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005904:	e755      	b.n	80057b2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005906:	4b17      	ldr	r3, [pc, #92]	; (8005964 <xTaskIncrementTick+0x228>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4914      	ldr	r1, [pc, #80]	; (8005960 <xTaskIncrementTick+0x224>)
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d901      	bls.n	8005922 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <xTaskIncrementTick+0x22c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	e004      	b.n	800593a <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <xTaskIncrementTick+0x230>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a0d      	ldr	r2, [pc, #52]	; (800596c <xTaskIncrementTick+0x230>)
 8005938:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800593c:	4618      	mov	r0, r3
 800593e:	3728      	adds	r7, #40	; 0x28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	200003e0 	.word	0x200003e0
 8005948:	200003bc 	.word	0x200003bc
 800594c:	20000370 	.word	0x20000370
 8005950:	20000374 	.word	0x20000374
 8005954:	200003d0 	.word	0x200003d0
 8005958:	200003d8 	.word	0x200003d8
 800595c:	200003c0 	.word	0x200003c0
 8005960:	200002d0 	.word	0x200002d0
 8005964:	200002cc 	.word	0x200002cc
 8005968:	200003cc 	.word	0x200003cc
 800596c:	200003c8 	.word	0x200003c8

08005970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005976:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <vTaskSwitchContext+0xbc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800597e:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <vTaskSwitchContext+0xc0>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005984:	e04d      	b.n	8005a22 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <vTaskSwitchContext+0xc0>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598c:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <vTaskSwitchContext+0xc4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	fab3 f383 	clz	r3, r3
 8005998:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800599a:	7afb      	ldrb	r3, [r7, #11]
 800599c:	f1c3 031f 	rsb	r3, r3, #31
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	4925      	ldr	r1, [pc, #148]	; (8005a38 <vTaskSwitchContext+0xc8>)
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	607b      	str	r3, [r7, #4]
    }
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <vTaskSwitchContext+0x5a>
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <vTaskSwitchContext+0xc8>)
 80059d8:	4413      	add	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3308      	adds	r3, #8
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d104      	bne.n	80059fc <vTaskSwitchContext+0x8c>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <vTaskSwitchContext+0xcc>)
 8005a04:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <vTaskSwitchContext+0xcc>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <vTaskSwitchContext+0xd0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d102      	bne.n	8005a18 <vTaskSwitchContext+0xa8>
 8005a12:	f003 faf1 	bl	8008ff8 <SEGGER_SYSVIEW_OnIdle>
}
 8005a16:	e004      	b.n	8005a22 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <vTaskSwitchContext+0xcc>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f003 fb49 	bl	80090b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005a22:	bf00      	nop
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200003e0 	.word	0x200003e0
 8005a30:	200003cc 	.word	0x200003cc
 8005a34:	200003c0 	.word	0x200003c0
 8005a38:	200002d0 	.word	0x200002d0
 8005a3c:	200002cc 	.word	0x200002cc
 8005a40:	200003dc 	.word	0x200003dc

08005a44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60fb      	str	r3, [r7, #12]
    }
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a6a:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <vTaskPlaceOnEventList+0x44>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3318      	adds	r3, #24
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fe fb97 	bl	80041a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a78:	2101      	movs	r1, #1
 8005a7a:	6838      	ldr	r0, [r7, #0]
 8005a7c:	f000 fce8 	bl	8006450 <prvAddCurrentTaskToDelayedList>
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	200002cc 	.word	0x200002cc

08005a8c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	613b      	str	r3, [r7, #16]
    }
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	61da      	str	r2, [r3, #28]
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6892      	ldr	r2, [r2, #8]
 8005aca:	621a      	str	r2, [r3, #32]
 8005acc:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	3218      	adds	r2, #24
 8005ad6:	605a      	str	r2, [r3, #4]
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f103 0218 	add.w	r2, r3, #24
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8005afc:	f04f 33ff 	mov.w	r3, #4294967295
 8005b00:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005b02:	2024      	movs	r0, #36	; 0x24
 8005b04:	f002 fe68 	bl	80087d8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	f000 fca0 	bl	8006450 <prvAddCurrentTaskToDelayedList>
    }
 8005b10:	bf00      	nop
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	200002cc 	.word	0x200002cc

08005b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60fb      	str	r3, [r7, #12]
    }
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	6a3a      	ldr	r2, [r7, #32]
 8005b54:	6a12      	ldr	r2, [r2, #32]
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	69d2      	ldr	r2, [r2, #28]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3318      	adds	r3, #24
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d103      	bne.n	8005b76 <xTaskRemoveFromEventList+0x5a>
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <xTaskRemoveFromEventList+0x198>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	68d2      	ldr	r2, [r2, #12]
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d103      	bne.n	8005bbc <xTaskRemoveFromEventList+0xa0>
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	615a      	str	r2, [r3, #20]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1e5a      	subs	r2, r3, #1
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f003 fab2 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <xTaskRemoveFromEventList+0x19c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	4a35      	ldr	r2, [pc, #212]	; (8005cb8 <xTaskRemoveFromEventList+0x19c>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4934      	ldr	r1, [pc, #208]	; (8005cbc <xTaskRemoveFromEventList+0x1a0>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	3204      	adds	r2, #4
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	1d1a      	adds	r2, r3, #4
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a24      	ldr	r2, [pc, #144]	; (8005cbc <xTaskRemoveFromEventList+0x1a0>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	615a      	str	r2, [r3, #20]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4921      	ldr	r1, [pc, #132]	; (8005cbc <xTaskRemoveFromEventList+0x1a0>)
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	481d      	ldr	r0, [pc, #116]	; (8005cbc <xTaskRemoveFromEventList+0x1a0>)
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4403      	add	r3, r0
 8005c50:	6019      	str	r1, [r3, #0]
 8005c52:	e01b      	b.n	8005c8c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <xTaskRemoveFromEventList+0x1a4>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	61da      	str	r2, [r3, #28]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	621a      	str	r2, [r3, #32]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	6a3a      	ldr	r2, [r7, #32]
 8005c6e:	3218      	adds	r2, #24
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f103 0218 	add.w	r2, r3, #24
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <xTaskRemoveFromEventList+0x1a4>)
 8005c80:	629a      	str	r2, [r3, #40]	; 0x28
 8005c82:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <xTaskRemoveFromEventList+0x1a4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <xTaskRemoveFromEventList+0x1a4>)
 8005c8a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <xTaskRemoveFromEventList+0x1a8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d905      	bls.n	8005ca6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <xTaskRemoveFromEventList+0x1ac>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e001      	b.n	8005caa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3728      	adds	r7, #40	; 0x28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200003e0 	.word	0x200003e0
 8005cb8:	200003c0 	.word	0x200003c0
 8005cbc:	200002d0 	.word	0x200002d0
 8005cc0:	20000378 	.word	0x20000378
 8005cc4:	200002cc 	.word	0x200002cc
 8005cc8:	200003cc 	.word	0x200003cc

08005ccc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <vTaskInternalSetTimeOutState+0x24>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <vTaskInternalSetTimeOutState+0x28>)
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	605a      	str	r2, [r3, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	200003d0 	.word	0x200003d0
 8005cf4:	200003bc 	.word	0x200003bc

08005cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	613b      	str	r3, [r7, #16]
    }
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10a      	bne.n	8005d3a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	60fb      	str	r3, [r7, #12]
    }
 8005d36:	bf00      	nop
 8005d38:	e7fe      	b.n	8005d38 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005d3a:	f001 f8e3 	bl	8006f04 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005d3e:	4b1f      	ldr	r3, [pc, #124]	; (8005dbc <xTaskCheckForTimeOut+0xc4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d102      	bne.n	8005d5e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e026      	b.n	8005dac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <xTaskCheckForTimeOut+0xc8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d00a      	beq.n	8005d80 <xTaskCheckForTimeOut+0x88>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d305      	bcc.n	8005d80 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e015      	b.n	8005dac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d20b      	bcs.n	8005da2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	1ad2      	subs	r2, r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ff98 	bl	8005ccc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e004      	b.n	8005dac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005dac:	f001 f8da 	bl	8006f64 <vPortExitCritical>

    return xReturn;
 8005db0:	69fb      	ldr	r3, [r7, #28]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200003bc 	.word	0x200003bc
 8005dc0:	200003d0 	.word	0x200003d0

08005dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <vTaskMissedYield+0x14>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200003cc 	.word	0x200003cc

08005ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005de4:	f000 f854 	bl	8005e90 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvIdleTask+0x2c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d907      	bls.n	8005e00 <prvIdleTask+0x24>
            {
                taskYIELD();
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <prvIdleTask+0x30>)
 8005df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 8005e00:	f7fb fb26 	bl	8001450 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8005e04:	e7ee      	b.n	8005de4 <prvIdleTask+0x8>
 8005e06:	bf00      	nop
 8005e08:	200002d0 	.word	0x200002d0
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
 8005e1a:	e00c      	b.n	8005e36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <prvInitialiseTaskLists+0x60>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe f96a 	bl	8004104 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3301      	adds	r3, #1
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d9ef      	bls.n	8005e1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005e3c:	480d      	ldr	r0, [pc, #52]	; (8005e74 <prvInitialiseTaskLists+0x64>)
 8005e3e:	f7fe f961 	bl	8004104 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005e42:	480d      	ldr	r0, [pc, #52]	; (8005e78 <prvInitialiseTaskLists+0x68>)
 8005e44:	f7fe f95e 	bl	8004104 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005e48:	480c      	ldr	r0, [pc, #48]	; (8005e7c <prvInitialiseTaskLists+0x6c>)
 8005e4a:	f7fe f95b 	bl	8004104 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005e4e:	480c      	ldr	r0, [pc, #48]	; (8005e80 <prvInitialiseTaskLists+0x70>)
 8005e50:	f7fe f958 	bl	8004104 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005e54:	480b      	ldr	r0, [pc, #44]	; (8005e84 <prvInitialiseTaskLists+0x74>)
 8005e56:	f7fe f955 	bl	8004104 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <prvInitialiseTaskLists+0x78>)
 8005e5c:	4a05      	ldr	r2, [pc, #20]	; (8005e74 <prvInitialiseTaskLists+0x64>)
 8005e5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <prvInitialiseTaskLists+0x7c>)
 8005e62:	4a05      	ldr	r2, [pc, #20]	; (8005e78 <prvInitialiseTaskLists+0x68>)
 8005e64:	601a      	str	r2, [r3, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	200002d0 	.word	0x200002d0
 8005e74:	20000348 	.word	0x20000348
 8005e78:	2000035c 	.word	0x2000035c
 8005e7c:	20000378 	.word	0x20000378
 8005e80:	2000038c 	.word	0x2000038c
 8005e84:	200003a4 	.word	0x200003a4
 8005e88:	20000370 	.word	0x20000370
 8005e8c:	20000374 	.word	0x20000374

08005e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e96:	e019      	b.n	8005ecc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005e98:	f001 f834 	bl	8006f04 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9c:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <prvCheckTasksWaitingTermination+0x50>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe f9b5 	bl	8004218 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <prvCheckTasksWaitingTermination+0x54>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <prvCheckTasksWaitingTermination+0x54>)
 8005eb6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <prvCheckTasksWaitingTermination+0x58>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <prvCheckTasksWaitingTermination+0x58>)
 8005ec0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005ec2:	f001 f84f 	bl	8006f64 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f810 	bl	8005eec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <prvCheckTasksWaitingTermination+0x58>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e1      	bne.n	8005e98 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000038c 	.word	0x2000038c
 8005ee4:	200003b8 	.word	0x200003b8
 8005ee8:	200003a0 	.word	0x200003a0

08005eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 f9e1 	bl	80072c0 <vPortFree>
            vPortFree( pxTCB );
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f9de 	bl	80072c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvResetNextTaskUnblockTime+0x30>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <prvResetNextTaskUnblockTime+0x34>)
 8005f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f22:	e005      	b.n	8005f30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <prvResetNextTaskUnblockTime+0x30>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <prvResetNextTaskUnblockTime+0x34>)
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000370 	.word	0x20000370
 8005f40:	200003d8 	.word	0x200003d8

08005f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <xTaskGetSchedulerState+0x34>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005f52:	2301      	movs	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e008      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <xTaskGetSchedulerState+0x38>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005f60:	2302      	movs	r3, #2
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e001      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005f6a:	687b      	ldr	r3, [r7, #4]
    }
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	200003c4 	.word	0x200003c4
 8005f7c:	200003e0 	.word	0x200003e0

08005f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8095 	beq.w	80060c2 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005f98:	4b4c      	ldr	r3, [pc, #304]	; (80060cc <xTaskPriorityDisinherit+0x14c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d00a      	beq.n	8005fb8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	613b      	str	r3, [r7, #16]
    }
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
    }
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	1e5a      	subs	r2, r3, #1
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d06a      	beq.n	80060c2 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d166      	bne.n	80060c2 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe f90d 	bl	8004218 <uxListRemove>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	2201      	movs	r2, #1
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43da      	mvns	r2, r3
 8006010:	4b2f      	ldr	r3, [pc, #188]	; (80060d0 <xTaskPriorityDisinherit+0x150>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4013      	ands	r3, r2
 8006016:	4a2e      	ldr	r2, [pc, #184]	; (80060d0 <xTaskPriorityDisinherit+0x150>)
 8006018:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4619      	mov	r1, r3
 800601e:	204a      	movs	r0, #74	; 0x4a
 8006020:	f002 fbf8 	bl	8008814 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	f1c3 0206 	rsb	r2, r3, #6
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	4618      	mov	r0, r3
 800603c:	f003 f87c 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	2201      	movs	r2, #1
 8006046:	409a      	lsls	r2, r3
 8006048:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <xTaskPriorityDisinherit+0x150>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4313      	orrs	r3, r2
 800604e:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <xTaskPriorityDisinherit+0x150>)
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	491f      	ldr	r1, [pc, #124]	; (80060d4 <xTaskPriorityDisinherit+0x154>)
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	3304      	adds	r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	3204      	adds	r2, #4
 800607e:	605a      	str	r2, [r3, #4]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	1d1a      	adds	r2, r3, #4
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	609a      	str	r2, [r3, #8]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <xTaskPriorityDisinherit+0x154>)
 8006096:	441a      	add	r2, r3
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	615a      	str	r2, [r3, #20]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	490c      	ldr	r1, [pc, #48]	; (80060d4 <xTaskPriorityDisinherit+0x154>)
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	4808      	ldr	r0, [pc, #32]	; (80060d4 <xTaskPriorityDisinherit+0x154>)
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4403      	add	r3, r0
 80060bc:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060be:	2301      	movs	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060c2:	69fb      	ldr	r3, [r7, #28]
    }
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200002cc 	.word	0x200002cc
 80060d0:	200003c0 	.word	0x200003c0
 80060d4:	200002d0 	.word	0x200002d0

080060d8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
    }
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006102:	f000 feff 	bl	8006f04 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006106:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	3354      	adds	r3, #84	; 0x54
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d022      	beq.n	800615e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006118:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	3214      	adds	r2, #20
 8006120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	43d2      	mvns	r2, r2
 8006128:	4011      	ands	r1, r2
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	3214      	adds	r2, #20
 800612e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	3354      	adds	r3, #84	; 0x54
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006146:	2101      	movs	r1, #1
 8006148:	6a38      	ldr	r0, [r7, #32]
 800614a:	f000 f981 	bl	8006450 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800614e:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <xTaskGenericNotifyWait+0x10c>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800615e:	f000 ff01 	bl	8006f64 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006162:	f000 fecf 	bl	8006f04 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	2040      	movs	r0, #64	; 0x40
 8006174:	f002 fbe4 	bl	8008940 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800617e:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	3214      	adds	r2, #20
 8006186:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	3354      	adds	r3, #84	; 0x54
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d002      	beq.n	80061a6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e00e      	b.n	80061c4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	3214      	adds	r2, #20
 80061ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	43d2      	mvns	r2, r2
 80061b6:	4011      	ands	r1, r2
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	3214      	adds	r2, #20
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	3354      	adds	r3, #84	; 0x54
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061d2:	f000 fec7 	bl	8006f64 <vPortExitCritical>

        return xReturn;
 80061d6:	697b      	ldr	r3, [r7, #20]
    }
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	200002cc 	.word	0x200002cc
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b090      	sub	sp, #64	; 0x40
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80061f6:	2301      	movs	r3, #1
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	623b      	str	r3, [r7, #32]
    }
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xTaskGenericNotify+0x4a>
        __asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	61fb      	str	r3, [r7, #28]
    }
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8006236:	f000 fe65 	bl	8006f04 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800623a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	3214      	adds	r2, #20
 8006246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800624a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800624c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800624e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	3354      	adds	r3, #84	; 0x54
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800625c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	3354      	adds	r3, #84	; 0x54
 8006264:	2202      	movs	r2, #2
 8006266:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d83b      	bhi.n	80062e6 <xTaskGenericNotify+0xfe>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <xTaskGenericNotify+0x8c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006305 	.word	0x08006305
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062bd 	.word	0x080062bd
 8006284:	080062cb 	.word	0x080062cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	3214      	adds	r2, #20
 800628e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	ea42 0103 	orr.w	r1, r2, r3
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	3214      	adds	r2, #20
 800629e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062a2:	e032      	b.n	800630a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	3214      	adds	r2, #20
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	3214      	adds	r2, #20
 80062b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062ba:	e026      	b.n	800630a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	3214      	adds	r2, #20
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062c8:	e01f      	b.n	800630a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d006      	beq.n	80062e0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	3214      	adds	r2, #20
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80062de:	e014      	b.n	800630a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80062e4:	e011      	b.n	800630a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80062e6:	4b55      	ldr	r3, [pc, #340]	; (800643c <xTaskGenericNotify+0x254>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <xTaskGenericNotify+0x120>
        __asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
    }
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskGenericNotify+0x11a>
                    break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <xTaskGenericNotify+0x122>

                    break;
 8006308:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	4618      	mov	r0, r3
 800630e:	f002 ffb5 	bl	800927c <SEGGER_SYSVIEW_ShrinkId>
 8006312:	4601      	mov	r1, r0
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	203e      	movs	r0, #62	; 0x3e
 8006320:	f002 fb0e 	bl	8008940 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006328:	2b01      	cmp	r3, #1
 800632a:	d17f      	bne.n	800642c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006338:	68d2      	ldr	r2, [r2, #12]
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	6892      	ldr	r2, [r2, #8]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	3304      	adds	r3, #4
 800634e:	429a      	cmp	r2, r3
 8006350:	d103      	bne.n	800635a <xTaskGenericNotify+0x172>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2200      	movs	r2, #0
 800635e:	615a      	str	r2, [r3, #20]
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	4618      	mov	r0, r3
 800636e:	f002 fee3 	bl	8009138 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	2201      	movs	r2, #1
 8006378:	409a      	lsls	r2, r3
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <xTaskGenericNotify+0x258>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4313      	orrs	r3, r2
 8006380:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <xTaskGenericNotify+0x258>)
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	492e      	ldr	r1, [pc, #184]	; (8006444 <xTaskGenericNotify+0x25c>)
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3304      	adds	r3, #4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	60da      	str	r2, [r3, #12]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	3204      	adds	r2, #4
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	1d1a      	adds	r2, r3, #4
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	609a      	str	r2, [r3, #8]
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a1f      	ldr	r2, [pc, #124]	; (8006444 <xTaskGenericNotify+0x25c>)
 80063c8:	441a      	add	r2, r3
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	615a      	str	r2, [r3, #20]
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	491c      	ldr	r1, [pc, #112]	; (8006444 <xTaskGenericNotify+0x25c>)
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	4818      	ldr	r0, [pc, #96]	; (8006444 <xTaskGenericNotify+0x25c>)
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4403      	add	r3, r0
 80063ee:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <xTaskGenericNotify+0x226>
        __asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	617b      	str	r3, [r7, #20]
    }
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <xTaskGenericNotify+0x260>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	429a      	cmp	r2, r3
 800641a:	d907      	bls.n	800642c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <xTaskGenericNotify+0x264>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800642c:	f000 fd9a 	bl	8006f64 <vPortExitCritical>

        return xReturn;
 8006430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8006432:	4618      	mov	r0, r3
 8006434:	3738      	adds	r7, #56	; 0x38
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200003bc 	.word	0x200003bc
 8006440:	200003c0 	.word	0x200003c0
 8006444:	200002d0 	.word	0x200002d0
 8006448:	200002cc 	.word	0x200002cc
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800645a:	4b36      	ldr	r3, [pc, #216]	; (8006534 <prvAddCurrentTaskToDelayedList+0xe4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006460:	4b35      	ldr	r3, [pc, #212]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3304      	adds	r3, #4
 8006466:	4618      	mov	r0, r3
 8006468:	f7fd fed6 	bl	8004218 <uxListRemove>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10b      	bne.n	800648a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006472:	4b31      	ldr	r3, [pc, #196]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	2201      	movs	r2, #1
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	43da      	mvns	r2, r3
 8006480:	4b2e      	ldr	r3, [pc, #184]	; (800653c <prvAddCurrentTaskToDelayedList+0xec>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4013      	ands	r3, r2
 8006486:	4a2d      	ldr	r2, [pc, #180]	; (800653c <prvAddCurrentTaskToDelayedList+0xec>)
 8006488:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d124      	bne.n	80064dc <prvAddCurrentTaskToDelayedList+0x8c>
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d021      	beq.n	80064dc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006498:	4b29      	ldr	r3, [pc, #164]	; (8006540 <prvAddCurrentTaskToDelayedList+0xf0>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	4b26      	ldr	r3, [pc, #152]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	609a      	str	r2, [r3, #8]
 80064a6:	4b24      	ldr	r3, [pc, #144]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	6892      	ldr	r2, [r2, #8]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	3204      	adds	r2, #4
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	4b1e      	ldr	r3, [pc, #120]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1d1a      	adds	r2, r3, #4
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	609a      	str	r2, [r3, #8]
 80064c6:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80064cc:	615a      	str	r2, [r3, #20]
 80064ce:	4b1c      	ldr	r3, [pc, #112]	; (8006540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <prvAddCurrentTaskToDelayedList+0xf0>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80064da:	e026      	b.n	800652a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064e4:	4b14      	ldr	r3, [pc, #80]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d209      	bcs.n	8006508 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f4:	4b13      	ldr	r3, [pc, #76]	; (8006544 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4619      	mov	r1, r3
 8006500:	4610      	mov	r0, r2
 8006502:	f7fd fe50 	bl	80041a6 <vListInsert>
}
 8006506:	e010      	b.n	800652a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006508:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <prvAddCurrentTaskToDelayedList+0xf8>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <prvAddCurrentTaskToDelayedList+0xe8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fd fe46 	bl	80041a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <prvAddCurrentTaskToDelayedList+0xfc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	429a      	cmp	r2, r3
 8006522:	d202      	bcs.n	800652a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8006524:	4a09      	ldr	r2, [pc, #36]	; (800654c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6013      	str	r3, [r2, #0]
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200003bc 	.word	0x200003bc
 8006538:	200002cc 	.word	0x200002cc
 800653c:	200003c0 	.word	0x200003c0
 8006540:	200003a4 	.word	0x200003a4
 8006544:	20000374 	.word	0x20000374
 8006548:	20000370 	.word	0x20000370
 800654c:	200003d8 	.word	0x200003d8

08006550 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800655a:	f000 faef 	bl	8006b3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <xTimerCreateTimerTask+0x54>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xTimerCreateTimerTask+0x58>)
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2302      	movs	r3, #2
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006574:	490d      	ldr	r1, [pc, #52]	; (80065ac <xTimerCreateTimerTask+0x5c>)
 8006576:	480e      	ldr	r0, [pc, #56]	; (80065b0 <xTimerCreateTimerTask+0x60>)
 8006578:	f7fe fb9c 	bl	8004cb4 <xTaskCreate>
 800657c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	603b      	str	r3, [r7, #0]
    }
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800659a:	687b      	ldr	r3, [r7, #4]
    }
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000414 	.word	0x20000414
 80065a8:	20000418 	.word	0x20000418
 80065ac:	08009f88 	.word	0x08009f88
 80065b0:	080067a9 	.word	0x080067a9

080065b4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80065c2:	202c      	movs	r0, #44	; 0x2c
 80065c4:	f000 fdc2 	bl	800714c <pvPortMalloc>
 80065c8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f805 	bl	80065f6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80065ec:	697b      	ldr	r3, [r7, #20]
        }
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	617b      	str	r3, [r7, #20]
    }
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006620:	f000 fa8c 	bl	8006b3c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	6a3a      	ldr	r2, [r7, #32]
 800663a:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd fd7f 	bl	8004144 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006652:	f043 0304 	orr.w	r3, r3, #4
 8006656:	b2da      	uxtb	r2, r3
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	623b      	str	r3, [r7, #32]
    }
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <xTimerGenericCommand+0x98>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02a      	beq.n	80066f4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	dc18      	bgt.n	80066e2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066b0:	f7ff fc48 	bl	8005f44 <xTaskGetSchedulerState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d109      	bne.n	80066ce <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTimerGenericCommand+0x98>)
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f107 0114 	add.w	r1, r7, #20
 80066c2:	2300      	movs	r3, #0
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	f7fd fed3 	bl	8004470 <xQueueGenericSend>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24
 80066cc:	e012      	b.n	80066f4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <xTimerGenericCommand+0x98>)
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	f107 0114 	add.w	r1, r7, #20
 80066d6:	2300      	movs	r3, #0
 80066d8:	2200      	movs	r2, #0
 80066da:	f7fd fec9 	bl	8004470 <xQueueGenericSend>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24
 80066e0:	e008      	b.n	80066f4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <xTimerGenericCommand+0x98>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f107 0114 	add.w	r1, r7, #20
 80066ea:	2300      	movs	r3, #0
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f7fd ffbd 	bl	800466c <xQueueGenericSendFromISR>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80066f6:	4618      	mov	r0, r3
 80066f8:	3728      	adds	r7, #40	; 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000414 	.word	0x20000414

08006704 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006710:	e008      	b.n	8006724 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4413      	add	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	18d1      	adds	r1, r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f8dd 	bl	80068f0 <prvInsertTimerInActiveList>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1ea      	bne.n	8006712 <prvReloadTimer+0xe>
        }
    }
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <prvProcessExpiredTimer+0x5c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fd fd59 	bl	8004218 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ffc3 	bl	8006704 <prvReloadTimer>
 800677e:	e008      	b.n	8006792 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006786:	f023 0301 	bic.w	r3, r3, #1
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	4798      	blx	r3
    }
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	2000040c 	.word	0x2000040c

080067a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b0:	f107 0308 	add.w	r3, r7, #8
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f857 	bl	8006868 <prvGetNextExpireTime>
 80067ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f803 	bl	80067cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80067c6:	f000 f8d5 	bl	8006974 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ca:	e7f1      	b.n	80067b0 <prvTimerTask+0x8>

080067cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80067d6:	f7fe fe75 	bl	80054c4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f866 	bl	80068b0 <prvSampleTimeNow>
 80067e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d130      	bne.n	800684e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <prvProcessTimerOrBlockTask+0x3c>
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d806      	bhi.n	8006808 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80067fa:	f7fe fe71 	bl	80054e0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ffa1 	bl	8006748 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006806:	e024      	b.n	8006852 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <prvProcessTimerOrBlockTask+0x90>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <prvProcessTimerOrBlockTask+0x50>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <prvProcessTimerOrBlockTask+0x52>
 800681c:	2300      	movs	r3, #0
 800681e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <prvProcessTimerOrBlockTask+0x94>)
 8006822:	6818      	ldr	r0, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	4619      	mov	r1, r3
 800682e:	f7fe fa0d 	bl	8004c4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006832:	f7fe fe55 	bl	80054e0 <xTaskResumeAll>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <prvProcessTimerOrBlockTask+0x98>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
    }
 800684c:	e001      	b.n	8006852 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800684e:	f7fe fe47 	bl	80054e0 <xTaskResumeAll>
    }
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000410 	.word	0x20000410
 8006860:	20000414 	.word	0x20000414
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <prvGetNextExpireTime+0x44>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <prvGetNextExpireTime+0x16>
 800687a:	2201      	movs	r2, #1
 800687c:	e000      	b.n	8006880 <prvGetNextExpireTime+0x18>
 800687e:	2200      	movs	r2, #0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800688c:	4b07      	ldr	r3, [pc, #28]	; (80068ac <prvGetNextExpireTime+0x44>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e001      	b.n	800689c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800689c:	68fb      	ldr	r3, [r7, #12]
    }
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	2000040c 	.word	0x2000040c

080068b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80068b8:	f7fe ff12 	bl	80056e0 <xTaskGetTickCount>
 80068bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <prvSampleTimeNow+0x3c>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d205      	bcs.n	80068d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80068c8:	f000 f912 	bl	8006af0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	e002      	b.n	80068da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80068da:	4a04      	ldr	r2, [pc, #16]	; (80068ec <prvSampleTimeNow+0x3c>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80068e0:	68fb      	ldr	r3, [r7, #12]
    }
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000041c 	.word	0x2000041c

080068f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d812      	bhi.n	800693c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e01b      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <prvInsertTimerInActiveList+0x7c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3304      	adds	r3, #4
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f7fd fc36 	bl	80041a6 <vListInsert>
 800693a:	e012      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d206      	bcs.n	8006952 <prvInsertTimerInActiveList+0x62>
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d302      	bcc.n	8006952 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e007      	b.n	8006962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <prvInsertTimerInActiveList+0x80>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3304      	adds	r3, #4
 800695a:	4619      	mov	r1, r3
 800695c:	4610      	mov	r0, r2
 800695e:	f7fd fc22 	bl	80041a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006962:	697b      	ldr	r3, [r7, #20]
    }
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000410 	.word	0x20000410
 8006970:	2000040c 	.word	0x2000040c

08006974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800697a:	e0a6      	b.n	8006aca <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f2c0 80a3 	blt.w	8006aca <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3304      	adds	r3, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f7fd fc3f 	bl	8004218 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800699a:	1d3b      	adds	r3, r7, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff87 	bl	80068b0 <prvSampleTimeNow>
 80069a2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	f200 808d 	bhi.w	8006ac8 <prvProcessReceivedCommands+0x154>
 80069ae:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <prvProcessReceivedCommands+0x40>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	08006a41 	.word	0x08006a41
 80069c0:	08006a55 	.word	0x08006a55
 80069c4:	08006a9f 	.word	0x08006a9f
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	080069d9 	.word	0x080069d9
 80069d0:	08006a41 	.word	0x08006a41
 80069d4:	08006a55 	.word	0x08006a55
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	18d1      	adds	r1, r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	69f8      	ldr	r0, [r7, #28]
 80069f8:	f7ff ff7a 	bl	80068f0 <prvInsertTimerInActiveList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d063      	beq.n	8006aca <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	4413      	add	r3, r2
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	69f8      	ldr	r0, [r7, #28]
 8006a1e:	f7ff fe71 	bl	8006704 <prvReloadTimer>
 8006a22:	e008      	b.n	8006a36 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	69f8      	ldr	r0, [r7, #28]
 8006a3c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006a3e:	e044      	b.n	8006aca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a46:	f023 0301 	bic.w	r3, r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a52:	e03a      	b.n	8006aca <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	617b      	str	r3, [r7, #20]
    }
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	18d1      	adds	r1, r2, r3
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	69ba      	ldr	r2, [r7, #24]
 8006a96:	69f8      	ldr	r0, [r7, #28]
 8006a98:	f7ff ff2a 	bl	80068f0 <prvInsertTimerInActiveList>
                        break;
 8006a9c:	e015      	b.n	8006aca <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8006aac:	69f8      	ldr	r0, [r7, #28]
 8006aae:	f000 fc07 	bl	80072c0 <vPortFree>
 8006ab2:	e00a      	b.n	8006aca <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006ac6:	e000      	b.n	8006aca <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006ac8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <prvProcessReceivedCommands+0x178>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f107 0108 	add.w	r1, r7, #8
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fd fe7b 	bl	80047d0 <xQueueReceive>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f47f af4d 	bne.w	800697c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000414 	.word	0x20000414

08006af0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006af6:	e009      	b.n	8006b0c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <prvSwitchTimerLists+0x44>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006b02:	f04f 31ff 	mov.w	r1, #4294967295
 8006b06:	6838      	ldr	r0, [r7, #0]
 8006b08:	f7ff fe1e 	bl	8006748 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <prvSwitchTimerLists+0x44>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <prvSwitchTimerLists+0x44>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <prvSwitchTimerLists+0x48>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <prvSwitchTimerLists+0x44>)
 8006b22:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <prvSwitchTimerLists+0x48>)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6013      	str	r3, [r2, #0]
    }
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2000040c 	.word	0x2000040c
 8006b38:	20000410 	.word	0x20000410

08006b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006b40:	f000 f9e0 	bl	8006f04 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006b44:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <prvCheckForValidListAndQueue+0x54>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d11d      	bne.n	8006b88 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006b4c:	4811      	ldr	r0, [pc, #68]	; (8006b94 <prvCheckForValidListAndQueue+0x58>)
 8006b4e:	f7fd fad9 	bl	8004104 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006b52:	4811      	ldr	r0, [pc, #68]	; (8006b98 <prvCheckForValidListAndQueue+0x5c>)
 8006b54:	f7fd fad6 	bl	8004104 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <prvCheckForValidListAndQueue+0x60>)
 8006b5a:	4a0e      	ldr	r2, [pc, #56]	; (8006b94 <prvCheckForValidListAndQueue+0x58>)
 8006b5c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <prvCheckForValidListAndQueue+0x64>)
 8006b60:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <prvCheckForValidListAndQueue+0x5c>)
 8006b62:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006b64:	2200      	movs	r2, #0
 8006b66:	210c      	movs	r1, #12
 8006b68:	200a      	movs	r0, #10
 8006b6a:	f7fd fc0f 	bl	800438c <xQueueGenericCreate>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <prvCheckForValidListAndQueue+0x54>)
 8006b72:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvCheckForValidListAndQueue+0x54>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <prvCheckForValidListAndQueue+0x54>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4908      	ldr	r1, [pc, #32]	; (8006ba4 <prvCheckForValidListAndQueue+0x68>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe f814 	bl	8004bb0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006b88:	f000 f9ec 	bl	8006f64 <vPortExitCritical>
    }
 8006b8c:	bf00      	nop
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000414 	.word	0x20000414
 8006b94:	200003e4 	.word	0x200003e4
 8006b98:	200003f8 	.word	0x200003f8
 8006b9c:	2000040c 	.word	0x2000040c
 8006ba0:	20000410 	.word	0x20000410
 8006ba4:	08009f90 	.word	0x08009f90

08006ba8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	; (8006c0c <pxPortInitialiseStack+0x64>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b14      	subs	r3, #20
 8006be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f06f 0202 	mvn.w	r2, #2
 8006bf6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b20      	subs	r3, #32
 8006bfc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <prvTaskExitError+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d00a      	beq.n	8006c3a <prvTaskExitError+0x2a>
        __asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
    }
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvTaskExitError+0x28>
        __asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
    }
 8006c4c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006c4e:	bf00      	nop
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0fc      	beq.n	8006c50 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	2000001c 	.word	0x2000001c
	...

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	4770      	bx	lr
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst2>:
 8006c90:	200002cc 	.word	0x200002cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <prvPortStartFirstTask+0x24>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8814 	msr	CONTROL, r0
 8006caa:	b662      	cpsie	i
 8006cac:	b661      	cpsie	f
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	df00      	svc	0
 8006cb8:	bf00      	nop
 8006cba:	0000      	.short	0x0000
 8006cbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop

08006cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cca:	4b46      	ldr	r3, [pc, #280]	; (8006de4 <xPortStartScheduler+0x120>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a46      	ldr	r2, [pc, #280]	; (8006de8 <xPortStartScheduler+0x124>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10a      	bne.n	8006cea <xPortStartScheduler+0x26>
        __asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	613b      	str	r3, [r7, #16]
    }
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cea:	4b3e      	ldr	r3, [pc, #248]	; (8006de4 <xPortStartScheduler+0x120>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <xPortStartScheduler+0x128>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d10a      	bne.n	8006d0a <xPortStartScheduler+0x46>
        __asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	60fb      	str	r3, [r7, #12]
    }
 8006d06:	bf00      	nop
 8006d08:	e7fe      	b.n	8006d08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d0a:	4b39      	ldr	r3, [pc, #228]	; (8006df0 <xPortStartScheduler+0x12c>)
 8006d0c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	22ff      	movs	r2, #255	; 0xff
 8006d1a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <xPortStartScheduler+0x130>)
 8006d30:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d32:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d34:	2207      	movs	r2, #7
 8006d36:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d38:	e009      	b.n	8006d4e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8006d3a:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4a2d      	ldr	r2, [pc, #180]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d42:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d0ef      	beq.n	8006d3a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d5a:	4b27      	ldr	r3, [pc, #156]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1c3 0307 	rsb	r3, r3, #7
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d00a      	beq.n	8006d7c <xPortStartScheduler+0xb8>
        __asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60bb      	str	r3, [r7, #8]
    }
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d84:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d86:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8e:	4a1a      	ldr	r2, [pc, #104]	; (8006df8 <xPortStartScheduler+0x134>)
 8006d90:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006d9a:	4b18      	ldr	r3, [pc, #96]	; (8006dfc <xPortStartScheduler+0x138>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <xPortStartScheduler+0x138>)
 8006da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006da4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <xPortStartScheduler+0x138>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <xPortStartScheduler+0x138>)
 8006dac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006db0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006db2:	f000 f95b 	bl	800706c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006db6:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <xPortStartScheduler+0x13c>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006dbc:	f000 f97a 	bl	80070b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dc0:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <xPortStartScheduler+0x140>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <xPortStartScheduler+0x140>)
 8006dc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006dcc:	f7ff ff64 	bl	8006c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006dd0:	f7fe fdce 	bl	8005970 <vTaskSwitchContext>
    prvTaskExitError();
 8006dd4:	f7ff ff1c 	bl	8006c10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000ed00 	.word	0xe000ed00
 8006de8:	410fc271 	.word	0x410fc271
 8006dec:	410fc270 	.word	0x410fc270
 8006df0:	e000e400 	.word	0xe000e400
 8006df4:	20000420 	.word	0x20000420
 8006df8:	20000424 	.word	0x20000424
 8006dfc:	e000ed20 	.word	0xe000ed20
 8006e00:	2000001c 	.word	0x2000001c
 8006e04:	e000ef34 	.word	0xe000ef34

08006e08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <vInitPrioGroupValue+0xe4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a37      	ldr	r2, [pc, #220]	; (8006ef0 <vInitPrioGroupValue+0xe8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d10a      	bne.n	8006e2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	613b      	str	r3, [r7, #16]
    }
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e2e:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <vInitPrioGroupValue+0xe4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a30      	ldr	r2, [pc, #192]	; (8006ef4 <vInitPrioGroupValue+0xec>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10a      	bne.n	8006e4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	60fb      	str	r3, [r7, #12]
    }
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e4e:	4b2a      	ldr	r3, [pc, #168]	; (8006ef8 <vInitPrioGroupValue+0xf0>)
 8006e50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <vInitPrioGroupValue+0xf4>)
 8006e74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e76:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006e78:	2207      	movs	r2, #7
 8006e7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e7c:	e009      	b.n	8006e92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006e7e:	4b20      	ldr	r3, [pc, #128]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	4a1e      	ldr	r2, [pc, #120]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006e86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e88:	78fb      	ldrb	r3, [r7, #3]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9a:	2b80      	cmp	r3, #128	; 0x80
 8006e9c:	d0ef      	beq.n	8006e7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e9e:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f1c3 0307 	rsb	r3, r3, #7
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d00a      	beq.n	8006ec0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60bb      	str	r3, [r7, #8]
    }
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	4a0e      	ldr	r2, [pc, #56]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006ec8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ed2:	4a0b      	ldr	r2, [pc, #44]	; (8006f00 <vInitPrioGroupValue+0xf8>)
 8006ed4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	e000ed00 	.word	0xe000ed00
 8006ef0:	410fc271 	.word	0x410fc271
 8006ef4:	410fc270 	.word	0x410fc270
 8006ef8:	e000e400 	.word	0xe000e400
 8006efc:	20000420 	.word	0x20000420
 8006f00:	20000424 	.word	0x20000424

08006f04 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
        __asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	607b      	str	r3, [r7, #4]
    }
 8006f1c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006f1e:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	4a0d      	ldr	r2, [pc, #52]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f26:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <vPortEnterCritical+0x58>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d10f      	bne.n	8006f50 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f30:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <vPortEnterCritical+0x5c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <vPortEnterCritical+0x4c>
        __asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	603b      	str	r3, [r7, #0]
    }
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <vPortEnterCritical+0x4a>
    }
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	2000001c 	.word	0x2000001c
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006f6a:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <vPortExitCritical+0x24>
        __asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	607b      	str	r3, [r7, #4]
    }
 8006f84:	bf00      	nop
 8006f86:	e7fe      	b.n	8006f86 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f90:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <vPortExitCritical+0x42>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
    }
 8006fa4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	2000001c 	.word	0x2000001c
	...

08006fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006fc0:	f3ef 8009 	mrs	r0, PSP
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	4b15      	ldr	r3, [pc, #84]	; (8007020 <pxCurrentTCBConst>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f01e 0f10 	tst.w	lr, #16
 8006fd0:	bf08      	it	eq
 8006fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	6010      	str	r0, [r2, #0]
 8006fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fe4:	f380 8811 	msr	BASEPRI, r0
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f7fe fcbe 	bl	8005970 <vTaskSwitchContext>
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f380 8811 	msr	BASEPRI, r0
 8006ffc:	bc09      	pop	{r0, r3}
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	6808      	ldr	r0, [r1, #0]
 8007002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007006:	f01e 0f10 	tst.w	lr, #16
 800700a:	bf08      	it	eq
 800700c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007010:	f380 8809 	msr	PSP, r0
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	f3af 8000 	nop.w

08007020 <pxCurrentTCBConst>:
 8007020:	200002cc 	.word	0x200002cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop

08007028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
        __asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
    }
 8007040:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007042:	f7fe fb7b 	bl	800573c <xTaskIncrementTick>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <SysTick_Handler+0x40>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	f383 8811 	msr	BASEPRI, r3
    }
 800705e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <vPortSetupTimerInterrupt+0x38>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <vPortSetupTimerInterrupt+0x3c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <vPortSetupTimerInterrupt+0x40>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	099b      	lsrs	r3, r3, #6
 8007088:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <vPortSetupTimerInterrupt+0x44>)
 800708a:	3b01      	subs	r3, #1
 800708c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <vPortSetupTimerInterrupt+0x34>)
 8007090:	2207      	movs	r2, #7
 8007092:	601a      	str	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000e010 	.word	0xe000e010
 80070a4:	e000e018 	.word	0xe000e018
 80070a8:	20000000 	.word	0x20000000
 80070ac:	10624dd3 	.word	0x10624dd3
 80070b0:	e000e014 	.word	0xe000e014

080070b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80070b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070c4 <vPortEnableVFP+0x10>
 80070b8:	6801      	ldr	r1, [r0, #0]
 80070ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070be:	6001      	str	r1, [r0, #0]
 80070c0:	4770      	bx	lr
 80070c2:	0000      	.short	0x0000
 80070c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop

080070cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80070d2:	f3ef 8305 	mrs	r3, IPSR
 80070d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	d914      	bls.n	8007108 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070de:	4a17      	ldr	r2, [pc, #92]	; (800713c <vPortValidateInterruptPriority+0x70>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <vPortValidateInterruptPriority+0x74>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	7afa      	ldrb	r2, [r7, #11]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d20a      	bcs.n	8007108 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
    }
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <vPortValidateInterruptPriority+0x78>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <vPortValidateInterruptPriority+0x7c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d90a      	bls.n	800712e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	603b      	str	r3, [r7, #0]
    }
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <vPortValidateInterruptPriority+0x60>
    }
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e3f0 	.word	0xe000e3f0
 8007140:	20000420 	.word	0x20000420
 8007144:	e000ed0c 	.word	0xe000ed0c
 8007148:	20000424 	.word	0x20000424

0800714c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007158:	f7fe f9b4 	bl	80054c4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800715c:	4b53      	ldr	r3, [pc, #332]	; (80072ac <pvPortMalloc+0x160>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007164:	f000 f908 	bl	8007378 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d012      	beq.n	8007194 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800716e:	2208      	movs	r2, #8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	3308      	adds	r3, #8
 800717a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	43db      	mvns	r3, r3
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d804      	bhi.n	8007190 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	4413      	add	r3, r2
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	e001      	b.n	8007194 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	db70      	blt.n	800727c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d06d      	beq.n	800727c <pvPortMalloc+0x130>
 80071a0:	4b43      	ldr	r3, [pc, #268]	; (80072b0 <pvPortMalloc+0x164>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d868      	bhi.n	800727c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80071aa:	4b42      	ldr	r3, [pc, #264]	; (80072b4 <pvPortMalloc+0x168>)
 80071ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80071ae:	4b41      	ldr	r3, [pc, #260]	; (80072b4 <pvPortMalloc+0x168>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071b4:	e004      	b.n	80071c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <pvPortMalloc+0x86>
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f1      	bne.n	80071b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80071d2:	4b36      	ldr	r3, [pc, #216]	; (80072ac <pvPortMalloc+0x160>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d8:	429a      	cmp	r2, r3
 80071da:	d04f      	beq.n	800727c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2208      	movs	r2, #8
 80071e2:	4413      	add	r3, r2
 80071e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	2308      	movs	r3, #8
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d91f      	bls.n	800723e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4413      	add	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <pvPortMalloc+0xda>
        __asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	613b      	str	r3, [r7, #16]
    }
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1ad2      	subs	r2, r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f000 f8f9 	bl	8007430 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <pvPortMalloc+0x164>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	4a19      	ldr	r2, [pc, #100]	; (80072b0 <pvPortMalloc+0x164>)
 800724a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800724c:	4b18      	ldr	r3, [pc, #96]	; (80072b0 <pvPortMalloc+0x164>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b19      	ldr	r3, [pc, #100]	; (80072b8 <pvPortMalloc+0x16c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d203      	bcs.n	8007260 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007258:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <pvPortMalloc+0x164>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <pvPortMalloc+0x16c>)
 800725e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	2200      	movs	r2, #0
 8007270:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007272:	4b12      	ldr	r3, [pc, #72]	; (80072bc <pvPortMalloc+0x170>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	4a10      	ldr	r2, [pc, #64]	; (80072bc <pvPortMalloc+0x170>)
 800727a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800727c:	f7fe f930 	bl	80054e0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <pvPortMalloc+0x154>
        __asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60fb      	str	r3, [r7, #12]
    }
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <pvPortMalloc+0x152>
    return pvReturn;
 80072a0:	69fb      	ldr	r3, [r7, #28]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3728      	adds	r7, #40	; 0x28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20013030 	.word	0x20013030
 80072b0:	20013034 	.word	0x20013034
 80072b4:	20013028 	.word	0x20013028
 80072b8:	20013038 	.word	0x20013038
 80072bc:	2001303c 	.word	0x2001303c

080072c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d049      	beq.n	8007366 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80072d2:	2308      	movs	r3, #8
 80072d4:	425b      	negs	r3, r3
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	db0a      	blt.n	80072fe <vPortFree+0x3e>
        __asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	60fb      	str	r3, [r7, #12]
    }
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <vPortFree+0x5c>
        __asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
    }
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	0fdb      	lsrs	r3, r3, #31
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01c      	beq.n	8007366 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d118      	bne.n	8007366 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8007340:	f7fe f8c0 	bl	80054c4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	4b09      	ldr	r3, [pc, #36]	; (8007370 <vPortFree+0xb0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4413      	add	r3, r2
 800734e:	4a08      	ldr	r2, [pc, #32]	; (8007370 <vPortFree+0xb0>)
 8007350:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f000 f86c 	bl	8007430 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <vPortFree+0xb4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	4a05      	ldr	r2, [pc, #20]	; (8007374 <vPortFree+0xb4>)
 8007360:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007362:	f7fe f8bd 	bl	80054e0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007366:	bf00      	nop
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20013034 	.word	0x20013034
 8007374:	20013040 	.word	0x20013040

08007378 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800737e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007382:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007384:	4b25      	ldr	r3, [pc, #148]	; (800741c <prvHeapInit+0xa4>)
 8007386:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3307      	adds	r3, #7
 8007396:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	4a1d      	ldr	r2, [pc, #116]	; (800741c <prvHeapInit+0xa4>)
 80073a8:	4413      	add	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073b0:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <prvHeapInit+0xa8>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <prvHeapInit+0xa8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80073c4:	2208      	movs	r2, #8
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0307 	bic.w	r3, r3, #7
 80073d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a13      	ldr	r2, [pc, #76]	; (8007424 <prvHeapInit+0xac>)
 80073d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80073da:	4b12      	ldr	r3, [pc, #72]	; (8007424 <prvHeapInit+0xac>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <prvHeapInit+0xac>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <prvHeapInit+0xac>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a08      	ldr	r2, [pc, #32]	; (8007428 <prvHeapInit+0xb0>)
 8007406:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a07      	ldr	r2, [pc, #28]	; (800742c <prvHeapInit+0xb4>)
 800740e:	6013      	str	r3, [r2, #0]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	20000428 	.word	0x20000428
 8007420:	20013028 	.word	0x20013028
 8007424:	20013030 	.word	0x20013030
 8007428:	20013038 	.word	0x20013038
 800742c:	20013034 	.word	0x20013034

08007430 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007438:	4b28      	ldr	r3, [pc, #160]	; (80074dc <prvInsertBlockIntoFreeList+0xac>)
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e002      	b.n	8007444 <prvInsertBlockIntoFreeList+0x14>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d8f7      	bhi.n	800743e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d108      	bne.n	8007472 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	441a      	add	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	441a      	add	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d118      	bne.n	80074b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <prvInsertBlockIntoFreeList+0xb0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d00d      	beq.n	80074ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	441a      	add	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	e008      	b.n	80074c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <prvInsertBlockIntoFreeList+0xb0>)
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e003      	b.n	80074c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d002      	beq.n	80074ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80074ce:	bf00      	nop
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	20013028 	.word	0x20013028
 80074e0:	20013030 	.word	0x20013030

080074e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80074e8:	4803      	ldr	r0, [pc, #12]	; (80074f8 <_cbSendSystemDesc+0x14>)
 80074ea:	f001 fd2f 	bl	8008f4c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80074ee:	4803      	ldr	r0, [pc, #12]	; (80074fc <_cbSendSystemDesc+0x18>)
 80074f0:	f001 fd2c 	bl	8008f4c <SEGGER_SYSVIEW_SendSysDesc>
}
 80074f4:	bf00      	nop
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	08009f98 	.word	0x08009f98
 80074fc:	08009fd0 	.word	0x08009fd0

08007500 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <SEGGER_SYSVIEW_Conf+0x20>)
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <SEGGER_SYSVIEW_Conf+0x20>)
 800750a:	6819      	ldr	r1, [r3, #0]
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <SEGGER_SYSVIEW_Conf+0x24>)
 800750e:	4a06      	ldr	r2, [pc, #24]	; (8007528 <SEGGER_SYSVIEW_Conf+0x28>)
 8007510:	f001 f90e 	bl	8008730 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007514:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007518:	f001 f94e 	bl	80087b8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000000 	.word	0x20000000
 8007524:	080074e5 	.word	0x080074e5
 8007528:	0800a070 	.word	0x0800a070

0800752c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800752c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800752e:	b085      	sub	sp, #20
 8007530:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	e033      	b.n	80075a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007538:	491e      	ldr	r1, [pc, #120]	; (80075b4 <_cbSendTaskList+0x88>)
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	491a      	ldr	r1, [pc, #104]	; (80075b4 <_cbSendTaskList+0x88>)
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	3304      	adds	r3, #4
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	4c16      	ldr	r4, [pc, #88]	; (80075b4 <_cbSendTaskList+0x88>)
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4423      	add	r3, r4
 8007568:	3308      	adds	r3, #8
 800756a:	681c      	ldr	r4, [r3, #0]
 800756c:	4d11      	ldr	r5, [pc, #68]	; (80075b4 <_cbSendTaskList+0x88>)
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	442b      	add	r3, r5
 800757a:	330c      	adds	r3, #12
 800757c:	681d      	ldr	r5, [r3, #0]
 800757e:	4e0d      	ldr	r6, [pc, #52]	; (80075b4 <_cbSendTaskList+0x88>)
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4433      	add	r3, r6
 800758c:	3310      	adds	r3, #16
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	462b      	mov	r3, r5
 8007594:	4622      	mov	r2, r4
 8007596:	f000 f8bd 	bl	8007714 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3301      	adds	r3, #1
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <_cbSendTaskList+0x8c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d3c6      	bcc.n	8007538 <_cbSendTaskList+0xc>
  }
}
 80075aa:	bf00      	nop
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b4:	20013044 	.word	0x20013044
 80075b8:	200130e4 	.word	0x200130e4

080075bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80075bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80075c4:	f7fe f89c 	bl	8005700 <xTaskGetTickCountFromISR>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2200      	movs	r2, #0
 80075cc:	469a      	mov	sl, r3
 80075ce:	4693      	mov	fp, r2
 80075d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80075d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	f04f 0a00 	mov.w	sl, #0
 80075e0:	f04f 0b00 	mov.w	fp, #0
 80075e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80075e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80075ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80075f0:	4652      	mov	r2, sl
 80075f2:	465b      	mov	r3, fp
 80075f4:	1a14      	subs	r4, r2, r0
 80075f6:	eb63 0501 	sbc.w	r5, r3, r1
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	00ab      	lsls	r3, r5, #2
 8007604:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007608:	00a2      	lsls	r2, r4, #2
 800760a:	4614      	mov	r4, r2
 800760c:	461d      	mov	r5, r3
 800760e:	eb14 0800 	adds.w	r8, r4, r0
 8007612:	eb45 0901 	adc.w	r9, r5, r1
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800762a:	4690      	mov	r8, r2
 800762c:	4699      	mov	r9, r3
 800762e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007632:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007644 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007652:	2205      	movs	r2, #5
 8007654:	492b      	ldr	r1, [pc, #172]	; (8007704 <SYSVIEW_AddTask+0xc0>)
 8007656:	68b8      	ldr	r0, [r7, #8]
 8007658:	f001 ff8c 	bl	8009574 <memcmp>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d04b      	beq.n	80076fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b07      	cmp	r3, #7
 8007668:	d903      	bls.n	8007672 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800766a:	4828      	ldr	r0, [pc, #160]	; (800770c <SYSVIEW_AddTask+0xc8>)
 800766c:	f001 ff06 	bl	800947c <SEGGER_SYSVIEW_Warn>
    return;
 8007670:	e044      	b.n	80076fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007672:	4b25      	ldr	r3, [pc, #148]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4926      	ldr	r1, [pc, #152]	; (8007710 <SYSVIEW_AddTask+0xcc>)
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	440b      	add	r3, r1
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007686:	4b20      	ldr	r3, [pc, #128]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4921      	ldr	r1, [pc, #132]	; (8007710 <SYSVIEW_AddTask+0xcc>)
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	3304      	adds	r3, #4
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800769c:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	491b      	ldr	r1, [pc, #108]	; (8007710 <SYSVIEW_AddTask+0xcc>)
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	440b      	add	r3, r1
 80076ac:	3308      	adds	r3, #8
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80076b2:	4b15      	ldr	r3, [pc, #84]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4916      	ldr	r1, [pc, #88]	; (8007710 <SYSVIEW_AddTask+0xcc>)
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	330c      	adds	r3, #12
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4910      	ldr	r1, [pc, #64]	; (8007710 <SYSVIEW_AddTask+0xcc>)
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	3310      	adds	r3, #16
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <SYSVIEW_AddTask+0xc4>)
 80076e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f80e 	bl	8007714 <SYSVIEW_SendTaskInfo>
 80076f8:	e000      	b.n	80076fc <SYSVIEW_AddTask+0xb8>
    return;
 80076fa:	bf00      	nop

}
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	08009fe0 	.word	0x08009fe0
 8007708:	200130e4 	.word	0x200130e4
 800770c:	08009fe8 	.word	0x08009fe8
 8007710:	20013044 	.word	0x20013044

08007714 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	; 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007722:	f107 0314 	add.w	r3, r7, #20
 8007726:	2214      	movs	r2, #20
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f001 ff32 	bl	8009594 <memset>
  TaskInfo.TaskID     = TaskID;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fb07 	bl	8008d5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800774e:	bf00      	nop
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800775e:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <USART2_IRQHandler+0x80>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b00      	cmp	r3, #0
 800776c:	d011      	beq.n	8007792 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800776e:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <USART2_IRQHandler+0x84>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 030b 	and.w	r3, r3, #11
 800777c:	2b00      	cmp	r3, #0
 800777e:	d108      	bne.n	8007792 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <USART2_IRQHandler+0x88>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <USART2_IRQHandler+0x88>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	4610      	mov	r0, r2
 8007790:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01a      	beq.n	80077d2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800779c:	4b11      	ldr	r3, [pc, #68]	; (80077e4 <USART2_IRQHandler+0x8c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d015      	beq.n	80077d0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <USART2_IRQHandler+0x8c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	1dfa      	adds	r2, r7, #7
 80077aa:	4610      	mov	r0, r2
 80077ac:	4798      	blx	r3
 80077ae:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <USART2_IRQHandler+0x90>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a0b      	ldr	r2, [pc, #44]	; (80077e8 <USART2_IRQHandler+0x90>)
 80077bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e006      	b.n	80077d2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80077c4:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <USART2_IRQHandler+0x80>)
 80077c6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80077c8:	79fa      	ldrb	r2, [r7, #7]
 80077ca:	4b04      	ldr	r3, [pc, #16]	; (80077dc <USART2_IRQHandler+0x84>)
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	e000      	b.n	80077d2 <USART2_IRQHandler+0x7a>
      return;
 80077d0:	bf00      	nop
    }
  }
}
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40011000 	.word	0x40011000
 80077dc:	40011004 	.word	0x40011004
 80077e0:	200130e8 	.word	0x200130e8
 80077e4:	200130ec 	.word	0x200130ec
 80077e8:	4001100c 	.word	0x4001100c

080077ec <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a04      	ldr	r2, [pc, #16]	; (8007808 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80077f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	4001100c 	.word	0x4001100c

0800780c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <_DoInit+0x98>)
 8007814:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2203      	movs	r2, #3
 800781a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2203      	movs	r2, #3
 8007820:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <_DoInit+0x9c>)
 8007826:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a20      	ldr	r2, [pc, #128]	; (80078ac <_DoInit+0xa0>)
 800782c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007834:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <_DoInit+0x9c>)
 800784c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <_DoInit+0xa4>)
 8007852:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2210      	movs	r2, #16
 8007858:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	3307      	adds	r3, #7
 8007870:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <_DoInit+0xa8>)
 8007872:	6810      	ldr	r0, [r2, #0]
 8007874:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007876:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a0e      	ldr	r2, [pc, #56]	; (80078b8 <_DoInit+0xac>)
 800787e:	6810      	ldr	r0, [r2, #0]
 8007880:	6018      	str	r0, [r3, #0]
 8007882:	8891      	ldrh	r1, [r2, #4]
 8007884:	7992      	ldrb	r2, [r2, #6]
 8007886:	8099      	strh	r1, [r3, #4]
 8007888:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800788a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8007894:	f3bf 8f5f 	dmb	sy
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	200130f0 	.word	0x200130f0
 80078a8:	0800a038 	.word	0x0800a038
 80078ac:	20013198 	.word	0x20013198
 80078b0:	20013598 	.word	0x20013598
 80078b4:	0800a044 	.word	0x0800a044
 80078b8:	0800a048 	.word	0x0800a048

080078bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80078c8:	4b3e      	ldr	r3, [pc, #248]	; (80079c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <SEGGER_RTT_ReadNoLock+0x1e>
 80078d6:	f7ff ff99 	bl	800780c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4613      	mov	r3, r2
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	4413      	add	r3, r2
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	3360      	adds	r3, #96	; 0x60
 80078e6:	4a37      	ldr	r2, [pc, #220]	; (80079c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80078e8:	4413      	add	r3, r2
 80078ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80078fc:	2300      	movs	r3, #0
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	429a      	cmp	r2, r3
 8007906:	d92b      	bls.n	8007960 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4293      	cmp	r3, r2
 8007918:	bf28      	it	cs
 800791a:	4613      	movcs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	4413      	add	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	6939      	ldr	r1, [r7, #16]
 800792c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792e:	f001 fe65 	bl	80095fc <memcpy>
    NumBytesRead += NumBytesRem;
 8007932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4413      	add	r3, r2
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800793a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4413      	add	r3, r2
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800794a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	4413      	add	r3, r2
 8007950:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007958:	429a      	cmp	r2, r3
 800795a:	d101      	bne.n	8007960 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800795c:	2300      	movs	r3, #0
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4293      	cmp	r3, r2
 800796e:	bf28      	it	cs
 8007970:	4613      	movcs	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d019      	beq.n	80079ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	4413      	add	r3, r2
 8007982:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	6939      	ldr	r1, [r7, #16]
 8007988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800798a:	f001 fe37 	bl	80095fc <memcpy>
    NumBytesRead += NumBytesRem;
 800798e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80079a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	4413      	add	r3, r2
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3730      	adds	r7, #48	; 0x30
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200130f0 	.word	0x200130f0

080079c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80079d6:	4b3d      	ldr	r3, [pc, #244]	; (8007acc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80079e4:	f7ff ff12 	bl	800780c <_DoInit>
  SEGGER_RTT_LOCK();
 80079e8:	f3ef 8311 	mrs	r3, BASEPRI
 80079ec:	f04f 0120 	mov.w	r1, #32
 80079f0:	f381 8811 	msr	BASEPRI, r1
 80079f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80079f6:	4b35      	ldr	r3, [pc, #212]	; (8007acc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80079f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80079fe:	6939      	ldr	r1, [r7, #16]
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	4613      	mov	r3, r2
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	4413      	add	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	440b      	add	r3, r1
 8007a0e:	3304      	adds	r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	69fa      	ldr	r2, [r7, #28]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	dbeb      	blt.n	80079fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8007a26:	e000      	b.n	8007a2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007a28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	da3f      	bge.n	8007ab4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007a34:	6939      	ldr	r1, [r7, #16]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	4413      	add	r3, r2
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	440b      	add	r3, r1
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007a48:	6939      	ldr	r1, [r7, #16]
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	4613      	mov	r3, r2
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4413      	add	r3, r2
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	440b      	add	r3, r1
 8007a58:	3304      	adds	r3, #4
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007a5e:	6939      	ldr	r1, [r7, #16]
 8007a60:	69fa      	ldr	r2, [r7, #28]
 8007a62:	4613      	mov	r3, r2
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4413      	add	r3, r2
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3320      	adds	r3, #32
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007a72:	6939      	ldr	r1, [r7, #16]
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	4613      	mov	r3, r2
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	00db      	lsls	r3, r3, #3
 8007a7e:	440b      	add	r3, r1
 8007a80:	3328      	adds	r3, #40	; 0x28
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007a86:	6939      	ldr	r1, [r7, #16]
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	4413      	add	r3, r2
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	440b      	add	r3, r1
 8007a94:	3324      	adds	r3, #36	; 0x24
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8007a9a:	6939      	ldr	r1, [r7, #16]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	4413      	add	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	440b      	add	r3, r1
 8007aa8:	332c      	adds	r3, #44	; 0x2c
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007aae:	f3bf 8f5f 	dmb	sy
 8007ab2:	e002      	b.n	8007aba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	200130f0 	.word	0x200130f0

08007ad0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007aec:	f7ff fe8e 	bl	800780c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007af0:	4b2e      	ldr	r3, [pc, #184]	; (8007bac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007af2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d24d      	bcs.n	8007b9c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8007b00:	f3ef 8311 	mrs	r3, BASEPRI
 8007b04:	f04f 0120 	mov.w	r1, #32
 8007b08:	f381 8811 	msr	BASEPRI, r1
 8007b0c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d031      	beq.n	8007b78 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007b14:	6979      	ldr	r1, [r7, #20]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	440b      	add	r3, r1
 8007b22:	3360      	adds	r3, #96	; 0x60
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	4413      	add	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	440b      	add	r3, r1
 8007b36:	3364      	adds	r3, #100	; 0x64
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007b3c:	6979      	ldr	r1, [r7, #20]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4613      	mov	r3, r2
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4413      	add	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	440b      	add	r3, r1
 8007b4a:	3368      	adds	r3, #104	; 0x68
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	3370      	adds	r3, #112	; 0x70
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	440b      	add	r3, r1
 8007b72:	336c      	adds	r3, #108	; 0x6c
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007b78:	6979      	ldr	r1, [r7, #20]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4413      	add	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	440b      	add	r3, r1
 8007b86:	3374      	adds	r3, #116	; 0x74
 8007b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007b8c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	e002      	b.n	8007ba2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3720      	adds	r7, #32
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200130f0 	.word	0x200130f0

08007bb0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007bc0:	e002      	b.n	8007bc8 <_EncodeStr+0x18>
    Len++;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f6      	bne.n	8007bc2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d901      	bls.n	8007be0 <_EncodeStr+0x30>
    Len = Limit;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2bfe      	cmp	r3, #254	; 0xfe
 8007be4:	d806      	bhi.n	8007bf4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	60fa      	str	r2, [r7, #12]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e011      	b.n	8007c18 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	60fa      	str	r2, [r7, #12]
 8007bfa:	22ff      	movs	r2, #255	; 0xff
 8007bfc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	60fa      	str	r2, [r7, #12]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	0a19      	lsrs	r1, r3, #8
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	60fa      	str	r2, [r7, #12]
 8007c14:	b2ca      	uxtb	r2, r1
 8007c16:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007c1c:	e00a      	b.n	8007c34 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	1c53      	adds	r3, r2, #1
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1c59      	adds	r1, r3, #1
 8007c28:	60f9      	str	r1, [r7, #12]
 8007c2a:	7812      	ldrb	r2, [r2, #0]
 8007c2c:	701a      	strb	r2, [r3, #0]
    n++;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	3301      	adds	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3f0      	bcc.n	8007c1e <_EncodeStr+0x6e>
  }
  return pPayload;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c6a:	4b35      	ldr	r3, [pc, #212]	; (8007d40 <_HandleIncomingPacket+0xdc>)
 8007c6c:	7e1b      	ldrb	r3, [r3, #24]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	1cfb      	adds	r3, r7, #3
 8007c72:	2201      	movs	r2, #1
 8007c74:	4619      	mov	r1, r3
 8007c76:	f7ff fe21 	bl	80078bc <SEGGER_RTT_ReadNoLock>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dd59      	ble.n	8007d38 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b80      	cmp	r3, #128	; 0x80
 8007c88:	d032      	beq.n	8007cf0 <_HandleIncomingPacket+0x8c>
 8007c8a:	2b80      	cmp	r3, #128	; 0x80
 8007c8c:	dc42      	bgt.n	8007d14 <_HandleIncomingPacket+0xb0>
 8007c8e:	2b07      	cmp	r3, #7
 8007c90:	dc16      	bgt.n	8007cc0 <_HandleIncomingPacket+0x5c>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd3e      	ble.n	8007d14 <_HandleIncomingPacket+0xb0>
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2b06      	cmp	r3, #6
 8007c9a:	d83b      	bhi.n	8007d14 <_HandleIncomingPacket+0xb0>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <_HandleIncomingPacket+0x40>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cc7 	.word	0x08007cc7
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd3 	.word	0x08007cd3
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007cdf 	.word	0x08007cdf
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	08007ceb 	.word	0x08007ceb
 8007cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8007cc2:	d034      	beq.n	8007d2e <_HandleIncomingPacket+0xca>
 8007cc4:	e026      	b.n	8007d14 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007cc6:	f000 fecd 	bl	8008a64 <SEGGER_SYSVIEW_Start>
      break;
 8007cca:	e035      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007ccc:	f000 ff86 	bl	8008bdc <SEGGER_SYSVIEW_Stop>
      break;
 8007cd0:	e032      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007cd2:	f001 f95f 	bl	8008f94 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007cd6:	e02f      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007cd8:	f001 f924 	bl	8008f24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007cdc:	e02c      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007cde:	f000 ffa3 	bl	8008c28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007ce2:	e029      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007ce4:	f001 fb78 	bl	80093d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007ce8:	e026      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007cea:	f001 fb57 	bl	800939c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007cee:	e023      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007cf0:	4b13      	ldr	r3, [pc, #76]	; (8007d40 <_HandleIncomingPacket+0xdc>)
 8007cf2:	7e1b      	ldrb	r3, [r3, #24]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	1cfb      	adds	r3, r7, #3
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	f7ff fdde 	bl	80078bc <SEGGER_RTT_ReadNoLock>
 8007d00:	4603      	mov	r3, r0
 8007d02:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd13      	ble.n	8007d32 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f001 fac5 	bl	800929c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007d12:	e00e      	b.n	8007d32 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da0c      	bge.n	8007d36 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007d1c:	4b08      	ldr	r3, [pc, #32]	; (8007d40 <_HandleIncomingPacket+0xdc>)
 8007d1e:	7e1b      	ldrb	r3, [r3, #24]
 8007d20:	4618      	mov	r0, r3
 8007d22:	1cfb      	adds	r3, r7, #3
 8007d24:	2201      	movs	r2, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	f7ff fdc8 	bl	80078bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007d2c:	e003      	b.n	8007d36 <_HandleIncomingPacket+0xd2>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e002      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
      break;
 8007d32:	bf00      	nop
 8007d34:	e000      	b.n	8007d38 <_HandleIncomingPacket+0xd4>
      break;
 8007d36:	bf00      	nop
    }
  }
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200145b0 	.word	0x200145b0

08007d44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08c      	sub	sp, #48	; 0x30
 8007d48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007d4e:	1d3b      	adds	r3, r7, #4
 8007d50:	3301      	adds	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d58:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5e:	e00b      	b.n	8007d78 <_TrySendOverflowPacket+0x34>
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	1c59      	adds	r1, r3, #1
 8007d68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	09db      	lsrs	r3, r3, #7
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d7c:	d8f0      	bhi.n	8007d60 <_TrySendOverflowPacket+0x1c>
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007d8e:	4b26      	ldr	r3, [pc, #152]	; (8007e28 <_TrySendOverflowPacket+0xe4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007d94:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	e00b      	b.n	8007dc0 <_TrySendOverflowPacket+0x7c>
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	6279      	str	r1, [r7, #36]	; 0x24
 8007db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db6:	b2d2      	uxtb	r2, r2
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	09db      	lsrs	r3, r3, #7
 8007dbe:	623b      	str	r3, [r7, #32]
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d8f0      	bhi.n	8007da8 <_TrySendOverflowPacket+0x64>
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	627a      	str	r2, [r7, #36]	; 0x24
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	1d3b      	adds	r3, r7, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	f7f8 f9fa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007dec:	4603      	mov	r3, r0
 8007dee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8007df0:	f7ff fcfc 	bl	80077ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	e004      	b.n	8007e18 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	3301      	adds	r3, #1
 8007e14:	4a03      	ldr	r2, [pc, #12]	; (8007e24 <_TrySendOverflowPacket+0xe0>)
 8007e16:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007e18:	693b      	ldr	r3, [r7, #16]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3730      	adds	r7, #48	; 0x30
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	200145b0 	.word	0x200145b0
 8007e28:	e0001004 	.word	0xe0001004

08007e2c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007e38:	4b6d      	ldr	r3, [pc, #436]	; (8007ff0 <_SendPacket+0x1c4>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d010      	beq.n	8007e62 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007e40:	4b6b      	ldr	r3, [pc, #428]	; (8007ff0 <_SendPacket+0x1c4>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80a5 	beq.w	8007f94 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007e4a:	4b69      	ldr	r3, [pc, #420]	; (8007ff0 <_SendPacket+0x1c4>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d109      	bne.n	8007e66 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007e52:	f7ff ff77 	bl	8007d44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007e56:	4b66      	ldr	r3, [pc, #408]	; (8007ff0 <_SendPacket+0x1c4>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	f040 809c 	bne.w	8007f98 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007e60:	e001      	b.n	8007e66 <_SendPacket+0x3a>
    goto Send;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <_SendPacket+0x3c>
Send:
 8007e66:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b1f      	cmp	r3, #31
 8007e6c:	d809      	bhi.n	8007e82 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007e6e:	4b60      	ldr	r3, [pc, #384]	; (8007ff0 <_SendPacket+0x1c4>)
 8007e70:	69da      	ldr	r2, [r3, #28]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 808d 	bne.w	8007f9c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b17      	cmp	r3, #23
 8007e86:	d807      	bhi.n	8007e98 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	e03d      	b.n	8007f14 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ea4:	d912      	bls.n	8007ecc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	09da      	lsrs	r2, r3, #7
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	3a01      	subs	r2, #1
 8007ebe:	60fa      	str	r2, [r7, #12]
 8007ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	e006      	b.n	8007eda <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ede:	d912      	bls.n	8007f06 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	09da      	lsrs	r2, r3, #7
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	60fa      	str	r2, [r7, #12]
 8007efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e006      	b.n	8007f14 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007f14:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <_SendPacket+0x1c8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007f1a:	4b35      	ldr	r3, [pc, #212]	; (8007ff0 <_SendPacket+0x1c4>)
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	623b      	str	r3, [r7, #32]
 8007f2c:	e00b      	b.n	8007f46 <_SendPacket+0x11a>
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	1c59      	adds	r1, r3, #1
 8007f36:	6279      	str	r1, [r7, #36]	; 0x24
 8007f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	09db      	lsrs	r3, r3, #7
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	2b7f      	cmp	r3, #127	; 0x7f
 8007f4a:	d8f0      	bhi.n	8007f2e <_SendPacket+0x102>
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	627a      	str	r2, [r7, #36]	; 0x24
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	b2d2      	uxtb	r2, r2
 8007f56:	701a      	strb	r2, [r3, #0]
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007f5c:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <_SendPacket+0x1c4>)
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	4618      	mov	r0, r3
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	f7f8 f938 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007f70:	4603      	mov	r3, r0
 8007f72:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007f74:	f7ff fc3a 	bl	80077ec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f7e:	4a1c      	ldr	r2, [pc, #112]	; (8007ff0 <_SendPacket+0x1c4>)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	60d3      	str	r3, [r2, #12]
 8007f84:	e00b      	b.n	8007f9e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007f86:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <_SendPacket+0x1c4>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <_SendPacket+0x1c4>)
 8007f90:	701a      	strb	r2, [r3, #0]
 8007f92:	e004      	b.n	8007f9e <_SendPacket+0x172>
    goto SendDone;
 8007f94:	bf00      	nop
 8007f96:	e002      	b.n	8007f9e <_SendPacket+0x172>
      goto SendDone;
 8007f98:	bf00      	nop
 8007f9a:	e000      	b.n	8007f9e <_SendPacket+0x172>
      goto SendDone;
 8007f9c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007f9e:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <_SendPacket+0x1c4>)
 8007fa0:	7e1b      	ldrb	r3, [r3, #24]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4a14      	ldr	r2, [pc, #80]	; (8007ff8 <_SendPacket+0x1cc>)
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	440b      	add	r3, r1
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	4413      	add	r3, r2
 8007fb0:	336c      	adds	r3, #108	; 0x6c
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <_SendPacket+0x1c4>)
 8007fb6:	7e1b      	ldrb	r3, [r3, #24]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	490f      	ldr	r1, [pc, #60]	; (8007ff8 <_SendPacket+0x1cc>)
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	4403      	add	r3, r0
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3370      	adds	r3, #112	; 0x70
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d00b      	beq.n	8007fe6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007fce:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <_SendPacket+0x1c4>)
 8007fd0:	789b      	ldrb	r3, [r3, #2]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d107      	bne.n	8007fe6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <_SendPacket+0x1c4>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007fdc:	f7ff fe42 	bl	8007c64 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <_SendPacket+0x1c4>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007fe6:	bf00      	nop
 8007fe8:	3728      	adds	r7, #40	; 0x28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	200145b0 	.word	0x200145b0
 8007ff4:	e0001004 	.word	0xe0001004
 8007ff8:	200130f0 	.word	0x200130f0

08007ffc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	; 0x28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	3301      	adds	r3, #1
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d80a      	bhi.n	800802c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	1c59      	adds	r1, r3, #1
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6051      	str	r1, [r2, #4]
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b80      	cmp	r3, #128	; 0x80
 8008032:	d15a      	bne.n	80080ea <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	e00b      	b.n	800806e <_StoreChar+0x72>
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	1c59      	adds	r1, r3, #1
 800805e:	6279      	str	r1, [r7, #36]	; 0x24
 8008060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	09db      	lsrs	r3, r3, #7
 800806c:	623b      	str	r3, [r7, #32]
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b7f      	cmp	r3, #127	; 0x7f
 8008072:	d8f0      	bhi.n	8008056 <_StoreChar+0x5a>
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	627a      	str	r2, [r7, #36]	; 0x24
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	2300      	movs	r3, #0
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	e00b      	b.n	80080a6 <_StoreChar+0xaa>
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	1c59      	adds	r1, r3, #1
 8008096:	61f9      	str	r1, [r7, #28]
 8008098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	09db      	lsrs	r3, r3, #7
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b7f      	cmp	r3, #127	; 0x7f
 80080aa:	d8f0      	bhi.n	800808e <_StoreChar+0x92>
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	61fa      	str	r2, [r7, #28]
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	221a      	movs	r2, #26
 80080c2:	6939      	ldr	r1, [r7, #16]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff feb1 	bl	8007e2c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff fdbb 	bl	8007c4a <_PreparePacket>
 80080d4:	4602      	mov	r2, r0
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	611a      	str	r2, [r3, #16]
  }
}
 80080ea:	bf00      	nop
 80080ec:	3728      	adds	r7, #40	; 0x28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8008106:	2301      	movs	r3, #1
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800810a:	2301      	movs	r3, #1
 800810c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800810e:	e007      	b.n	8008120 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8008110:	6a3a      	ldr	r2, [r7, #32]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	fbb2 f3f3 	udiv	r3, r2, r3
 8008118:	623b      	str	r3, [r7, #32]
    Width++;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	3301      	adds	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8008120:	6a3a      	ldr	r2, [r7, #32]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	429a      	cmp	r2, r3
 8008126:	d2f3      	bcs.n	8008110 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	429a      	cmp	r2, r3
 800812e:	d901      	bls.n	8008134 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d11f      	bne.n	800817e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01c      	beq.n	800817e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <_PrintUnsigned+0x66>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <_PrintUnsigned+0x66>
        c = '0';
 8008154:	2330      	movs	r3, #48	; 0x30
 8008156:	76fb      	strb	r3, [r7, #27]
 8008158:	e001      	b.n	800815e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800815a:	2320      	movs	r3, #32
 800815c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800815e:	e007      	b.n	8008170 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	3b01      	subs	r3, #1
 8008164:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8008166:	7efb      	ldrb	r3, [r7, #27]
 8008168:	4619      	mov	r1, r3
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff ff46 	bl	8007ffc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <_PrintUnsigned+0x8a>
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	429a      	cmp	r2, r3
 800817c:	d3f0      	bcc.n	8008160 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d903      	bls.n	800818c <_PrintUnsigned+0x98>
      NumDigits--;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	3b01      	subs	r3, #1
 8008188:	603b      	str	r3, [r7, #0]
 800818a:	e009      	b.n	80081a0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	fbb2 f3f3 	udiv	r3, r2, r3
 8008194:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d200      	bcs.n	80081a0 <_PrintUnsigned+0xac>
        break;
 800819e:	e005      	b.n	80081ac <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	fb02 f303 	mul.w	r3, r2, r3
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80081aa:	e7e8      	b.n	800817e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ba:	fb02 f303 	mul.w	r3, r2, r3
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80081c4:	4a15      	ldr	r2, [pc, #84]	; (800821c <_PrintUnsigned+0x128>)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff ff14 	bl	8007ffc <_StoreChar>
    Digit /= Base;
 80081d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e3      	bne.n	80081ac <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80081e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80081f4:	e006      	b.n	8008204 <_PrintUnsigned+0x110>
        FieldWidth--;
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	3b01      	subs	r3, #1
 80081fa:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80081fc:	2120      	movs	r1, #32
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff fefc 	bl	8007ffc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <_PrintUnsigned+0x11e>
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	429a      	cmp	r2, r3
 8008210:	d3f1      	bcc.n	80081f6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8008212:	bf00      	nop
 8008214:	3728      	adds	r7, #40	; 0x28
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	0800a084 	.word	0x0800a084

08008220 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af02      	add	r7, sp, #8
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	bfb8      	it	lt
 8008234:	425b      	neglt	r3, r3
 8008236:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8008238:	2301      	movs	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800823c:	e007      	b.n	800824e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	fb92 f3f3 	sdiv	r3, r2, r3
 8008246:	613b      	str	r3, [r7, #16]
    Width++;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3301      	adds	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	429a      	cmp	r2, r3
 8008254:	daf3      	bge.n	800823e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	429a      	cmp	r2, r3
 800825c:	d901      	bls.n	8008262 <_PrintInt+0x42>
    Width = NumDigits;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <_PrintInt+0x5e>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	db04      	blt.n	8008278 <_PrintInt+0x58>
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	f003 0304 	and.w	r3, r3, #4
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <_PrintInt+0x5e>
    FieldWidth--;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	3b01      	subs	r3, #1
 800827c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <_PrintInt+0x6e>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d016      	beq.n	80082bc <_PrintInt+0x9c>
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d111      	bne.n	80082bc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8008298:	6a3b      	ldr	r3, [r7, #32]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00e      	beq.n	80082bc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800829e:	e006      	b.n	80082ae <_PrintInt+0x8e>
        FieldWidth--;
 80082a0:	6a3b      	ldr	r3, [r7, #32]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80082a6:	2120      	movs	r1, #32
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fea7 	bl	8007ffc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <_PrintInt+0x9c>
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d3f1      	bcc.n	80082a0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	da07      	bge.n	80082d2 <_PrintInt+0xb2>
    v = -v;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	425b      	negs	r3, r3
 80082c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80082c8:	212d      	movs	r1, #45	; 0x2d
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff fe96 	bl	8007ffc <_StoreChar>
 80082d0:	e008      	b.n	80082e4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80082dc:	212b      	movs	r1, #43	; 0x2b
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff fe8c 	bl	8007ffc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d019      	beq.n	8008322 <_PrintInt+0x102>
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d114      	bne.n	8008322 <_PrintInt+0x102>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d111      	bne.n	8008322 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00e      	beq.n	8008322 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008304:	e006      	b.n	8008314 <_PrintInt+0xf4>
        FieldWidth--;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	3b01      	subs	r3, #1
 800830a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800830c:	2130      	movs	r1, #48	; 0x30
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff fe74 	bl	8007ffc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <_PrintInt+0x102>
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	429a      	cmp	r2, r3
 8008320:	d3f1      	bcc.n	8008306 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff fedf 	bl	80080f4 <_PrintUnsigned>
}
 8008336:	bf00      	nop
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b098      	sub	sp, #96	; 0x60
 8008344:	af02      	add	r7, sp, #8
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800834c:	f3ef 8311 	mrs	r3, BASEPRI
 8008350:	f04f 0120 	mov.w	r1, #32
 8008354:	f381 8811 	msr	BASEPRI, r1
 8008358:	633b      	str	r3, [r7, #48]	; 0x30
 800835a:	48b7      	ldr	r0, [pc, #732]	; (8008638 <_VPrintTarget+0x2f8>)
 800835c:	f7ff fc75 	bl	8007c4a <_PreparePacket>
 8008360:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8008362:	4bb5      	ldr	r3, [pc, #724]	; (8008638 <_VPrintTarget+0x2f8>)
 8008364:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	3301      	adds	r3, #1
 8008372:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8008386:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8183 	beq.w	8008696 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8008390:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008394:	2b25      	cmp	r3, #37	; 0x25
 8008396:	f040 8170 	bne.w	800867a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800839a:	2300      	movs	r3, #0
 800839c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80083aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083ae:	3b23      	subs	r3, #35	; 0x23
 80083b0:	2b0d      	cmp	r3, #13
 80083b2:	d83f      	bhi.n	8008434 <_VPrintTarget+0xf4>
 80083b4:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <_VPrintTarget+0x7c>)
 80083b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ba:	bf00      	nop
 80083bc:	08008425 	.word	0x08008425
 80083c0:	08008435 	.word	0x08008435
 80083c4:	08008435 	.word	0x08008435
 80083c8:	08008435 	.word	0x08008435
 80083cc:	08008435 	.word	0x08008435
 80083d0:	08008435 	.word	0x08008435
 80083d4:	08008435 	.word	0x08008435
 80083d8:	08008435 	.word	0x08008435
 80083dc:	08008415 	.word	0x08008415
 80083e0:	08008435 	.word	0x08008435
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	08008435 	.word	0x08008435
 80083ec:	08008435 	.word	0x08008435
 80083f0:	08008405 	.word	0x08008405
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80083f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f6:	f043 0301 	orr.w	r3, r3, #1
 80083fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	e01a      	b.n	800843a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8008404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008406:	f043 0302 	orr.w	r3, r3, #2
 800840a:	64bb      	str	r3, [r7, #72]	; 0x48
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	3301      	adds	r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
 8008412:	e012      	b.n	800843a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8008414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	64bb      	str	r3, [r7, #72]	; 0x48
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e00a      	b.n	800843a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8008424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008426:	f043 0308 	orr.w	r3, r3, #8
 800842a:	64bb      	str	r3, [r7, #72]	; 0x48
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e002      	b.n	800843a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8008434:	2300      	movs	r3, #0
 8008436:	653b      	str	r3, [r7, #80]	; 0x50
 8008438:	bf00      	nop
        }
      } while (v);
 800843a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1b0      	bne.n	80083a2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8008440:	2300      	movs	r3, #0
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800844c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008450:	2b2f      	cmp	r3, #47	; 0x2f
 8008452:	d912      	bls.n	800847a <_VPrintTarget+0x13a>
 8008454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008458:	2b39      	cmp	r3, #57	; 0x39
 800845a:	d80e      	bhi.n	800847a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8008462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	461a      	mov	r2, r3
 800846e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008472:	4413      	add	r3, r2
 8008474:	3b30      	subs	r3, #48	; 0x30
 8008476:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8008478:	e7e4      	b.n	8008444 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800847a:	2300      	movs	r3, #0
 800847c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8008486:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800848a:	2b2e      	cmp	r3, #46	; 0x2e
 800848c:	d11d      	bne.n	80084ca <_VPrintTarget+0x18a>
        sFormat++;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3301      	adds	r3, #1
 8008492:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800849c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a0:	2b2f      	cmp	r3, #47	; 0x2f
 80084a2:	d912      	bls.n	80084ca <_VPrintTarget+0x18a>
 80084a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084a8:	2b39      	cmp	r3, #57	; 0x39
 80084aa:	d80e      	bhi.n	80084ca <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80084b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	461a      	mov	r2, r3
 80084be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084c2:	4413      	add	r3, r2
 80084c4:	3b30      	subs	r3, #48	; 0x30
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80084c8:	e7e4      	b.n	8008494 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80084d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084d6:	2b6c      	cmp	r3, #108	; 0x6c
 80084d8:	d003      	beq.n	80084e2 <_VPrintTarget+0x1a2>
 80084da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084de:	2b68      	cmp	r3, #104	; 0x68
 80084e0:	d107      	bne.n	80084f2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3301      	adds	r3, #1
 80084ee:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80084f0:	e7ef      	b.n	80084d2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80084f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084f6:	2b25      	cmp	r3, #37	; 0x25
 80084f8:	f000 80b3 	beq.w	8008662 <_VPrintTarget+0x322>
 80084fc:	2b25      	cmp	r3, #37	; 0x25
 80084fe:	f2c0 80b7 	blt.w	8008670 <_VPrintTarget+0x330>
 8008502:	2b78      	cmp	r3, #120	; 0x78
 8008504:	f300 80b4 	bgt.w	8008670 <_VPrintTarget+0x330>
 8008508:	2b58      	cmp	r3, #88	; 0x58
 800850a:	f2c0 80b1 	blt.w	8008670 <_VPrintTarget+0x330>
 800850e:	3b58      	subs	r3, #88	; 0x58
 8008510:	2b20      	cmp	r3, #32
 8008512:	f200 80ad 	bhi.w	8008670 <_VPrintTarget+0x330>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <_VPrintTarget+0x1dc>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	08008613 	.word	0x08008613
 8008520:	08008671 	.word	0x08008671
 8008524:	08008671 	.word	0x08008671
 8008528:	08008671 	.word	0x08008671
 800852c:	08008671 	.word	0x08008671
 8008530:	08008671 	.word	0x08008671
 8008534:	08008671 	.word	0x08008671
 8008538:	08008671 	.word	0x08008671
 800853c:	08008671 	.word	0x08008671
 8008540:	08008671 	.word	0x08008671
 8008544:	08008671 	.word	0x08008671
 8008548:	080085a1 	.word	0x080085a1
 800854c:	080085c7 	.word	0x080085c7
 8008550:	08008671 	.word	0x08008671
 8008554:	08008671 	.word	0x08008671
 8008558:	08008671 	.word	0x08008671
 800855c:	08008671 	.word	0x08008671
 8008560:	08008671 	.word	0x08008671
 8008564:	08008671 	.word	0x08008671
 8008568:	08008671 	.word	0x08008671
 800856c:	08008671 	.word	0x08008671
 8008570:	08008671 	.word	0x08008671
 8008574:	08008671 	.word	0x08008671
 8008578:	08008671 	.word	0x08008671
 800857c:	0800863d 	.word	0x0800863d
 8008580:	08008671 	.word	0x08008671
 8008584:	08008671 	.word	0x08008671
 8008588:	08008671 	.word	0x08008671
 800858c:	08008671 	.word	0x08008671
 8008590:	080085ed 	.word	0x080085ed
 8008594:	08008671 	.word	0x08008671
 8008598:	08008671 	.word	0x08008671
 800859c:	08008613 	.word	0x08008613
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	6011      	str	r1, [r2, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80085ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80085b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80085b8:	f107 0314 	add.w	r3, r7, #20
 80085bc:	4611      	mov	r1, r2
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff fd1c 	bl	8007ffc <_StoreChar>
        break;
 80085c4:	e055      	b.n	8008672 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	1d19      	adds	r1, r3, #4
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6011      	str	r1, [r2, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80085d4:	f107 0014 	add.w	r0, r7, #20
 80085d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085da:	9301      	str	r3, [sp, #4]
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e2:	220a      	movs	r2, #10
 80085e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085e6:	f7ff fe1b 	bl	8008220 <_PrintInt>
        break;
 80085ea:	e042      	b.n	8008672 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	1d19      	adds	r1, r3, #4
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80085fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085fc:	f107 0014 	add.w	r0, r7, #20
 8008600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860a:	220a      	movs	r2, #10
 800860c:	f7ff fd72 	bl	80080f4 <_PrintUnsigned>
        break;
 8008610:	e02f      	b.n	8008672 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	1d19      	adds	r1, r3, #4
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6011      	str	r1, [r2, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8008620:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008622:	f107 0014 	add.w	r0, r7, #20
 8008626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008630:	2210      	movs	r2, #16
 8008632:	f7ff fd5f 	bl	80080f4 <_PrintUnsigned>
        break;
 8008636:	e01c      	b.n	8008672 <_VPrintTarget+0x332>
 8008638:	200145e0 	.word	0x200145e0
      case 'p':
        v = va_arg(*pParamList, int);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1d19      	adds	r1, r3, #4
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800864a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800864c:	f107 0014 	add.w	r0, r7, #20
 8008650:	2300      	movs	r3, #0
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	2308      	movs	r3, #8
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2308      	movs	r3, #8
 800865a:	2210      	movs	r2, #16
 800865c:	f7ff fd4a 	bl	80080f4 <_PrintUnsigned>
        break;
 8008660:	e007      	b.n	8008672 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8008662:	f107 0314 	add.w	r3, r7, #20
 8008666:	2125      	movs	r1, #37	; 0x25
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fcc7 	bl	8007ffc <_StoreChar>
        break;
 800866e:	e000      	b.n	8008672 <_VPrintTarget+0x332>
      default:
        break;
 8008670:	bf00      	nop
      }
      sFormat++;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e007      	b.n	800868a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800867a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff fcb9 	bl	8007ffc <_StoreChar>
    }
  } while (*sFormat);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f47f ae72 	bne.w	8008378 <_VPrintTarget+0x38>
 8008694:	e000      	b.n	8008698 <_VPrintTarget+0x358>
      break;
 8008696:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	d041      	beq.n	8008722 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800869e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	643b      	str	r3, [r7, #64]	; 0x40
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ae:	e00b      	b.n	80086c8 <_VPrintTarget+0x388>
 80086b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b6:	1c59      	adds	r1, r3, #1
 80086b8:	6439      	str	r1, [r7, #64]	; 0x40
 80086ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c4:	09db      	lsrs	r3, r3, #7
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	2b7f      	cmp	r3, #127	; 0x7f
 80086cc:	d8f0      	bhi.n	80086b0 <_VPrintTarget+0x370>
 80086ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d0:	1c5a      	adds	r2, r3, #1
 80086d2:	643a      	str	r2, [r7, #64]	; 0x40
 80086d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086dc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
 80086e6:	e00b      	b.n	8008700 <_VPrintTarget+0x3c0>
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	1c59      	adds	r1, r3, #1
 80086f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80086f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	09db      	lsrs	r3, r3, #7
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	2b7f      	cmp	r3, #127	; 0x7f
 8008704:	d8f0      	bhi.n	80086e8 <_VPrintTarget+0x3a8>
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	63ba      	str	r2, [r7, #56]	; 0x38
 800870c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	221a      	movs	r2, #26
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff fb85 	bl	8007e2c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8008728:	bf00      	nop
 800872a:	3758      	adds	r7, #88	; 0x58
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800873e:	2300      	movs	r3, #0
 8008740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008744:	4917      	ldr	r1, [pc, #92]	; (80087a4 <SEGGER_SYSVIEW_Init+0x74>)
 8008746:	4818      	ldr	r0, [pc, #96]	; (80087a8 <SEGGER_SYSVIEW_Init+0x78>)
 8008748:	f7ff f93e 	bl	80079c8 <SEGGER_RTT_AllocUpBuffer>
 800874c:	4603      	mov	r3, r0
 800874e:	b2da      	uxtb	r2, r3
 8008750:	4b16      	ldr	r3, [pc, #88]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008752:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008756:	785a      	ldrb	r2, [r3, #1]
 8008758:	4b14      	ldr	r3, [pc, #80]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 800875a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800875c:	4b13      	ldr	r3, [pc, #76]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 800875e:	7e1b      	ldrb	r3, [r3, #24]
 8008760:	4618      	mov	r0, r3
 8008762:	2300      	movs	r3, #0
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2308      	movs	r3, #8
 8008768:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <SEGGER_SYSVIEW_Init+0x80>)
 800876a:	490f      	ldr	r1, [pc, #60]	; (80087a8 <SEGGER_SYSVIEW_Init+0x78>)
 800876c:	f7ff f9b0 	bl	8007ad0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008772:	2200      	movs	r2, #0
 8008774:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <SEGGER_SYSVIEW_Init+0x84>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 800877c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800877e:	4a0b      	ldr	r2, [pc, #44]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800878a:	4a08      	ldr	r2, [pc, #32]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008790:	4a06      	ldr	r2, [pc, #24]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <SEGGER_SYSVIEW_Init+0x7c>)
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	200135a8 	.word	0x200135a8
 80087a8:	0800a050 	.word	0x0800a050
 80087ac:	200145b0 	.word	0x200145b0
 80087b0:	200145a8 	.word	0x200145a8
 80087b4:	e0001004 	.word	0xe0001004

080087b8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80087c0:	4a04      	ldr	r2, [pc, #16]	; (80087d4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6113      	str	r3, [r2, #16]
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200145b0 	.word	0x200145b0

080087d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80087e0:	f3ef 8311 	mrs	r3, BASEPRI
 80087e4:	f04f 0120 	mov.w	r1, #32
 80087e8:	f381 8811 	msr	BASEPRI, r1
 80087ec:	60fb      	str	r3, [r7, #12]
 80087ee:	4808      	ldr	r0, [pc, #32]	; (8008810 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80087f0:	f7ff fa2b 	bl	8007c4a <_PreparePacket>
 80087f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	68b8      	ldr	r0, [r7, #8]
 80087fc:	f7ff fb16 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f383 8811 	msr	BASEPRI, r3
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	200145e0 	.word	0x200145e0

08008814 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800881e:	f3ef 8311 	mrs	r3, BASEPRI
 8008822:	f04f 0120 	mov.w	r1, #32
 8008826:	f381 8811 	msr	BASEPRI, r1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	4816      	ldr	r0, [pc, #88]	; (8008888 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800882e:	f7ff fa0c 	bl	8007c4a <_PreparePacket>
 8008832:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	e00b      	b.n	800885a <SEGGER_SYSVIEW_RecordU32+0x46>
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	1c59      	adds	r1, r3, #1
 800884a:	61f9      	str	r1, [r7, #28]
 800884c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	09db      	lsrs	r3, r3, #7
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b7f      	cmp	r3, #127	; 0x7f
 800885e:	d8f0      	bhi.n	8008842 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	61fa      	str	r2, [r7, #28]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	68f9      	ldr	r1, [r7, #12]
 8008874:	6938      	ldr	r0, [r7, #16]
 8008876:	f7ff fad9 	bl	8007e2c <_SendPacket>
  RECORD_END();
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f383 8811 	msr	BASEPRI, r3
}
 8008880:	bf00      	nop
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200145e0 	.word	0x200145e0

0800888c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800888c:	b580      	push	{r7, lr}
 800888e:	b08c      	sub	sp, #48	; 0x30
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008898:	f3ef 8311 	mrs	r3, BASEPRI
 800889c:	f04f 0120 	mov.w	r1, #32
 80088a0:	f381 8811 	msr	BASEPRI, r1
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	4825      	ldr	r0, [pc, #148]	; (800893c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80088a8:	f7ff f9cf 	bl	8007c4a <_PreparePacket>
 80088ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ba:	e00b      	b.n	80088d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	09db      	lsrs	r3, r3, #7
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	2b7f      	cmp	r3, #127	; 0x7f
 80088d8:	d8f0      	bhi.n	80088bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	627b      	str	r3, [r7, #36]	; 0x24
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	623b      	str	r3, [r7, #32]
 80088f2:	e00b      	b.n	800890c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	6279      	str	r1, [r7, #36]	; 0x24
 80088fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	09db      	lsrs	r3, r3, #7
 800890a:	623b      	str	r3, [r7, #32]
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	2b7f      	cmp	r3, #127	; 0x7f
 8008910:	d8f0      	bhi.n	80088f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	627a      	str	r2, [r7, #36]	; 0x24
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	6979      	ldr	r1, [r7, #20]
 8008926:	69b8      	ldr	r0, [r7, #24]
 8008928:	f7ff fa80 	bl	8007e2c <_SendPacket>
  RECORD_END();
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	f383 8811 	msr	BASEPRI, r3
}
 8008932:	bf00      	nop
 8008934:	3730      	adds	r7, #48	; 0x30
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200145e0 	.word	0x200145e0

08008940 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b090      	sub	sp, #64	; 0x40
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800894e:	f3ef 8311 	mrs	r3, BASEPRI
 8008952:	f04f 0120 	mov.w	r1, #32
 8008956:	f381 8811 	msr	BASEPRI, r1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	4840      	ldr	r0, [pc, #256]	; (8008a60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800895e:	f7ff f974 	bl	8007c4a <_PreparePacket>
 8008962:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008970:	e00b      	b.n	800898a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	b2da      	uxtb	r2, r3
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	1c59      	adds	r1, r3, #1
 800897a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800897c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	09db      	lsrs	r3, r3, #7
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	2b7f      	cmp	r3, #127	; 0x7f
 800898e:	d8f0      	bhi.n	8008972 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800899e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	633b      	str	r3, [r7, #48]	; 0x30
 80089a8:	e00b      	b.n	80089c2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	1c59      	adds	r1, r3, #1
 80089b2:	6379      	str	r1, [r7, #52]	; 0x34
 80089b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	701a      	strb	r2, [r3, #0]
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	09db      	lsrs	r3, r3, #7
 80089c0:	633b      	str	r3, [r7, #48]	; 0x30
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2b7f      	cmp	r3, #127	; 0x7f
 80089c6:	d8f0      	bhi.n	80089aa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80089c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	637a      	str	r2, [r7, #52]	; 0x34
 80089ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d0:	b2d2      	uxtb	r2, r2
 80089d2:	701a      	strb	r2, [r3, #0]
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
 80089e0:	e00b      	b.n	80089fa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80089e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	1c59      	adds	r1, r3, #1
 80089ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80089ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	701a      	strb	r2, [r3, #0]
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	09db      	lsrs	r3, r3, #7
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	2b7f      	cmp	r3, #127	; 0x7f
 80089fe:	d8f0      	bhi.n	80089e2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a08:	b2d2      	uxtb	r2, r2
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
 8008a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a16:	623b      	str	r3, [r7, #32]
 8008a18:	e00b      	b.n	8008a32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	1c59      	adds	r1, r3, #1
 8008a22:	6279      	str	r1, [r7, #36]	; 0x24
 8008a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a28:	b2d2      	uxtb	r2, r2
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	09db      	lsrs	r3, r3, #7
 8008a30:	623b      	str	r3, [r7, #32]
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	2b7f      	cmp	r3, #127	; 0x7f
 8008a36:	d8f0      	bhi.n	8008a1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	701a      	strb	r2, [r3, #0]
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	69b8      	ldr	r0, [r7, #24]
 8008a4e:	f7ff f9ed 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	f383 8811 	msr	BASEPRI, r3
}
 8008a58:	bf00      	nop
 8008a5a:	3740      	adds	r7, #64	; 0x40
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200145e0 	.word	0x200145e0

08008a64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008a6a:	4b59      	ldr	r3, [pc, #356]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008a70:	f3ef 8311 	mrs	r3, BASEPRI
 8008a74:	f04f 0120 	mov.w	r1, #32
 8008a78:	f381 8811 	msr	BASEPRI, r1
 8008a7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008a7e:	4b54      	ldr	r3, [pc, #336]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	220a      	movs	r2, #10
 8008a84:	4953      	ldr	r1, [pc, #332]	; (8008bd4 <SEGGER_SYSVIEW_Start+0x170>)
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7f7 fbaa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8008a92:	f7fe feab 	bl	80077ec <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8008a96:	200a      	movs	r0, #10
 8008a98:	f7ff fe9e 	bl	80087d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8008aa0:	f04f 0120 	mov.w	r1, #32
 8008aa4:	f381 8811 	msr	BASEPRI, r1
 8008aa8:	60bb      	str	r3, [r7, #8]
 8008aaa:	484b      	ldr	r0, [pc, #300]	; (8008bd8 <SEGGER_SYSVIEW_Start+0x174>)
 8008aac:	f7ff f8cd 	bl	8007c4a <_PreparePacket>
 8008ab0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aba:	4b45      	ldr	r3, [pc, #276]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ac0:	e00b      	b.n	8008ada <SEGGER_SYSVIEW_Start+0x76>
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	1c59      	adds	r1, r3, #1
 8008aca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ad0:	b2d2      	uxtb	r2, r2
 8008ad2:	701a      	strb	r2, [r3, #0]
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	09db      	lsrs	r3, r3, #7
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	2b7f      	cmp	r3, #127	; 0x7f
 8008ade:	d8f0      	bhi.n	8008ac2 <SEGGER_SYSVIEW_Start+0x5e>
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
 8008af4:	4b36      	ldr	r3, [pc, #216]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	e00b      	b.n	8008b14 <SEGGER_SYSVIEW_Start+0xb0>
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	1c59      	adds	r1, r3, #1
 8008b04:	6279      	str	r1, [r7, #36]	; 0x24
 8008b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b0a:	b2d2      	uxtb	r2, r2
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	09db      	lsrs	r3, r3, #7
 8008b12:	623b      	str	r3, [r7, #32]
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b7f      	cmp	r3, #127	; 0x7f
 8008b18:	d8f0      	bhi.n	8008afc <SEGGER_SYSVIEW_Start+0x98>
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b20:	6a3a      	ldr	r2, [r7, #32]
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	61fb      	str	r3, [r7, #28]
 8008b2e:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	61bb      	str	r3, [r7, #24]
 8008b34:	e00b      	b.n	8008b4e <SEGGER_SYSVIEW_Start+0xea>
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	1c59      	adds	r1, r3, #1
 8008b3e:	61f9      	str	r1, [r7, #28]
 8008b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b44:	b2d2      	uxtb	r2, r2
 8008b46:	701a      	strb	r2, [r3, #0]
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	09db      	lsrs	r3, r3, #7
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2b7f      	cmp	r3, #127	; 0x7f
 8008b52:	d8f0      	bhi.n	8008b36 <SEGGER_SYSVIEW_Start+0xd2>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	61fa      	str	r2, [r7, #28]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	b2d2      	uxtb	r2, r2
 8008b5e:	701a      	strb	r2, [r3, #0]
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	e00b      	b.n	8008b86 <SEGGER_SYSVIEW_Start+0x122>
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	1c59      	adds	r1, r3, #1
 8008b76:	6179      	str	r1, [r7, #20]
 8008b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b7c:	b2d2      	uxtb	r2, r2
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	09db      	lsrs	r3, r3, #7
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b7f      	cmp	r3, #127	; 0x7f
 8008b8a:	d8f0      	bhi.n	8008b6e <SEGGER_SYSVIEW_Start+0x10a>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	617a      	str	r2, [r7, #20]
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008b9c:	2218      	movs	r2, #24
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff f943 	bl	8007e2c <_SendPacket>
      RECORD_END();
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8008bba:	f000 f9eb 	bl	8008f94 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008bbe:	f000 f9b1 	bl	8008f24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008bc2:	f000 fc09 	bl	80093d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8008bc6:	bf00      	nop
 8008bc8:	3730      	adds	r7, #48	; 0x30
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200145b0 	.word	0x200145b0
 8008bd4:	0800a078 	.word	0x0800a078
 8008bd8:	200145e0 	.word	0x200145e0

08008bdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008be2:	f3ef 8311 	mrs	r3, BASEPRI
 8008be6:	f04f 0120 	mov.w	r1, #32
 8008bea:	f381 8811 	msr	BASEPRI, r1
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	480b      	ldr	r0, [pc, #44]	; (8008c20 <SEGGER_SYSVIEW_Stop+0x44>)
 8008bf2:	f7ff f82a 	bl	8007c4a <_PreparePacket>
 8008bf6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008c00:	220b      	movs	r2, #11
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6838      	ldr	r0, [r7, #0]
 8008c06:	f7ff f911 	bl	8007e2c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008c0a:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f383 8811 	msr	BASEPRI, r3
}
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	200145e0 	.word	0x200145e0
 8008c24:	200145b0 	.word	0x200145b0

08008c28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08c      	sub	sp, #48	; 0x30
 8008c2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c32:	f04f 0120 	mov.w	r1, #32
 8008c36:	f381 8811 	msr	BASEPRI, r1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	4845      	ldr	r0, [pc, #276]	; (8008d54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008c3e:	f7ff f804 	bl	8007c4a <_PreparePacket>
 8008c42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c4c:	4b42      	ldr	r3, [pc, #264]	; (8008d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c52:	e00b      	b.n	8008c6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	09db      	lsrs	r3, r3, #7
 8008c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c70:	d8f0      	bhi.n	8008c54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
 8008c86:	4b34      	ldr	r3, [pc, #208]	; (8008d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	623b      	str	r3, [r7, #32]
 8008c8c:	e00b      	b.n	8008ca6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	1c59      	adds	r1, r3, #1
 8008c96:	6279      	str	r1, [r7, #36]	; 0x24
 8008c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	09db      	lsrs	r3, r3, #7
 8008ca4:	623b      	str	r3, [r7, #32]
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8008caa:	d8f0      	bhi.n	8008c8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	61fb      	str	r3, [r7, #28]
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	61bb      	str	r3, [r7, #24]
 8008cc6:	e00b      	b.n	8008ce0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	1c59      	adds	r1, r3, #1
 8008cd0:	61f9      	str	r1, [r7, #28]
 8008cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	09db      	lsrs	r3, r3, #7
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ce4:	d8f0      	bhi.n	8008cc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	61fa      	str	r2, [r7, #28]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	617b      	str	r3, [r7, #20]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	e00b      	b.n	8008d18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	1c59      	adds	r1, r3, #1
 8008d08:	6179      	str	r1, [r7, #20]
 8008d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	09db      	lsrs	r3, r3, #7
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d1c:	d8f0      	bhi.n	8008d00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	617a      	str	r2, [r7, #20]
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	b2d2      	uxtb	r2, r2
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008d2e:	2218      	movs	r2, #24
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	68b8      	ldr	r0, [r7, #8]
 8008d34:	f7ff f87a 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	4798      	blx	r3
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	3730      	adds	r7, #48	; 0x30
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	200145e0 	.word	0x200145e0
 8008d58:	200145b0 	.word	0x200145b0

08008d5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b092      	sub	sp, #72	; 0x48
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008d64:	f3ef 8311 	mrs	r3, BASEPRI
 8008d68:	f04f 0120 	mov.w	r1, #32
 8008d6c:	f381 8811 	msr	BASEPRI, r1
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	486a      	ldr	r0, [pc, #424]	; (8008f1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008d74:	f7fe ff69 	bl	8007c4a <_PreparePacket>
 8008d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	647b      	str	r3, [r7, #68]	; 0x44
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b66      	ldr	r3, [pc, #408]	; (8008f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d8e:	e00b      	b.n	8008da8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d96:	1c59      	adds	r1, r3, #1
 8008d98:	6479      	str	r1, [r7, #68]	; 0x44
 8008d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da4:	09db      	lsrs	r3, r3, #7
 8008da6:	643b      	str	r3, [r7, #64]	; 0x40
 8008da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008daa:	2b7f      	cmp	r3, #127	; 0x7f
 8008dac:	d8f0      	bhi.n	8008d90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	647a      	str	r2, [r7, #68]	; 0x44
 8008db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc8:	e00b      	b.n	8008de2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	1c59      	adds	r1, r3, #1
 8008dd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	09db      	lsrs	r3, r3, #7
 8008de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	2b7f      	cmp	r3, #127	; 0x7f
 8008de6:	d8f0      	bhi.n	8008dca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7fe fed5 	bl	8007bb0 <_EncodeStr>
 8008e06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008e08:	2209      	movs	r2, #9
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6938      	ldr	r0, [r7, #16]
 8008e0e:	f7ff f80d 	bl	8007e2c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	637b      	str	r3, [r7, #52]	; 0x34
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	4b40      	ldr	r3, [pc, #256]	; (8008f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
 8008e26:	e00b      	b.n	8008e40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	1c59      	adds	r1, r3, #1
 8008e30:	6379      	str	r1, [r7, #52]	; 0x34
 8008e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e36:	b2d2      	uxtb	r2, r2
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	09db      	lsrs	r3, r3, #7
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	2b7f      	cmp	r3, #127	; 0x7f
 8008e44:	d8f0      	bhi.n	8008e28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	637a      	str	r2, [r7, #52]	; 0x34
 8008e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e60:	e00b      	b.n	8008e7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	1c59      	adds	r1, r3, #1
 8008e6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e70:	b2d2      	uxtb	r2, r2
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	09db      	lsrs	r3, r3, #7
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e7e:	d8f0      	bhi.n	8008e62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	623b      	str	r3, [r7, #32]
 8008e9a:	e00b      	b.n	8008eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	1c59      	adds	r1, r3, #1
 8008ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8008ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	09db      	lsrs	r3, r3, #7
 8008eb2:	623b      	str	r3, [r7, #32]
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8008eb8:	d8f0      	bhi.n	8008e9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8008ec0:	6a3a      	ldr	r2, [r7, #32]
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	61fb      	str	r3, [r7, #28]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
 8008ed2:	e00b      	b.n	8008eec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	1c59      	adds	r1, r3, #1
 8008edc:	61f9      	str	r1, [r7, #28]
 8008ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ee2:	b2d2      	uxtb	r2, r2
 8008ee4:	701a      	strb	r2, [r3, #0]
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	09db      	lsrs	r3, r3, #7
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b7f      	cmp	r3, #127	; 0x7f
 8008ef0:	d8f0      	bhi.n	8008ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	61fa      	str	r2, [r7, #28]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008f02:	2215      	movs	r2, #21
 8008f04:	68f9      	ldr	r1, [r7, #12]
 8008f06:	6938      	ldr	r0, [r7, #16]
 8008f08:	f7fe ff90 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f383 8811 	msr	BASEPRI, r3
}
 8008f12:	bf00      	nop
 8008f14:	3748      	adds	r7, #72	; 0x48
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200145e0 	.word	0x200145e0
 8008f20:	200145b0 	.word	0x200145b0

08008f24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4798      	blx	r3
  }
}
 8008f42:	bf00      	nop
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200145b0 	.word	0x200145b0

08008f4c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008f54:	f3ef 8311 	mrs	r3, BASEPRI
 8008f58:	f04f 0120 	mov.w	r1, #32
 8008f5c:	f381 8811 	msr	BASEPRI, r1
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	480b      	ldr	r0, [pc, #44]	; (8008f90 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008f64:	f7fe fe71 	bl	8007c4a <_PreparePacket>
 8008f68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008f6a:	2280      	movs	r2, #128	; 0x80
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	6938      	ldr	r0, [r7, #16]
 8008f70:	f7fe fe1e 	bl	8007bb0 <_EncodeStr>
 8008f74:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008f76:	220e      	movs	r2, #14
 8008f78:	68f9      	ldr	r1, [r7, #12]
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f7fe ff56 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f383 8811 	msr	BASEPRI, r3
}
 8008f86:	bf00      	nop
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	200145e0 	.word	0x200145e0

08008f94 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008f94:	b590      	push	{r4, r7, lr}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01a      	beq.n	8008fd8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008fa2:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d015      	beq.n	8008fd8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008fac:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4798      	blx	r3
 8008fb4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008fb8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	000a      	movs	r2, r1
 8008fc8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008fca:	4613      	mov	r3, r2
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4621      	mov	r1, r4
 8008fd0:	200d      	movs	r0, #13
 8008fd2:	f7ff fc5b 	bl	800888c <SEGGER_SYSVIEW_RecordU32x2>
 8008fd6:	e006      	b.n	8008fe6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008fd8:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	200c      	movs	r0, #12
 8008fe0:	f7ff fc18 	bl	8008814 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd90      	pop	{r4, r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200145b0 	.word	0x200145b0
 8008ff4:	e0001004 	.word	0xe0001004

08008ff8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ffe:	f3ef 8311 	mrs	r3, BASEPRI
 8009002:	f04f 0120 	mov.w	r1, #32
 8009006:	f381 8811 	msr	BASEPRI, r1
 800900a:	607b      	str	r3, [r7, #4]
 800900c:	4807      	ldr	r0, [pc, #28]	; (800902c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800900e:	f7fe fe1c 	bl	8007c4a <_PreparePacket>
 8009012:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009014:	2211      	movs	r2, #17
 8009016:	6839      	ldr	r1, [r7, #0]
 8009018:	6838      	ldr	r0, [r7, #0]
 800901a:	f7fe ff07 	bl	8007e2c <_SendPacket>
  RECORD_END();
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f383 8811 	msr	BASEPRI, r3
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	200145e0 	.word	0x200145e0

08009030 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009038:	f3ef 8311 	mrs	r3, BASEPRI
 800903c:	f04f 0120 	mov.w	r1, #32
 8009040:	f381 8811 	msr	BASEPRI, r1
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	4819      	ldr	r0, [pc, #100]	; (80090ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009048:	f7fe fdff 	bl	8007c4a <_PreparePacket>
 800904c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	e00b      	b.n	800907e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	1c59      	adds	r1, r3, #1
 800906e:	61f9      	str	r1, [r7, #28]
 8009070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	09db      	lsrs	r3, r3, #7
 800907c:	61bb      	str	r3, [r7, #24]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b7f      	cmp	r3, #127	; 0x7f
 8009082:	d8f0      	bhi.n	8009066 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	61fa      	str	r2, [r7, #28]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009094:	2208      	movs	r2, #8
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6938      	ldr	r0, [r7, #16]
 800909a:	f7fe fec7 	bl	8007e2c <_SendPacket>
  RECORD_END();
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f383 8811 	msr	BASEPRI, r3
}
 80090a4:	bf00      	nop
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200145e0 	.word	0x200145e0
 80090b0:	200145b0 	.word	0x200145b0

080090b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80090bc:	f3ef 8311 	mrs	r3, BASEPRI
 80090c0:	f04f 0120 	mov.w	r1, #32
 80090c4:	f381 8811 	msr	BASEPRI, r1
 80090c8:	617b      	str	r3, [r7, #20]
 80090ca:	4819      	ldr	r0, [pc, #100]	; (8009130 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80090cc:	f7fe fdbd 	bl	8007c4a <_PreparePacket>
 80090d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090d6:	4b17      	ldr	r3, [pc, #92]	; (8009134 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	e00b      	b.n	8009102 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	1c59      	adds	r1, r3, #1
 80090f2:	61f9      	str	r1, [r7, #28]
 80090f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090f8:	b2d2      	uxtb	r2, r2
 80090fa:	701a      	strb	r2, [r3, #0]
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	09db      	lsrs	r3, r3, #7
 8009100:	61bb      	str	r3, [r7, #24]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b7f      	cmp	r3, #127	; 0x7f
 8009106:	d8f0      	bhi.n	80090ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	61fa      	str	r2, [r7, #28]
 800910e:	69ba      	ldr	r2, [r7, #24]
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009118:	2204      	movs	r2, #4
 800911a:	68f9      	ldr	r1, [r7, #12]
 800911c:	6938      	ldr	r0, [r7, #16]
 800911e:	f7fe fe85 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f383 8811 	msr	BASEPRI, r3
}
 8009128:	bf00      	nop
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200145e0 	.word	0x200145e0
 8009134:	200145b0 	.word	0x200145b0

08009138 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009140:	f3ef 8311 	mrs	r3, BASEPRI
 8009144:	f04f 0120 	mov.w	r1, #32
 8009148:	f381 8811 	msr	BASEPRI, r1
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	4819      	ldr	r0, [pc, #100]	; (80091b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009150:	f7fe fd7b 	bl	8007c4a <_PreparePacket>
 8009154:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800915a:	4b17      	ldr	r3, [pc, #92]	; (80091b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	61bb      	str	r3, [r7, #24]
 800916c:	e00b      	b.n	8009186 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	b2da      	uxtb	r2, r3
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	1c59      	adds	r1, r3, #1
 8009176:	61f9      	str	r1, [r7, #28]
 8009178:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800917c:	b2d2      	uxtb	r2, r2
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	09db      	lsrs	r3, r3, #7
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b7f      	cmp	r3, #127	; 0x7f
 800918a:	d8f0      	bhi.n	800916e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	61fa      	str	r2, [r7, #28]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800919c:	2206      	movs	r2, #6
 800919e:	68f9      	ldr	r1, [r7, #12]
 80091a0:	6938      	ldr	r0, [r7, #16]
 80091a2:	f7fe fe43 	bl	8007e2c <_SendPacket>
  RECORD_END();
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f383 8811 	msr	BASEPRI, r3
}
 80091ac:	bf00      	nop
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	200145e0 	.word	0x200145e0
 80091b8:	200145b0 	.word	0x200145b0

080091bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	b08a      	sub	sp, #40	; 0x28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80091c6:	f3ef 8311 	mrs	r3, BASEPRI
 80091ca:	f04f 0120 	mov.w	r1, #32
 80091ce:	f381 8811 	msr	BASEPRI, r1
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	4827      	ldr	r0, [pc, #156]	; (8009274 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80091d6:	f7fe fd38 	bl	8007c4a <_PreparePacket>
 80091da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80091e0:	4b25      	ldr	r3, [pc, #148]	; (8009278 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	623b      	str	r3, [r7, #32]
 80091f2:	e00b      	b.n	800920c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	1c59      	adds	r1, r3, #1
 80091fc:	6279      	str	r1, [r7, #36]	; 0x24
 80091fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	09db      	lsrs	r3, r3, #7
 800920a:	623b      	str	r3, [r7, #32]
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	2b7f      	cmp	r3, #127	; 0x7f
 8009210:	d8f0      	bhi.n	80091f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	627a      	str	r2, [r7, #36]	; 0x24
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e00b      	b.n	8009244 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	b2da      	uxtb	r2, r3
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	1c59      	adds	r1, r3, #1
 8009234:	61f9      	str	r1, [r7, #28]
 8009236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	09db      	lsrs	r3, r3, #7
 8009242:	61bb      	str	r3, [r7, #24]
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	2b7f      	cmp	r3, #127	; 0x7f
 8009248:	d8f0      	bhi.n	800922c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	61fa      	str	r2, [r7, #28]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800925a:	2207      	movs	r2, #7
 800925c:	68f9      	ldr	r1, [r7, #12]
 800925e:	6938      	ldr	r0, [r7, #16]
 8009260:	f7fe fde4 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f383 8811 	msr	BASEPRI, r3
}
 800926a:	bf00      	nop
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200145e0 	.word	0x200145e0
 8009278:	200145b0 	.word	0x200145b0

0800927c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	1ad3      	subs	r3, r2, r3
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	200145b0 	.word	0x200145b0

0800929c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800929c:	b580      	push	{r7, lr}
 800929e:	b08c      	sub	sp, #48	; 0x30
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80092a6:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d06d      	beq.n	800938a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80092ae:	4b39      	ldr	r3, [pc, #228]	; (8009394 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80092b4:	2300      	movs	r3, #0
 80092b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80092b8:	e008      	b.n	80092cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d007      	beq.n	80092d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	3301      	adds	r3, #1
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d3f2      	bcc.n	80092ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80092d4:	e000      	b.n	80092d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80092d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d055      	beq.n	800938a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80092de:	f3ef 8311 	mrs	r3, BASEPRI
 80092e2:	f04f 0120 	mov.w	r1, #32
 80092e6:	f381 8811 	msr	BASEPRI, r1
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	482a      	ldr	r0, [pc, #168]	; (8009398 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80092ee:	f7fe fcac 	bl	8007c4a <_PreparePacket>
 80092f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	623b      	str	r3, [r7, #32]
 8009300:	e00b      	b.n	800931a <SEGGER_SYSVIEW_SendModule+0x7e>
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	b2da      	uxtb	r2, r3
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	1c59      	adds	r1, r3, #1
 800930a:	6279      	str	r1, [r7, #36]	; 0x24
 800930c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	701a      	strb	r2, [r3, #0]
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	09db      	lsrs	r3, r3, #7
 8009318:	623b      	str	r3, [r7, #32]
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	2b7f      	cmp	r3, #127	; 0x7f
 800931e:	d8f0      	bhi.n	8009302 <SEGGER_SYSVIEW_SendModule+0x66>
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	627a      	str	r2, [r7, #36]	; 0x24
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	b2d2      	uxtb	r2, r2
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	61fb      	str	r3, [r7, #28]
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e00b      	b.n	8009354 <SEGGER_SYSVIEW_SendModule+0xb8>
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	61f9      	str	r1, [r7, #28]
 8009346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	09db      	lsrs	r3, r3, #7
 8009352:	61bb      	str	r3, [r7, #24]
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	2b7f      	cmp	r3, #127	; 0x7f
 8009358:	d8f0      	bhi.n	800933c <SEGGER_SYSVIEW_SendModule+0xa0>
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	61fa      	str	r2, [r7, #28]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2280      	movs	r2, #128	; 0x80
 8009370:	4619      	mov	r1, r3
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7fe fc1c 	bl	8007bb0 <_EncodeStr>
 8009378:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800937a:	2216      	movs	r2, #22
 800937c:	68f9      	ldr	r1, [r7, #12]
 800937e:	6938      	ldr	r0, [r7, #16]
 8009380:	f7fe fd54 	bl	8007e2c <_SendPacket>
      RECORD_END();
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800938a:	bf00      	nop
 800938c:	3730      	adds	r7, #48	; 0x30
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	200145d8 	.word	0x200145d8
 8009398:	200145e0 	.word	0x200145e0

0800939c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80093a2:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00f      	beq.n	80093ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80093aa:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1f2      	bne.n	80093b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	200145d8 	.word	0x200145d8

080093d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80093de:	f3ef 8311 	mrs	r3, BASEPRI
 80093e2:	f04f 0120 	mov.w	r1, #32
 80093e6:	f381 8811 	msr	BASEPRI, r1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	4817      	ldr	r0, [pc, #92]	; (800944c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80093ee:	f7fe fc2c 	bl	8007c4a <_PreparePacket>
 80093f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	4b14      	ldr	r3, [pc, #80]	; (8009450 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	e00b      	b.n	800941c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	b2da      	uxtb	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	1c59      	adds	r1, r3, #1
 800940c:	6179      	str	r1, [r7, #20]
 800940e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	09db      	lsrs	r3, r3, #7
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	2b7f      	cmp	r3, #127	; 0x7f
 8009420:	d8f0      	bhi.n	8009404 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	1c5a      	adds	r2, r3, #1
 8009426:	617a      	str	r2, [r7, #20]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009432:	221b      	movs	r2, #27
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	68b8      	ldr	r0, [r7, #8]
 8009438:	f7fe fcf8 	bl	8007e2c <_SendPacket>
  RECORD_END();
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f383 8811 	msr	BASEPRI, r3
}
 8009442:	bf00      	nop
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	200145e0 	.word	0x200145e0
 8009450:	200145dc 	.word	0x200145dc

08009454 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8009454:	b40f      	push	{r0, r1, r2, r3}
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800945c:	f107 0314 	add.w	r3, r7, #20
 8009460:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8009462:	1d3b      	adds	r3, r7, #4
 8009464:	461a      	mov	r2, r3
 8009466:	2100      	movs	r1, #0
 8009468:	6938      	ldr	r0, [r7, #16]
 800946a:	f7fe ff69 	bl	8008340 <_VPrintTarget>
  va_end(ParamList);
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009478:	b004      	add	sp, #16
 800947a:	4770      	bx	lr

0800947c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b08a      	sub	sp, #40	; 0x28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009484:	f3ef 8311 	mrs	r3, BASEPRI
 8009488:	f04f 0120 	mov.w	r1, #32
 800948c:	f381 8811 	msr	BASEPRI, r1
 8009490:	617b      	str	r3, [r7, #20]
 8009492:	4827      	ldr	r0, [pc, #156]	; (8009530 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009494:	f7fe fbd9 	bl	8007c4a <_PreparePacket>
 8009498:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800949a:	2280      	movs	r2, #128	; 0x80
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	6938      	ldr	r0, [r7, #16]
 80094a0:	f7fe fb86 	bl	8007bb0 <_EncodeStr>
 80094a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
 80094aa:	2301      	movs	r3, #1
 80094ac:	623b      	str	r3, [r7, #32]
 80094ae:	e00b      	b.n	80094c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	1c59      	adds	r1, r3, #1
 80094b8:	6279      	str	r1, [r7, #36]	; 0x24
 80094ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094be:	b2d2      	uxtb	r2, r2
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	09db      	lsrs	r3, r3, #7
 80094c6:	623b      	str	r3, [r7, #32]
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	2b7f      	cmp	r3, #127	; 0x7f
 80094cc:	d8f0      	bhi.n	80094b0 <SEGGER_SYSVIEW_Warn+0x34>
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	627a      	str	r2, [r7, #36]	; 0x24
 80094d4:	6a3a      	ldr	r2, [r7, #32]
 80094d6:	b2d2      	uxtb	r2, r2
 80094d8:	701a      	strb	r2, [r3, #0]
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	2300      	movs	r3, #0
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	e00b      	b.n	8009500 <SEGGER_SYSVIEW_Warn+0x84>
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	1c59      	adds	r1, r3, #1
 80094f0:	61f9      	str	r1, [r7, #28]
 80094f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094f6:	b2d2      	uxtb	r2, r2
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	09db      	lsrs	r3, r3, #7
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2b7f      	cmp	r3, #127	; 0x7f
 8009504:	d8f0      	bhi.n	80094e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	61fa      	str	r2, [r7, #28]
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009516:	221a      	movs	r2, #26
 8009518:	68f9      	ldr	r1, [r7, #12]
 800951a:	6938      	ldr	r0, [r7, #16]
 800951c:	f7fe fc86 	bl	8007e2c <_SendPacket>
  RECORD_END();
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f383 8811 	msr	BASEPRI, r3
}
 8009526:	bf00      	nop
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200145e0 	.word	0x200145e0

08009534 <siprintf>:
 8009534:	b40e      	push	{r1, r2, r3}
 8009536:	b500      	push	{lr}
 8009538:	b09c      	sub	sp, #112	; 0x70
 800953a:	ab1d      	add	r3, sp, #116	; 0x74
 800953c:	9002      	str	r0, [sp, #8]
 800953e:	9006      	str	r0, [sp, #24]
 8009540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009544:	4809      	ldr	r0, [pc, #36]	; (800956c <siprintf+0x38>)
 8009546:	9107      	str	r1, [sp, #28]
 8009548:	9104      	str	r1, [sp, #16]
 800954a:	4909      	ldr	r1, [pc, #36]	; (8009570 <siprintf+0x3c>)
 800954c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009550:	9105      	str	r1, [sp, #20]
 8009552:	6800      	ldr	r0, [r0, #0]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	a902      	add	r1, sp, #8
 8009558:	f000 f9b0 	bl	80098bc <_svfiprintf_r>
 800955c:	9b02      	ldr	r3, [sp, #8]
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	b01c      	add	sp, #112	; 0x70
 8009564:	f85d eb04 	ldr.w	lr, [sp], #4
 8009568:	b003      	add	sp, #12
 800956a:	4770      	bx	lr
 800956c:	2000006c 	.word	0x2000006c
 8009570:	ffff0208 	.word	0xffff0208

08009574 <memcmp>:
 8009574:	b510      	push	{r4, lr}
 8009576:	3901      	subs	r1, #1
 8009578:	4402      	add	r2, r0
 800957a:	4290      	cmp	r0, r2
 800957c:	d101      	bne.n	8009582 <memcmp+0xe>
 800957e:	2000      	movs	r0, #0
 8009580:	e005      	b.n	800958e <memcmp+0x1a>
 8009582:	7803      	ldrb	r3, [r0, #0]
 8009584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009588:	42a3      	cmp	r3, r4
 800958a:	d001      	beq.n	8009590 <memcmp+0x1c>
 800958c:	1b18      	subs	r0, r3, r4
 800958e:	bd10      	pop	{r4, pc}
 8009590:	3001      	adds	r0, #1
 8009592:	e7f2      	b.n	800957a <memcmp+0x6>

08009594 <memset>:
 8009594:	4402      	add	r2, r0
 8009596:	4603      	mov	r3, r0
 8009598:	4293      	cmp	r3, r2
 800959a:	d100      	bne.n	800959e <memset+0xa>
 800959c:	4770      	bx	lr
 800959e:	f803 1b01 	strb.w	r1, [r3], #1
 80095a2:	e7f9      	b.n	8009598 <memset+0x4>

080095a4 <__errno>:
 80095a4:	4b01      	ldr	r3, [pc, #4]	; (80095ac <__errno+0x8>)
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	2000006c 	.word	0x2000006c

080095b0 <__libc_init_array>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	4d0d      	ldr	r5, [pc, #52]	; (80095e8 <__libc_init_array+0x38>)
 80095b4:	4c0d      	ldr	r4, [pc, #52]	; (80095ec <__libc_init_array+0x3c>)
 80095b6:	1b64      	subs	r4, r4, r5
 80095b8:	10a4      	asrs	r4, r4, #2
 80095ba:	2600      	movs	r6, #0
 80095bc:	42a6      	cmp	r6, r4
 80095be:	d109      	bne.n	80095d4 <__libc_init_array+0x24>
 80095c0:	4d0b      	ldr	r5, [pc, #44]	; (80095f0 <__libc_init_array+0x40>)
 80095c2:	4c0c      	ldr	r4, [pc, #48]	; (80095f4 <__libc_init_array+0x44>)
 80095c4:	f000 fc6a 	bl	8009e9c <_init>
 80095c8:	1b64      	subs	r4, r4, r5
 80095ca:	10a4      	asrs	r4, r4, #2
 80095cc:	2600      	movs	r6, #0
 80095ce:	42a6      	cmp	r6, r4
 80095d0:	d105      	bne.n	80095de <__libc_init_array+0x2e>
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095d8:	4798      	blx	r3
 80095da:	3601      	adds	r6, #1
 80095dc:	e7ee      	b.n	80095bc <__libc_init_array+0xc>
 80095de:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e2:	4798      	blx	r3
 80095e4:	3601      	adds	r6, #1
 80095e6:	e7f2      	b.n	80095ce <__libc_init_array+0x1e>
 80095e8:	0800a0d0 	.word	0x0800a0d0
 80095ec:	0800a0d0 	.word	0x0800a0d0
 80095f0:	0800a0d0 	.word	0x0800a0d0
 80095f4:	0800a0d4 	.word	0x0800a0d4

080095f8 <__retarget_lock_acquire_recursive>:
 80095f8:	4770      	bx	lr

080095fa <__retarget_lock_release_recursive>:
 80095fa:	4770      	bx	lr

080095fc <memcpy>:
 80095fc:	440a      	add	r2, r1
 80095fe:	4291      	cmp	r1, r2
 8009600:	f100 33ff 	add.w	r3, r0, #4294967295
 8009604:	d100      	bne.n	8009608 <memcpy+0xc>
 8009606:	4770      	bx	lr
 8009608:	b510      	push	{r4, lr}
 800960a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800960e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009612:	4291      	cmp	r1, r2
 8009614:	d1f9      	bne.n	800960a <memcpy+0xe>
 8009616:	bd10      	pop	{r4, pc}

08009618 <_free_r>:
 8009618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800961a:	2900      	cmp	r1, #0
 800961c:	d044      	beq.n	80096a8 <_free_r+0x90>
 800961e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009622:	9001      	str	r0, [sp, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f1a1 0404 	sub.w	r4, r1, #4
 800962a:	bfb8      	it	lt
 800962c:	18e4      	addlt	r4, r4, r3
 800962e:	f000 f8df 	bl	80097f0 <__malloc_lock>
 8009632:	4a1e      	ldr	r2, [pc, #120]	; (80096ac <_free_r+0x94>)
 8009634:	9801      	ldr	r0, [sp, #4]
 8009636:	6813      	ldr	r3, [r2, #0]
 8009638:	b933      	cbnz	r3, 8009648 <_free_r+0x30>
 800963a:	6063      	str	r3, [r4, #4]
 800963c:	6014      	str	r4, [r2, #0]
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	f000 b8da 	b.w	80097fc <__malloc_unlock>
 8009648:	42a3      	cmp	r3, r4
 800964a:	d908      	bls.n	800965e <_free_r+0x46>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf01      	itttt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	1949      	addeq	r1, r1, r5
 800965a:	6021      	streq	r1, [r4, #0]
 800965c:	e7ed      	b.n	800963a <_free_r+0x22>
 800965e:	461a      	mov	r2, r3
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	b10b      	cbz	r3, 8009668 <_free_r+0x50>
 8009664:	42a3      	cmp	r3, r4
 8009666:	d9fa      	bls.n	800965e <_free_r+0x46>
 8009668:	6811      	ldr	r1, [r2, #0]
 800966a:	1855      	adds	r5, r2, r1
 800966c:	42a5      	cmp	r5, r4
 800966e:	d10b      	bne.n	8009688 <_free_r+0x70>
 8009670:	6824      	ldr	r4, [r4, #0]
 8009672:	4421      	add	r1, r4
 8009674:	1854      	adds	r4, r2, r1
 8009676:	42a3      	cmp	r3, r4
 8009678:	6011      	str	r1, [r2, #0]
 800967a:	d1e0      	bne.n	800963e <_free_r+0x26>
 800967c:	681c      	ldr	r4, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	6053      	str	r3, [r2, #4]
 8009682:	440c      	add	r4, r1
 8009684:	6014      	str	r4, [r2, #0]
 8009686:	e7da      	b.n	800963e <_free_r+0x26>
 8009688:	d902      	bls.n	8009690 <_free_r+0x78>
 800968a:	230c      	movs	r3, #12
 800968c:	6003      	str	r3, [r0, #0]
 800968e:	e7d6      	b.n	800963e <_free_r+0x26>
 8009690:	6825      	ldr	r5, [r4, #0]
 8009692:	1961      	adds	r1, r4, r5
 8009694:	428b      	cmp	r3, r1
 8009696:	bf04      	itt	eq
 8009698:	6819      	ldreq	r1, [r3, #0]
 800969a:	685b      	ldreq	r3, [r3, #4]
 800969c:	6063      	str	r3, [r4, #4]
 800969e:	bf04      	itt	eq
 80096a0:	1949      	addeq	r1, r1, r5
 80096a2:	6021      	streq	r1, [r4, #0]
 80096a4:	6054      	str	r4, [r2, #4]
 80096a6:	e7ca      	b.n	800963e <_free_r+0x26>
 80096a8:	b003      	add	sp, #12
 80096aa:	bd30      	pop	{r4, r5, pc}
 80096ac:	20014804 	.word	0x20014804

080096b0 <sbrk_aligned>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	4e0e      	ldr	r6, [pc, #56]	; (80096ec <sbrk_aligned+0x3c>)
 80096b4:	460c      	mov	r4, r1
 80096b6:	6831      	ldr	r1, [r6, #0]
 80096b8:	4605      	mov	r5, r0
 80096ba:	b911      	cbnz	r1, 80096c2 <sbrk_aligned+0x12>
 80096bc:	f000 fba6 	bl	8009e0c <_sbrk_r>
 80096c0:	6030      	str	r0, [r6, #0]
 80096c2:	4621      	mov	r1, r4
 80096c4:	4628      	mov	r0, r5
 80096c6:	f000 fba1 	bl	8009e0c <_sbrk_r>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	d00a      	beq.n	80096e4 <sbrk_aligned+0x34>
 80096ce:	1cc4      	adds	r4, r0, #3
 80096d0:	f024 0403 	bic.w	r4, r4, #3
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d007      	beq.n	80096e8 <sbrk_aligned+0x38>
 80096d8:	1a21      	subs	r1, r4, r0
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 fb96 	bl	8009e0c <_sbrk_r>
 80096e0:	3001      	adds	r0, #1
 80096e2:	d101      	bne.n	80096e8 <sbrk_aligned+0x38>
 80096e4:	f04f 34ff 	mov.w	r4, #4294967295
 80096e8:	4620      	mov	r0, r4
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	20014808 	.word	0x20014808

080096f0 <_malloc_r>:
 80096f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f4:	1ccd      	adds	r5, r1, #3
 80096f6:	f025 0503 	bic.w	r5, r5, #3
 80096fa:	3508      	adds	r5, #8
 80096fc:	2d0c      	cmp	r5, #12
 80096fe:	bf38      	it	cc
 8009700:	250c      	movcc	r5, #12
 8009702:	2d00      	cmp	r5, #0
 8009704:	4607      	mov	r7, r0
 8009706:	db01      	blt.n	800970c <_malloc_r+0x1c>
 8009708:	42a9      	cmp	r1, r5
 800970a:	d905      	bls.n	8009718 <_malloc_r+0x28>
 800970c:	230c      	movs	r3, #12
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	2600      	movs	r6, #0
 8009712:	4630      	mov	r0, r6
 8009714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097ec <_malloc_r+0xfc>
 800971c:	f000 f868 	bl	80097f0 <__malloc_lock>
 8009720:	f8d8 3000 	ldr.w	r3, [r8]
 8009724:	461c      	mov	r4, r3
 8009726:	bb5c      	cbnz	r4, 8009780 <_malloc_r+0x90>
 8009728:	4629      	mov	r1, r5
 800972a:	4638      	mov	r0, r7
 800972c:	f7ff ffc0 	bl	80096b0 <sbrk_aligned>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	4604      	mov	r4, r0
 8009734:	d155      	bne.n	80097e2 <_malloc_r+0xf2>
 8009736:	f8d8 4000 	ldr.w	r4, [r8]
 800973a:	4626      	mov	r6, r4
 800973c:	2e00      	cmp	r6, #0
 800973e:	d145      	bne.n	80097cc <_malloc_r+0xdc>
 8009740:	2c00      	cmp	r4, #0
 8009742:	d048      	beq.n	80097d6 <_malloc_r+0xe6>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	4631      	mov	r1, r6
 8009748:	4638      	mov	r0, r7
 800974a:	eb04 0903 	add.w	r9, r4, r3
 800974e:	f000 fb5d 	bl	8009e0c <_sbrk_r>
 8009752:	4581      	cmp	r9, r0
 8009754:	d13f      	bne.n	80097d6 <_malloc_r+0xe6>
 8009756:	6821      	ldr	r1, [r4, #0]
 8009758:	1a6d      	subs	r5, r5, r1
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ffa7 	bl	80096b0 <sbrk_aligned>
 8009762:	3001      	adds	r0, #1
 8009764:	d037      	beq.n	80097d6 <_malloc_r+0xe6>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	442b      	add	r3, r5
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	f8d8 3000 	ldr.w	r3, [r8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d038      	beq.n	80097e6 <_malloc_r+0xf6>
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	42a2      	cmp	r2, r4
 8009778:	d12b      	bne.n	80097d2 <_malloc_r+0xe2>
 800977a:	2200      	movs	r2, #0
 800977c:	605a      	str	r2, [r3, #4]
 800977e:	e00f      	b.n	80097a0 <_malloc_r+0xb0>
 8009780:	6822      	ldr	r2, [r4, #0]
 8009782:	1b52      	subs	r2, r2, r5
 8009784:	d41f      	bmi.n	80097c6 <_malloc_r+0xd6>
 8009786:	2a0b      	cmp	r2, #11
 8009788:	d917      	bls.n	80097ba <_malloc_r+0xca>
 800978a:	1961      	adds	r1, r4, r5
 800978c:	42a3      	cmp	r3, r4
 800978e:	6025      	str	r5, [r4, #0]
 8009790:	bf18      	it	ne
 8009792:	6059      	strne	r1, [r3, #4]
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	bf08      	it	eq
 8009798:	f8c8 1000 	streq.w	r1, [r8]
 800979c:	5162      	str	r2, [r4, r5]
 800979e:	604b      	str	r3, [r1, #4]
 80097a0:	4638      	mov	r0, r7
 80097a2:	f104 060b 	add.w	r6, r4, #11
 80097a6:	f000 f829 	bl	80097fc <__malloc_unlock>
 80097aa:	f026 0607 	bic.w	r6, r6, #7
 80097ae:	1d23      	adds	r3, r4, #4
 80097b0:	1af2      	subs	r2, r6, r3
 80097b2:	d0ae      	beq.n	8009712 <_malloc_r+0x22>
 80097b4:	1b9b      	subs	r3, r3, r6
 80097b6:	50a3      	str	r3, [r4, r2]
 80097b8:	e7ab      	b.n	8009712 <_malloc_r+0x22>
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	6862      	ldr	r2, [r4, #4]
 80097be:	d1dd      	bne.n	800977c <_malloc_r+0x8c>
 80097c0:	f8c8 2000 	str.w	r2, [r8]
 80097c4:	e7ec      	b.n	80097a0 <_malloc_r+0xb0>
 80097c6:	4623      	mov	r3, r4
 80097c8:	6864      	ldr	r4, [r4, #4]
 80097ca:	e7ac      	b.n	8009726 <_malloc_r+0x36>
 80097cc:	4634      	mov	r4, r6
 80097ce:	6876      	ldr	r6, [r6, #4]
 80097d0:	e7b4      	b.n	800973c <_malloc_r+0x4c>
 80097d2:	4613      	mov	r3, r2
 80097d4:	e7cc      	b.n	8009770 <_malloc_r+0x80>
 80097d6:	230c      	movs	r3, #12
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	4638      	mov	r0, r7
 80097dc:	f000 f80e 	bl	80097fc <__malloc_unlock>
 80097e0:	e797      	b.n	8009712 <_malloc_r+0x22>
 80097e2:	6025      	str	r5, [r4, #0]
 80097e4:	e7dc      	b.n	80097a0 <_malloc_r+0xb0>
 80097e6:	605b      	str	r3, [r3, #4]
 80097e8:	deff      	udf	#255	; 0xff
 80097ea:	bf00      	nop
 80097ec:	20014804 	.word	0x20014804

080097f0 <__malloc_lock>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__malloc_lock+0x8>)
 80097f2:	f7ff bf01 	b.w	80095f8 <__retarget_lock_acquire_recursive>
 80097f6:	bf00      	nop
 80097f8:	20014800 	.word	0x20014800

080097fc <__malloc_unlock>:
 80097fc:	4801      	ldr	r0, [pc, #4]	; (8009804 <__malloc_unlock+0x8>)
 80097fe:	f7ff befc 	b.w	80095fa <__retarget_lock_release_recursive>
 8009802:	bf00      	nop
 8009804:	20014800 	.word	0x20014800

08009808 <__ssputs_r>:
 8009808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	688e      	ldr	r6, [r1, #8]
 800980e:	461f      	mov	r7, r3
 8009810:	42be      	cmp	r6, r7
 8009812:	680b      	ldr	r3, [r1, #0]
 8009814:	4682      	mov	sl, r0
 8009816:	460c      	mov	r4, r1
 8009818:	4690      	mov	r8, r2
 800981a:	d82c      	bhi.n	8009876 <__ssputs_r+0x6e>
 800981c:	898a      	ldrh	r2, [r1, #12]
 800981e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009822:	d026      	beq.n	8009872 <__ssputs_r+0x6a>
 8009824:	6965      	ldr	r5, [r4, #20]
 8009826:	6909      	ldr	r1, [r1, #16]
 8009828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800982c:	eba3 0901 	sub.w	r9, r3, r1
 8009830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009834:	1c7b      	adds	r3, r7, #1
 8009836:	444b      	add	r3, r9
 8009838:	106d      	asrs	r5, r5, #1
 800983a:	429d      	cmp	r5, r3
 800983c:	bf38      	it	cc
 800983e:	461d      	movcc	r5, r3
 8009840:	0553      	lsls	r3, r2, #21
 8009842:	d527      	bpl.n	8009894 <__ssputs_r+0x8c>
 8009844:	4629      	mov	r1, r5
 8009846:	f7ff ff53 	bl	80096f0 <_malloc_r>
 800984a:	4606      	mov	r6, r0
 800984c:	b360      	cbz	r0, 80098a8 <__ssputs_r+0xa0>
 800984e:	6921      	ldr	r1, [r4, #16]
 8009850:	464a      	mov	r2, r9
 8009852:	f7ff fed3 	bl	80095fc <memcpy>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800985c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	6126      	str	r6, [r4, #16]
 8009864:	6165      	str	r5, [r4, #20]
 8009866:	444e      	add	r6, r9
 8009868:	eba5 0509 	sub.w	r5, r5, r9
 800986c:	6026      	str	r6, [r4, #0]
 800986e:	60a5      	str	r5, [r4, #8]
 8009870:	463e      	mov	r6, r7
 8009872:	42be      	cmp	r6, r7
 8009874:	d900      	bls.n	8009878 <__ssputs_r+0x70>
 8009876:	463e      	mov	r6, r7
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	4632      	mov	r2, r6
 800987c:	4641      	mov	r1, r8
 800987e:	f000 faab 	bl	8009dd8 <memmove>
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	1b9b      	subs	r3, r3, r6
 8009886:	60a3      	str	r3, [r4, #8]
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	4433      	add	r3, r6
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	2000      	movs	r0, #0
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	462a      	mov	r2, r5
 8009896:	f000 fac9 	bl	8009e2c <_realloc_r>
 800989a:	4606      	mov	r6, r0
 800989c:	2800      	cmp	r0, #0
 800989e:	d1e0      	bne.n	8009862 <__ssputs_r+0x5a>
 80098a0:	6921      	ldr	r1, [r4, #16]
 80098a2:	4650      	mov	r0, sl
 80098a4:	f7ff feb8 	bl	8009618 <_free_r>
 80098a8:	230c      	movs	r3, #12
 80098aa:	f8ca 3000 	str.w	r3, [sl]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ba:	e7e9      	b.n	8009890 <__ssputs_r+0x88>

080098bc <_svfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	4698      	mov	r8, r3
 80098c2:	898b      	ldrh	r3, [r1, #12]
 80098c4:	061b      	lsls	r3, r3, #24
 80098c6:	b09d      	sub	sp, #116	; 0x74
 80098c8:	4607      	mov	r7, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	4614      	mov	r4, r2
 80098ce:	d50e      	bpl.n	80098ee <_svfiprintf_r+0x32>
 80098d0:	690b      	ldr	r3, [r1, #16]
 80098d2:	b963      	cbnz	r3, 80098ee <_svfiprintf_r+0x32>
 80098d4:	2140      	movs	r1, #64	; 0x40
 80098d6:	f7ff ff0b 	bl	80096f0 <_malloc_r>
 80098da:	6028      	str	r0, [r5, #0]
 80098dc:	6128      	str	r0, [r5, #16]
 80098de:	b920      	cbnz	r0, 80098ea <_svfiprintf_r+0x2e>
 80098e0:	230c      	movs	r3, #12
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e0d0      	b.n	8009a8c <_svfiprintf_r+0x1d0>
 80098ea:	2340      	movs	r3, #64	; 0x40
 80098ec:	616b      	str	r3, [r5, #20]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9309      	str	r3, [sp, #36]	; 0x24
 80098f2:	2320      	movs	r3, #32
 80098f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fc:	2330      	movs	r3, #48	; 0x30
 80098fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009aa4 <_svfiprintf_r+0x1e8>
 8009902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009906:	f04f 0901 	mov.w	r9, #1
 800990a:	4623      	mov	r3, r4
 800990c:	469a      	mov	sl, r3
 800990e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009912:	b10a      	cbz	r2, 8009918 <_svfiprintf_r+0x5c>
 8009914:	2a25      	cmp	r2, #37	; 0x25
 8009916:	d1f9      	bne.n	800990c <_svfiprintf_r+0x50>
 8009918:	ebba 0b04 	subs.w	fp, sl, r4
 800991c:	d00b      	beq.n	8009936 <_svfiprintf_r+0x7a>
 800991e:	465b      	mov	r3, fp
 8009920:	4622      	mov	r2, r4
 8009922:	4629      	mov	r1, r5
 8009924:	4638      	mov	r0, r7
 8009926:	f7ff ff6f 	bl	8009808 <__ssputs_r>
 800992a:	3001      	adds	r0, #1
 800992c:	f000 80a9 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009932:	445a      	add	r2, fp
 8009934:	9209      	str	r2, [sp, #36]	; 0x24
 8009936:	f89a 3000 	ldrb.w	r3, [sl]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 80a1 	beq.w	8009a82 <_svfiprintf_r+0x1c6>
 8009940:	2300      	movs	r3, #0
 8009942:	f04f 32ff 	mov.w	r2, #4294967295
 8009946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994a:	f10a 0a01 	add.w	sl, sl, #1
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009956:	931a      	str	r3, [sp, #104]	; 0x68
 8009958:	4654      	mov	r4, sl
 800995a:	2205      	movs	r2, #5
 800995c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009960:	4850      	ldr	r0, [pc, #320]	; (8009aa4 <_svfiprintf_r+0x1e8>)
 8009962:	f7f6 fc95 	bl	8000290 <memchr>
 8009966:	9a04      	ldr	r2, [sp, #16]
 8009968:	b9d8      	cbnz	r0, 80099a2 <_svfiprintf_r+0xe6>
 800996a:	06d0      	lsls	r0, r2, #27
 800996c:	bf44      	itt	mi
 800996e:	2320      	movmi	r3, #32
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009974:	0711      	lsls	r1, r2, #28
 8009976:	bf44      	itt	mi
 8009978:	232b      	movmi	r3, #43	; 0x2b
 800997a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997e:	f89a 3000 	ldrb.w	r3, [sl]
 8009982:	2b2a      	cmp	r3, #42	; 0x2a
 8009984:	d015      	beq.n	80099b2 <_svfiprintf_r+0xf6>
 8009986:	9a07      	ldr	r2, [sp, #28]
 8009988:	4654      	mov	r4, sl
 800998a:	2000      	movs	r0, #0
 800998c:	f04f 0c0a 	mov.w	ip, #10
 8009990:	4621      	mov	r1, r4
 8009992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009996:	3b30      	subs	r3, #48	; 0x30
 8009998:	2b09      	cmp	r3, #9
 800999a:	d94d      	bls.n	8009a38 <_svfiprintf_r+0x17c>
 800999c:	b1b0      	cbz	r0, 80099cc <_svfiprintf_r+0x110>
 800999e:	9207      	str	r2, [sp, #28]
 80099a0:	e014      	b.n	80099cc <_svfiprintf_r+0x110>
 80099a2:	eba0 0308 	sub.w	r3, r0, r8
 80099a6:	fa09 f303 	lsl.w	r3, r9, r3
 80099aa:	4313      	orrs	r3, r2
 80099ac:	9304      	str	r3, [sp, #16]
 80099ae:	46a2      	mov	sl, r4
 80099b0:	e7d2      	b.n	8009958 <_svfiprintf_r+0x9c>
 80099b2:	9b03      	ldr	r3, [sp, #12]
 80099b4:	1d19      	adds	r1, r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	9103      	str	r1, [sp, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	bfbb      	ittet	lt
 80099be:	425b      	neglt	r3, r3
 80099c0:	f042 0202 	orrlt.w	r2, r2, #2
 80099c4:	9307      	strge	r3, [sp, #28]
 80099c6:	9307      	strlt	r3, [sp, #28]
 80099c8:	bfb8      	it	lt
 80099ca:	9204      	strlt	r2, [sp, #16]
 80099cc:	7823      	ldrb	r3, [r4, #0]
 80099ce:	2b2e      	cmp	r3, #46	; 0x2e
 80099d0:	d10c      	bne.n	80099ec <_svfiprintf_r+0x130>
 80099d2:	7863      	ldrb	r3, [r4, #1]
 80099d4:	2b2a      	cmp	r3, #42	; 0x2a
 80099d6:	d134      	bne.n	8009a42 <_svfiprintf_r+0x186>
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	1d1a      	adds	r2, r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	9203      	str	r2, [sp, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfb8      	it	lt
 80099e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e8:	3402      	adds	r4, #2
 80099ea:	9305      	str	r3, [sp, #20]
 80099ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ab4 <_svfiprintf_r+0x1f8>
 80099f0:	7821      	ldrb	r1, [r4, #0]
 80099f2:	2203      	movs	r2, #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	f7f6 fc4b 	bl	8000290 <memchr>
 80099fa:	b138      	cbz	r0, 8009a0c <_svfiprintf_r+0x150>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	eba0 000a 	sub.w	r0, r0, sl
 8009a02:	2240      	movs	r2, #64	; 0x40
 8009a04:	4082      	lsls	r2, r0
 8009a06:	4313      	orrs	r3, r2
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	4825      	ldr	r0, [pc, #148]	; (8009aa8 <_svfiprintf_r+0x1ec>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fc3a 	bl	8000290 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d038      	beq.n	8009a92 <_svfiprintf_r+0x1d6>
 8009a20:	4b22      	ldr	r3, [pc, #136]	; (8009aac <_svfiprintf_r+0x1f0>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_svfiprintf_r+0x1b0>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	4433      	add	r3, r6
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	e768      	b.n	800990a <_svfiprintf_r+0x4e>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a6      	b.n	8009990 <_svfiprintf_r+0xd4>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	; 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_svfiprintf_r+0x1a6>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c6      	beq.n	80099ec <_svfiprintf_r+0x130>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c4      	b.n	80099ec <_svfiprintf_r+0x130>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_svfiprintf_r+0x192>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b0f      	ldr	r3, [pc, #60]	; (8009ab0 <_svfiprintf_r+0x1f4>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4638      	mov	r0, r7
 8009a78:	f3af 8000 	nop.w
 8009a7c:	1c42      	adds	r2, r0, #1
 8009a7e:	4606      	mov	r6, r0
 8009a80:	d1d6      	bne.n	8009a30 <_svfiprintf_r+0x174>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	065b      	lsls	r3, r3, #25
 8009a86:	f53f af2d 	bmi.w	80098e4 <_svfiprintf_r+0x28>
 8009a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a8c:	b01d      	add	sp, #116	; 0x74
 8009a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a92:	ab03      	add	r3, sp, #12
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	462a      	mov	r2, r5
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <_svfiprintf_r+0x1f4>)
 8009a9a:	a904      	add	r1, sp, #16
 8009a9c:	4638      	mov	r0, r7
 8009a9e:	f000 f879 	bl	8009b94 <_printf_i>
 8009aa2:	e7eb      	b.n	8009a7c <_svfiprintf_r+0x1c0>
 8009aa4:	0800a094 	.word	0x0800a094
 8009aa8:	0800a09e 	.word	0x0800a09e
 8009aac:	00000000 	.word	0x00000000
 8009ab0:	08009809 	.word	0x08009809
 8009ab4:	0800a09a 	.word	0x0800a09a

08009ab8 <_printf_common>:
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	4616      	mov	r6, r2
 8009abe:	4699      	mov	r9, r3
 8009ac0:	688a      	ldr	r2, [r1, #8]
 8009ac2:	690b      	ldr	r3, [r1, #16]
 8009ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	bfb8      	it	lt
 8009acc:	4613      	movlt	r3, r2
 8009ace:	6033      	str	r3, [r6, #0]
 8009ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b10a      	cbz	r2, 8009ade <_printf_common+0x26>
 8009ada:	3301      	adds	r3, #1
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	6823      	ldr	r3, [r4, #0]
 8009ae0:	0699      	lsls	r1, r3, #26
 8009ae2:	bf42      	ittt	mi
 8009ae4:	6833      	ldrmi	r3, [r6, #0]
 8009ae6:	3302      	addmi	r3, #2
 8009ae8:	6033      	strmi	r3, [r6, #0]
 8009aea:	6825      	ldr	r5, [r4, #0]
 8009aec:	f015 0506 	ands.w	r5, r5, #6
 8009af0:	d106      	bne.n	8009b00 <_printf_common+0x48>
 8009af2:	f104 0a19 	add.w	sl, r4, #25
 8009af6:	68e3      	ldr	r3, [r4, #12]
 8009af8:	6832      	ldr	r2, [r6, #0]
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	42ab      	cmp	r3, r5
 8009afe:	dc26      	bgt.n	8009b4e <_printf_common+0x96>
 8009b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b04:	1e13      	subs	r3, r2, #0
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	bf18      	it	ne
 8009b0a:	2301      	movne	r3, #1
 8009b0c:	0692      	lsls	r2, r2, #26
 8009b0e:	d42b      	bmi.n	8009b68 <_printf_common+0xb0>
 8009b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b14:	4649      	mov	r1, r9
 8009b16:	4638      	mov	r0, r7
 8009b18:	47c0      	blx	r8
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	d01e      	beq.n	8009b5c <_printf_common+0xa4>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	6922      	ldr	r2, [r4, #16]
 8009b22:	f003 0306 	and.w	r3, r3, #6
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	bf02      	ittt	eq
 8009b2a:	68e5      	ldreq	r5, [r4, #12]
 8009b2c:	6833      	ldreq	r3, [r6, #0]
 8009b2e:	1aed      	subeq	r5, r5, r3
 8009b30:	68a3      	ldr	r3, [r4, #8]
 8009b32:	bf0c      	ite	eq
 8009b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b38:	2500      	movne	r5, #0
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	bfc4      	itt	gt
 8009b3e:	1a9b      	subgt	r3, r3, r2
 8009b40:	18ed      	addgt	r5, r5, r3
 8009b42:	2600      	movs	r6, #0
 8009b44:	341a      	adds	r4, #26
 8009b46:	42b5      	cmp	r5, r6
 8009b48:	d11a      	bne.n	8009b80 <_printf_common+0xc8>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	e008      	b.n	8009b60 <_printf_common+0xa8>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4652      	mov	r2, sl
 8009b52:	4649      	mov	r1, r9
 8009b54:	4638      	mov	r0, r7
 8009b56:	47c0      	blx	r8
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d103      	bne.n	8009b64 <_printf_common+0xac>
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b64:	3501      	adds	r5, #1
 8009b66:	e7c6      	b.n	8009af6 <_printf_common+0x3e>
 8009b68:	18e1      	adds	r1, r4, r3
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	2030      	movs	r0, #48	; 0x30
 8009b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b72:	4422      	add	r2, r4
 8009b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b7c:	3302      	adds	r3, #2
 8009b7e:	e7c7      	b.n	8009b10 <_printf_common+0x58>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4622      	mov	r2, r4
 8009b84:	4649      	mov	r1, r9
 8009b86:	4638      	mov	r0, r7
 8009b88:	47c0      	blx	r8
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d0e6      	beq.n	8009b5c <_printf_common+0xa4>
 8009b8e:	3601      	adds	r6, #1
 8009b90:	e7d9      	b.n	8009b46 <_printf_common+0x8e>
	...

08009b94 <_printf_i>:
 8009b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	7e0f      	ldrb	r7, [r1, #24]
 8009b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b9c:	2f78      	cmp	r7, #120	; 0x78
 8009b9e:	4691      	mov	r9, r2
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009baa:	d807      	bhi.n	8009bbc <_printf_i+0x28>
 8009bac:	2f62      	cmp	r7, #98	; 0x62
 8009bae:	d80a      	bhi.n	8009bc6 <_printf_i+0x32>
 8009bb0:	2f00      	cmp	r7, #0
 8009bb2:	f000 80d4 	beq.w	8009d5e <_printf_i+0x1ca>
 8009bb6:	2f58      	cmp	r7, #88	; 0x58
 8009bb8:	f000 80c0 	beq.w	8009d3c <_printf_i+0x1a8>
 8009bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bc4:	e03a      	b.n	8009c3c <_printf_i+0xa8>
 8009bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bca:	2b15      	cmp	r3, #21
 8009bcc:	d8f6      	bhi.n	8009bbc <_printf_i+0x28>
 8009bce:	a101      	add	r1, pc, #4	; (adr r1, 8009bd4 <_printf_i+0x40>)
 8009bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bd4:	08009c2d 	.word	0x08009c2d
 8009bd8:	08009c41 	.word	0x08009c41
 8009bdc:	08009bbd 	.word	0x08009bbd
 8009be0:	08009bbd 	.word	0x08009bbd
 8009be4:	08009bbd 	.word	0x08009bbd
 8009be8:	08009bbd 	.word	0x08009bbd
 8009bec:	08009c41 	.word	0x08009c41
 8009bf0:	08009bbd 	.word	0x08009bbd
 8009bf4:	08009bbd 	.word	0x08009bbd
 8009bf8:	08009bbd 	.word	0x08009bbd
 8009bfc:	08009bbd 	.word	0x08009bbd
 8009c00:	08009d45 	.word	0x08009d45
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009cff 	.word	0x08009cff
 8009c0c:	08009bbd 	.word	0x08009bbd
 8009c10:	08009bbd 	.word	0x08009bbd
 8009c14:	08009d67 	.word	0x08009d67
 8009c18:	08009bbd 	.word	0x08009bbd
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009bbd 	.word	0x08009bbd
 8009c24:	08009bbd 	.word	0x08009bbd
 8009c28:	08009d07 	.word	0x08009d07
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	1d1a      	adds	r2, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	602a      	str	r2, [r5, #0]
 8009c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e09f      	b.n	8009d80 <_printf_i+0x1ec>
 8009c40:	6820      	ldr	r0, [r4, #0]
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	0607      	lsls	r7, r0, #24
 8009c46:	f103 0104 	add.w	r1, r3, #4
 8009c4a:	6029      	str	r1, [r5, #0]
 8009c4c:	d501      	bpl.n	8009c52 <_printf_i+0xbe>
 8009c4e:	681e      	ldr	r6, [r3, #0]
 8009c50:	e003      	b.n	8009c5a <_printf_i+0xc6>
 8009c52:	0646      	lsls	r6, r0, #25
 8009c54:	d5fb      	bpl.n	8009c4e <_printf_i+0xba>
 8009c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c5a:	2e00      	cmp	r6, #0
 8009c5c:	da03      	bge.n	8009c66 <_printf_i+0xd2>
 8009c5e:	232d      	movs	r3, #45	; 0x2d
 8009c60:	4276      	negs	r6, r6
 8009c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c66:	485a      	ldr	r0, [pc, #360]	; (8009dd0 <_printf_i+0x23c>)
 8009c68:	230a      	movs	r3, #10
 8009c6a:	e012      	b.n	8009c92 <_printf_i+0xfe>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	6820      	ldr	r0, [r4, #0]
 8009c70:	1d19      	adds	r1, r3, #4
 8009c72:	6029      	str	r1, [r5, #0]
 8009c74:	0605      	lsls	r5, r0, #24
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0xe8>
 8009c78:	681e      	ldr	r6, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <_printf_i+0xee>
 8009c7c:	0641      	lsls	r1, r0, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0xe4>
 8009c80:	881e      	ldrh	r6, [r3, #0]
 8009c82:	4853      	ldr	r0, [pc, #332]	; (8009dd0 <_printf_i+0x23c>)
 8009c84:	2f6f      	cmp	r7, #111	; 0x6f
 8009c86:	bf0c      	ite	eq
 8009c88:	2308      	moveq	r3, #8
 8009c8a:	230a      	movne	r3, #10
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c92:	6865      	ldr	r5, [r4, #4]
 8009c94:	60a5      	str	r5, [r4, #8]
 8009c96:	2d00      	cmp	r5, #0
 8009c98:	bfa2      	ittt	ge
 8009c9a:	6821      	ldrge	r1, [r4, #0]
 8009c9c:	f021 0104 	bicge.w	r1, r1, #4
 8009ca0:	6021      	strge	r1, [r4, #0]
 8009ca2:	b90e      	cbnz	r6, 8009ca8 <_printf_i+0x114>
 8009ca4:	2d00      	cmp	r5, #0
 8009ca6:	d04b      	beq.n	8009d40 <_printf_i+0x1ac>
 8009ca8:	4615      	mov	r5, r2
 8009caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cae:	fb03 6711 	mls	r7, r3, r1, r6
 8009cb2:	5dc7      	ldrb	r7, [r0, r7]
 8009cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cb8:	4637      	mov	r7, r6
 8009cba:	42bb      	cmp	r3, r7
 8009cbc:	460e      	mov	r6, r1
 8009cbe:	d9f4      	bls.n	8009caa <_printf_i+0x116>
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d10b      	bne.n	8009cdc <_printf_i+0x148>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	07de      	lsls	r6, r3, #31
 8009cc8:	d508      	bpl.n	8009cdc <_printf_i+0x148>
 8009cca:	6923      	ldr	r3, [r4, #16]
 8009ccc:	6861      	ldr	r1, [r4, #4]
 8009cce:	4299      	cmp	r1, r3
 8009cd0:	bfde      	ittt	le
 8009cd2:	2330      	movle	r3, #48	; 0x30
 8009cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cdc:	1b52      	subs	r2, r2, r5
 8009cde:	6122      	str	r2, [r4, #16]
 8009ce0:	f8cd a000 	str.w	sl, [sp]
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	aa03      	add	r2, sp, #12
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4640      	mov	r0, r8
 8009cec:	f7ff fee4 	bl	8009ab8 <_printf_common>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d14a      	bne.n	8009d8a <_printf_i+0x1f6>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	b004      	add	sp, #16
 8009cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	f043 0320 	orr.w	r3, r3, #32
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	4833      	ldr	r0, [pc, #204]	; (8009dd4 <_printf_i+0x240>)
 8009d08:	2778      	movs	r7, #120	; 0x78
 8009d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	6829      	ldr	r1, [r5, #0]
 8009d12:	061f      	lsls	r7, r3, #24
 8009d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d18:	d402      	bmi.n	8009d20 <_printf_i+0x18c>
 8009d1a:	065f      	lsls	r7, r3, #25
 8009d1c:	bf48      	it	mi
 8009d1e:	b2b6      	uxthmi	r6, r6
 8009d20:	07df      	lsls	r7, r3, #31
 8009d22:	bf48      	it	mi
 8009d24:	f043 0320 	orrmi.w	r3, r3, #32
 8009d28:	6029      	str	r1, [r5, #0]
 8009d2a:	bf48      	it	mi
 8009d2c:	6023      	strmi	r3, [r4, #0]
 8009d2e:	b91e      	cbnz	r6, 8009d38 <_printf_i+0x1a4>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	f023 0320 	bic.w	r3, r3, #32
 8009d36:	6023      	str	r3, [r4, #0]
 8009d38:	2310      	movs	r3, #16
 8009d3a:	e7a7      	b.n	8009c8c <_printf_i+0xf8>
 8009d3c:	4824      	ldr	r0, [pc, #144]	; (8009dd0 <_printf_i+0x23c>)
 8009d3e:	e7e4      	b.n	8009d0a <_printf_i+0x176>
 8009d40:	4615      	mov	r5, r2
 8009d42:	e7bd      	b.n	8009cc0 <_printf_i+0x12c>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	6826      	ldr	r6, [r4, #0]
 8009d48:	6961      	ldr	r1, [r4, #20]
 8009d4a:	1d18      	adds	r0, r3, #4
 8009d4c:	6028      	str	r0, [r5, #0]
 8009d4e:	0635      	lsls	r5, r6, #24
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0x1c4>
 8009d54:	6019      	str	r1, [r3, #0]
 8009d56:	e002      	b.n	8009d5e <_printf_i+0x1ca>
 8009d58:	0670      	lsls	r0, r6, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0x1c0>
 8009d5c:	8019      	strh	r1, [r3, #0]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	4615      	mov	r5, r2
 8009d64:	e7bc      	b.n	8009ce0 <_printf_i+0x14c>
 8009d66:	682b      	ldr	r3, [r5, #0]
 8009d68:	1d1a      	adds	r2, r3, #4
 8009d6a:	602a      	str	r2, [r5, #0]
 8009d6c:	681d      	ldr	r5, [r3, #0]
 8009d6e:	6862      	ldr	r2, [r4, #4]
 8009d70:	2100      	movs	r1, #0
 8009d72:	4628      	mov	r0, r5
 8009d74:	f7f6 fa8c 	bl	8000290 <memchr>
 8009d78:	b108      	cbz	r0, 8009d7e <_printf_i+0x1ea>
 8009d7a:	1b40      	subs	r0, r0, r5
 8009d7c:	6060      	str	r0, [r4, #4]
 8009d7e:	6863      	ldr	r3, [r4, #4]
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	2300      	movs	r3, #0
 8009d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d88:	e7aa      	b.n	8009ce0 <_printf_i+0x14c>
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	462a      	mov	r2, r5
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4640      	mov	r0, r8
 8009d92:	47d0      	blx	sl
 8009d94:	3001      	adds	r0, #1
 8009d96:	d0ad      	beq.n	8009cf4 <_printf_i+0x160>
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	079b      	lsls	r3, r3, #30
 8009d9c:	d413      	bmi.n	8009dc6 <_printf_i+0x232>
 8009d9e:	68e0      	ldr	r0, [r4, #12]
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	4298      	cmp	r0, r3
 8009da4:	bfb8      	it	lt
 8009da6:	4618      	movlt	r0, r3
 8009da8:	e7a6      	b.n	8009cf8 <_printf_i+0x164>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4632      	mov	r2, r6
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d09d      	beq.n	8009cf4 <_printf_i+0x160>
 8009db8:	3501      	adds	r5, #1
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	9903      	ldr	r1, [sp, #12]
 8009dbe:	1a5b      	subs	r3, r3, r1
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dcf2      	bgt.n	8009daa <_printf_i+0x216>
 8009dc4:	e7eb      	b.n	8009d9e <_printf_i+0x20a>
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	f104 0619 	add.w	r6, r4, #25
 8009dcc:	e7f5      	b.n	8009dba <_printf_i+0x226>
 8009dce:	bf00      	nop
 8009dd0:	0800a0a5 	.word	0x0800a0a5
 8009dd4:	0800a0b6 	.word	0x0800a0b6

08009dd8 <memmove>:
 8009dd8:	4288      	cmp	r0, r1
 8009dda:	b510      	push	{r4, lr}
 8009ddc:	eb01 0402 	add.w	r4, r1, r2
 8009de0:	d902      	bls.n	8009de8 <memmove+0x10>
 8009de2:	4284      	cmp	r4, r0
 8009de4:	4623      	mov	r3, r4
 8009de6:	d807      	bhi.n	8009df8 <memmove+0x20>
 8009de8:	1e43      	subs	r3, r0, #1
 8009dea:	42a1      	cmp	r1, r4
 8009dec:	d008      	beq.n	8009e00 <memmove+0x28>
 8009dee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009df2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009df6:	e7f8      	b.n	8009dea <memmove+0x12>
 8009df8:	4402      	add	r2, r0
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	428a      	cmp	r2, r1
 8009dfe:	d100      	bne.n	8009e02 <memmove+0x2a>
 8009e00:	bd10      	pop	{r4, pc}
 8009e02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e0a:	e7f7      	b.n	8009dfc <memmove+0x24>

08009e0c <_sbrk_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	4d06      	ldr	r5, [pc, #24]	; (8009e28 <_sbrk_r+0x1c>)
 8009e10:	2300      	movs	r3, #0
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	f7f7 fa4a 	bl	80012b0 <_sbrk>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_sbrk_r+0x1a>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_sbrk_r+0x1a>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	200147fc 	.word	0x200147fc

08009e2c <_realloc_r>:
 8009e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e30:	4680      	mov	r8, r0
 8009e32:	4614      	mov	r4, r2
 8009e34:	460e      	mov	r6, r1
 8009e36:	b921      	cbnz	r1, 8009e42 <_realloc_r+0x16>
 8009e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	f7ff bc57 	b.w	80096f0 <_malloc_r>
 8009e42:	b92a      	cbnz	r2, 8009e50 <_realloc_r+0x24>
 8009e44:	f7ff fbe8 	bl	8009618 <_free_r>
 8009e48:	4625      	mov	r5, r4
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e50:	f000 f81b 	bl	8009e8a <_malloc_usable_size_r>
 8009e54:	4284      	cmp	r4, r0
 8009e56:	4607      	mov	r7, r0
 8009e58:	d802      	bhi.n	8009e60 <_realloc_r+0x34>
 8009e5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e5e:	d812      	bhi.n	8009e86 <_realloc_r+0x5a>
 8009e60:	4621      	mov	r1, r4
 8009e62:	4640      	mov	r0, r8
 8009e64:	f7ff fc44 	bl	80096f0 <_malloc_r>
 8009e68:	4605      	mov	r5, r0
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d0ed      	beq.n	8009e4a <_realloc_r+0x1e>
 8009e6e:	42bc      	cmp	r4, r7
 8009e70:	4622      	mov	r2, r4
 8009e72:	4631      	mov	r1, r6
 8009e74:	bf28      	it	cs
 8009e76:	463a      	movcs	r2, r7
 8009e78:	f7ff fbc0 	bl	80095fc <memcpy>
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7ff fbca 	bl	8009618 <_free_r>
 8009e84:	e7e1      	b.n	8009e4a <_realloc_r+0x1e>
 8009e86:	4635      	mov	r5, r6
 8009e88:	e7df      	b.n	8009e4a <_realloc_r+0x1e>

08009e8a <_malloc_usable_size_r>:
 8009e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8e:	1f18      	subs	r0, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bfbc      	itt	lt
 8009e94:	580b      	ldrlt	r3, [r1, r0]
 8009e96:	18c0      	addlt	r0, r0, r3
 8009e98:	4770      	bx	lr
	...

08009e9c <_init>:
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9e:	bf00      	nop
 8009ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea2:	bc08      	pop	{r3}
 8009ea4:	469e      	mov	lr, r3
 8009ea6:	4770      	bx	lr

08009ea8 <_fini>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	bf00      	nop
 8009eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eae:	bc08      	pop	{r3}
 8009eb0:	469e      	mov	lr, r3
 8009eb2:	4770      	bx	lr
