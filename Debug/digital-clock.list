
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009498  08009498  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080094a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000146c0  2000006c  0800950c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001472c  0800950c  0002472c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ecc  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a02  00000000  00000000  00036fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003a9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105a  00000000  00000000  0003bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001acbf  00000000  00000000  0003cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195d9  00000000  00000000  00057c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a14d7  00000000  00000000  000711fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d90  00000000  00000000  001126d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00118464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800929c 	.word	0x0800929c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800929c 	.word	0x0800929c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20013010 	.word	0x20013010

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a8 	.word	0x200000a8

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f001 f9ee 	bl	8001a58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f001 f9e3 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f001 f9d8 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f001 f9cd 	bl	8001a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f001 f9c4 	bl	8001a58 <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f001 f9be 	bl	8001a58 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006dc:	2032      	movs	r0, #50	; 0x32
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f001 f9b5 	bl	8001a58 <HAL_GPIO_WritePin>
	lcdDelayUs(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50); // >40 ms
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fe83 	bl	8001514 <HAL_Delay>
	lcdSendCommand(0x03);
 800080e:	2003      	movs	r0, #3
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5); // > 4.1 ms
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fe7d 	bl	8001514 <HAL_Delay>
	lcdSendCommand(0x03);
 800081a:	2003      	movs	r0, #3
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1); // > 100 us
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fe77 	bl	8001514 <HAL_Delay>
	lcdSendCommand(0x03);
 8000826:	2003      	movs	r0, #3
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fe71 	bl	8001514 <HAL_Delay>
	lcdSendCommand(0x02); //set to 4-bit mode
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fe6b 	bl	8001514 <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fe65 	bl	8001514 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fe5f 	bl	8001514 <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fe59 	bl	8001514 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fe56 	bl	8001514 <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fe50 	bl	8001514 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fe03 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f8cd 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa13 	bl	8000cb8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f935 	bl	8000b00 <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 f9bf 	bl	8000c18 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 800089a:	484f      	ldr	r0, [pc, #316]	; (80009d8 <main+0x158>)
 800089c:	f002 fb2c 	bl	8002ef8 <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008a0:	f006 f82e 	bl	8006900 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008a4:	f007 fade 	bl	8007e64 <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	200a      	movs	r0, #10
 80008ae:	f003 f8b7 	bl	8003a20 <xQueueGenericCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a49      	ldr	r2, [pc, #292]	; (80009dc <main+0x15c>)
 80008b6:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <main+0x15c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>

  /*create timers */
  rtcUpdateTimerHandle = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, rtcUpdateTimerCallback);
 80008d6:	4b42      	ldr	r3, [pc, #264]	; (80009e0 <main+0x160>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008e2:	4840      	ldr	r0, [pc, #256]	; (80009e4 <main+0x164>)
 80008e4:	f005 f840 	bl	8005968 <xTimerCreate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a3f      	ldr	r2, [pc, #252]	; (80009e8 <main+0x168>)
 80008ec:	6013      	str	r3, [r2, #0]

  alarmSetTimerHandle = xTimerCreate("Alarm_Timer", pdMS_TO_TICKS(ALARM_SAMPLE_PERIOD), pdTRUE, NULL, alarmSetTimerCallback);
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <main+0x16c>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008fa:	483d      	ldr	r0, [pc, #244]	; (80009f0 <main+0x170>)
 80008fc:	f005 f834 	bl	8005968 <xTimerCreate>
 8000900:	4603      	mov	r3, r0
 8000902:	4a3c      	ldr	r2, [pc, #240]	; (80009f4 <main+0x174>)
 8000904:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 2, &startTimerTaskHandle);
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <main+0x178>)
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	2302      	movs	r3, #2
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2300      	movs	r3, #0
 8000910:	22fa      	movs	r2, #250	; 0xfa
 8000912:	493a      	ldr	r1, [pc, #232]	; (80009fc <main+0x17c>)
 8000914:	483a      	ldr	r0, [pc, #232]	; (8000a00 <main+0x180>)
 8000916:	f003 fd17 	bl	8004348 <xTaskCreate>
 800091a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d00a      	beq.n	8000938 <main+0xb8>
        __asm volatile
 8000922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000926:	f383 8811 	msr	BASEPRI, r3
 800092a:	f3bf 8f6f 	isb	sy
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	60fb      	str	r3, [r7, #12]
    }
 8000934:	bf00      	nop
 8000936:	e7fe      	b.n	8000936 <main+0xb6>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 3, &printTaskHandle);
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <main+0x184>)
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2303      	movs	r3, #3
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2300      	movs	r3, #0
 8000942:	22fa      	movs	r2, #250	; 0xfa
 8000944:	4930      	ldr	r1, [pc, #192]	; (8000a08 <main+0x188>)
 8000946:	4831      	ldr	r0, [pc, #196]	; (8000a0c <main+0x18c>)
 8000948:	f003 fcfe 	bl	8004348 <xTaskCreate>
 800094c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d00a      	beq.n	800096a <main+0xea>
        __asm volatile
 8000954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000958:	f383 8811 	msr	BASEPRI, r3
 800095c:	f3bf 8f6f 	isb	sy
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	60bb      	str	r3, [r7, #8]
    }
 8000966:	bf00      	nop
 8000968:	e7fe      	b.n	8000968 <main+0xe8>

  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 2, &rtcUpdateTaskHandle);
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <main+0x190>)
 800096c:	9301      	str	r3, [sp, #4]
 800096e:	2302      	movs	r3, #2
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	22fa      	movs	r2, #250	; 0xfa
 8000976:	4927      	ldr	r1, [pc, #156]	; (8000a14 <main+0x194>)
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <main+0x198>)
 800097a:	f003 fce5 	bl	8004348 <xTaskCreate>
 800097e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00a      	beq.n	800099c <main+0x11c>
        __asm volatile
 8000986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800098a:	f383 8811 	msr	BASEPRI, r3
 800098e:	f3bf 8f6f 	isb	sy
 8000992:	f3bf 8f4f 	dsb	sy
 8000996:	607b      	str	r3, [r7, #4]
    }
 8000998:	bf00      	nop
 800099a:	e7fe      	b.n	800099a <main+0x11a>

  status = xTaskCreate(alarmSetTaskHandler, "Alarm_Set_Task", 250, NULL, 2, &alarmSetTaskHandle);
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <main+0x19c>)
 800099e:	9301      	str	r3, [sp, #4]
 80009a0:	2302      	movs	r3, #2
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	22fa      	movs	r2, #250	; 0xfa
 80009a8:	491d      	ldr	r1, [pc, #116]	; (8000a20 <main+0x1a0>)
 80009aa:	481e      	ldr	r0, [pc, #120]	; (8000a24 <main+0x1a4>)
 80009ac:	f003 fccc 	bl	8004348 <xTaskCreate>
 80009b0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d00a      	beq.n	80009ce <main+0x14e>
        __asm volatile
 80009b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	603b      	str	r3, [r7, #0]
    }
 80009ca:	bf00      	nop
 80009cc:	e7fe      	b.n	80009cc <main+0x14c>

  lcdInit();
 80009ce:	f7ff ff19 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 80009d2:	f003 feef 	bl	80047b4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x156>
 80009d8:	200000a8 	.word	0x200000a8
 80009dc:	20000100 	.word	0x20000100
 80009e0:	08000ed1 	.word	0x08000ed1
 80009e4:	080092b4 	.word	0x080092b4
 80009e8:	20000104 	.word	0x20000104
 80009ec:	080010b9 	.word	0x080010b9
 80009f0:	080092c0 	.word	0x080092c0
 80009f4:	20000108 	.word	0x20000108
 80009f8:	200000f4 	.word	0x200000f4
 80009fc:	080092cc 	.word	0x080092cc
 8000a00:	08000e99 	.word	0x08000e99
 8000a04:	200000f0 	.word	0x200000f0
 8000a08:	080092e0 	.word	0x080092e0
 8000a0c:	08000e41 	.word	0x08000e41
 8000a10:	200000f8 	.word	0x200000f8
 8000a14:	080092ec 	.word	0x080092ec
 8000a18:	08000ef9 	.word	0x08000ef9
 8000a1c:	200000fc 	.word	0x200000fc
 8000a20:	080092fc 	.word	0x080092fc
 8000a24:	080010e1 	.word	0x080010e1

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2230      	movs	r2, #48	; 0x30
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f007 ffac 	bl	8008994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <SystemClock_Config+0xd4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd4>)
 8000a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a88:	2309      	movs	r3, #9
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a92:	2301      	movs	r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000aa4:	2354      	movs	r3, #84	; 0x54
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aac:	2307      	movs	r3, #7
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 f803 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ac0:	f000 fb5a 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fa65 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aec:	f000 fb44 	bl	8001178 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3750      	adds	r7, #80	; 0x50
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2228      	movs	r2, #40	; 0x28
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 ff37 	bl	8008994 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b28:	4a3a      	ldr	r2, [pc, #232]	; (8000c14 <MX_RTC_Init+0x114>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b34:	227f      	movs	r2, #127	; 0x7f
 8000b36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b50:	482f      	ldr	r0, [pc, #188]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b52:	f001 fd59 	bl	8002608 <HAL_RTC_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 fb0c 	bl	8001178 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4823      	ldr	r0, [pc, #140]	; (8000c10 <MX_RTC_Init+0x110>)
 8000b84:	f001 fdb6 	bl	80026f4 <HAL_RTC_SetTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000b8e:	f000 faf3 	bl	8001178 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_RTC_Init+0x110>)
 8000bb4:	f001 fe96 	bl	80028e4 <HAL_RTC_SetDate>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000bbe:	f000 fadb 	bl	8001178 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_RTC_Init+0x110>)
 8000bfa:	f001 ff46 	bl	8002a8a <HAL_RTC_SetAlarm>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000c04:	f000 fab8 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3740      	adds	r7, #64	; 0x40
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000088 	.word	0x20000088
 8000c14:	40002800 	.word	0x40002800

08000c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <MX_TIM1_Init+0x9c>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c3c:	2254      	movs	r2, #84	; 0x54
 8000c3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c62:	f002 f8f9 	bl	8002e58 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c6c:	f000 fa84 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c7e:	f002 faff 	bl	8003280 <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c88:	f000 fa76 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_TIM1_Init+0x98>)
 8000c9a:	f002 fcfb 	bl	8003694 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ca4:	f000 fa68 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000a8 	.word	0x200000a8
 8000cb4:	40010000 	.word	0x40010000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a56      	ldr	r2, [pc, #344]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b54      	ldr	r3, [pc, #336]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b4d      	ldr	r3, [pc, #308]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a48      	ldr	r2, [pc, #288]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a41      	ldr	r2, [pc, #260]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <MX_GPIO_Init+0x178>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f240 6103 	movw	r1, #1539	; 0x603
 8000d44:	483b      	ldr	r0, [pc, #236]	; (8000e34 <MX_GPIO_Init+0x17c>)
 8000d46:	f000 fe87 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|E_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f248 0110 	movw	r1, #32784	; 0x8010
 8000d50:	4839      	ldr	r0, [pc, #228]	; (8000e38 <MX_GPIO_Init+0x180>)
 8000d52:	f000 fe81 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2181      	movs	r1, #129	; 0x81
 8000d5a:	4838      	ldr	r0, [pc, #224]	; (8000e3c <MX_GPIO_Init+0x184>)
 8000d5c:	f000 fe7c 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	482f      	ldr	r0, [pc, #188]	; (8000e34 <MX_GPIO_Init+0x17c>)
 8000d78:	f000 fcd2 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin BUZZER_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|BUZZER_Pin|GPIO_PIN_10;
 8000d7c:	f240 6303 	movw	r3, #1539	; 0x603
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4827      	ldr	r0, [pc, #156]	; (8000e34 <MX_GPIO_Init+0x17c>)
 8000d96:	f000 fcc3 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000daa:	2307      	movs	r3, #7
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4820      	ldr	r0, [pc, #128]	; (8000e38 <MX_GPIO_Init+0x180>)
 8000db6:	f000 fcb3 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|E_Pin;
 8000dba:	f248 0310 	movw	r3, #32784	; 0x8010
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4819      	ldr	r0, [pc, #100]	; (8000e38 <MX_GPIO_Init+0x180>)
 8000dd4:	f000 fca4 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = INC_Pin|DEC_Pin;
 8000dd8:	2360      	movs	r3, #96	; 0x60
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_GPIO_Init+0x180>)
 8000dec:	f000 fc98 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000df0:	2381      	movs	r3, #129	; 0x81
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_GPIO_Init+0x184>)
 8000e08:	f000 fc8a 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|SELECT_Pin;
 8000e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_GPIO_Init+0x184>)
 8000e22:	f000 fc7d 	bl	8001720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	; 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020400 	.word	0x40020400

08000e40 <printTaskHandler>:

/* USER CODE BEGIN 4 */

	void printTaskHandler(void *parameters){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
		uint32_t *str;

		while(1){
			/* print top row */
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <printTaskHandler+0x54>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f107 010c 	add.w	r1, r7, #12
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 f805 	bl	8003e64 <xQueueReceive>
			lcdClear();
 8000e5a:	f7ff fca8 	bl	80007ae <lcdClear>
			lcdMoveCursor(0, 0);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fc81 	bl	8000768 <lcdMoveCursor>
			lcdSendString( (char*) str );
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fcab 	bl	80007c4 <lcdSendString>

			/* print bottom row */
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <printTaskHandler+0x54>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f107 010c 	add.w	r1, r7, #12
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fff2 	bl	8003e64 <xQueueReceive>
			lcdMoveCursor(1, 0);
 8000e80:	2100      	movs	r1, #0
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff fc70 	bl	8000768 <lcdMoveCursor>
			lcdSendString( (char*) str );
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fc9a 	bl	80007c4 <lcdSendString>
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY);
 8000e90:	e7da      	b.n	8000e48 <printTaskHandler+0x8>
 8000e92:	bf00      	nop
 8000e94:	20000100 	.word	0x20000100

08000e98 <startTimerTaskHandler>:
		}
	}

	void startTimerTaskHandler(void *parameters){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
		while(1){
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <startTimerTaskHandler+0x30>)
 8000ea2:	681c      	ldr	r4, [r3, #0]
 8000ea4:	f003 fdf6 	bl	8004a94 <xTaskGetTickCount>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f004 fdb1 	bl	8005a1c <xTimerGenericCommand>
			vTaskSuspend(startTimerTaskHandle);
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <startTimerTaskHandler+0x34>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 fbca 	bl	8004658 <vTaskSuspend>
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000ec4:	e7ec      	b.n	8000ea0 <startTimerTaskHandler+0x8>
 8000ec6:	bf00      	nop
 8000ec8:	20000104 	.word	0x20000104
 8000ecc:	200000f4 	.word	0x200000f4

08000ed0 <rtcUpdateTimerCallback>:
		}
	}

	void rtcUpdateTimerCallback(TimerHandle_t xTimer){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
		xTaskNotify(rtcUpdateTaskHandle, 0, eNoAction);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <rtcUpdateTimerCallback+0x24>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	f004 fb59 	bl	800559c <xTaskGenericNotify>
	}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000f8 	.word	0x200000f8

08000ef8 <rtcUpdateTaskHandler>:

	void rtcUpdateTaskHandler(void *parameters){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	; 0x30
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
		static char strBuffer[40];
		static char *str = strBuffer;

		while(1){
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f004 fabd 	bl	800548c <xTaskGenericNotifyWait>

			RTC_DateTypeDef rtcDate;
			RTC_TimeTypeDef rtcTime;

			memset(&rtcDate,0,sizeof(rtcDate));
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2204      	movs	r2, #4
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 fd3a 	bl	8008994 <memset>
			memset(&rtcTime,0,sizeof(rtcTime));
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2214      	movs	r2, #20
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fd33 	bl	8008994 <memset>

			HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	482a      	ldr	r0, [pc, #168]	; (8000fe0 <rtcUpdateTaskHandler+0xe8>)
 8000f38:	f001 fc76 	bl	8002828 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4826      	ldr	r0, [pc, #152]	; (8000fe0 <rtcUpdateTaskHandler+0xe8>)
 8000f46:	f001 fd51 	bl	80029ec <HAL_RTC_GetDate>

			char *format;
			format = (rtcTime.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <rtcUpdateTaskHandler+0x5c>
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <rtcUpdateTaskHandler+0xec>)
 8000f52:	e000      	b.n	8000f56 <rtcUpdateTaskHandler+0x5e>
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <rtcUpdateTaskHandler+0xf0>)
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24

			memset(&strBuffer, 0, sizeof(strBuffer) );
 8000f58:	2228      	movs	r2, #40	; 0x28
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4823      	ldr	r0, [pc, #140]	; (8000fec <rtcUpdateTaskHandler+0xf4>)
 8000f5e:	f007 fd19 	bl	8008994 <memset>

			sprintf( (char*) strBuffer, "%02d:%02d:%02d [%s]",rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds, format);
 8000f62:	7b3b      	ldrb	r3, [r7, #12]
 8000f64:	4619      	mov	r1, r3
 8000f66:	7b7b      	ldrb	r3, [r7, #13]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	4603      	mov	r3, r0
 8000f76:	460a      	mov	r2, r1
 8000f78:	491d      	ldr	r1, [pc, #116]	; (8000ff0 <rtcUpdateTaskHandler+0xf8>)
 8000f7a:	481c      	ldr	r0, [pc, #112]	; (8000fec <rtcUpdateTaskHandler+0xf4>)
 8000f7c:	f007 fcda 	bl	8008934 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(str);
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <rtcUpdateTaskHandler+0xfc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f007 fc65 	bl	8008854 <SEGGER_SYSVIEW_PrintfTarget>
			xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <rtcUpdateTaskHandler+0x100>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	4917      	ldr	r1, [pc, #92]	; (8000ff4 <rtcUpdateTaskHandler+0xfc>)
 8000f96:	f002 fdb5 	bl	8003b04 <xQueueGenericSend>

			memset(&strBuffer, 0, sizeof(strBuffer) );
 8000f9a:	2228      	movs	r2, #40	; 0x28
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4813      	ldr	r0, [pc, #76]	; (8000fec <rtcUpdateTaskHandler+0xf4>)
 8000fa0:	f007 fcf8 	bl	8008994 <memset>
			sprintf( (char*) strBuffer, "%02d-%02d-%2d", rtcDate.Month, rtcDate.Date, 2000 + rtcDate.Year);
 8000fa4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fb4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	490f      	ldr	r1, [pc, #60]	; (8000ffc <rtcUpdateTaskHandler+0x104>)
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <rtcUpdateTaskHandler+0xf4>)
 8000fc0:	f007 fcb8 	bl	8008934 <siprintf>
			SEGGER_SYSVIEW_PrintfTarget(str);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <rtcUpdateTaskHandler+0xfc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 fc43 	bl	8008854 <SEGGER_SYSVIEW_PrintfTarget>
			xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <rtcUpdateTaskHandler+0x100>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	4906      	ldr	r1, [pc, #24]	; (8000ff4 <rtcUpdateTaskHandler+0xfc>)
 8000fda:	f002 fd93 	bl	8003b04 <xQueueGenericSend>
		while(1){
 8000fde:	e78f      	b.n	8000f00 <rtcUpdateTaskHandler+0x8>
 8000fe0:	20000088 	.word	0x20000088
 8000fe4:	0800930c 	.word	0x0800930c
 8000fe8:	08009310 	.word	0x08009310
 8000fec:	2000010c 	.word	0x2000010c
 8000ff0:	08009314 	.word	0x08009314
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000100 	.word	0x20000100
 8000ffc:	08009328 	.word	0x08009328

08001000 <vApplicationIdleHook>:

		}
	}

	void vApplicationIdleHook(void){
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b083      	sub	sp, #12
 8001004:	af02      	add	r7, sp, #8
		if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <vApplicationIdleHook+0xa8>)
 800100c:	f000 fd0c 	bl	8001a28 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d143      	bne.n	800109e <vApplicationIdleHook+0x9e>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <vApplicationIdleHook+0xac>)
 800101c:	f000 fd35 	bl	8001a8a <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8001020:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001024:	f000 fa76 	bl	8001514 <HAL_Delay>

			if (xTimerIsTimerActive(rtcUpdateTimerHandle) == pdTRUE){
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <vApplicationIdleHook+0xb0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f004 ff95 	bl	8005f5c <xTimerIsTimerActive>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d115      	bne.n	8001064 <vApplicationIdleHook+0x64>
				xTimerStop(rtcUpdateTimerHandle, 0);
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <vApplicationIdleHook+0xb0>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	2300      	movs	r3, #0
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2300      	movs	r3, #0
 8001042:	2200      	movs	r2, #0
 8001044:	2103      	movs	r1, #3
 8001046:	f004 fce9 	bl	8005a1c <xTimerGenericCommand>
				xTimerStart(alarmSetTimerHandle, 0);
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <vApplicationIdleHook+0xb4>)
 800104c:	681c      	ldr	r4, [r3, #0]
 800104e:	f003 fd21 	bl	8004a94 <xTaskGetTickCount>
 8001052:	4602      	mov	r2, r0
 8001054:	2300      	movs	r3, #0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	2101      	movs	r1, #1
 800105c:	4620      	mov	r0, r4
 800105e:	f004 fcdd 	bl	8005a1c <xTimerGenericCommand>
				xTimerStop(alarmSetTimerHandle, 0);
				xTimerStart(rtcUpdateTimerHandle, 0);
			}

		}
	}
 8001062:	e01c      	b.n	800109e <vApplicationIdleHook+0x9e>
			else if (xTimerIsTimerActive(alarmSetTimerHandle) == pdTRUE){
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <vApplicationIdleHook+0xb4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f004 ff77 	bl	8005f5c <xTimerIsTimerActive>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d114      	bne.n	800109e <vApplicationIdleHook+0x9e>
				xTimerStop(alarmSetTimerHandle, 0);
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <vApplicationIdleHook+0xb4>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2300      	movs	r3, #0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	2103      	movs	r1, #3
 8001082:	f004 fccb 	bl	8005a1c <xTimerGenericCommand>
				xTimerStart(rtcUpdateTimerHandle, 0);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <vApplicationIdleHook+0xb0>)
 8001088:	681c      	ldr	r4, [r3, #0]
 800108a:	f003 fd03 	bl	8004a94 <xTaskGetTickCount>
 800108e:	4602      	mov	r2, r0
 8001090:	2300      	movs	r3, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	2101      	movs	r1, #1
 8001098:	4620      	mov	r0, r4
 800109a:	f004 fcbf 	bl	8005a1c <xTimerGenericCommand>
	}
 800109e:	bf00      	nop
 80010a0:	3704      	adds	r7, #4
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	20000104 	.word	0x20000104
 80010b4:	20000108 	.word	0x20000108

080010b8 <alarmSetTimerCallback>:

	void alarmSetTimerCallback(TimerHandle_t xTimer){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
		xTaskNotify(alarmSetTaskHandle, 0, eNoAction);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <alarmSetTimerCallback+0x24>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	2300      	movs	r3, #0
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	f004 fa65 	bl	800559c <xTaskGenericNotify>
	}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000fc 	.word	0x200000fc

080010e0 <alarmSetTaskHandler>:

	void alarmSetTaskHandler(void *parameters){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
		static char strBuffer[40];
		static char *str = strBuffer;

		while(1){
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f004 f9c9 	bl	800548c <xTaskGenericNotifyWait>

			memset(&strBuffer, 0, sizeof(strBuffer) );
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4810      	ldr	r0, [pc, #64]	; (8001140 <alarmSetTaskHandler+0x60>)
 8001100:	f007 fc48 	bl	8008994 <memset>
			sprintf( (char*) strBuffer, "Alarm" );
 8001104:	490f      	ldr	r1, [pc, #60]	; (8001144 <alarmSetTaskHandler+0x64>)
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <alarmSetTaskHandler+0x60>)
 8001108:	f007 fc14 	bl	8008934 <siprintf>
			xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <alarmSetTaskHandler+0x68>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	2300      	movs	r3, #0
 8001112:	f04f 32ff 	mov.w	r2, #4294967295
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <alarmSetTaskHandler+0x6c>)
 8001118:	f002 fcf4 	bl	8003b04 <xQueueGenericSend>

			memset(&strBuffer, 0, sizeof(strBuffer) );
 800111c:	2228      	movs	r2, #40	; 0x28
 800111e:	2100      	movs	r1, #0
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <alarmSetTaskHandler+0x60>)
 8001122:	f007 fc37 	bl	8008994 <memset>
			sprintf( (char*) strBuffer, "Mode" );
 8001126:	490a      	ldr	r1, [pc, #40]	; (8001150 <alarmSetTaskHandler+0x70>)
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <alarmSetTaskHandler+0x60>)
 800112a:	f007 fc03 	bl	8008934 <siprintf>
			xQueueSend(printQueueHandle, &str , portMAX_DELAY);
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <alarmSetTaskHandler+0x68>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	4904      	ldr	r1, [pc, #16]	; (800114c <alarmSetTaskHandler+0x6c>)
 800113a:	f002 fce3 	bl	8003b04 <xQueueGenericSend>
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800113e:	e7d3      	b.n	80010e8 <alarmSetTaskHandler+0x8>
 8001140:	20000134 	.word	0x20000134
 8001144:	08009338 	.word	0x08009338
 8001148:	20000100 	.word	0x20000100
 800114c:	20000004 	.word	0x20000004
 8001150:	08009340 	.word	0x08009340

08001154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001166:	f000 f9b5 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40000c00 	.word	0x40000c00

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_MspInit+0x50>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_MspInit+0x50>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_MspInit+0x50>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_MspInit+0x50>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_MspInit+0x50>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <HAL_MspInit+0x50>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 fa77 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>
  vInitPrioGroupValue();
 80011c8:	f005 f81e 	bl	8006208 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_RTC_MspInit+0x50>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d111      	bne.n	800121e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001202:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4618      	mov	r0, r3
 800120a:	f001 f90f 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001214:	f7ff ffb0 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_RTC_MspInit+0x54>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40002800 	.word	0x40002800
 800122c:	42470e3c 	.word	0x42470e3c

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x3c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10d      	bne.n	800125e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_Base_MspInit+0x40>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_TIM_Base_MspInit+0x40>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <HAL_TIM_Base_MspInit+0x40>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_InitTick+0xe4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a32      	ldr	r2, [pc, #200]	; (8001358 <HAL_InitTick+0xe4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_InitTick+0xe4>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a0:	f107 0210 	add.w	r2, r7, #16
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 f88c 	bl	80023c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d103      	bne.n	80012c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012ba:	f001 f871 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80012be:	6378      	str	r0, [r7, #52]	; 0x34
 80012c0:	e004      	b.n	80012cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012c2:	f001 f86d 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80012c6:	4603      	mov	r3, r0
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <HAL_InitTick+0xe8>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	3b01      	subs	r3, #1
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <HAL_InitTick+0xec>)
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <HAL_InitTick+0xf0>)
 80012de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_InitTick+0xec>)
 80012e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_InitTick+0xec>)
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_InitTick+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_InitTick+0xec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_InitTick+0xec>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001300:	4817      	ldr	r0, [pc, #92]	; (8001360 <HAL_InitTick+0xec>)
 8001302:	f001 fda9 	bl	8002e58 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800130c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001310:	2b00      	cmp	r3, #0
 8001312:	d11b      	bne.n	800134c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <HAL_InitTick+0xec>)
 8001316:	f001 fe49 	bl	8002fac <HAL_TIM_Base_Start_IT>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001320:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001324:	2b00      	cmp	r3, #0
 8001326:	d111      	bne.n	800134c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001328:	2032      	movs	r0, #50	; 0x32
 800132a:	f000 f9eb 	bl	8001704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d808      	bhi.n	8001346 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f000 f9c7 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_InitTick+0xf4>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e002      	b.n	800134c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800134c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001350:	4618      	mov	r0, r3
 8001352:	3738      	adds	r7, #56	; 0x38
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	431bde83 	.word	0x431bde83
 8001360:	2000015c 	.word	0x2000015c
 8001364:	40000c00 	.word	0x40000c00
 8001368:	2000000c 	.word	0x2000000c

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM5_IRQHandler+0x10>)
 800139e:	f001 fe67 	bl	8003070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000015c 	.word	0x2000015c

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f007 fae2 	bl	80089a4 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20018000 	.word	0x20018000
 800140c:	00000400 	.word	0x00000400
 8001410:	200001a4 	.word	0x200001a4
 8001414:	20014730 	.word	0x20014730

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f007 faa1 	bl	80089b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fa07 	bl	8000880 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001474:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001480:	080094a0 	.word	0x080094a0
  ldr r2, =_sbss
 8001484:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001488:	2001472c 	.word	0x2001472c

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f8fc 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fed8 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe5e 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000010 	.word	0x20000010
 80014f8:	200001a8 	.word	0x200001a8

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200001a8 	.word	0x200001a8

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000010 	.word	0x20000010

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e159      	b.n	80019f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8148 	bne.w	80019ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a2 	beq.w	80019ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a49      	ldr	r2, [pc, #292]	; (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x202>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x1fe>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a47      	ldr	r2, [pc, #284]	; (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x1fa>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <HAL_GPIO_Init+0x2fc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x1f6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_GPIO_Init+0x300>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x1f2>
 800190e:	2304      	movs	r3, #4
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001912:	2307      	movs	r3, #7
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	; (8001a0c <HAL_GPIO_Init+0x2ec>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001966:	4a2f      	ldr	r2, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_GPIO_Init+0x304>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001990:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_GPIO_Init+0x304>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ba:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f aea2 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b82      	ldr	r3, [pc, #520]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b7e      	ldr	r3, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fcc0 	bl	80014fc <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fcbc 	bl	80014fc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fcac 	bl	80014fc <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fca8 	bl	80014fc <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fc61 	bl	80014fc <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fc5d 	bl	80014fc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fc40 	bl	80014fc <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fc3c 	bl	80014fc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc20 	bl	80014fc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc1c 	bl	80014fc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fc09 	bl	80014fc <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fc05 	bl	80014fc <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fbc5 	bl	80014fc <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fbc1 	bl	80014fc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fb86 	bl	80014fc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fb82 	bl	80014fc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb70 	bl	80014fc <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb6c 	bl	80014fc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fb40 	bl	80014fc <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fb3c 	bl	80014fc <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb15 	bl	80014fc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fb11 	bl	80014fc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fafe 	bl	80014fc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fafa 	bl	80014fc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff fa2c 	bl	80014fc <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff fa28 	bl	80014fc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f88c 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	08009420 	.word	0x08009420
 8002174:	20000008 	.word	0x20000008
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b094      	sub	sp, #80	; 0x50
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80e1 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e0db      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80021b4:	e0db      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021ba:	e0d8      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
 80021dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
 80021ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4621      	mov	r1, r4
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	6139      	str	r1, [r7, #16]
 800220c:	4629      	mov	r1, r5
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	ebb2 0801 	subs.w	r8, r2, r1
 8002234:	4659      	mov	r1, fp
 8002236:	eb63 0901 	sbc.w	r9, r3, r1
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	4623      	mov	r3, r4
 8002254:	eb18 0303 	adds.w	r3, r8, r3
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	462b      	mov	r3, r5
 800225c:	eb49 0303 	adc.w	r3, r9, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226e:	4629      	mov	r1, r5
 8002270:	024b      	lsls	r3, r1, #9
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002278:	4621      	mov	r1, r4
 800227a:	024a      	lsls	r2, r1, #9
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
 8002286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800228c:	f7fe f850 	bl	8000330 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002298:	e058      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0159      	lsls	r1, r3, #5
 80022c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c6:	0150      	lsls	r0, r2, #5
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4641      	mov	r1, r8
 80022ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ec:	ebb2 040a 	subs.w	r4, r2, sl
 80022f0:	eb63 050b 	sbc.w	r5, r3, fp
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	464b      	mov	r3, r9
 8002310:	eb45 0303 	adc.w	r3, r5, r3
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	61fa      	str	r2, [r7, #28]
 800233c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002340:	f7fd fff6 	bl	8000330 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800235c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 800236a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002370:	4618      	mov	r0, r3
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000008 	.word	0x20000008

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08009430 	.word	0x08009430

080023c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	220f      	movs	r2, #15
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <HAL_RCC_GetClockConfig+0x60>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0207 	and.w	r2, r3, #7
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002450:	2b00      	cmp	r3, #0
 8002452:	d035      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002454:	4b67      	ldr	r3, [pc, #412]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800245a:	f7ff f84f 	bl	80014fc <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002462:	f7ff f84b 	bl	80014fc <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0ba      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002474:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	019a      	lsls	r2, r3, #6
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	071b      	lsls	r3, r3, #28
 800248c:	495a      	ldr	r1, [pc, #360]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002494:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800249a:	f7ff f82f 	bl	80014fc <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024a2:	f7ff f82b 	bl	80014fc <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e09a      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8083 	beq.w	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a43      	ldr	r2, [pc, #268]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024f6:	f7ff f801 	bl	80014fc <HAL_GetTick>
 80024fa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fffd 	bl	80014fc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e06c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002510:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002524:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	d028      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002542:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800254a:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002550:	4a29      	ldr	r2, [pc, #164]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d114      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe ffcb 	bl	80014fc <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe ffc7 	bl	80014fc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e034      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ee      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002598:	d10d      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ae:	4912      	ldr	r1, [pc, #72]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
 80025b4:	e005      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025c0:	6093      	str	r3, [r2, #8]
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ce:	490a      	ldr	r1, [pc, #40]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7c1a      	ldrb	r2, [r3, #16]
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025e6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	42470068 	.word	0x42470068
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470e40 	.word	0x42470e40
 8002604:	424711e0 	.word	0x424711e0

08002608 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e066      	b.n	80026ec <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7f5b      	ldrb	r3, [r3, #29]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fdd2 	bl	80011d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	22ca      	movs	r2, #202	; 0xca
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2253      	movs	r2, #83	; 0x53
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fb6f 	bl	8002d2e <RTC_EnterInitMode>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d12c      	bne.n	80026b4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68d2      	ldr	r2, [r2, #12]
 8002694:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fb76 	bl	8002d9c <RTC_ExitInitMode>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	7f1b      	ldrb	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_RTC_SetTime+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e087      	b.n	8002820 <HAL_RTC_SetTime+0x12c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2202      	movs	r2, #2
 800271a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d126      	bne.n	8002770 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fb53 	bl	8002de6 <RTC_ByteToBcd2>
 8002740:	4603      	mov	r3, r0
 8002742:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fb4c 	bl	8002de6 <RTC_ByteToBcd2>
 800274e:	4603      	mov	r3, r0
 8002750:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002752:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fb44 	bl	8002de6 <RTC_ByteToBcd2>
 800275e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002760:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	78db      	ldrb	r3, [r3, #3]
 8002768:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e018      	b.n	80027a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002790:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002796:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	78db      	ldrb	r3, [r3, #3]
 800279c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22ca      	movs	r2, #202	; 0xca
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2253      	movs	r2, #83	; 0x53
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fabb 	bl	8002d2e <RTC_EnterInitMode>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d120      	bne.n	8002804 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027cc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80027d0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6899      	ldr	r1, [r3, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 face 	bl	8002d9c <RTC_ExitInitMode>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22ff      	movs	r2, #255	; 0xff
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	771a      	strb	r2, [r3, #28]

  return status;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800285a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800285e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287a:	b2da      	uxtb	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	0d9b      	lsrs	r3, r3, #22
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11a      	bne.n	80028da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fab9 	bl	8002e20 <RTC_Bcd2ToByte>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fab0 	bl	8002e20 <RTC_Bcd2ToByte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 faa7 	bl	8002e20 <RTC_Bcd2ToByte>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	7f1b      	ldrb	r3, [r3, #28]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_RTC_SetDate+0x1c>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e071      	b.n	80029e4 <HAL_RTC_SetDate+0x100>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2202      	movs	r2, #2
 800290a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_RTC_SetDate+0x4c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	f023 0310 	bic.w	r3, r3, #16
 8002926:	b2db      	uxtb	r3, r3
 8002928:	330a      	adds	r3, #10
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d11c      	bne.n	8002970 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	78db      	ldrb	r3, [r3, #3]
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fa53 	bl	8002de6 <RTC_ByteToBcd2>
 8002940:	4603      	mov	r3, r0
 8002942:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa4c 	bl	8002de6 <RTC_ByteToBcd2>
 800294e:	4603      	mov	r3, r0
 8002950:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002952:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	789b      	ldrb	r3, [r3, #2]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fa44 	bl	8002de6 <RTC_ByteToBcd2>
 800295e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002960:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e00e      	b.n	800298e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	78db      	ldrb	r3, [r3, #3]
 8002974:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800297c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002982:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	22ca      	movs	r2, #202	; 0xca
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2253      	movs	r2, #83	; 0x53
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f9c5 	bl	8002d2e <RTC_EnterInitMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f9ec 	bl	8002d9c <RTC_ExitInitMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	771a      	strb	r2, [r3, #28]

  return status;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}

080029ec <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11a      	bne.n	8002a80 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	78db      	ldrb	r3, [r3, #3]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f9e6 	bl	8002e20 <RTC_Bcd2ToByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f9dd 	bl	8002e20 <RTC_Bcd2ToByte>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	789b      	ldrb	r3, [r3, #2]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f9d4 	bl	8002e20 <RTC_Bcd2ToByte>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a8a:	b590      	push	{r4, r7, lr}
 8002a8c:	b089      	sub	sp, #36	; 0x24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7f1b      	ldrb	r3, [r3, #28]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_RTC_SetAlarm+0x24>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e113      	b.n	8002cd6 <HAL_RTC_SetAlarm+0x24c>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d137      	bne.n	8002b30 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f984 	bl	8002de6 <RTC_ByteToBcd2>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f97d 	bl	8002de6 <RTC_ByteToBcd2>
 8002aec:	4603      	mov	r3, r0
 8002aee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002af0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	789b      	ldrb	r3, [r3, #2]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f975 	bl	8002de6 <RTC_ByteToBcd2>
 8002afc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002afe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	78db      	ldrb	r3, [r3, #3]
 8002b06:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002b08:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f967 	bl	8002de6 <RTC_ByteToBcd2>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002b1c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002b24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e023      	b.n	8002b78 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002b50:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002b56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	78db      	ldrb	r3, [r3, #3]
 8002b5c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002b5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b66:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002b68:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002b6e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	22ca      	movs	r2, #202	; 0xca
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2253      	movs	r2, #83	; 0x53
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9c:	d148      	bne.n	8002c30 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bac:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bbc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002bce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fc94 	bl	80014fc <HAL_GetTick>
 8002bd4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002bd6:	e013      	b.n	8002c00 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bd8:	f7fe fc90 	bl	80014fc <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be6:	d90b      	bls.n	8002c00 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e06a      	b.n	8002cd6 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0e4      	beq.n	8002bd8 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2c:	609a      	str	r2, [r3, #8]
 8002c2e:	e047      	b.n	8002cc0 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c3e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002c60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c62:	f7fe fc4b 	bl	80014fc <HAL_GetTick>
 8002c66:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c68:	e013      	b.n	8002c92 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c6a:	f7fe fc47 	bl	80014fc <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c78:	d90b      	bls.n	8002c92 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2203      	movs	r2, #3
 8002c86:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e021      	b.n	8002cd6 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0e4      	beq.n	8002c6a <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	22ff      	movs	r2, #255	; 0xff
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}

08002cde <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cfa:	f7fe fbff 	bl	80014fc <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d00:	e009      	b.n	8002d16 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d02:	f7fe fbfb 	bl	80014fc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d10:	d901      	bls.n	8002d16 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e007      	b.n	8002d26 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ee      	beq.n	8002d02 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d122      	bne.n	8002d92 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fbce 	bl	80014fc <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d62:	e00c      	b.n	8002d7e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d64:	f7fe fbca 	bl	80014fc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d72:	d904      	bls.n	8002d7e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2204      	movs	r2, #4
 8002d78:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <RTC_EnterInitMode+0x64>
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d1e8      	bne.n	8002d64 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ff89 	bl	8002cde <HAL_RTC_WaitForSynchro>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002df4:	e005      	b.n	8002e02 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	3b0a      	subs	r3, #10
 8002e00:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d8f6      	bhi.n	8002df6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b2db      	uxtb	r3, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e041      	b.n	8002eee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe f9d6 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 fae2 	bl	8003460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e03c      	b.n	8002f8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_TIM_Base_Start+0xa0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d013      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_TIM_Base_Start+0xa4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_Base_Start+0xa8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_TIM_Base_Start+0xac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_TIM_Base_Start+0x5c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_TIM_Base_Start+0xb0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d010      	beq.n	8002f88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	e007      	b.n	8002f88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40014000 	.word	0x40014000

08002fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e044      	b.n	800304e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_TIM_Base_Start_IT+0xb0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x6c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fee:	d013      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x6c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x6c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_TIM_Base_Start_IT+0xb8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x6c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_TIM_Base_Start_IT+0xbc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x6c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_TIM_Base_Start_IT+0xc0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d010      	beq.n	800304c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800303a:	e007      	b.n	800304c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40014000 	.word	0x40014000

08003070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b02      	cmp	r3, #2
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0202 	mvn.w	r2, #2
 800309c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9b5 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9a7 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f9b8 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0204 	mvn.w	r2, #4
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f98b 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f97d 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f98e 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b08      	cmp	r3, #8
 800312c:	d122      	bne.n	8003174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b08      	cmp	r3, #8
 800313a:	d11b      	bne.n	8003174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0208 	mvn.w	r2, #8
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2204      	movs	r2, #4
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f961 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f953 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f964 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b10      	cmp	r3, #16
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b10      	cmp	r3, #16
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0210 	mvn.w	r2, #16
 8003198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2208      	movs	r2, #8
 800319e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f937 	bl	8003422 <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f929 	bl	800340e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f93a 	bl	8003436 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0201 	mvn.w	r2, #1
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd ffb0 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b80      	cmp	r3, #128	; 0x80
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fab2 	bl	8003784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b40      	cmp	r3, #64	; 0x40
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8ff 	bl	800344a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b20      	cmp	r3, #32
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0220 	mvn.w	r2, #32
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa7c 	bl	8003770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIM_ConfigClockSource+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e0b4      	b.n	8003406 <HAL_TIM_ConfigClockSource+0x186>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d4:	d03e      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0xd4>
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032da:	f200 8087 	bhi.w	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	f000 8086 	beq.w	80033f2 <HAL_TIM_ConfigClockSource+0x172>
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	d87f      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d01a      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0xa6>
 80032f0:	2b70      	cmp	r3, #112	; 0x70
 80032f2:	d87b      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b60      	cmp	r3, #96	; 0x60
 80032f6:	d050      	beq.n	800339a <HAL_TIM_ConfigClockSource+0x11a>
 80032f8:	2b60      	cmp	r3, #96	; 0x60
 80032fa:	d877      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b50      	cmp	r3, #80	; 0x50
 80032fe:	d03c      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xfa>
 8003300:	2b50      	cmp	r3, #80	; 0x50
 8003302:	d873      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d058      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x13a>
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d86f      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b30      	cmp	r3, #48	; 0x30
 800330e:	d064      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b30      	cmp	r3, #48	; 0x30
 8003312:	d86b      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d060      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b20      	cmp	r3, #32
 800331a:	d867      	bhi.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05c      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x15a>
 8003320:	2b10      	cmp	r3, #16
 8003322:	d05a      	beq.n	80033da <HAL_TIM_ConfigClockSource+0x15a>
 8003324:	e062      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f000 f98d 	bl	8003654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	609a      	str	r2, [r3, #8]
      break;
 8003352:	e04f      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f000 f976 	bl	8003654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003376:	609a      	str	r2, [r3, #8]
      break;
 8003378:	e03c      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	461a      	mov	r2, r3
 8003388:	f000 f8ea 	bl	8003560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2150      	movs	r1, #80	; 0x50
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f943 	bl	800361e <TIM_ITRx_SetConfig>
      break;
 8003398:	e02c      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f000 f909 	bl	80035be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2160      	movs	r1, #96	; 0x60
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f933 	bl	800361e <TIM_ITRx_SetConfig>
      break;
 80033b8:	e01c      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f000 f8ca 	bl	8003560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f923 	bl	800361e <TIM_ITRx_SetConfig>
      break;
 80033d8:	e00c      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f000 f91a 	bl	800361e <TIM_ITRx_SetConfig>
      break;
 80033ea:	e003      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e000      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a34      	ldr	r2, [pc, #208]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00f      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347e:	d00b      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a31      	ldr	r2, [pc, #196]	; (8003548 <TIM_Base_SetConfig+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a30      	ldr	r2, [pc, #192]	; (800354c <TIM_Base_SetConfig+0xec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_Base_SetConfig+0x38>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <TIM_Base_SetConfig+0xf0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d108      	bne.n	80034aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a25      	ldr	r2, [pc, #148]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01b      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d017      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <TIM_Base_SetConfig+0xe8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <TIM_Base_SetConfig+0xec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00f      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a20      	ldr	r2, [pc, #128]	; (8003550 <TIM_Base_SetConfig+0xf0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <TIM_Base_SetConfig+0xf4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <TIM_Base_SetConfig+0xf8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <TIM_Base_SetConfig+0xfc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <TIM_Base_SetConfig+0xe4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40010000 	.word	0x40010000
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800

08003560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f023 0201 	bic.w	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 030a 	bic.w	r3, r3, #10
 800359c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035be:	b480      	push	{r7}
 80035c0:	b087      	sub	sp, #28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0210 	bic.w	r2, r3, #16
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	031b      	lsls	r3, r3, #12
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	f043 0307 	orr.w	r3, r3, #7
 8003640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	431a      	orrs	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	609a      	str	r2, [r3, #8]
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e050      	b.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d018      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f8:	d013      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00e      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d009      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d004      	beq.n	8003722 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10c      	bne.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000

08003770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f103 0208 	add.w	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f103 0208 	add.w	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f103 0208 	add.w	r2, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d103      	bne.n	800385a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e00c      	b.n	8003874 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3308      	adds	r3, #8
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e002      	b.n	8003868 <vListInsert+0x2e>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d2f6      	bcs.n	8003862 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d103      	bne.n	80038e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xQueueGenericReset+0x2e>
        __asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
    }
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05d      	beq.n	80039f0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d059      	beq.n	80039f0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	2100      	movs	r1, #0
 8003946:	fba3 2302 	umull	r2, r3, r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d000      	beq.n	8003950 <xQueueGenericReset+0x50>
 800394e:	2101      	movs	r1, #1
 8003950:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003952:	2b00      	cmp	r3, #0
 8003954:	d14c      	bne.n	80039f0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003956:	f002 fcd5 	bl	8006304 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	441a      	add	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2200      	movs	r2, #0
 8003974:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	3b01      	subs	r3, #1
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	441a      	add	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	22ff      	movs	r2, #255	; 0xff
 800399a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d114      	bne.n	80039d6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3310      	adds	r3, #16
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fa89 	bl	8004ed0 <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <xQueueGenericReset+0x11c>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	e009      	b.n	80039ea <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	3310      	adds	r3, #16
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fedc 	bl	8003798 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3324      	adds	r3, #36	; 0x24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fed7 	bl	8003798 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80039ea:	f002 fcbb 	bl	8006364 <vPortExitCritical>
 80039ee:	e001      	b.n	80039f4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <xQueueGenericReset+0x110>
        __asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60bb      	str	r3, [r7, #8]
    }
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003a10:	697b      	ldr	r3, [r7, #20]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02e      	beq.n	8003a96 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a38:	2100      	movs	r1, #0
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d000      	beq.n	8003a48 <xQueueGenericCreate+0x28>
 8003a46:	2101      	movs	r1, #1
 8003a48:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d123      	bne.n	8003a96 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a56:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003a5a:	d81c      	bhi.n	8003a96 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3350      	adds	r3, #80	; 0x50
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fd6e 	bl	800654c <pvPortMalloc>
 8003a70:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01c      	beq.n	8003ab2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3350      	adds	r3, #80	; 0x50
 8003a80:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a82:	79fa      	ldrb	r2, [r7, #7]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f814 	bl	8003abc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003a94:	e00d      	b.n	8003ab2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericCreate+0x92>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
    }
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d103      	bne.n	8003ad8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aea:	2101      	movs	r1, #1
 8003aec:	69b8      	ldr	r0, [r7, #24]
 8003aee:	f7ff ff07 	bl	8003900 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	; 0x38
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10a      	bne.n	8003b36 <xQueueGenericSend+0x32>
        __asm volatile
 8003b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b32:	bf00      	nop
 8003b34:	e7fe      	b.n	8003b34 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d103      	bne.n	8003b44 <xQueueGenericSend+0x40>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericSend+0x44>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueGenericSend+0x46>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <xQueueGenericSend+0x60>
        __asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSend+0x6e>
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <xQueueGenericSend+0x72>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueGenericSend+0x74>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <xQueueGenericSend+0x8e>
        __asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	623b      	str	r3, [r7, #32]
    }
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b92:	f001 fbb1 	bl	80052f8 <xTaskGetSchedulerState>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <xQueueGenericSend+0x9e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <xQueueGenericSend+0xa2>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <xQueueGenericSend+0xa4>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <xQueueGenericSend+0xbe>
        __asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	61fb      	str	r3, [r7, #28]
    }
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003bc2:	f002 fb9f 	bl	8006304 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xQueueGenericSend+0xd4>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d129      	bne.n	8003c2c <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bde:	f000 fa21 	bl	8004024 <prvCopyDataToQueue>
 8003be2:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	3324      	adds	r3, #36	; 0x24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f96d 	bl	8004ed0 <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	; (8003cfc <xQueueGenericSend+0x1f8>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	e00a      	b.n	8003c24 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <xQueueGenericSend+0x1f8>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c24:	f002 fb9e 	bl	8006364 <vPortExitCritical>
                return pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e063      	b.n	8003cf4 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c32:	f002 fb97 	bl	8006364 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e05c      	b.n	8003cf4 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fa1b 	bl	8005080 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c4e:	f002 fb89 	bl	8006364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c52:	f000 fe11 	bl	8004878 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c56:	f002 fb55 	bl	8006304 <vPortEnterCritical>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueGenericSend+0x16c>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x182>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c86:	f002 fb6d 	bl	8006364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8a:	1d3a      	adds	r2, r7, #4
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fa0a 	bl	80050ac <xTaskCheckForTimeOut>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca0:	f000 fab8 	bl	8004214 <prvIsQueueFull>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f8a0 	bl	8004df8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 fa43 	bl	8004144 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f000 fde9 	bl	8004894 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af7c 	bne.w	8003bc2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <xQueueGenericSend+0x1f8>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	e772      	b.n	8003bc2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cde:	f000 fa31 	bl	8004144 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ce2:	f000 fdd7 	bl	8004894 <xTaskResumeAll>
 8003ce6:	e76c      	b.n	8003bc2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cea:	f000 fa2b 	bl	8004144 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003cee:	f000 fdd1 	bl	8004894 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003cf2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	; 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b092      	sub	sp, #72	; 0x48
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <xQueueGenericSendFromISR+0x3c>
 8003d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <xQueueGenericSendFromISR+0x40>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <xQueueGenericSendFromISR+0x42>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d103      	bne.n	8003d6a <xQueueGenericSendFromISR+0x6a>
 8003d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <xQueueGenericSendFromISR+0x6e>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <xQueueGenericSendFromISR+0x70>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003d86:	bf00      	nop
 8003d88:	e7fe      	b.n	8003d88 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d8a:	f002 fb9f 	bl	80064cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	623a      	str	r2, [r7, #32]
 8003da4:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003da6:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <xQueueGenericSendFromISR+0xbc>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d146      	bne.n	8003e4a <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003dd2:	f000 f927 	bl	8004024 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003dd6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d112      	bne.n	8003e06 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d02d      	beq.n	8003e44 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f86f 	bl	8004ed0 <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d025      	beq.n	8003e44 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d022      	beq.n	8003e44 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	e01e      	b.n	8003e44 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8003e06:	f000 fe67 	bl	8004ad8 <uxTaskGetNumberOfTasks>
 8003e0a:	6338      	str	r0, [r7, #48]	; 0x30
 8003e0c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d916      	bls.n	8003e44 <xQueueGenericSendFromISR+0x144>
 8003e16:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e1c:	d10a      	bne.n	8003e34 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	61bb      	str	r3, [r7, #24]
    }
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xQueueGenericSendFromISR+0x132>
 8003e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003e38:	3301      	adds	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	b25a      	sxtb	r2, r3
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003e44:	2301      	movs	r3, #1
 8003e46:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8003e48:	e001      	b.n	8003e4e <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3748      	adds	r7, #72	; 0x48
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xQueueReceive+0x30>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	623b      	str	r3, [r7, #32]
    }
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <xQueueReceive+0x3e>
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <xQueueReceive+0x42>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <xQueueReceive+0x44>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueReceive+0x5e>
        __asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	61fb      	str	r3, [r7, #28]
    }
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ec2:	f001 fa19 	bl	80052f8 <xTaskGetSchedulerState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <xQueueReceive+0x6e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <xQueueReceive+0x72>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueReceive+0x74>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <xQueueReceive+0x8e>
        __asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61bb      	str	r3, [r7, #24]
    }
 8003eee:	bf00      	nop
 8003ef0:	e7fe      	b.n	8003ef0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003ef2:	f002 fa07 	bl	8006304 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01f      	beq.n	8003f42 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f06:	f000 f8f7 	bl	80040f8 <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	1e5a      	subs	r2, r3, #1
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	3310      	adds	r3, #16
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ffd6 	bl	8004ed0 <xTaskRemoveFromEventList>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <xQueueReceive+0x1bc>)
 8003f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f3a:	f002 fa13 	bl	8006364 <vPortExitCritical>
                return pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e069      	b.n	8004016 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f48:	f002 fa0c 	bl	8006364 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e062      	b.n	8004016 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f56:	f107 0310 	add.w	r3, r7, #16
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 f890 	bl	8005080 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f64:	f002 f9fe 	bl	8006364 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f68:	f000 fc86 	bl	8004878 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f6c:	f002 f9ca 	bl	8006304 <vPortEnterCritical>
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d103      	bne.n	8003f86 <xQueueReceive+0x122>
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8c:	b25b      	sxtb	r3, r3
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d103      	bne.n	8003f9c <xQueueReceive+0x138>
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f9c:	f002 f9e2 	bl	8006364 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fa0:	1d3a      	adds	r2, r7, #4
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f87f 	bl	80050ac <xTaskCheckForTimeOut>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d123      	bne.n	8003ffc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f000 f917 	bl	80041e8 <prvIsQueueEmpty>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ff15 	bl	8004df8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd0:	f000 f8b8 	bl	8004144 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003fd4:	f000 fc5e 	bl	8004894 <xTaskResumeAll>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d189      	bne.n	8003ef2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <xQueueReceive+0x1bc>)
 8003fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	e780      	b.n	8003ef2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff2:	f000 f8a7 	bl	8004144 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ff6:	f000 fc4d 	bl	8004894 <xTaskResumeAll>
 8003ffa:	e77a      	b.n	8003ef2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffe:	f000 f8a1 	bl	8004144 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004002:	f000 fc47 	bl	8004894 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004008:	f000 f8ee 	bl	80041e8 <prvIsQueueEmpty>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f43f af6f 	beq.w	8003ef2 <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004014:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	; 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000ed04 	.word	0xe000ed04

08004024 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d14d      	bne.n	80040e6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f001 f970 	bl	8005334 <xTaskPriorityDisinherit>
 8004054:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e043      	b.n	80040e6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d119      	bne.n	8004098 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6858      	ldr	r0, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	461a      	mov	r2, r3
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	f004 fcc4 	bl	80089fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	d32b      	bcc.n	80040e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	e026      	b.n	80040e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68d8      	ldr	r0, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	461a      	mov	r2, r3
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	f004 fcaa 	bl	80089fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	425b      	negs	r3, r3
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	425b      	negs	r3, r3
 80040ce:	441a      	add	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d105      	bne.n	80040e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80040ee:	697b      	ldr	r3, [r7, #20]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d018      	beq.n	800413c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	441a      	add	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d303      	bcc.n	800412c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	461a      	mov	r2, r3
 8004136:	6838      	ldr	r0, [r7, #0]
 8004138:	f004 fc60 	bl	80089fc <memcpy>
    }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800414c:	f002 f8da 	bl	8006304 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004156:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004158:	e011      	b.n	800417e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d012      	beq.n	8004188 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3324      	adds	r3, #36	; 0x24
 8004166:	4618      	mov	r0, r3
 8004168:	f000 feb2 	bl	8004ed0 <xTaskRemoveFromEventList>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004172:	f001 f801 	bl	8005178 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	3b01      	subs	r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800417e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	dce9      	bgt.n	800415a <prvUnlockQueue+0x16>
 8004186:	e000      	b.n	800418a <prvUnlockQueue+0x46>
                    break;
 8004188:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004192:	f002 f8e7 	bl	8006364 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004196:	f002 f8b5 	bl	8006304 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a2:	e011      	b.n	80041c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3310      	adds	r3, #16
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fe8d 	bl	8004ed0 <xTaskRemoveFromEventList>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80041bc:	f000 ffdc 	bl	8005178 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80041c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	dce9      	bgt.n	80041a4 <prvUnlockQueue+0x60>
 80041d0:	e000      	b.n	80041d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80041d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	22ff      	movs	r2, #255	; 0xff
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80041dc:	f002 f8c2 	bl	8006364 <vPortExitCritical>
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80041f0:	f002 f888 	bl	8006304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e001      	b.n	8004206 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004206:	f002 f8ad 	bl	8006364 <vPortExitCritical>

    return xReturn;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800421c:	f002 f872 	bl	8006304 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	429a      	cmp	r2, r3
 800422a:	d102      	bne.n	8004232 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e001      	b.n	8004236 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004236:	f002 f895 	bl	8006364 <vPortExitCritical>

    return xReturn;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d024      	beq.n	80042be <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e01e      	b.n	80042b8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <vQueueAddToRegistry+0x98>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d105      	bne.n	8004296 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <vQueueAddToRegistry+0x98>)
 8004290:	4413      	add	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
                    break;
 8004294:	e013      	b.n	80042be <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <vQueueAddToRegistry+0x6e>
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <vQueueAddToRegistry+0x98>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4a0b      	ldr	r2, [pc, #44]	; (80042dc <vQueueAddToRegistry+0x98>)
 80042ae:	4413      	add	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	3301      	adds	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b07      	cmp	r3, #7
 80042bc:	d9dd      	bls.n	800427a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	200001ac 	.word	0x200001ac

080042e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80042f0:	f002 f808 	bl	8006304 <vPortEnterCritical>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d103      	bne.n	800430a <vQueueWaitForMessageRestricted+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <vQueueWaitForMessageRestricted+0x40>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004320:	f002 f820 	bl	8006364 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fd83 	bl	8004e40 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff02 	bl	8004144 <prvUnlockQueue>
    }
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f002 f8f5 	bl	800654c <pvPortMalloc>
 8004362:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d013      	beq.n	8004392 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800436a:	2058      	movs	r0, #88	; 0x58
 800436c:	f002 f8ee 	bl	800654c <pvPortMalloc>
 8004370:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004378:	2258      	movs	r2, #88	; 0x58
 800437a:	2100      	movs	r1, #0
 800437c:	69f8      	ldr	r0, [r7, #28]
 800437e:	f004 fb09 	bl	8008994 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
 8004388:	e005      	b.n	8004396 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800438a:	6978      	ldr	r0, [r7, #20]
 800438c:	f002 f998 	bl	80066c0 <vPortFree>
 8004390:	e001      	b.n	8004396 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	2300      	movs	r3, #0
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	9302      	str	r3, [sp, #8]
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f80e 	bl	80043d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80043b8:	69f8      	ldr	r0, [r7, #28]
 80043ba:	f000 f899 	bl	80044f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80043be:	2301      	movs	r3, #1
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e002      	b.n	80043ca <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043c4:	f04f 33ff 	mov.w	r3, #4294967295
 80043c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80043ca:	69bb      	ldr	r3, [r7, #24]
    }
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	461a      	mov	r2, r3
 80043ec:	21a5      	movs	r1, #165	; 0xa5
 80043ee:	f004 fad1 	bl	8008994 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043fc:	3b01      	subs	r3, #1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	f023 0307 	bic.w	r3, r3, #7
 800440a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <prvInitialiseNewTask+0x58>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	617b      	str	r3, [r7, #20]
    }
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01e      	beq.n	8004470 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e012      	b.n	800445e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	7819      	ldrb	r1, [r3, #0]
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	3334      	adds	r3, #52	; 0x34
 8004448:	460a      	mov	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d006      	beq.n	8004466 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	2b09      	cmp	r3, #9
 8004462:	d9e9      	bls.n	8004438 <prvInitialiseNewTask+0x64>
 8004464:	e000      	b.n	8004468 <prvInitialiseNewTask+0x94>
            {
                break;
 8004466:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	2b05      	cmp	r3, #5
 8004474:	d90a      	bls.n	800448c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	613b      	str	r3, [r7, #16]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b05      	cmp	r3, #5
 8004490:	d901      	bls.n	8004496 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004492:	2305      	movs	r3, #5
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	3304      	adds	r3, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f996 	bl	80037d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f991 	bl	80037d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	f1c3 0206 	rsb	r2, r3, #6
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	69b8      	ldr	r0, [r7, #24]
 80044d2:	f001 fd6d 	bl	8005fb0 <pxPortInitialiseStack>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044e8:	bf00      	nop
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80044f8:	f001 ff04 	bl	8006304 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80044fc:	4b4f      	ldr	r3, [pc, #316]	; (800463c <prvAddNewTaskToReadyList+0x14c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3301      	adds	r3, #1
 8004502:	4a4e      	ldr	r2, [pc, #312]	; (800463c <prvAddNewTaskToReadyList+0x14c>)
 8004504:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004506:	4b4e      	ldr	r3, [pc, #312]	; (8004640 <prvAddNewTaskToReadyList+0x150>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800450e:	4a4c      	ldr	r2, [pc, #304]	; (8004640 <prvAddNewTaskToReadyList+0x150>)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004514:	4b49      	ldr	r3, [pc, #292]	; (800463c <prvAddNewTaskToReadyList+0x14c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d110      	bne.n	800453e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800451c:	f000 fe52 	bl	80051c4 <prvInitialiseTaskLists>
 8004520:	e00d      	b.n	800453e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004522:	4b48      	ldr	r3, [pc, #288]	; (8004644 <prvAddNewTaskToReadyList+0x154>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800452a:	4b45      	ldr	r3, [pc, #276]	; (8004640 <prvAddNewTaskToReadyList+0x150>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	429a      	cmp	r2, r3
 8004536:	d802      	bhi.n	800453e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004538:	4a41      	ldr	r2, [pc, #260]	; (8004640 <prvAddNewTaskToReadyList+0x150>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800453e:	4b42      	ldr	r3, [pc, #264]	; (8004648 <prvAddNewTaskToReadyList+0x158>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a40      	ldr	r2, [pc, #256]	; (8004648 <prvAddNewTaskToReadyList+0x158>)
 8004546:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <prvAddNewTaskToReadyList+0x158>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <prvAddNewTaskToReadyList+0x94>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	f003 ff69 	bl	8008430 <SEGGER_SYSVIEW_OnTaskCreate>
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	461d      	mov	r5, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461c      	mov	r4, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	1ae3      	subs	r3, r4, r3
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	462b      	mov	r3, r5
 8004580:	f002 fa60 	bl	8006a44 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 ffd6 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <prvAddNewTaskToReadyList+0x15c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4313      	orrs	r3, r2
 800459a:	4a2c      	ldr	r2, [pc, #176]	; (800464c <prvAddNewTaskToReadyList+0x15c>)
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	492b      	ldr	r1, [pc, #172]	; (8004650 <prvAddNewTaskToReadyList+0x160>)
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3304      	adds	r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	609a      	str	r2, [r3, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	3204      	adds	r2, #4
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <prvAddNewTaskToReadyList+0x160>)
 80045e2:	441a      	add	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	615a      	str	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4918      	ldr	r1, [pc, #96]	; (8004650 <prvAddNewTaskToReadyList+0x160>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	4814      	ldr	r0, [pc, #80]	; (8004650 <prvAddNewTaskToReadyList+0x160>)
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4403      	add	r3, r0
 8004608:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800460a:	f001 feab 	bl	8006364 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800460e:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <prvAddNewTaskToReadyList+0x154>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <prvAddNewTaskToReadyList+0x150>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d207      	bcs.n	8004634 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <prvAddNewTaskToReadyList+0x164>)
 8004626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bdb0      	pop	{r4, r5, r7, pc}
 800463c:	200002d8 	.word	0x200002d8
 8004640:	200001ec 	.word	0x200001ec
 8004644:	200002e4 	.word	0x200002e4
 8004648:	200002f4 	.word	0x200002f4
 800464c:	200002e0 	.word	0x200002e0
 8004650:	200001f0 	.word	0x200001f0
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004660:	f001 fe50 	bl	8006304 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <vTaskSuspend+0x18>
 800466a:	4b4a      	ldr	r3, [pc, #296]	; (8004794 <vTaskSuspend+0x13c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	e000      	b.n	8004672 <vTaskSuspend+0x1a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4618      	mov	r0, r3
 8004678:	f004 f800 	bl	800867c <SEGGER_SYSVIEW_ShrinkId>
 800467c:	4603      	mov	r3, r0
 800467e:	4619      	mov	r1, r3
 8004680:	2029      	movs	r0, #41	; 0x29
 8004682:	f003 fac7 	bl	8007c14 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff f90e 	bl	80038ac <uxListRemove>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d115      	bne.n	80046c2 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	493f      	ldr	r1, [pc, #252]	; (8004798 <vTaskSuspend+0x140>)
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <vTaskSuspend+0x6a>
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2201      	movs	r2, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43da      	mvns	r2, r3
 80046b8:	4b38      	ldr	r3, [pc, #224]	; (800479c <vTaskSuspend+0x144>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4013      	ands	r3, r2
 80046be:	4a37      	ldr	r2, [pc, #220]	; (800479c <vTaskSuspend+0x144>)
 80046c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3318      	adds	r3, #24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f8ec 	bl	80038ac <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	211b      	movs	r1, #27
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 ff6f 	bl	80085bc <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	482e      	ldr	r0, [pc, #184]	; (80047a0 <vTaskSuspend+0x148>)
 80046e6:	f7ff f884 	bl	80037f2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e010      	b.n	8004712 <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4413      	add	r3, r2
 80046f6:	3354      	adds	r3, #84	; 0x54
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	4413      	add	r3, r2
 8004706:	3354      	adds	r3, #84	; 0x54
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3301      	adds	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	ddeb      	ble.n	80046f0 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004718:	f001 fe24 	bl	8006364 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <vTaskSuspend+0x14c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004724:	f001 fdee 	bl	8006304 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004728:	f000 fdca 	bl	80052c0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 800472c:	f001 fe1a 	bl	8006364 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004730:	4b18      	ldr	r3, [pc, #96]	; (8004794 <vTaskSuspend+0x13c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	429a      	cmp	r2, r3
 8004738:	d127      	bne.n	800478a <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <vTaskSuspend+0x14c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d017      	beq.n	8004772 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <vTaskSuspend+0x150>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <vTaskSuspend+0x108>
        __asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60fb      	str	r3, [r7, #12]
    }
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <vTaskSuspend+0x154>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004770:	e00b      	b.n	800478a <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <vTaskSuspend+0x148>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <vTaskSuspend+0x158>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	429a      	cmp	r2, r3
 800477c:	d103      	bne.n	8004786 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <vTaskSuspend+0x13c>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
    }
 8004784:	e001      	b.n	800478a <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8004786:	f000 facd 	bl	8004d24 <vTaskSwitchContext>
    }
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200001ec 	.word	0x200001ec
 8004798:	200001f0 	.word	0x200001f0
 800479c:	200002e0 	.word	0x200002e0
 80047a0:	200002c4 	.word	0x200002c4
 80047a4:	200002e4 	.word	0x200002e4
 80047a8:	20000300 	.word	0x20000300
 80047ac:	e000ed04 	.word	0xe000ed04
 80047b0:	200002d8 	.word	0x200002d8

080047b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80047ba:	4b27      	ldr	r3, [pc, #156]	; (8004858 <vTaskStartScheduler+0xa4>)
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	2300      	movs	r3, #0
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	2282      	movs	r2, #130	; 0x82
 80047c6:	4925      	ldr	r1, [pc, #148]	; (800485c <vTaskStartScheduler+0xa8>)
 80047c8:	4825      	ldr	r0, [pc, #148]	; (8004860 <vTaskStartScheduler+0xac>)
 80047ca:	f7ff fdbd 	bl	8004348 <xTaskCreate>
 80047ce:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d102      	bne.n	80047dc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80047d6:	f001 f895 	bl	8005904 <xTimerCreateTimerTask>
 80047da:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d124      	bne.n	800482c <vTaskStartScheduler+0x78>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60bb      	str	r3, [r7, #8]
    }
 80047f4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <vTaskStartScheduler+0xb0>)
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <vTaskStartScheduler+0xb4>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <vTaskStartScheduler+0xb8>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <vTaskStartScheduler+0xbc>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <vTaskStartScheduler+0xa4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d102      	bne.n	800481c <vTaskStartScheduler+0x68>
 8004816:	f003 fdef 	bl	80083f8 <SEGGER_SYSVIEW_OnIdle>
 800481a:	e004      	b.n	8004826 <vTaskStartScheduler+0x72>
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <vTaskStartScheduler+0xbc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f003 fe47 	bl	80084b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8004826:	f001 fc4d 	bl	80060c4 <xPortStartScheduler>
 800482a:	e00e      	b.n	800484a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d10a      	bne.n	800484a <vTaskStartScheduler+0x96>
        __asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	607b      	str	r3, [r7, #4]
    }
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <vTaskStartScheduler+0xc0>)
 800484c:	681b      	ldr	r3, [r3, #0]
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200002fc 	.word	0x200002fc
 800485c:	08009348 	.word	0x08009348
 8004860:	08005191 	.word	0x08005191
 8004864:	200002f8 	.word	0x200002f8
 8004868:	200002e4 	.word	0x200002e4
 800486c:	200002dc 	.word	0x200002dc
 8004870:	200001ec 	.word	0x200001ec
 8004874:	20000014 	.word	0x20000014

08004878 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <vTaskSuspendAll+0x18>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	4a03      	ldr	r2, [pc, #12]	; (8004890 <vTaskSuspendAll+0x18>)
 8004884:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004886:	bf00      	nop
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000300 	.word	0x20000300

08004894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80048a2:	4b73      	ldr	r3, [pc, #460]	; (8004a70 <xTaskResumeAll+0x1dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <xTaskResumeAll+0x2c>
        __asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	607b      	str	r3, [r7, #4]
    }
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80048c0:	f001 fd20 	bl	8006304 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80048c4:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <xTaskResumeAll+0x1dc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4a69      	ldr	r2, [pc, #420]	; (8004a70 <xTaskResumeAll+0x1dc>)
 80048cc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ce:	4b68      	ldr	r3, [pc, #416]	; (8004a70 <xTaskResumeAll+0x1dc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 80c4 	bne.w	8004a60 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048d8:	4b66      	ldr	r3, [pc, #408]	; (8004a74 <xTaskResumeAll+0x1e0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80bf 	beq.w	8004a60 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e2:	e08e      	b.n	8004a02 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	4b64      	ldr	r3, [pc, #400]	; (8004a78 <xTaskResumeAll+0x1e4>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	6a12      	ldr	r2, [r2, #32]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	69d2      	ldr	r2, [r2, #28]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3318      	adds	r3, #24
 800490e:	429a      	cmp	r2, r3
 8004910:	d103      	bne.n	800491a <xTaskResumeAll+0x86>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	6a1a      	ldr	r2, [r3, #32]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1e5a      	subs	r2, r3, #1
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	68d2      	ldr	r2, [r2, #12]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	6892      	ldr	r2, [r2, #8]
 8004942:	605a      	str	r2, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3304      	adds	r3, #4
 800494c:	429a      	cmp	r2, r3
 800494e:	d103      	bne.n	8004958 <xTaskResumeAll+0xc4>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	2200      	movs	r2, #0
 800495c:	615a      	str	r2, [r3, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fde4 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	2201      	movs	r2, #1
 8004976:	409a      	lsls	r2, r3
 8004978:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <xTaskResumeAll+0x1e8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	4a3f      	ldr	r2, [pc, #252]	; (8004a7c <xTaskResumeAll+0x1e8>)
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004986:	493e      	ldr	r1, [pc, #248]	; (8004a80 <xTaskResumeAll+0x1ec>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3304      	adds	r3, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	3204      	adds	r2, #4
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <xTaskResumeAll+0x1ec>)
 80049c6:	441a      	add	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	615a      	str	r2, [r3, #20]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	492b      	ldr	r1, [pc, #172]	; (8004a80 <xTaskResumeAll+0x1ec>)
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	4827      	ldr	r0, [pc, #156]	; (8004a80 <xTaskResumeAll+0x1ec>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4403      	add	r3, r0
 80049ec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <xTaskResumeAll+0x1f0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <xTaskResumeAll+0x1f4>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <xTaskResumeAll+0x1e4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f47f af6c 	bne.w	80048e4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004a12:	f000 fc55 	bl	80052c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a16:	4b1d      	ldr	r3, [pc, #116]	; (8004a8c <xTaskResumeAll+0x1f8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004a22:	f000 f865 	bl	8004af0 <xTaskIncrementTick>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004a2c:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <xTaskResumeAll+0x1f4>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f1      	bne.n	8004a22 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <xTaskResumeAll+0x1f8>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004a44:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <xTaskResumeAll+0x1f4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <xTaskResumeAll+0x1fc>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004a60:	f001 fc80 	bl	8006364 <vPortExitCritical>

    return xAlreadyYielded;
 8004a64:	69bb      	ldr	r3, [r7, #24]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000300 	.word	0x20000300
 8004a74:	200002d8 	.word	0x200002d8
 8004a78:	20000298 	.word	0x20000298
 8004a7c:	200002e0 	.word	0x200002e0
 8004a80:	200001f0 	.word	0x200001f0
 8004a84:	200001ec 	.word	0x200001ec
 8004a88:	200002ec 	.word	0x200002ec
 8004a8c:	200002e8 	.word	0x200002e8
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <xTaskGetTickCount+0x1c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004aa0:	687b      	ldr	r3, [r7, #4]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	200002dc 	.word	0x200002dc

08004ab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aba:	f001 fd07 	bl	80064cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004ac2:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <xTaskGetTickCountFromISR+0x20>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004ac8:	683b      	ldr	r3, [r7, #0]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200002dc 	.word	0x200002dc

08004ad8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <uxTaskGetNumberOfTasks+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	200002d8 	.word	0x200002d8

08004af0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004afa:	4b7f      	ldr	r3, [pc, #508]	; (8004cf8 <xTaskIncrementTick+0x208>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80f0 	bne.w	8004ce4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b04:	4b7d      	ldr	r3, [pc, #500]	; (8004cfc <xTaskIncrementTick+0x20c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004b0c:	4a7b      	ldr	r2, [pc, #492]	; (8004cfc <xTaskIncrementTick+0x20c>)
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d120      	bne.n	8004b5a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004b18:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <xTaskIncrementTick+0x210>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <xTaskIncrementTick+0x48>
        __asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	607b      	str	r3, [r7, #4]
    }
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xTaskIncrementTick+0x46>
 8004b38:	4b71      	ldr	r3, [pc, #452]	; (8004d00 <xTaskIncrementTick+0x210>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	4b71      	ldr	r3, [pc, #452]	; (8004d04 <xTaskIncrementTick+0x214>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a6f      	ldr	r2, [pc, #444]	; (8004d00 <xTaskIncrementTick+0x210>)
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4a6f      	ldr	r2, [pc, #444]	; (8004d04 <xTaskIncrementTick+0x214>)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b6e      	ldr	r3, [pc, #440]	; (8004d08 <xTaskIncrementTick+0x218>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	4a6d      	ldr	r2, [pc, #436]	; (8004d08 <xTaskIncrementTick+0x218>)
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	f000 fbb3 	bl	80052c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004b5a:	4b6c      	ldr	r3, [pc, #432]	; (8004d0c <xTaskIncrementTick+0x21c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6a3a      	ldr	r2, [r7, #32]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f0c0 80aa 	bcc.w	8004cba <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b66:	4b66      	ldr	r3, [pc, #408]	; (8004d00 <xTaskIncrementTick+0x210>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	4b66      	ldr	r3, [pc, #408]	; (8004d0c <xTaskIncrementTick+0x21c>)
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	601a      	str	r2, [r3, #0]
                    break;
 8004b78:	e09f      	b.n	8004cba <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7a:	4b61      	ldr	r3, [pc, #388]	; (8004d00 <xTaskIncrementTick+0x210>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d203      	bcs.n	8004b9a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004b92:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <xTaskIncrementTick+0x21c>)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004b98:	e08f      	b.n	8004cba <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	68d2      	ldr	r2, [r2, #12]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	6892      	ldr	r2, [r2, #8]
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d103      	bne.n	8004bc8 <xTaskIncrementTick+0xd8>
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	615a      	str	r2, [r3, #20]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	6a12      	ldr	r2, [r2, #32]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	69d2      	ldr	r2, [r2, #28]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	3318      	adds	r3, #24
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d103      	bne.n	8004c0e <xTaskIncrementTick+0x11e>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	6a1a      	ldr	r2, [r3, #32]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2200      	movs	r2, #0
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1e5a      	subs	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f003 fc89 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <xTaskIncrementTick+0x220>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <xTaskIncrementTick+0x220>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4935      	ldr	r1, [pc, #212]	; (8004d14 <xTaskIncrementTick+0x224>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3304      	adds	r3, #4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	3204      	adds	r2, #4
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <xTaskIncrementTick+0x224>)
 8004c7c:	441a      	add	r2, r3
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	615a      	str	r2, [r3, #20]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c86:	4923      	ldr	r1, [pc, #140]	; (8004d14 <xTaskIncrementTick+0x224>)
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1c59      	adds	r1, r3, #1
 8004c96:	481f      	ldr	r0, [pc, #124]	; (8004d14 <xTaskIncrementTick+0x224>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4403      	add	r3, r0
 8004ca2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <xTaskIncrementTick+0x228>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f67f af59 	bls.w	8004b66 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb8:	e755      	b.n	8004b66 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cba:	4b17      	ldr	r3, [pc, #92]	; (8004d18 <xTaskIncrementTick+0x228>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	4914      	ldr	r1, [pc, #80]	; (8004d14 <xTaskIncrementTick+0x224>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d901      	bls.n	8004cd6 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004cd6:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <xTaskIncrementTick+0x22c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	e004      	b.n	8004cee <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <xTaskIncrementTick+0x230>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4a0d      	ldr	r2, [pc, #52]	; (8004d20 <xTaskIncrementTick+0x230>)
 8004cec:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000300 	.word	0x20000300
 8004cfc:	200002dc 	.word	0x200002dc
 8004d00:	20000290 	.word	0x20000290
 8004d04:	20000294 	.word	0x20000294
 8004d08:	200002f0 	.word	0x200002f0
 8004d0c:	200002f8 	.word	0x200002f8
 8004d10:	200002e0 	.word	0x200002e0
 8004d14:	200001f0 	.word	0x200001f0
 8004d18:	200001ec 	.word	0x200001ec
 8004d1c:	200002ec 	.word	0x200002ec
 8004d20:	200002e8 	.word	0x200002e8

08004d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <vTaskSwitchContext+0xbc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004d32:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <vTaskSwitchContext+0xc0>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004d38:	e04d      	b.n	8004dd6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	; (8004de4 <vTaskSwitchContext+0xc0>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <vTaskSwitchContext+0xc4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004d4e:	7afb      	ldrb	r3, [r7, #11]
 8004d50:	f1c3 031f 	rsb	r3, r3, #31
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	4925      	ldr	r1, [pc, #148]	; (8004dec <vTaskSwitchContext+0xc8>)
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
    }
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <vTaskSwitchContext+0x5a>
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <vTaskSwitchContext+0xc8>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	3308      	adds	r3, #8
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d104      	bne.n	8004db0 <vTaskSwitchContext+0x8c>
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a0e      	ldr	r2, [pc, #56]	; (8004df0 <vTaskSwitchContext+0xcc>)
 8004db8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <vTaskSwitchContext+0xcc>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <vTaskSwitchContext+0xd0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d102      	bne.n	8004dcc <vTaskSwitchContext+0xa8>
 8004dc6:	f003 fb17 	bl	80083f8 <SEGGER_SYSVIEW_OnIdle>
}
 8004dca:	e004      	b.n	8004dd6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <vTaskSwitchContext+0xcc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 fb6f 	bl	80084b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004dd6:	bf00      	nop
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000300 	.word	0x20000300
 8004de4:	200002ec 	.word	0x200002ec
 8004de8:	200002e0 	.word	0x200002e0
 8004dec:	200001f0 	.word	0x200001f0
 8004df0:	200001ec 	.word	0x200001ec
 8004df4:	200002fc 	.word	0x200002fc

08004df8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
    }
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <vTaskPlaceOnEventList+0x44>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3318      	adds	r3, #24
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fe fd07 	bl	800383a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	6838      	ldr	r0, [r7, #0]
 8004e30:	f000 fce8 	bl	8005804 <prvAddCurrentTaskToDelayedList>
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	200001ec 	.word	0x200001ec

08004e40 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	613b      	str	r3, [r7, #16]
    }
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <vTaskPlaceOnEventListRestricted+0x8c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <vTaskPlaceOnEventListRestricted+0x8c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	6892      	ldr	r2, [r2, #8]
 8004e7e:	621a      	str	r2, [r3, #32]
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <vTaskPlaceOnEventListRestricted+0x8c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	3218      	adds	r2, #24
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <vTaskPlaceOnEventListRestricted+0x8c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f103 0218 	add.w	r2, r3, #24
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <vTaskPlaceOnEventListRestricted+0x8c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004eb6:	2024      	movs	r0, #36	; 0x24
 8004eb8:	f002 fe8e 	bl	8007bd8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	68b8      	ldr	r0, [r7, #8]
 8004ec0:	f000 fca0 	bl	8005804 <prvAddCurrentTaskToDelayedList>
    }
 8004ec4:	bf00      	nop
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	200001ec 	.word	0x200001ec

08004ed0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	; 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60fb      	str	r3, [r7, #12]
    }
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	6a12      	ldr	r2, [r2, #32]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	6a3a      	ldr	r2, [r7, #32]
 8004f12:	69d2      	ldr	r2, [r2, #28]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	3318      	adds	r3, #24
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d103      	bne.n	8004f2a <xTaskRemoveFromEventList+0x5a>
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	; (8005068 <xTaskRemoveFromEventList+0x198>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d162      	bne.n	8005008 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	6a3a      	ldr	r2, [r7, #32]
 8004f4e:	68d2      	ldr	r2, [r2, #12]
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	6892      	ldr	r2, [r2, #8]
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	3304      	adds	r3, #4
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d103      	bne.n	8004f70 <xTaskRemoveFromEventList+0xa0>
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	2200      	movs	r2, #0
 8004f74:	615a      	str	r2, [r3, #20]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1e5a      	subs	r2, r3, #1
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 fad8 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <xTaskRemoveFromEventList+0x19c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	4a35      	ldr	r2, [pc, #212]	; (800506c <xTaskRemoveFromEventList+0x19c>)
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9e:	4934      	ldr	r1, [pc, #208]	; (8005070 <xTaskRemoveFromEventList+0x1a0>)
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	3304      	adds	r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	3204      	adds	r2, #4
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a24      	ldr	r2, [pc, #144]	; (8005070 <xTaskRemoveFromEventList+0x1a0>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	615a      	str	r2, [r3, #20]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe8:	4921      	ldr	r1, [pc, #132]	; (8005070 <xTaskRemoveFromEventList+0x1a0>)
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	481d      	ldr	r0, [pc, #116]	; (8005070 <xTaskRemoveFromEventList+0x1a0>)
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4403      	add	r3, r0
 8005004:	6019      	str	r1, [r3, #0]
 8005006:	e01b      	b.n	8005040 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <xTaskRemoveFromEventList+0x1a4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	61da      	str	r2, [r3, #28]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	621a      	str	r2, [r3, #32]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	3218      	adds	r2, #24
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f103 0218 	add.w	r2, r3, #24
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <xTaskRemoveFromEventList+0x1a4>)
 8005034:	629a      	str	r2, [r3, #40]	; 0x28
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <xTaskRemoveFromEventList+0x1a4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <xTaskRemoveFromEventList+0x1a4>)
 800503e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <xTaskRemoveFromEventList+0x1a8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	429a      	cmp	r2, r3
 800504c:	d905      	bls.n	800505a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <xTaskRemoveFromEventList+0x1ac>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e001      	b.n	800505e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005060:	4618      	mov	r0, r3
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000300 	.word	0x20000300
 800506c:	200002e0 	.word	0x200002e0
 8005070:	200001f0 	.word	0x200001f0
 8005074:	20000298 	.word	0x20000298
 8005078:	200001ec 	.word	0x200001ec
 800507c:	200002ec 	.word	0x200002ec

08005080 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <vTaskInternalSetTimeOutState+0x24>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <vTaskInternalSetTimeOutState+0x28>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	605a      	str	r2, [r3, #4]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	200002f0 	.word	0x200002f0
 80050a8:	200002dc 	.word	0x200002dc

080050ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	613b      	str	r3, [r7, #16]
    }
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60fb      	str	r3, [r7, #12]
    }
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80050ee:	f001 f909 	bl	8006304 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80050f2:	4b1f      	ldr	r3, [pc, #124]	; (8005170 <xTaskCheckForTimeOut+0xc4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d102      	bne.n	8005112 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e026      	b.n	8005160 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <xTaskCheckForTimeOut+0xc8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d00a      	beq.n	8005134 <xTaskCheckForTimeOut+0x88>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d305      	bcc.n	8005134 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e015      	b.n	8005160 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	d20b      	bcs.n	8005156 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff ff98 	bl	8005080 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e004      	b.n	8005160 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005160:	f001 f900 	bl	8006364 <vPortExitCritical>

    return xReturn;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200002dc 	.word	0x200002dc
 8005174:	200002f0 	.word	0x200002f0

08005178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <vTaskMissedYield+0x14>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	200002ec 	.word	0x200002ec

08005190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005198:	f000 f854 	bl	8005244 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <prvIdleTask+0x2c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d907      	bls.n	80051b4 <prvIdleTask+0x24>
            {
                taskYIELD();
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <prvIdleTask+0x30>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
            /* Call the user defined function from within the idle task.  This
             * allows the application designer to add background functionality
             * without the overhead of a separate task.
             * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
             * CALL A FUNCTION THAT MIGHT BLOCK. */
            vApplicationIdleHook();
 80051b4:	f7fb ff24 	bl	8001000 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80051b8:	e7ee      	b.n	8005198 <prvIdleTask+0x8>
 80051ba:	bf00      	nop
 80051bc:	200001f0 	.word	0x200001f0
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e00c      	b.n	80051ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <prvInitialiseTaskLists+0x60>)
 80051dc:	4413      	add	r3, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fada 	bl	8003798 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d9ef      	bls.n	80051d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvInitialiseTaskLists+0x64>)
 80051f2:	f7fe fad1 	bl	8003798 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <prvInitialiseTaskLists+0x68>)
 80051f8:	f7fe face 	bl	8003798 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <prvInitialiseTaskLists+0x6c>)
 80051fe:	f7fe facb 	bl	8003798 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <prvInitialiseTaskLists+0x70>)
 8005204:	f7fe fac8 	bl	8003798 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005208:	480b      	ldr	r0, [pc, #44]	; (8005238 <prvInitialiseTaskLists+0x74>)
 800520a:	f7fe fac5 	bl	8003798 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <prvInitialiseTaskLists+0x78>)
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <prvInitialiseTaskLists+0x64>)
 8005212:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <prvInitialiseTaskLists+0x7c>)
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <prvInitialiseTaskLists+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200001f0 	.word	0x200001f0
 8005228:	20000268 	.word	0x20000268
 800522c:	2000027c 	.word	0x2000027c
 8005230:	20000298 	.word	0x20000298
 8005234:	200002ac 	.word	0x200002ac
 8005238:	200002c4 	.word	0x200002c4
 800523c:	20000290 	.word	0x20000290
 8005240:	20000294 	.word	0x20000294

08005244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800524a:	e019      	b.n	8005280 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800524c:	f001 f85a 	bl	8006304 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <prvCheckTasksWaitingTermination+0x50>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fb25 	bl	80038ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 800526a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005274:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005276:	f001 f875 	bl	8006364 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f810 	bl	80052a0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e1      	bne.n	800524c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	200002ac 	.word	0x200002ac
 8005298:	200002d8 	.word	0x200002d8
 800529c:	200002c0 	.word	0x200002c0

080052a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 fa07 	bl	80066c0 <vPortFree>
            vPortFree( pxTCB );
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fa04 	bl	80066c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <prvResetNextTaskUnblockTime+0x30>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <prvResetNextTaskUnblockTime+0x34>)
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80052d6:	e005      	b.n	80052e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <prvResetNextTaskUnblockTime+0x30>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <prvResetNextTaskUnblockTime+0x34>)
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000290 	.word	0x20000290
 80052f4:	200002f8 	.word	0x200002f8

080052f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <xTaskGetSchedulerState+0x34>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005306:	2301      	movs	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	e008      	b.n	800531e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <xTaskGetSchedulerState+0x38>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005314:	2302      	movs	r3, #2
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e001      	b.n	800531e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800531e:	687b      	ldr	r3, [r7, #4]
    }
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	200002e4 	.word	0x200002e4
 8005330:	20000300 	.word	0x20000300

08005334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8095 	beq.w	8005476 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800534c:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <xTaskPriorityDisinherit+0x14c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	429a      	cmp	r2, r3
 8005354:	d00a      	beq.n	800536c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	613b      	str	r3, [r7, #16]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
    }
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539c:	429a      	cmp	r2, r3
 800539e:	d06a      	beq.n	8005476 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d166      	bne.n	8005476 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fa7d 	bl	80038ac <uxListRemove>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	2201      	movs	r2, #1
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <xTaskPriorityDisinherit+0x150>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4013      	ands	r3, r2
 80053ca:	4a2e      	ldr	r2, [pc, #184]	; (8005484 <xTaskPriorityDisinherit+0x150>)
 80053cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4619      	mov	r1, r3
 80053d2:	204a      	movs	r0, #74	; 0x4a
 80053d4:	f002 fc1e 	bl	8007c14 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	f1c3 0206 	rsb	r2, r3, #6
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f003 f8a2 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <xTaskPriorityDisinherit+0x150>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4313      	orrs	r3, r2
 8005402:	4a20      	ldr	r2, [pc, #128]	; (8005484 <xTaskPriorityDisinherit+0x150>)
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	491f      	ldr	r1, [pc, #124]	; (8005488 <xTaskPriorityDisinherit+0x154>)
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3304      	adds	r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	3204      	adds	r2, #4
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <xTaskPriorityDisinherit+0x154>)
 800544a:	441a      	add	r2, r3
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	615a      	str	r2, [r3, #20]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005454:	490c      	ldr	r1, [pc, #48]	; (8005488 <xTaskPriorityDisinherit+0x154>)
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1c59      	adds	r1, r3, #1
 8005464:	4808      	ldr	r0, [pc, #32]	; (8005488 <xTaskPriorityDisinherit+0x154>)
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4403      	add	r3, r0
 8005470:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005476:	69fb      	ldr	r3, [r7, #28]
    }
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200001ec 	.word	0x200001ec
 8005484:	200002e0 	.word	0x200002e0
 8005488:	200001f0 	.word	0x200001f0

0800548c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
    }
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80054b6:	f000 ff25 	bl	8006304 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80054ba:	4b36      	ldr	r3, [pc, #216]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	3354      	adds	r3, #84	; 0x54
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d022      	beq.n	8005512 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80054cc:	4b31      	ldr	r3, [pc, #196]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	3214      	adds	r2, #20
 80054d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	43d2      	mvns	r2, r2
 80054dc:	4011      	ands	r1, r2
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	3214      	adds	r2, #20
 80054e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	3354      	adds	r3, #84	; 0x54
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054fa:	2101      	movs	r1, #1
 80054fc:	6a38      	ldr	r0, [r7, #32]
 80054fe:	f000 f981 	bl	8005804 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005502:	4b25      	ldr	r3, [pc, #148]	; (8005598 <xTaskGenericNotifyWait+0x10c>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005512:	f000 ff27 	bl	8006364 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005516:	f000 fef5 	bl	8006304 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4613      	mov	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	2040      	movs	r0, #64	; 0x40
 8005528:	f002 fc0a 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	3214      	adds	r2, #20
 800553a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005542:	4b14      	ldr	r3, [pc, #80]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	3354      	adds	r3, #84	; 0x54
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d002      	beq.n	800555a <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e00e      	b.n	8005578 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	3214      	adds	r2, #20
 8005562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	43d2      	mvns	r2, r2
 800556a:	4011      	ands	r1, r2
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	3214      	adds	r2, #20
 8005570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <xTaskGenericNotifyWait+0x108>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	3354      	adds	r3, #84	; 0x54
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005586:	f000 feed 	bl	8006364 <vPortExitCritical>

        return xReturn;
 800558a:	697b      	ldr	r3, [r7, #20]
    }
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200001ec 	.word	0x200001ec
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800559c:	b580      	push	{r7, lr}
 800559e:	b090      	sub	sp, #64	; 0x40
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80055aa:	2301      	movs	r3, #1
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <xTaskGenericNotify+0x2e>
        __asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
    }
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xTaskGenericNotify+0x4a>
        __asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61fb      	str	r3, [r7, #28]
    }
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80055ea:	f000 fe8b 	bl	8006304 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80055ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	3214      	adds	r2, #20
 80055fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4413      	add	r3, r2
 8005608:	3354      	adds	r3, #84	; 0x54
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4413      	add	r3, r2
 8005616:	3354      	adds	r3, #84	; 0x54
 8005618:	2202      	movs	r2, #2
 800561a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d83b      	bhi.n	800569a <xTaskGenericNotify+0xfe>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <xTaskGenericNotify+0x8c>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	080056b9 	.word	0x080056b9
 800562c:	0800563d 	.word	0x0800563d
 8005630:	08005659 	.word	0x08005659
 8005634:	08005671 	.word	0x08005671
 8005638:	0800567f 	.word	0x0800567f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	3214      	adds	r2, #20
 8005642:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	ea42 0103 	orr.w	r1, r2, r3
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	3214      	adds	r2, #20
 8005652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005656:	e032      	b.n	80056be <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	3214      	adds	r2, #20
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	3214      	adds	r2, #20
 800566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800566e:	e026      	b.n	80056be <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	3214      	adds	r2, #20
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800567c:	e01f      	b.n	80056be <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800567e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005682:	2b02      	cmp	r3, #2
 8005684:	d006      	beq.n	8005694 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	3214      	adds	r2, #20
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005692:	e014      	b.n	80056be <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005694:	2300      	movs	r3, #0
 8005696:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8005698:	e011      	b.n	80056be <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800569a:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <xTaskGenericNotify+0x254>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <xTaskGenericNotify+0x120>
        __asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61bb      	str	r3, [r7, #24]
    }
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xTaskGenericNotify+0x11a>
                    break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <xTaskGenericNotify+0x122>

                    break;
 80056bc:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	4618      	mov	r0, r3
 80056c2:	f002 ffdb 	bl	800867c <SEGGER_SYSVIEW_ShrinkId>
 80056c6:	4601      	mov	r1, r0
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	4613      	mov	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	203e      	movs	r0, #62	; 0x3e
 80056d4:	f002 fb34 	bl	8007d40 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80056d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d17f      	bne.n	80057e0 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f6:	6892      	ldr	r2, [r2, #8]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	3304      	adds	r3, #4
 8005702:	429a      	cmp	r2, r3
 8005704:	d103      	bne.n	800570e <xTaskGenericNotify+0x172>
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	2200      	movs	r2, #0
 8005712:	615a      	str	r2, [r3, #20]
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	4618      	mov	r0, r3
 8005722:	f002 ff09 	bl	8008538 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	2201      	movs	r2, #1
 800572c:	409a      	lsls	r2, r3
 800572e:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <xTaskGenericNotify+0x258>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4313      	orrs	r3, r2
 8005734:	4a2f      	ldr	r2, [pc, #188]	; (80057f4 <xTaskGenericNotify+0x258>)
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	492e      	ldr	r1, [pc, #184]	; (80057f8 <xTaskGenericNotify+0x25c>)
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3304      	adds	r3, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005762:	3204      	adds	r2, #4
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <xTaskGenericNotify+0x25c>)
 800577c:	441a      	add	r2, r3
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	615a      	str	r2, [r3, #20]
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	491c      	ldr	r1, [pc, #112]	; (80057f8 <xTaskGenericNotify+0x25c>)
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1c59      	adds	r1, r3, #1
 8005796:	4818      	ldr	r0, [pc, #96]	; (80057f8 <xTaskGenericNotify+0x25c>)
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4403      	add	r3, r0
 80057a2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <xTaskGenericNotify+0x226>
        __asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	617b      	str	r3, [r7, #20]
    }
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <xTaskGenericNotify+0x260>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d907      	bls.n	80057e0 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <xTaskGenericNotify+0x264>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80057e0:	f000 fdc0 	bl	8006364 <vPortExitCritical>

        return xReturn;
 80057e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80057e6:	4618      	mov	r0, r3
 80057e8:	3738      	adds	r7, #56	; 0x38
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200002dc 	.word	0x200002dc
 80057f4:	200002e0 	.word	0x200002e0
 80057f8:	200001f0 	.word	0x200001f0
 80057fc:	200001ec 	.word	0x200001ec
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe f846 	bl	80038ac <uxListRemove>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005826:	4b31      	ldr	r3, [pc, #196]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	2201      	movs	r2, #1
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43da      	mvns	r2, r3
 8005834:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <prvAddCurrentTaskToDelayedList+0xec>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <prvAddCurrentTaskToDelayedList+0xec>)
 800583c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d124      	bne.n	8005890 <prvAddCurrentTaskToDelayedList+0x8c>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d021      	beq.n	8005890 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800584c:	4b29      	ldr	r3, [pc, #164]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	609a      	str	r2, [r3, #8]
 800585a:	4b24      	ldr	r3, [pc, #144]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	3204      	adds	r2, #4
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005880:	615a      	str	r2, [r3, #20]
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	4a1a      	ldr	r2, [pc, #104]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800588e:	e026      	b.n	80058de <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4413      	add	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d209      	bcs.n	80058bc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a8:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f7fd ffc0 	bl	800383a <vListInsert>
}
 80058ba:	e010      	b.n	80058de <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <prvAddCurrentTaskToDelayedList+0xf8>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7fd ffb6 	bl	800383a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80058ce:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d202      	bcs.n	80058de <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80058d8:	4a09      	ldr	r2, [pc, #36]	; (8005900 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6013      	str	r3, [r2, #0]
}
 80058de:	bf00      	nop
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200002dc 	.word	0x200002dc
 80058ec:	200001ec 	.word	0x200001ec
 80058f0:	200002e0 	.word	0x200002e0
 80058f4:	200002c4 	.word	0x200002c4
 80058f8:	20000294 	.word	0x20000294
 80058fc:	20000290 	.word	0x20000290
 8005900:	200002f8 	.word	0x200002f8

08005904 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800590a:	2300      	movs	r3, #0
 800590c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800590e:	f000 faef 	bl	8005ef0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <xTimerCreateTimerTask+0x54>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00b      	beq.n	8005932 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <xTimerCreateTimerTask+0x58>)
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	2302      	movs	r3, #2
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	2300      	movs	r3, #0
 8005924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005928:	490d      	ldr	r1, [pc, #52]	; (8005960 <xTimerCreateTimerTask+0x5c>)
 800592a:	480e      	ldr	r0, [pc, #56]	; (8005964 <xTimerCreateTimerTask+0x60>)
 800592c:	f7fe fd0c 	bl	8004348 <xTaskCreate>
 8005930:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	603b      	str	r3, [r7, #0]
    }
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800594e:	687b      	ldr	r3, [r7, #4]
    }
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000334 	.word	0x20000334
 800595c:	20000338 	.word	0x20000338
 8005960:	08009350 	.word	0x08009350
 8005964:	08005b5d 	.word	0x08005b5d

08005968 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005976:	202c      	movs	r0, #44	; 0x2c
 8005978:	f000 fde8 	bl	800654c <pvPortMalloc>
 800597c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f805 	bl	80059aa <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80059a0:	697b      	ldr	r3, [r7, #20]
        }
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
    }
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80059d4:	f000 fa8c 	bl	8005ef0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fd feef 	bl	80037d8 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a06:	f043 0304 	orr.w	r3, r3, #4
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8005a12:	bf00      	nop
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xTimerGenericCommand+0x2e>
        __asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	623b      	str	r3, [r7, #32]
    }
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005a4a:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <xTimerGenericCommand+0x98>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d02a      	beq.n	8005aa8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b05      	cmp	r3, #5
 8005a62:	dc18      	bgt.n	8005a96 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a64:	f7ff fc48 	bl	80052f8 <xTaskGetSchedulerState>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d109      	bne.n	8005a82 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a6e:	4b11      	ldr	r3, [pc, #68]	; (8005ab4 <xTimerGenericCommand+0x98>)
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f107 0114 	add.w	r1, r7, #20
 8005a76:	2300      	movs	r3, #0
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	f7fe f843 	bl	8003b04 <xQueueGenericSend>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a80:	e012      	b.n	8005aa8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a82:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <xTimerGenericCommand+0x98>)
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f107 0114 	add.w	r1, r7, #20
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f7fe f839 	bl	8003b04 <xQueueGenericSend>
 8005a92:	6278      	str	r0, [r7, #36]	; 0x24
 8005a94:	e008      	b.n	8005aa8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a96:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <xTimerGenericCommand+0x98>)
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f107 0114 	add.w	r1, r7, #20
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	f7fe f92d 	bl	8003d00 <xQueueGenericSendFromISR>
 8005aa6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3728      	adds	r7, #40	; 0x28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000334 	.word	0x20000334

08005ab8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005ac4:	e008      	b.n	8005ad8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	18d1      	adds	r1, r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f8dd 	bl	8005ca4 <prvInsertTimerInActiveList>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ea      	bne.n	8005ac6 <prvReloadTimer+0xe>
        }
    }
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
	...

08005afc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <prvProcessExpiredTimer+0x5c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd fec9 	bl	80038ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ffc3 	bl	8005ab8 <prvReloadTimer>
 8005b32:	e008      	b.n	8005b46 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	4798      	blx	r3
    }
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2000032c 	.word	0x2000032c

08005b5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b64:	f107 0308 	add.w	r3, r7, #8
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f857 	bl	8005c1c <prvGetNextExpireTime>
 8005b6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4619      	mov	r1, r3
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f803 	bl	8005b80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005b7a:	f000 f8d5 	bl	8005d28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b7e:	e7f1      	b.n	8005b64 <prvTimerTask+0x8>

08005b80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005b8a:	f7fe fe75 	bl	8004878 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f866 	bl	8005c64 <prvSampleTimeNow>
 8005b98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d130      	bne.n	8005c02 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <prvProcessTimerOrBlockTask+0x3c>
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d806      	bhi.n	8005bbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005bae:	f7fe fe71 	bl	8004894 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ffa1 	bl	8005afc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005bba:	e024      	b.n	8005c06 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <prvProcessTimerOrBlockTask+0x90>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <prvProcessTimerOrBlockTask+0x50>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <prvProcessTimerOrBlockTask+0x52>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bd4:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <prvProcessTimerOrBlockTask+0x94>)
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fe fb7d 	bl	80042e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005be6:	f7fe fe55 	bl	8004894 <xTaskResumeAll>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <prvProcessTimerOrBlockTask+0x98>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
    }
 8005c00:	e001      	b.n	8005c06 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005c02:	f7fe fe47 	bl	8004894 <xTaskResumeAll>
    }
 8005c06:	bf00      	nop
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000330 	.word	0x20000330
 8005c14:	20000334 	.word	0x20000334
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c24:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <prvGetNextExpireTime+0x44>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <prvGetNextExpireTime+0x16>
 8005c2e:	2201      	movs	r2, #1
 8005c30:	e000      	b.n	8005c34 <prvGetNextExpireTime+0x18>
 8005c32:	2200      	movs	r2, #0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <prvGetNextExpireTime+0x44>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e001      	b.n	8005c50 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005c50:	68fb      	ldr	r3, [r7, #12]
    }
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	2000032c 	.word	0x2000032c

08005c64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005c6c:	f7fe ff12 	bl	8004a94 <xTaskGetTickCount>
 8005c70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005c72:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <prvSampleTimeNow+0x3c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d205      	bcs.n	8005c88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005c7c:	f000 f912 	bl	8005ea4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005c8e:	4a04      	ldr	r2, [pc, #16]	; (8005ca0 <prvSampleTimeNow+0x3c>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005c94:	68fb      	ldr	r3, [r7, #12]
    }
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000033c 	.word	0x2000033c

08005ca4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d812      	bhi.n	8005cf0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e01b      	b.n	8005d16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cde:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <prvInsertTimerInActiveList+0x7c>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7fd fda6 	bl	800383a <vListInsert>
 8005cee:	e012      	b.n	8005d16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d206      	bcs.n	8005d06 <prvInsertTimerInActiveList+0x62>
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005d00:	2301      	movs	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e007      	b.n	8005d16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <prvInsertTimerInActiveList+0x80>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7fd fd92 	bl	800383a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005d16:	697b      	ldr	r3, [r7, #20]
    }
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000330 	.word	0x20000330
 8005d24:	2000032c 	.word	0x2000032c

08005d28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d2e:	e0a6      	b.n	8005e7e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f2c0 80a3 	blt.w	8005e7e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fd fdaf 	bl	80038ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff ff87 	bl	8005c64 <prvSampleTimeNow>
 8005d56:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	f200 808d 	bhi.w	8005e7c <prvProcessReceivedCommands+0x154>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <prvProcessReceivedCommands+0x40>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005d8d 	.word	0x08005d8d
 8005d70:	08005df5 	.word	0x08005df5
 8005d74:	08005e09 	.word	0x08005e09
 8005d78:	08005e53 	.word	0x08005e53
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d8d 	.word	0x08005d8d
 8005d84:	08005df5 	.word	0x08005df5
 8005d88:	08005e09 	.word	0x08005e09
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	18d1      	adds	r1, r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	69f8      	ldr	r0, [r7, #28]
 8005dac:	f7ff ff7a 	bl	8005ca4 <prvInsertTimerInActiveList>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d063      	beq.n	8005e7e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	69f8      	ldr	r0, [r7, #28]
 8005dd2:	f7ff fe71 	bl	8005ab8 <prvReloadTimer>
 8005dd6:	e008      	b.n	8005dea <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	69f8      	ldr	r0, [r7, #28]
 8005df0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005df2:	e044      	b.n	8005e7e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005e06:	e03a      	b.n	8005e7e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	617b      	str	r3, [r7, #20]
    }
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	18d1      	adds	r1, r2, r3
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	69f8      	ldr	r0, [r7, #28]
 8005e4c:	f7ff ff2a 	bl	8005ca4 <prvInsertTimerInActiveList>
                        break;
 8005e50:	e015      	b.n	8005e7e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d103      	bne.n	8005e68 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005e60:	69f8      	ldr	r0, [r7, #28]
 8005e62:	f000 fc2d 	bl	80066c0 <vPortFree>
 8005e66:	e00a      	b.n	8005e7e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005e7a:	e000      	b.n	8005e7e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005e7c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <prvProcessReceivedCommands+0x178>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f107 0108 	add.w	r1, r7, #8
 8005e86:	2200      	movs	r2, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fd ffeb 	bl	8003e64 <xQueueReceive>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f af4d 	bne.w	8005d30 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000334 	.word	0x20000334

08005ea4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eaa:	e009      	b.n	8005ec0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <prvSwitchTimerLists+0x44>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8005eba:	6838      	ldr	r0, [r7, #0]
 8005ebc:	f7ff fe1e 	bl	8005afc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <prvSwitchTimerLists+0x44>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005eca:	4b07      	ldr	r3, [pc, #28]	; (8005ee8 <prvSwitchTimerLists+0x44>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <prvSwitchTimerLists+0x48>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <prvSwitchTimerLists+0x44>)
 8005ed6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005ed8:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvSwitchTimerLists+0x48>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6013      	str	r3, [r2, #0]
    }
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	2000032c 	.word	0x2000032c
 8005eec:	20000330 	.word	0x20000330

08005ef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005ef4:	f000 fa06 	bl	8006304 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <prvCheckForValidListAndQueue+0x54>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d11d      	bne.n	8005f3c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005f00:	4811      	ldr	r0, [pc, #68]	; (8005f48 <prvCheckForValidListAndQueue+0x58>)
 8005f02:	f7fd fc49 	bl	8003798 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005f06:	4811      	ldr	r0, [pc, #68]	; (8005f4c <prvCheckForValidListAndQueue+0x5c>)
 8005f08:	f7fd fc46 	bl	8003798 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005f0c:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <prvCheckForValidListAndQueue+0x60>)
 8005f0e:	4a0e      	ldr	r2, [pc, #56]	; (8005f48 <prvCheckForValidListAndQueue+0x58>)
 8005f10:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <prvCheckForValidListAndQueue+0x64>)
 8005f14:	4a0d      	ldr	r2, [pc, #52]	; (8005f4c <prvCheckForValidListAndQueue+0x5c>)
 8005f16:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f18:	2200      	movs	r2, #0
 8005f1a:	210c      	movs	r1, #12
 8005f1c:	200a      	movs	r0, #10
 8005f1e:	f7fd fd7f 	bl	8003a20 <xQueueGenericCreate>
 8005f22:	4603      	mov	r3, r0
 8005f24:	4a07      	ldr	r2, [pc, #28]	; (8005f44 <prvCheckForValidListAndQueue+0x54>)
 8005f26:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <prvCheckForValidListAndQueue+0x54>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <prvCheckForValidListAndQueue+0x54>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4908      	ldr	r1, [pc, #32]	; (8005f58 <prvCheckForValidListAndQueue+0x68>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe f984 	bl	8004244 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f3c:	f000 fa12 	bl	8006364 <vPortExitCritical>
    }
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000334 	.word	0x20000334
 8005f48:	20000304 	.word	0x20000304
 8005f4c:	20000318 	.word	0x20000318
 8005f50:	2000032c 	.word	0x2000032c
 8005f54:	20000330 	.word	0x20000330
 8005f58:	08009358 	.word	0x08009358

08005f5c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xTimerIsTimerActive+0x28>
        __asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
    }
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8005f84:	f000 f9be 	bl	8006304 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e001      	b.n	8005fa0 <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8005fa0:	f000 f9e0 	bl	8006364 <vPortExitCritical>

        return xReturn;
 8005fa4:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b04      	subs	r3, #4
 8005fc0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3b04      	subs	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <pxPortInitialiseStack+0x64>)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3b14      	subs	r3, #20
 8005fea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f06f 0202 	mvn.w	r2, #2
 8005ffe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3b20      	subs	r3, #32
 8006004:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006006:	68fb      	ldr	r3, [r7, #12]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	08006019 	.word	0x08006019

08006018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006022:	4b12      	ldr	r3, [pc, #72]	; (800606c <prvTaskExitError+0x54>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d00a      	beq.n	8006042 <prvTaskExitError+0x2a>
        __asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60fb      	str	r3, [r7, #12]
    }
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <prvTaskExitError+0x28>
        __asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60bb      	str	r3, [r7, #8]
    }
 8006054:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006056:	bf00      	nop
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0fc      	beq.n	8006058 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000018 	.word	0x20000018

08006070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <pxCurrentTCBConst2>)
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	6808      	ldr	r0, [r1, #0]
 8006076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	f380 8809 	msr	PSP, r0
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8811 	msr	BASEPRI, r0
 800608a:	4770      	bx	lr
 800608c:	f3af 8000 	nop.w

08006090 <pxCurrentTCBConst2>:
 8006090:	200001ec 	.word	0x200001ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop

08006098 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006098:	4808      	ldr	r0, [pc, #32]	; (80060bc <prvPortStartFirstTask+0x24>)
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	6800      	ldr	r0, [r0, #0]
 800609e:	f380 8808 	msr	MSP, r0
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8814 	msr	CONTROL, r0
 80060aa:	b662      	cpsie	i
 80060ac:	b661      	cpsie	f
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	df00      	svc	0
 80060b8:	bf00      	nop
 80060ba:	0000      	.short	0x0000
 80060bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop

080060c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060ca:	4b46      	ldr	r3, [pc, #280]	; (80061e4 <xPortStartScheduler+0x120>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a46      	ldr	r2, [pc, #280]	; (80061e8 <xPortStartScheduler+0x124>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10a      	bne.n	80060ea <xPortStartScheduler+0x26>
        __asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
    }
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060ea:	4b3e      	ldr	r3, [pc, #248]	; (80061e4 <xPortStartScheduler+0x120>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <xPortStartScheduler+0x128>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10a      	bne.n	800610a <xPortStartScheduler+0x46>
        __asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
    }
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800610a:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <xPortStartScheduler+0x12c>)
 800610c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	22ff      	movs	r2, #255	; 0xff
 800611a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	b2db      	uxtb	r3, r3
 8006128:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4b31      	ldr	r3, [pc, #196]	; (80061f4 <xPortStartScheduler+0x130>)
 8006130:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <xPortStartScheduler+0x134>)
 8006134:	2207      	movs	r2, #7
 8006136:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006138:	e009      	b.n	800614e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800613a:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <xPortStartScheduler+0x134>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <xPortStartScheduler+0x134>)
 8006142:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d0ef      	beq.n	800613a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800615a:	4b27      	ldr	r3, [pc, #156]	; (80061f8 <xPortStartScheduler+0x134>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f1c3 0307 	rsb	r3, r3, #7
 8006162:	2b04      	cmp	r3, #4
 8006164:	d00a      	beq.n	800617c <xPortStartScheduler+0xb8>
        __asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60bb      	str	r3, [r7, #8]
    }
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <xPortStartScheduler+0x134>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <xPortStartScheduler+0x134>)
 8006184:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006186:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <xPortStartScheduler+0x134>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800618e:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <xPortStartScheduler+0x134>)
 8006190:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800619a:	4b18      	ldr	r3, [pc, #96]	; (80061fc <xPortStartScheduler+0x138>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a17      	ldr	r2, [pc, #92]	; (80061fc <xPortStartScheduler+0x138>)
 80061a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <xPortStartScheduler+0x138>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a14      	ldr	r2, [pc, #80]	; (80061fc <xPortStartScheduler+0x138>)
 80061ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80061b2:	f000 f95b 	bl	800646c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <xPortStartScheduler+0x13c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80061bc:	f000 f97a 	bl	80064b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <xPortStartScheduler+0x140>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a0f      	ldr	r2, [pc, #60]	; (8006204 <xPortStartScheduler+0x140>)
 80061c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80061cc:	f7ff ff64 	bl	8006098 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80061d0:	f7fe fda8 	bl	8004d24 <vTaskSwitchContext>
    prvTaskExitError();
 80061d4:	f7ff ff20 	bl	8006018 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed00 	.word	0xe000ed00
 80061e8:	410fc271 	.word	0x410fc271
 80061ec:	410fc270 	.word	0x410fc270
 80061f0:	e000e400 	.word	0xe000e400
 80061f4:	20000340 	.word	0x20000340
 80061f8:	20000344 	.word	0x20000344
 80061fc:	e000ed20 	.word	0xe000ed20
 8006200:	20000018 	.word	0x20000018
 8006204:	e000ef34 	.word	0xe000ef34

08006208 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800620e:	4b37      	ldr	r3, [pc, #220]	; (80062ec <vInitPrioGroupValue+0xe4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <vInitPrioGroupValue+0xe8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10a      	bne.n	800622e <vInitPrioGroupValue+0x26>
        __asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	613b      	str	r3, [r7, #16]
    }
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800622e:	4b2f      	ldr	r3, [pc, #188]	; (80062ec <vInitPrioGroupValue+0xe4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a30      	ldr	r2, [pc, #192]	; (80062f4 <vInitPrioGroupValue+0xec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d10a      	bne.n	800624e <vInitPrioGroupValue+0x46>
        __asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60fb      	str	r3, [r7, #12]
    }
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <vInitPrioGroupValue+0xf0>)
 8006250:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	22ff      	movs	r2, #255	; 0xff
 800625e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b22      	ldr	r3, [pc, #136]	; (80062fc <vInitPrioGroupValue+0xf4>)
 8006274:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006276:	4b22      	ldr	r3, [pc, #136]	; (8006300 <vInitPrioGroupValue+0xf8>)
 8006278:	2207      	movs	r2, #7
 800627a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627c:	e009      	b.n	8006292 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800627e:	4b20      	ldr	r3, [pc, #128]	; (8006300 <vInitPrioGroupValue+0xf8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3b01      	subs	r3, #1
 8006284:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <vInitPrioGroupValue+0xf8>)
 8006286:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d0ef      	beq.n	800627e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800629e:	4b18      	ldr	r3, [pc, #96]	; (8006300 <vInitPrioGroupValue+0xf8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1c3 0307 	rsb	r3, r3, #7
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d00a      	beq.n	80062c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60bb      	str	r3, [r7, #8]
    }
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c0:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <vInitPrioGroupValue+0xf8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	4a0e      	ldr	r2, [pc, #56]	; (8006300 <vInitPrioGroupValue+0xf8>)
 80062c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <vInitPrioGroupValue+0xf8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062d2:	4a0b      	ldr	r2, [pc, #44]	; (8006300 <vInitPrioGroupValue+0xf8>)
 80062d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	e000ed00 	.word	0xe000ed00
 80062f0:	410fc271 	.word	0x410fc271
 80062f4:	410fc270 	.word	0x410fc270
 80062f8:	e000e400 	.word	0xe000e400
 80062fc:	20000340 	.word	0x20000340
 8006300:	20000344 	.word	0x20000344

08006304 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
        __asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
    }
 800631c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <vPortEnterCritical+0x58>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a0d      	ldr	r2, [pc, #52]	; (800635c <vPortEnterCritical+0x58>)
 8006326:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <vPortEnterCritical+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d10f      	bne.n	8006350 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortEnterCritical+0x5c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <vPortEnterCritical+0x4c>
        __asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	603b      	str	r3, [r7, #0]
    }
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <vPortEnterCritical+0x4a>
    }
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20000018 	.word	0x20000018
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <vPortExitCritical+0x50>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <vPortExitCritical+0x24>
        __asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
    }
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vPortExitCritical+0x50>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3b01      	subs	r3, #1
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <vPortExitCritical+0x50>)
 8006390:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <vPortExitCritical+0x42>
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f383 8811 	msr	BASEPRI, r3
    }
 80063a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000018 	.word	0x20000018
	...

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f7fe fc98 	bl	8004d24 <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	200001ec 	.word	0x200001ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
        __asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
    }
 8006440:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006442:	f7fe fb55 	bl	8004af0 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <SysTick_Handler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
    }
 800645e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	20000008 	.word	0x20000008
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
 80064c2:	0000      	.short	0x0000
 80064c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop

080064cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80064d2:	f3ef 8305 	mrs	r3, IPSR
 80064d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b0f      	cmp	r3, #15
 80064dc:	d914      	bls.n	8006508 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064de:	4a17      	ldr	r2, [pc, #92]	; (800653c <vPortValidateInterruptPriority+0x70>)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064e8:	4b15      	ldr	r3, [pc, #84]	; (8006540 <vPortValidateInterruptPriority+0x74>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	7afa      	ldrb	r2, [r7, #11]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d20a      	bcs.n	8006508 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	607b      	str	r3, [r7, #4]
    }
 8006504:	bf00      	nop
 8006506:	e7fe      	b.n	8006506 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <vPortValidateInterruptPriority+0x78>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006510:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <vPortValidateInterruptPriority+0x7c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d90a      	bls.n	800652e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	603b      	str	r3, [r7, #0]
    }
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <vPortValidateInterruptPriority+0x60>
    }
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000e3f0 	.word	0xe000e3f0
 8006540:	20000340 	.word	0x20000340
 8006544:	e000ed0c 	.word	0xe000ed0c
 8006548:	20000344 	.word	0x20000344

0800654c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006558:	f7fe f98e 	bl	8004878 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800655c:	4b53      	ldr	r3, [pc, #332]	; (80066ac <pvPortMalloc+0x160>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006564:	f000 f908 	bl	8006778 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d012      	beq.n	8006594 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800656e:	2208      	movs	r2, #8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	3308      	adds	r3, #8
 800657a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	43db      	mvns	r3, r3
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d804      	bhi.n	8006590 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	4413      	add	r3, r2
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	e001      	b.n	8006594 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	db70      	blt.n	800667c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d06d      	beq.n	800667c <pvPortMalloc+0x130>
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <pvPortMalloc+0x164>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d868      	bhi.n	800667c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80065aa:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <pvPortMalloc+0x168>)
 80065ac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80065ae:	4b41      	ldr	r3, [pc, #260]	; (80066b4 <pvPortMalloc+0x168>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b4:	e004      	b.n	80065c0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d903      	bls.n	80065d2 <pvPortMalloc+0x86>
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f1      	bne.n	80065b6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80065d2:	4b36      	ldr	r3, [pc, #216]	; (80066ac <pvPortMalloc+0x160>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	429a      	cmp	r2, r3
 80065da:	d04f      	beq.n	800667c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2208      	movs	r2, #8
 80065e2:	4413      	add	r3, r2
 80065e4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	2308      	movs	r3, #8
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d91f      	bls.n	800663e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <pvPortMalloc+0xda>
        __asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
    }
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	1ad2      	subs	r2, r2, r3
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006638:	6978      	ldr	r0, [r7, #20]
 800663a:	f000 f8f9 	bl	8006830 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800663e:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <pvPortMalloc+0x164>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	4a19      	ldr	r2, [pc, #100]	; (80066b0 <pvPortMalloc+0x164>)
 800664a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800664c:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <pvPortMalloc+0x164>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <pvPortMalloc+0x16c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d203      	bcs.n	8006660 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <pvPortMalloc+0x164>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <pvPortMalloc+0x16c>)
 800665e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <pvPortMalloc+0x170>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3301      	adds	r3, #1
 8006678:	4a10      	ldr	r2, [pc, #64]	; (80066bc <pvPortMalloc+0x170>)
 800667a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800667c:	f7fe f90a 	bl	8004894 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <pvPortMalloc+0x154>
        __asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
    }
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <pvPortMalloc+0x152>
    return pvReturn;
 80066a0:	69fb      	ldr	r3, [r7, #28]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20012f50 	.word	0x20012f50
 80066b0:	20012f54 	.word	0x20012f54
 80066b4:	20012f48 	.word	0x20012f48
 80066b8:	20012f58 	.word	0x20012f58
 80066bc:	20012f5c 	.word	0x20012f5c

080066c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d049      	beq.n	8006766 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80066d2:	2308      	movs	r3, #8
 80066d4:	425b      	negs	r3, r3
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db0a      	blt.n	80066fe <vPortFree+0x3e>
        __asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
    }
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <vPortFree+0x5c>
        __asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	60bb      	str	r3, [r7, #8]
    }
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	0fdb      	lsrs	r3, r3, #31
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01c      	beq.n	8006766 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d118      	bne.n	8006766 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006740:	f7fe f89a 	bl	8004878 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <vPortFree+0xb0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4413      	add	r3, r2
 800674e:	4a08      	ldr	r2, [pc, #32]	; (8006770 <vPortFree+0xb0>)
 8006750:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006752:	6938      	ldr	r0, [r7, #16]
 8006754:	f000 f86c 	bl	8006830 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <vPortFree+0xb4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	4a05      	ldr	r2, [pc, #20]	; (8006774 <vPortFree+0xb4>)
 8006760:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006762:	f7fe f897 	bl	8004894 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20012f54 	.word	0x20012f54
 8006774:	20012f60 	.word	0x20012f60

08006778 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800677e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006782:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006784:	4b25      	ldr	r3, [pc, #148]	; (800681c <prvHeapInit+0xa4>)
 8006786:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3307      	adds	r3, #7
 8006796:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <prvHeapInit+0xa4>)
 80067a8:	4413      	add	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067b0:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <prvHeapInit+0xa8>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <prvHeapInit+0xa8>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80067c4:	2208      	movs	r2, #8
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0307 	bic.w	r3, r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a13      	ldr	r2, [pc, #76]	; (8006824 <prvHeapInit+0xac>)
 80067d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <prvHeapInit+0xac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2200      	movs	r2, #0
 80067e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80067e2:	4b10      	ldr	r3, [pc, #64]	; (8006824 <prvHeapInit+0xac>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <prvHeapInit+0xac>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a08      	ldr	r2, [pc, #32]	; (8006828 <prvHeapInit+0xb0>)
 8006806:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a07      	ldr	r2, [pc, #28]	; (800682c <prvHeapInit+0xb4>)
 800680e:	6013      	str	r3, [r2, #0]
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000348 	.word	0x20000348
 8006820:	20012f48 	.word	0x20012f48
 8006824:	20012f50 	.word	0x20012f50
 8006828:	20012f58 	.word	0x20012f58
 800682c:	20012f54 	.word	0x20012f54

08006830 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006838:	4b28      	ldr	r3, [pc, #160]	; (80068dc <prvInsertBlockIntoFreeList+0xac>)
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e002      	b.n	8006844 <prvInsertBlockIntoFreeList+0x14>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	429a      	cmp	r2, r3
 800684c:	d8f7      	bhi.n	800683e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	4413      	add	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d108      	bne.n	8006872 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	441a      	add	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d118      	bne.n	80068b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <prvInsertBlockIntoFreeList+0xb0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d00d      	beq.n	80068ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	441a      	add	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e008      	b.n	80068c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <prvInsertBlockIntoFreeList+0xb0>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e003      	b.n	80068c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d002      	beq.n	80068ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20012f48 	.word	0x20012f48
 80068e0:	20012f50 	.word	0x20012f50

080068e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80068e8:	4803      	ldr	r0, [pc, #12]	; (80068f8 <_cbSendSystemDesc+0x14>)
 80068ea:	f001 fd2f 	bl	800834c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80068ee:	4803      	ldr	r0, [pc, #12]	; (80068fc <_cbSendSystemDesc+0x18>)
 80068f0:	f001 fd2c 	bl	800834c <SEGGER_SYSVIEW_SendSysDesc>
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	08009360 	.word	0x08009360
 80068fc:	08009398 	.word	0x08009398

08006900 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006904:	4b06      	ldr	r3, [pc, #24]	; (8006920 <SEGGER_SYSVIEW_Conf+0x20>)
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	4b05      	ldr	r3, [pc, #20]	; (8006920 <SEGGER_SYSVIEW_Conf+0x20>)
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <SEGGER_SYSVIEW_Conf+0x24>)
 800690e:	4a06      	ldr	r2, [pc, #24]	; (8006928 <SEGGER_SYSVIEW_Conf+0x28>)
 8006910:	f001 f90e 	bl	8007b30 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006914:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006918:	f001 f94e 	bl	8007bb8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800691c:	bf00      	nop
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000008 	.word	0x20000008
 8006924:	080068e5 	.word	0x080068e5
 8006928:	08009438 	.word	0x08009438

0800692c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800692c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692e:	b085      	sub	sp, #20
 8006930:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006932:	2300      	movs	r3, #0
 8006934:	607b      	str	r3, [r7, #4]
 8006936:	e033      	b.n	80069a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006938:	491e      	ldr	r1, [pc, #120]	; (80069b4 <_cbSendTaskList+0x88>)
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4613      	mov	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	491a      	ldr	r1, [pc, #104]	; (80069b4 <_cbSendTaskList+0x88>)
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	3304      	adds	r3, #4
 8006958:	6819      	ldr	r1, [r3, #0]
 800695a:	4c16      	ldr	r4, [pc, #88]	; (80069b4 <_cbSendTaskList+0x88>)
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4423      	add	r3, r4
 8006968:	3308      	adds	r3, #8
 800696a:	681c      	ldr	r4, [r3, #0]
 800696c:	4d11      	ldr	r5, [pc, #68]	; (80069b4 <_cbSendTaskList+0x88>)
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	442b      	add	r3, r5
 800697a:	330c      	adds	r3, #12
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	4e0d      	ldr	r6, [pc, #52]	; (80069b4 <_cbSendTaskList+0x88>)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4433      	add	r3, r6
 800698c:	3310      	adds	r3, #16
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	462b      	mov	r3, r5
 8006994:	4622      	mov	r2, r4
 8006996:	f000 f8bd 	bl	8006b14 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3301      	adds	r3, #1
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <_cbSendTaskList+0x8c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d3c6      	bcc.n	8006938 <_cbSendTaskList+0xc>
  }
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b4:	20012f64 	.word	0x20012f64
 80069b8:	20013004 	.word	0x20013004

080069bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80069bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80069c4:	f7fe f876 	bl	8004ab4 <xTaskGetTickCountFromISR>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2200      	movs	r2, #0
 80069cc:	469a      	mov	sl, r3
 80069ce:	4693      	mov	fp, r2
 80069d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80069d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	f04f 0a00 	mov.w	sl, #0
 80069e0:	f04f 0b00 	mov.w	fp, #0
 80069e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80069e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80069ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80069f0:	4652      	mov	r2, sl
 80069f2:	465b      	mov	r3, fp
 80069f4:	1a14      	subs	r4, r2, r0
 80069f6:	eb63 0501 	sbc.w	r5, r3, r1
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	00ab      	lsls	r3, r5, #2
 8006a04:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006a08:	00a2      	lsls	r2, r4, #2
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	461d      	mov	r5, r3
 8006a0e:	eb14 0800 	adds.w	r8, r4, r0
 8006a12:	eb45 0901 	adc.w	r9, r5, r1
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a2a:	4690      	mov	r8, r2
 8006a2c:	4699      	mov	r9, r3
 8006a2e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006a32:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006a36:	4610      	mov	r0, r2
 8006a38:	4619      	mov	r1, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006a44 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006a52:	2205      	movs	r2, #5
 8006a54:	492b      	ldr	r1, [pc, #172]	; (8006b04 <SYSVIEW_AddTask+0xc0>)
 8006a56:	68b8      	ldr	r0, [r7, #8]
 8006a58:	f001 ff8c 	bl	8008974 <memcmp>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d04b      	beq.n	8006afa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b07      	cmp	r3, #7
 8006a68:	d903      	bls.n	8006a72 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006a6a:	4828      	ldr	r0, [pc, #160]	; (8006b0c <SYSVIEW_AddTask+0xc8>)
 8006a6c:	f001 ff06 	bl	800887c <SEGGER_SYSVIEW_Warn>
    return;
 8006a70:	e044      	b.n	8006afc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006a72:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4926      	ldr	r1, [pc, #152]	; (8006b10 <SYSVIEW_AddTask+0xcc>)
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4921      	ldr	r1, [pc, #132]	; (8006b10 <SYSVIEW_AddTask+0xcc>)
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	3304      	adds	r3, #4
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	491b      	ldr	r1, [pc, #108]	; (8006b10 <SYSVIEW_AddTask+0xcc>)
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3308      	adds	r3, #8
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4916      	ldr	r1, [pc, #88]	; (8006b10 <SYSVIEW_AddTask+0xcc>)
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	440b      	add	r3, r1
 8006ac2:	330c      	adds	r3, #12
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4910      	ldr	r1, [pc, #64]	; (8006b10 <SYSVIEW_AddTask+0xcc>)
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3310      	adds	r3, #16
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006ade:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <SYSVIEW_AddTask+0xc4>)
 8006ae6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f80e 	bl	8006b14 <SYSVIEW_SendTaskInfo>
 8006af8:	e000      	b.n	8006afc <SYSVIEW_AddTask+0xb8>
    return;
 8006afa:	bf00      	nop

}
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	080093a8 	.word	0x080093a8
 8006b08:	20013004 	.word	0x20013004
 8006b0c:	080093b0 	.word	0x080093b0
 8006b10:	20012f64 	.word	0x20012f64

08006b14 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	2214      	movs	r2, #20
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 ff32 	bl	8008994 <memset>
  TaskInfo.TaskID     = TaskID;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006b44:	f107 0314 	add.w	r3, r7, #20
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fb07 	bl	800815c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006b4e:	bf00      	nop
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <USART2_IRQHandler+0x80>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d011      	beq.n	8006b92 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <USART2_IRQHandler+0x84>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 030b 	and.w	r3, r3, #11
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <USART2_IRQHandler+0x88>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <USART2_IRQHandler+0x88>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	79fa      	ldrb	r2, [r7, #7]
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01a      	beq.n	8006bd2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8006b9c:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <USART2_IRQHandler+0x8c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d015      	beq.n	8006bd0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8006ba4:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <USART2_IRQHandler+0x8c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	1dfa      	adds	r2, r7, #7
 8006baa:	4610      	mov	r0, r2
 8006bac:	4798      	blx	r3
 8006bae:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <USART2_IRQHandler+0x90>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <USART2_IRQHandler+0x90>)
 8006bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e006      	b.n	8006bd2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <USART2_IRQHandler+0x80>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8006bc8:	79fa      	ldrb	r2, [r7, #7]
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <USART2_IRQHandler+0x84>)
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e000      	b.n	8006bd2 <USART2_IRQHandler+0x7a>
      return;
 8006bd0:	bf00      	nop
    }
  }
}
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	40011000 	.word	0x40011000
 8006bdc:	40011004 	.word	0x40011004
 8006be0:	20013008 	.word	0x20013008
 8006be4:	2001300c 	.word	0x2001300c
 8006be8:	4001100c 	.word	0x4001100c

08006bec <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfa:	6013      	str	r3, [r2, #0]
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	4001100c 	.word	0x4001100c

08006c0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006c12:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <_DoInit+0x98>)
 8006c14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a20      	ldr	r2, [pc, #128]	; (8006ca8 <_DoInit+0x9c>)
 8006c26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <_DoInit+0xa0>)
 8006c2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <_DoInit+0x9c>)
 8006c4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <_DoInit+0xa4>)
 8006c52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2210      	movs	r2, #16
 8006c58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3307      	adds	r3, #7
 8006c70:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <_DoInit+0xa8>)
 8006c72:	6810      	ldr	r0, [r2, #0]
 8006c74:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006c76:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a0e      	ldr	r2, [pc, #56]	; (8006cb8 <_DoInit+0xac>)
 8006c7e:	6810      	ldr	r0, [r2, #0]
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	8891      	ldrh	r1, [r2, #4]
 8006c84:	7992      	ldrb	r2, [r2, #6]
 8006c86:	8099      	strh	r1, [r3, #4]
 8006c88:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006c8a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006c94:	f3bf 8f5f 	dmb	sy
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	20013010 	.word	0x20013010
 8006ca8:	08009400 	.word	0x08009400
 8006cac:	200130b8 	.word	0x200130b8
 8006cb0:	200134b8 	.word	0x200134b8
 8006cb4:	0800940c 	.word	0x0800940c
 8006cb8:	08009410 	.word	0x08009410

08006cbc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <SEGGER_RTT_ReadNoLock+0x1e>
 8006cd6:	f7ff ff99 	bl	8006c0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	3360      	adds	r3, #96	; 0x60
 8006ce6:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d92b      	bls.n	8006d60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bf28      	it	cs
 8006d1a:	4613      	movcs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	4413      	add	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	6939      	ldr	r1, [r7, #16]
 8006d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d2e:	f001 fe65 	bl	80089fc <memcpy>
    NumBytesRead += NumBytesRem;
 8006d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4413      	add	r3, r2
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4413      	add	r3, r2
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4413      	add	r3, r2
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d101      	bne.n	8006d60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	bf28      	it	cs
 8006d70:	4613      	movcs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d019      	beq.n	8006dae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	4413      	add	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	6939      	ldr	r1, [r7, #16]
 8006d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8a:	f001 fe37 	bl	80089fc <memcpy>
    NumBytesRead += NumBytesRem;
 8006d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4413      	add	r3, r2
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006db8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3730      	adds	r7, #48	; 0x30
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20013010 	.word	0x20013010

08006dc8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006dd6:	4b3d      	ldr	r3, [pc, #244]	; (8006ecc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006de4:	f7ff ff12 	bl	8006c0c <_DoInit>
  SEGGER_RTT_LOCK();
 8006de8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dec:	f04f 0120 	mov.w	r1, #32
 8006df0:	f381 8811 	msr	BASEPRI, r1
 8006df4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006df6:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006df8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006dfe:	6939      	ldr	r1, [r7, #16]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3304      	adds	r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	dbeb      	blt.n	8006dfe <SEGGER_RTT_AllocUpBuffer+0x36>
 8006e26:	e000      	b.n	8006e2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006e28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	da3f      	bge.n	8006eb4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006e34:	6939      	ldr	r1, [r7, #16]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	440b      	add	r3, r1
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006e48:	6939      	ldr	r1, [r7, #16]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	4613      	mov	r3, r2
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	4413      	add	r3, r2
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	440b      	add	r3, r1
 8006e58:	3304      	adds	r3, #4
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006e5e:	6939      	ldr	r1, [r7, #16]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	4613      	mov	r3, r2
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	4413      	add	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3320      	adds	r3, #32
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006e72:	6939      	ldr	r1, [r7, #16]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	440b      	add	r3, r1
 8006e80:	3328      	adds	r3, #40	; 0x28
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	4413      	add	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	440b      	add	r3, r1
 8006e94:	3324      	adds	r3, #36	; 0x24
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006e9a:	6939      	ldr	r1, [r7, #16]
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	440b      	add	r3, r1
 8006ea8:	332c      	adds	r3, #44	; 0x2c
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006eae:	f3bf 8f5f 	dmb	sy
 8006eb2:	e002      	b.n	8006eba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20013010 	.word	0x20013010

08006ed0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006ede:	4b33      	ldr	r3, [pc, #204]	; (8006fac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006eec:	f7ff fe8e 	bl	8006c0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ef0:	4b2e      	ldr	r3, [pc, #184]	; (8006fac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006ef2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d24d      	bcs.n	8006f9c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006f00:	f3ef 8311 	mrs	r3, BASEPRI
 8006f04:	f04f 0120 	mov.w	r1, #32
 8006f08:	f381 8811 	msr	BASEPRI, r1
 8006f0c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d031      	beq.n	8006f78 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006f14:	6979      	ldr	r1, [r7, #20]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	440b      	add	r3, r1
 8006f22:	3360      	adds	r3, #96	; 0x60
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006f28:	6979      	ldr	r1, [r7, #20]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	440b      	add	r3, r1
 8006f36:	3364      	adds	r3, #100	; 0x64
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006f3c:	6979      	ldr	r1, [r7, #20]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	440b      	add	r3, r1
 8006f4a:	3368      	adds	r3, #104	; 0x68
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006f50:	6979      	ldr	r1, [r7, #20]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4613      	mov	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4413      	add	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3370      	adds	r3, #112	; 0x70
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	4413      	add	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	440b      	add	r3, r1
 8006f72:	336c      	adds	r3, #108	; 0x6c
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006f78:	6979      	ldr	r1, [r7, #20]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	4413      	add	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	440b      	add	r3, r1
 8006f86:	3374      	adds	r3, #116	; 0x74
 8006f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f8a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006f8c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	e002      	b.n	8006fa2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20013010 	.word	0x20013010

08006fb0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006fc0:	e002      	b.n	8006fc8 <_EncodeStr+0x18>
    Len++;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4413      	add	r3, r2
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f6      	bne.n	8006fc2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d901      	bls.n	8006fe0 <_EncodeStr+0x30>
    Len = Limit;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2bfe      	cmp	r3, #254	; 0xfe
 8006fe4:	d806      	bhi.n	8006ff4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	60fa      	str	r2, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	e011      	b.n	8007018 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	60fa      	str	r2, [r7, #12]
 8006ffa:	22ff      	movs	r2, #255	; 0xff
 8006ffc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	60fa      	str	r2, [r7, #12]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	0a19      	lsrs	r1, r3, #8
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	60fa      	str	r2, [r7, #12]
 8007014:	b2ca      	uxtb	r2, r1
 8007016:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800701c:	e00a      	b.n	8007034 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	1c53      	adds	r3, r2, #1
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	60f9      	str	r1, [r7, #12]
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	701a      	strb	r2, [r3, #0]
    n++;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	3301      	adds	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d3f0      	bcc.n	800701e <_EncodeStr+0x6e>
  }
  return pPayload;
 800703c:	68fb      	ldr	r3, [r7, #12]
}
 800703e:	4618      	mov	r0, r3
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3304      	adds	r3, #4
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800706a:	4b35      	ldr	r3, [pc, #212]	; (8007140 <_HandleIncomingPacket+0xdc>)
 800706c:	7e1b      	ldrb	r3, [r3, #24]
 800706e:	4618      	mov	r0, r3
 8007070:	1cfb      	adds	r3, r7, #3
 8007072:	2201      	movs	r2, #1
 8007074:	4619      	mov	r1, r3
 8007076:	f7ff fe21 	bl	8006cbc <SEGGER_RTT_ReadNoLock>
 800707a:	4603      	mov	r3, r0
 800707c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dd59      	ble.n	8007138 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	2b80      	cmp	r3, #128	; 0x80
 8007088:	d032      	beq.n	80070f0 <_HandleIncomingPacket+0x8c>
 800708a:	2b80      	cmp	r3, #128	; 0x80
 800708c:	dc42      	bgt.n	8007114 <_HandleIncomingPacket+0xb0>
 800708e:	2b07      	cmp	r3, #7
 8007090:	dc16      	bgt.n	80070c0 <_HandleIncomingPacket+0x5c>
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd3e      	ble.n	8007114 <_HandleIncomingPacket+0xb0>
 8007096:	3b01      	subs	r3, #1
 8007098:	2b06      	cmp	r3, #6
 800709a:	d83b      	bhi.n	8007114 <_HandleIncomingPacket+0xb0>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <_HandleIncomingPacket+0x40>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070c7 	.word	0x080070c7
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d3 	.word	0x080070d3
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070eb 	.word	0x080070eb
 80070c0:	2b7f      	cmp	r3, #127	; 0x7f
 80070c2:	d034      	beq.n	800712e <_HandleIncomingPacket+0xca>
 80070c4:	e026      	b.n	8007114 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80070c6:	f000 fecd 	bl	8007e64 <SEGGER_SYSVIEW_Start>
      break;
 80070ca:	e035      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80070cc:	f000 ff86 	bl	8007fdc <SEGGER_SYSVIEW_Stop>
      break;
 80070d0:	e032      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80070d2:	f001 f95f 	bl	8008394 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80070d6:	e02f      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80070d8:	f001 f924 	bl	8008324 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80070dc:	e02c      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80070de:	f000 ffa3 	bl	8008028 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80070e2:	e029      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80070e4:	f001 fb78 	bl	80087d8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80070e8:	e026      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80070ea:	f001 fb57 	bl	800879c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80070ee:	e023      	b.n	8007138 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80070f0:	4b13      	ldr	r3, [pc, #76]	; (8007140 <_HandleIncomingPacket+0xdc>)
 80070f2:	7e1b      	ldrb	r3, [r3, #24]
 80070f4:	4618      	mov	r0, r3
 80070f6:	1cfb      	adds	r3, r7, #3
 80070f8:	2201      	movs	r2, #1
 80070fa:	4619      	mov	r1, r3
 80070fc:	f7ff fdde 	bl	8006cbc <SEGGER_RTT_ReadNoLock>
 8007100:	4603      	mov	r3, r0
 8007102:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	dd13      	ble.n	8007132 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fac5 	bl	800869c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007112:	e00e      	b.n	8007132 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	b25b      	sxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	da0c      	bge.n	8007136 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800711c:	4b08      	ldr	r3, [pc, #32]	; (8007140 <_HandleIncomingPacket+0xdc>)
 800711e:	7e1b      	ldrb	r3, [r3, #24]
 8007120:	4618      	mov	r0, r3
 8007122:	1cfb      	adds	r3, r7, #3
 8007124:	2201      	movs	r2, #1
 8007126:	4619      	mov	r1, r3
 8007128:	f7ff fdc8 	bl	8006cbc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800712c:	e003      	b.n	8007136 <_HandleIncomingPacket+0xd2>
      break;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <_HandleIncomingPacket+0xd4>
      break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <_HandleIncomingPacket+0xd4>
      break;
 8007136:	bf00      	nop
    }
  }
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	200144d0 	.word	0x200144d0

08007144 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	b08c      	sub	sp, #48	; 0x30
 8007148:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800714a:	2301      	movs	r3, #1
 800714c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	3301      	adds	r3, #1
 8007152:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007158:	4b32      	ldr	r3, [pc, #200]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
 800715e:	e00b      	b.n	8007178 <_TrySendOverflowPacket+0x34>
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	b2da      	uxtb	r2, r3
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	62f9      	str	r1, [r7, #44]	; 0x2c
 800716a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	701a      	strb	r2, [r3, #0]
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	09db      	lsrs	r3, r3, #7
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	2b7f      	cmp	r3, #127	; 0x7f
 800717c:	d8f0      	bhi.n	8007160 <_TrySendOverflowPacket+0x1c>
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800718e:	4b26      	ldr	r3, [pc, #152]	; (8007228 <_TrySendOverflowPacket+0xe4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007194:	4b23      	ldr	r3, [pc, #140]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	623b      	str	r3, [r7, #32]
 80071a6:	e00b      	b.n	80071c0 <_TrySendOverflowPacket+0x7c>
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	1c59      	adds	r1, r3, #1
 80071b0:	6279      	str	r1, [r7, #36]	; 0x24
 80071b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	09db      	lsrs	r3, r3, #7
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	2b7f      	cmp	r3, #127	; 0x7f
 80071c4:	d8f0      	bhi.n	80071a8 <_TrySendOverflowPacket+0x64>
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	627a      	str	r2, [r7, #36]	; 0x24
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80071d6:	4b13      	ldr	r3, [pc, #76]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	4618      	mov	r0, r3
 80071dc:	1d3b      	adds	r3, r7, #4
 80071de:	69fa      	ldr	r2, [r7, #28]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	f7f8 fffa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80071ec:	4603      	mov	r3, r0
 80071ee:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80071f0:	f7ff fcfc 	bl	8006bec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80071fa:	4a0a      	ldr	r2, [pc, #40]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	3b01      	subs	r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e004      	b.n	8007218 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	3301      	adds	r3, #1
 8007214:	4a03      	ldr	r2, [pc, #12]	; (8007224 <_TrySendOverflowPacket+0xe0>)
 8007216:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007218:	693b      	ldr	r3, [r7, #16]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3730      	adds	r7, #48	; 0x30
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	200144d0 	.word	0x200144d0
 8007228:	e0001004 	.word	0xe0001004

0800722c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	; 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007238:	4b6d      	ldr	r3, [pc, #436]	; (80073f0 <_SendPacket+0x1c4>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d010      	beq.n	8007262 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007240:	4b6b      	ldr	r3, [pc, #428]	; (80073f0 <_SendPacket+0x1c4>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 80a5 	beq.w	8007394 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800724a:	4b69      	ldr	r3, [pc, #420]	; (80073f0 <_SendPacket+0x1c4>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d109      	bne.n	8007266 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007252:	f7ff ff77 	bl	8007144 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007256:	4b66      	ldr	r3, [pc, #408]	; (80073f0 <_SendPacket+0x1c4>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b01      	cmp	r3, #1
 800725c:	f040 809c 	bne.w	8007398 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8007260:	e001      	b.n	8007266 <_SendPacket+0x3a>
    goto Send;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <_SendPacket+0x3c>
Send:
 8007266:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b1f      	cmp	r3, #31
 800726c:	d809      	bhi.n	8007282 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800726e:	4b60      	ldr	r3, [pc, #384]	; (80073f0 <_SendPacket+0x1c4>)
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	f040 808d 	bne.w	800739c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b17      	cmp	r3, #23
 8007286:	d807      	bhi.n	8007298 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3b01      	subs	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e03d      	b.n	8007314 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b7f      	cmp	r3, #127	; 0x7f
 80072a4:	d912      	bls.n	80072cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	09da      	lsrs	r2, r3, #7
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	3a01      	subs	r2, #1
 80072be:	60fa      	str	r2, [r7, #12]
 80072c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	e006      	b.n	80072da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b7f      	cmp	r3, #127	; 0x7f
 80072de:	d912      	bls.n	8007306 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	09da      	lsrs	r2, r3, #7
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	3a01      	subs	r2, #1
 80072f8:	60fa      	str	r2, [r7, #12]
 80072fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e006      	b.n	8007314 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b01      	subs	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007314:	4b37      	ldr	r3, [pc, #220]	; (80073f4 <_SendPacket+0x1c8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800731a:	4b35      	ldr	r3, [pc, #212]	; (80073f0 <_SendPacket+0x1c4>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	e00b      	b.n	8007346 <_SendPacket+0x11a>
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	1c59      	adds	r1, r3, #1
 8007336:	6279      	str	r1, [r7, #36]	; 0x24
 8007338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	09db      	lsrs	r3, r3, #7
 8007344:	623b      	str	r3, [r7, #32]
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	2b7f      	cmp	r3, #127	; 0x7f
 800734a:	d8f0      	bhi.n	800732e <_SendPacket+0x102>
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	627a      	str	r2, [r7, #36]	; 0x24
 8007352:	6a3a      	ldr	r2, [r7, #32]
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	701a      	strb	r2, [r3, #0]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800735c:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <_SendPacket+0x1c4>)
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	4618      	mov	r0, r3
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	461a      	mov	r2, r3
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	f7f8 ff38 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007370:	4603      	mov	r3, r0
 8007372:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8007374:	f7ff fc3a 	bl	8006bec <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800737e:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <_SendPacket+0x1c4>)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	60d3      	str	r3, [r2, #12]
 8007384:	e00b      	b.n	800739e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <_SendPacket+0x1c4>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <_SendPacket+0x1c4>)
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e004      	b.n	800739e <_SendPacket+0x172>
    goto SendDone;
 8007394:	bf00      	nop
 8007396:	e002      	b.n	800739e <_SendPacket+0x172>
      goto SendDone;
 8007398:	bf00      	nop
 800739a:	e000      	b.n	800739e <_SendPacket+0x172>
      goto SendDone;
 800739c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800739e:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <_SendPacket+0x1c4>)
 80073a0:	7e1b      	ldrb	r3, [r3, #24]
 80073a2:	4619      	mov	r1, r3
 80073a4:	4a14      	ldr	r2, [pc, #80]	; (80073f8 <_SendPacket+0x1cc>)
 80073a6:	460b      	mov	r3, r1
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	440b      	add	r3, r1
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	4413      	add	r3, r2
 80073b0:	336c      	adds	r3, #108	; 0x6c
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <_SendPacket+0x1c4>)
 80073b6:	7e1b      	ldrb	r3, [r3, #24]
 80073b8:	4618      	mov	r0, r3
 80073ba:	490f      	ldr	r1, [pc, #60]	; (80073f8 <_SendPacket+0x1cc>)
 80073bc:	4603      	mov	r3, r0
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	4403      	add	r3, r0
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	440b      	add	r3, r1
 80073c6:	3370      	adds	r3, #112	; 0x70
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d00b      	beq.n	80073e6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <_SendPacket+0x1c4>)
 80073d0:	789b      	ldrb	r3, [r3, #2]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <_SendPacket+0x1c4>)
 80073d8:	2201      	movs	r2, #1
 80073da:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80073dc:	f7ff fe42 	bl	8007064 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80073e0:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <_SendPacket+0x1c4>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80073e6:	bf00      	nop
 80073e8:	3728      	adds	r7, #40	; 0x28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200144d0 	.word	0x200144d0
 80073f4:	e0001004 	.word	0xe0001004
 80073f8:	20013010 	.word	0x20013010

080073fc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3301      	adds	r3, #1
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d80a      	bhi.n	800742c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6051      	str	r1, [r2, #4]
 8007420:	78fa      	ldrb	r2, [r7, #3]
 8007422:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d15a      	bne.n	80074ea <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	623b      	str	r3, [r7, #32]
 8007454:	e00b      	b.n	800746e <_StoreChar+0x72>
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1c59      	adds	r1, r3, #1
 800745e:	6279      	str	r1, [r7, #36]	; 0x24
 8007460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	09db      	lsrs	r3, r3, #7
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	2b7f      	cmp	r3, #127	; 0x7f
 8007472:	d8f0      	bhi.n	8007456 <_StoreChar+0x5a>
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	627a      	str	r2, [r7, #36]	; 0x24
 800747a:	6a3a      	ldr	r2, [r7, #32]
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	e00b      	b.n	80074a6 <_StoreChar+0xaa>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	b2da      	uxtb	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	1c59      	adds	r1, r3, #1
 8007496:	61f9      	str	r1, [r7, #28]
 8007498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	09db      	lsrs	r3, r3, #7
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	2b7f      	cmp	r3, #127	; 0x7f
 80074aa:	d8f0      	bhi.n	800748e <_StoreChar+0x92>
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	61fa      	str	r2, [r7, #28]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	221a      	movs	r2, #26
 80074c2:	6939      	ldr	r1, [r7, #16]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff feb1 	bl	800722c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fdbb 	bl	800704a <_PreparePacket>
 80074d4:	4602      	mov	r2, r0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	611a      	str	r2, [r3, #16]
  }
}
 80074ea:	bf00      	nop
 80074ec:	3728      	adds	r7, #40	; 0x28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08a      	sub	sp, #40	; 0x28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8007506:	2301      	movs	r3, #1
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800750a:	2301      	movs	r3, #1
 800750c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800750e:	e007      	b.n	8007520 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	623b      	str	r3, [r7, #32]
    Width++;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	3301      	adds	r3, #1
 800751e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d2f3      	bcs.n	8007510 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	429a      	cmp	r2, r3
 800752e:	d901      	bls.n	8007534 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8007534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d11f      	bne.n	800757e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01c      	beq.n	800757e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d005      	beq.n	800755a <_PrintUnsigned+0x66>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <_PrintUnsigned+0x66>
        c = '0';
 8007554:	2330      	movs	r3, #48	; 0x30
 8007556:	76fb      	strb	r3, [r7, #27]
 8007558:	e001      	b.n	800755e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800755a:	2320      	movs	r3, #32
 800755c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800755e:	e007      	b.n	8007570 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	3b01      	subs	r3, #1
 8007564:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8007566:	7efb      	ldrb	r3, [r7, #27]
 8007568:	4619      	mov	r1, r3
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff ff46 	bl	80073fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <_PrintUnsigned+0x8a>
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	429a      	cmp	r2, r3
 800757c:	d3f0      	bcc.n	8007560 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d903      	bls.n	800758c <_PrintUnsigned+0x98>
      NumDigits--;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	e009      	b.n	80075a0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	fbb2 f3f3 	udiv	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	429a      	cmp	r2, r3
 800759c:	d200      	bcs.n	80075a0 <_PrintUnsigned+0xac>
        break;
 800759e:	e005      	b.n	80075ac <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	fb02 f303 	mul.w	r3, r2, r3
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80075aa:	e7e8      	b.n	800757e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ba:	fb02 f303 	mul.w	r3, r2, r3
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80075c4:	4a15      	ldr	r2, [pc, #84]	; (800761c <_PrintUnsigned+0x128>)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff ff14 	bl	80073fc <_StoreChar>
    Digit /= Base;
 80075d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e3      	bne.n	80075ac <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80075e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d011      	beq.n	8007612 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00e      	beq.n	8007612 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80075f4:	e006      	b.n	8007604 <_PrintUnsigned+0x110>
        FieldWidth--;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	3b01      	subs	r3, #1
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80075fc:	2120      	movs	r1, #32
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fefc 	bl	80073fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <_PrintUnsigned+0x11e>
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	429a      	cmp	r2, r3
 8007610:	d3f1      	bcc.n	80075f6 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8007612:	bf00      	nop
 8007614:	3728      	adds	r7, #40	; 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	0800944c 	.word	0x0800944c

08007620 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfb8      	it	lt
 8007634:	425b      	neglt	r3, r3
 8007636:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8007638:	2301      	movs	r3, #1
 800763a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800763c:	e007      	b.n	800764e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	fb92 f3f3 	sdiv	r3, r2, r3
 8007646:	613b      	str	r3, [r7, #16]
    Width++;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3301      	adds	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	429a      	cmp	r2, r3
 8007654:	daf3      	bge.n	800763e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	429a      	cmp	r2, r3
 800765c:	d901      	bls.n	8007662 <_PrintInt+0x42>
    Width = NumDigits;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00a      	beq.n	800767e <_PrintInt+0x5e>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	db04      	blt.n	8007678 <_PrintInt+0x58>
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <_PrintInt+0x5e>
    FieldWidth--;
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	3b01      	subs	r3, #1
 800767c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <_PrintInt+0x6e>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d016      	beq.n	80076bc <_PrintInt+0x9c>
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d111      	bne.n	80076bc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00e      	beq.n	80076bc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800769e:	e006      	b.n	80076ae <_PrintInt+0x8e>
        FieldWidth--;
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80076a6:	2120      	movs	r1, #32
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fea7 	bl	80073fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <_PrintInt+0x9c>
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d3f1      	bcc.n	80076a0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	da07      	bge.n	80076d2 <_PrintInt+0xb2>
    v = -v;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	425b      	negs	r3, r3
 80076c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80076c8:	212d      	movs	r1, #45	; 0x2d
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fe96 	bl	80073fc <_StoreChar>
 80076d0:	e008      	b.n	80076e4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80076dc:	212b      	movs	r1, #43	; 0x2b
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fe8c 	bl	80073fc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d019      	beq.n	8007722 <_PrintInt+0x102>
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d114      	bne.n	8007722 <_PrintInt+0x102>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d111      	bne.n	8007722 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00e      	beq.n	8007722 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007704:	e006      	b.n	8007714 <_PrintInt+0xf4>
        FieldWidth--;
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	3b01      	subs	r3, #1
 800770a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800770c:	2130      	movs	r1, #48	; 0x30
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7ff fe74 	bl	80073fc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <_PrintInt+0x102>
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	429a      	cmp	r2, r3
 8007720:	d3f1      	bcc.n	8007706 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fedf 	bl	80074f4 <_PrintUnsigned>
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b098      	sub	sp, #96	; 0x60
 8007744:	af02      	add	r7, sp, #8
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800774c:	f3ef 8311 	mrs	r3, BASEPRI
 8007750:	f04f 0120 	mov.w	r1, #32
 8007754:	f381 8811 	msr	BASEPRI, r1
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
 800775a:	48b7      	ldr	r0, [pc, #732]	; (8007a38 <_VPrintTarget+0x2f8>)
 800775c:	f7ff fc75 	bl	800704a <_PreparePacket>
 8007760:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8007762:	4bb5      	ldr	r3, [pc, #724]	; (8007a38 <_VPrintTarget+0x2f8>)
 8007764:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3301      	adds	r3, #1
 8007772:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8007786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8183 	beq.w	8007a96 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8007790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007794:	2b25      	cmp	r3, #37	; 0x25
 8007796:	f040 8170 	bne.w	8007a7a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800779a:	2300      	movs	r3, #0
 800779c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80077aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077ae:	3b23      	subs	r3, #35	; 0x23
 80077b0:	2b0d      	cmp	r3, #13
 80077b2:	d83f      	bhi.n	8007834 <_VPrintTarget+0xf4>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <_VPrintTarget+0x7c>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	08007825 	.word	0x08007825
 80077c0:	08007835 	.word	0x08007835
 80077c4:	08007835 	.word	0x08007835
 80077c8:	08007835 	.word	0x08007835
 80077cc:	08007835 	.word	0x08007835
 80077d0:	08007835 	.word	0x08007835
 80077d4:	08007835 	.word	0x08007835
 80077d8:	08007835 	.word	0x08007835
 80077dc:	08007815 	.word	0x08007815
 80077e0:	08007835 	.word	0x08007835
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	08007835 	.word	0x08007835
 80077ec:	08007835 	.word	0x08007835
 80077f0:	08007805 	.word	0x08007805
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80077f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3301      	adds	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	e01a      	b.n	800783a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8007804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007806:	f043 0302 	orr.w	r3, r3, #2
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e012      	b.n	800783a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8007814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007816:	f043 0304 	orr.w	r3, r3, #4
 800781a:	64bb      	str	r3, [r7, #72]	; 0x48
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3301      	adds	r3, #1
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e00a      	b.n	800783a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8007824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007826:	f043 0308 	orr.w	r3, r3, #8
 800782a:	64bb      	str	r3, [r7, #72]	; 0x48
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	e002      	b.n	800783a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8007834:	2300      	movs	r3, #0
 8007836:	653b      	str	r3, [r7, #80]	; 0x50
 8007838:	bf00      	nop
        }
      } while (v);
 800783a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1b0      	bne.n	80077a2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8007840:	2300      	movs	r3, #0
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800784c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007850:	2b2f      	cmp	r3, #47	; 0x2f
 8007852:	d912      	bls.n	800787a <_VPrintTarget+0x13a>
 8007854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007858:	2b39      	cmp	r3, #57	; 0x39
 800785a:	d80e      	bhi.n	800787a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8007862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	461a      	mov	r2, r3
 800786e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007872:	4413      	add	r3, r2
 8007874:	3b30      	subs	r3, #48	; 0x30
 8007876:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8007878:	e7e4      	b.n	8007844 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800787a:	2300      	movs	r3, #0
 800787c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8007886:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800788a:	2b2e      	cmp	r3, #46	; 0x2e
 800788c:	d11d      	bne.n	80078ca <_VPrintTarget+0x18a>
        sFormat++;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3301      	adds	r3, #1
 8007892:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800789c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078a0:	2b2f      	cmp	r3, #47	; 0x2f
 80078a2:	d912      	bls.n	80078ca <_VPrintTarget+0x18a>
 80078a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078a8:	2b39      	cmp	r3, #57	; 0x39
 80078aa:	d80e      	bhi.n	80078ca <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80078b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	461a      	mov	r2, r3
 80078be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078c2:	4413      	add	r3, r2
 80078c4:	3b30      	subs	r3, #48	; 0x30
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80078c8:	e7e4      	b.n	8007894 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80078d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078d6:	2b6c      	cmp	r3, #108	; 0x6c
 80078d8:	d003      	beq.n	80078e2 <_VPrintTarget+0x1a2>
 80078da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078de:	2b68      	cmp	r3, #104	; 0x68
 80078e0:	d107      	bne.n	80078f2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80078f0:	e7ef      	b.n	80078d2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80078f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078f6:	2b25      	cmp	r3, #37	; 0x25
 80078f8:	f000 80b3 	beq.w	8007a62 <_VPrintTarget+0x322>
 80078fc:	2b25      	cmp	r3, #37	; 0x25
 80078fe:	f2c0 80b7 	blt.w	8007a70 <_VPrintTarget+0x330>
 8007902:	2b78      	cmp	r3, #120	; 0x78
 8007904:	f300 80b4 	bgt.w	8007a70 <_VPrintTarget+0x330>
 8007908:	2b58      	cmp	r3, #88	; 0x58
 800790a:	f2c0 80b1 	blt.w	8007a70 <_VPrintTarget+0x330>
 800790e:	3b58      	subs	r3, #88	; 0x58
 8007910:	2b20      	cmp	r3, #32
 8007912:	f200 80ad 	bhi.w	8007a70 <_VPrintTarget+0x330>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <_VPrintTarget+0x1dc>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007a13 	.word	0x08007a13
 8007920:	08007a71 	.word	0x08007a71
 8007924:	08007a71 	.word	0x08007a71
 8007928:	08007a71 	.word	0x08007a71
 800792c:	08007a71 	.word	0x08007a71
 8007930:	08007a71 	.word	0x08007a71
 8007934:	08007a71 	.word	0x08007a71
 8007938:	08007a71 	.word	0x08007a71
 800793c:	08007a71 	.word	0x08007a71
 8007940:	08007a71 	.word	0x08007a71
 8007944:	08007a71 	.word	0x08007a71
 8007948:	080079a1 	.word	0x080079a1
 800794c:	080079c7 	.word	0x080079c7
 8007950:	08007a71 	.word	0x08007a71
 8007954:	08007a71 	.word	0x08007a71
 8007958:	08007a71 	.word	0x08007a71
 800795c:	08007a71 	.word	0x08007a71
 8007960:	08007a71 	.word	0x08007a71
 8007964:	08007a71 	.word	0x08007a71
 8007968:	08007a71 	.word	0x08007a71
 800796c:	08007a71 	.word	0x08007a71
 8007970:	08007a71 	.word	0x08007a71
 8007974:	08007a71 	.word	0x08007a71
 8007978:	08007a71 	.word	0x08007a71
 800797c:	08007a3d 	.word	0x08007a3d
 8007980:	08007a71 	.word	0x08007a71
 8007984:	08007a71 	.word	0x08007a71
 8007988:	08007a71 	.word	0x08007a71
 800798c:	08007a71 	.word	0x08007a71
 8007990:	080079ed 	.word	0x080079ed
 8007994:	08007a71 	.word	0x08007a71
 8007998:	08007a71 	.word	0x08007a71
 800799c:	08007a13 	.word	0x08007a13
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	1d19      	adds	r1, r3, #4
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	6011      	str	r1, [r2, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80079ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80079b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fd1c 	bl	80073fc <_StoreChar>
        break;
 80079c4:	e055      	b.n	8007a72 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	1d19      	adds	r1, r3, #4
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6011      	str	r1, [r2, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80079d4:	f107 0014 	add.w	r0, r7, #20
 80079d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079da:	9301      	str	r3, [sp, #4]
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e2:	220a      	movs	r2, #10
 80079e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079e6:	f7ff fe1b 	bl	8007620 <_PrintInt>
        break;
 80079ea:	e042      	b.n	8007a72 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	1d19      	adds	r1, r3, #4
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80079fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079fc:	f107 0014 	add.w	r0, r7, #20
 8007a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0a:	220a      	movs	r2, #10
 8007a0c:	f7ff fd72 	bl	80074f4 <_PrintUnsigned>
        break;
 8007a10:	e02f      	b.n	8007a72 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1d19      	adds	r1, r3, #4
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	6011      	str	r1, [r2, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8007a20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a22:	f107 0014 	add.w	r0, r7, #20
 8007a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a30:	2210      	movs	r2, #16
 8007a32:	f7ff fd5f 	bl	80074f4 <_PrintUnsigned>
        break;
 8007a36:	e01c      	b.n	8007a72 <_VPrintTarget+0x332>
 8007a38:	20014500 	.word	0x20014500
      case 'p':
        v = va_arg(*pParamList, int);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	1d19      	adds	r1, r3, #4
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6011      	str	r1, [r2, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8007a4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a4c:	f107 0014 	add.w	r0, r7, #20
 8007a50:	2300      	movs	r3, #0
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	2308      	movs	r3, #8
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2308      	movs	r3, #8
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	f7ff fd4a 	bl	80074f4 <_PrintUnsigned>
        break;
 8007a60:	e007      	b.n	8007a72 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8007a62:	f107 0314 	add.w	r3, r7, #20
 8007a66:	2125      	movs	r1, #37	; 0x25
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fcc7 	bl	80073fc <_StoreChar>
        break;
 8007a6e:	e000      	b.n	8007a72 <_VPrintTarget+0x332>
      default:
        break;
 8007a70:	bf00      	nop
      }
      sFormat++;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3301      	adds	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e007      	b.n	8007a8a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8007a7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	4611      	mov	r1, r2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff fcb9 	bl	80073fc <_StoreChar>
    }
  } while (*sFormat);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f47f ae72 	bne.w	8007778 <_VPrintTarget+0x38>
 8007a94:	e000      	b.n	8007a98 <_VPrintTarget+0x358>
      break;
 8007a96:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d041      	beq.n	8007b22 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aae:	e00b      	b.n	8007ac8 <_VPrintTarget+0x388>
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab6:	1c59      	adds	r1, r3, #1
 8007ab8:	6439      	str	r1, [r7, #64]	; 0x40
 8007aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac4:	09db      	lsrs	r3, r3, #7
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aca:	2b7f      	cmp	r3, #127	; 0x7f
 8007acc:	d8f0      	bhi.n	8007ab0 <_VPrintTarget+0x370>
 8007ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	643a      	str	r2, [r7, #64]	; 0x40
 8007ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007adc:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae6:	e00b      	b.n	8007b00 <_VPrintTarget+0x3c0>
 8007ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	1c59      	adds	r1, r3, #1
 8007af0:	63b9      	str	r1, [r7, #56]	; 0x38
 8007af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	09db      	lsrs	r3, r3, #7
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
 8007b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b02:	2b7f      	cmp	r3, #127	; 0x7f
 8007b04:	d8f0      	bhi.n	8007ae8 <_VPrintTarget+0x3a8>
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	701a      	strb	r2, [r3, #0]
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	69b9      	ldr	r1, [r7, #24]
 8007b1a:	221a      	movs	r2, #26
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fb85 	bl	800722c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8007b28:	bf00      	nop
 8007b2a:	3758      	adds	r7, #88	; 0x58
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b44:	4917      	ldr	r1, [pc, #92]	; (8007ba4 <SEGGER_SYSVIEW_Init+0x74>)
 8007b46:	4818      	ldr	r0, [pc, #96]	; (8007ba8 <SEGGER_SYSVIEW_Init+0x78>)
 8007b48:	f7ff f93e 	bl	8006dc8 <SEGGER_RTT_AllocUpBuffer>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	4b16      	ldr	r3, [pc, #88]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b52:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b56:	785a      	ldrb	r2, [r3, #1]
 8007b58:	4b14      	ldr	r3, [pc, #80]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b5a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007b5c:	4b13      	ldr	r3, [pc, #76]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b5e:	7e1b      	ldrb	r3, [r3, #24]
 8007b60:	4618      	mov	r0, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2308      	movs	r3, #8
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <SEGGER_SYSVIEW_Init+0x80>)
 8007b6a:	490f      	ldr	r1, [pc, #60]	; (8007ba8 <SEGGER_SYSVIEW_Init+0x78>)
 8007b6c:	f7ff f9b0 	bl	8006ed0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007b70:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <SEGGER_SYSVIEW_Init+0x84>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b7c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007b7e:	4a0b      	ldr	r2, [pc, #44]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007b84:	4a09      	ldr	r2, [pc, #36]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007b8a:	4a08      	ldr	r2, [pc, #32]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007b90:	4a06      	ldr	r2, [pc, #24]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <SEGGER_SYSVIEW_Init+0x7c>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	200134c8 	.word	0x200134c8
 8007ba8:	08009418 	.word	0x08009418
 8007bac:	200144d0 	.word	0x200144d0
 8007bb0:	200144c8 	.word	0x200144c8
 8007bb4:	e0001004 	.word	0xe0001004

08007bb8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007bc0:	4a04      	ldr	r2, [pc, #16]	; (8007bd4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6113      	str	r3, [r2, #16]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200144d0 	.word	0x200144d0

08007bd8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007be0:	f3ef 8311 	mrs	r3, BASEPRI
 8007be4:	f04f 0120 	mov.w	r1, #32
 8007be8:	f381 8811 	msr	BASEPRI, r1
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	4808      	ldr	r0, [pc, #32]	; (8007c10 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007bf0:	f7ff fa2b 	bl	800704a <_PreparePacket>
 8007bf4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68b8      	ldr	r0, [r7, #8]
 8007bfc:	f7ff fb16 	bl	800722c <_SendPacket>
  RECORD_END();
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f383 8811 	msr	BASEPRI, r3
}
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20014500 	.word	0x20014500

08007c14 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c22:	f04f 0120 	mov.w	r1, #32
 8007c26:	f381 8811 	msr	BASEPRI, r1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	4816      	ldr	r0, [pc, #88]	; (8007c88 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007c2e:	f7ff fa0c 	bl	800704a <_PreparePacket>
 8007c32:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	61bb      	str	r3, [r7, #24]
 8007c40:	e00b      	b.n	8007c5a <SEGGER_SYSVIEW_RecordU32+0x46>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	1c59      	adds	r1, r3, #1
 8007c4a:	61f9      	str	r1, [r7, #28]
 8007c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c50:	b2d2      	uxtb	r2, r2
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	09db      	lsrs	r3, r3, #7
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5e:	d8f0      	bhi.n	8007c42 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	61fa      	str	r2, [r7, #28]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	b2d2      	uxtb	r2, r2
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68f9      	ldr	r1, [r7, #12]
 8007c74:	6938      	ldr	r0, [r7, #16]
 8007c76:	f7ff fad9 	bl	800722c <_SendPacket>
  RECORD_END();
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f383 8811 	msr	BASEPRI, r3
}
 8007c80:	bf00      	nop
 8007c82:	3720      	adds	r7, #32
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20014500 	.word	0x20014500

08007c8c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08c      	sub	sp, #48	; 0x30
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c98:	f3ef 8311 	mrs	r3, BASEPRI
 8007c9c:	f04f 0120 	mov.w	r1, #32
 8007ca0:	f381 8811 	msr	BASEPRI, r1
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	4825      	ldr	r0, [pc, #148]	; (8007d3c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007ca8:	f7ff f9cf 	bl	800704a <_PreparePacket>
 8007cac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cba:	e00b      	b.n	8007cd4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	1c59      	adds	r1, r3, #1
 8007cc4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	09db      	lsrs	r3, r3, #7
 8007cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cd8:	d8f0      	bhi.n	8007cbc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	623b      	str	r3, [r7, #32]
 8007cf2:	e00b      	b.n	8007d0c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	1c59      	adds	r1, r3, #1
 8007cfc:	6279      	str	r1, [r7, #36]	; 0x24
 8007cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	09db      	lsrs	r3, r3, #7
 8007d0a:	623b      	str	r3, [r7, #32]
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d10:	d8f0      	bhi.n	8007cf4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	627a      	str	r2, [r7, #36]	; 0x24
 8007d18:	6a3a      	ldr	r2, [r7, #32]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	6979      	ldr	r1, [r7, #20]
 8007d26:	69b8      	ldr	r0, [r7, #24]
 8007d28:	f7ff fa80 	bl	800722c <_SendPacket>
  RECORD_END();
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f383 8811 	msr	BASEPRI, r3
}
 8007d32:	bf00      	nop
 8007d34:	3730      	adds	r7, #48	; 0x30
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20014500 	.word	0x20014500

08007d40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b090      	sub	sp, #64	; 0x40
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
 8007d4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8007d52:	f04f 0120 	mov.w	r1, #32
 8007d56:	f381 8811 	msr	BASEPRI, r1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	4840      	ldr	r0, [pc, #256]	; (8007e60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007d5e:	f7ff f974 	bl	800704a <_PreparePacket>
 8007d62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d70:	e00b      	b.n	8007d8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d78:	1c59      	adds	r1, r3, #1
 8007d7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8007d8e:	d8f0      	bhi.n	8007d72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	633b      	str	r3, [r7, #48]	; 0x30
 8007da8:	e00b      	b.n	8007dc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	1c59      	adds	r1, r3, #1
 8007db2:	6379      	str	r1, [r7, #52]	; 0x34
 8007db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	09db      	lsrs	r3, r3, #7
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc6:	d8f0      	bhi.n	8007daa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	637a      	str	r2, [r7, #52]	; 0x34
 8007dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de0:	e00b      	b.n	8007dfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	1c59      	adds	r1, r3, #1
 8007dea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	09db      	lsrs	r3, r3, #7
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8007dfe:	d8f0      	bhi.n	8007de2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
 8007e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	e00b      	b.n	8007e32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	1c59      	adds	r1, r3, #1
 8007e22:	6279      	str	r1, [r7, #36]	; 0x24
 8007e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	09db      	lsrs	r3, r3, #7
 8007e30:	623b      	str	r3, [r7, #32]
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	2b7f      	cmp	r3, #127	; 0x7f
 8007e36:	d8f0      	bhi.n	8007e1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	b2d2      	uxtb	r2, r2
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	6979      	ldr	r1, [r7, #20]
 8007e4c:	69b8      	ldr	r0, [r7, #24]
 8007e4e:	f7ff f9ed 	bl	800722c <_SendPacket>
  RECORD_END();
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f383 8811 	msr	BASEPRI, r3
}
 8007e58:	bf00      	nop
 8007e5a:	3740      	adds	r7, #64	; 0x40
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	20014500 	.word	0x20014500

08007e64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	; 0x30
 8007e68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007e6a:	4b59      	ldr	r3, [pc, #356]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007e70:	f3ef 8311 	mrs	r3, BASEPRI
 8007e74:	f04f 0120 	mov.w	r1, #32
 8007e78:	f381 8811 	msr	BASEPRI, r1
 8007e7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007e7e:	4b54      	ldr	r3, [pc, #336]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	220a      	movs	r2, #10
 8007e84:	4953      	ldr	r1, [pc, #332]	; (8007fd4 <SEGGER_SYSVIEW_Start+0x170>)
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7f8 f9aa 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8007e92:	f7fe feab 	bl	8006bec <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007e96:	200a      	movs	r0, #10
 8007e98:	f7ff fe9e 	bl	8007bd8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007ea0:	f04f 0120 	mov.w	r1, #32
 8007ea4:	f381 8811 	msr	BASEPRI, r1
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	484b      	ldr	r0, [pc, #300]	; (8007fd8 <SEGGER_SYSVIEW_Start+0x174>)
 8007eac:	f7ff f8cd 	bl	800704a <_PreparePacket>
 8007eb0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eba:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec0:	e00b      	b.n	8007eda <SEGGER_SYSVIEW_Start+0x76>
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	09db      	lsrs	r3, r3, #7
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	2b7f      	cmp	r3, #127	; 0x7f
 8007ede:	d8f0      	bhi.n	8007ec2 <SEGGER_SYSVIEW_Start+0x5e>
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	701a      	strb	r2, [r3, #0]
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef4:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	e00b      	b.n	8007f14 <SEGGER_SYSVIEW_Start+0xb0>
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	1c59      	adds	r1, r3, #1
 8007f04:	6279      	str	r1, [r7, #36]	; 0x24
 8007f06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	09db      	lsrs	r3, r3, #7
 8007f12:	623b      	str	r3, [r7, #32]
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	2b7f      	cmp	r3, #127	; 0x7f
 8007f18:	d8f0      	bhi.n	8007efc <SEGGER_SYSVIEW_Start+0x98>
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f20:	6a3a      	ldr	r2, [r7, #32]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	e00b      	b.n	8007f4e <SEGGER_SYSVIEW_Start+0xea>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	1c59      	adds	r1, r3, #1
 8007f3e:	61f9      	str	r1, [r7, #28]
 8007f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	09db      	lsrs	r3, r3, #7
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b7f      	cmp	r3, #127	; 0x7f
 8007f52:	d8f0      	bhi.n	8007f36 <SEGGER_SYSVIEW_Start+0xd2>
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	61fa      	str	r2, [r7, #28]
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	e00b      	b.n	8007f86 <SEGGER_SYSVIEW_Start+0x122>
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	1c59      	adds	r1, r3, #1
 8007f76:	6179      	str	r1, [r7, #20]
 8007f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	09db      	lsrs	r3, r3, #7
 8007f84:	613b      	str	r3, [r7, #16]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b7f      	cmp	r3, #127	; 0x7f
 8007f8a:	d8f0      	bhi.n	8007f6e <SEGGER_SYSVIEW_Start+0x10a>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	617a      	str	r2, [r7, #20]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007f9c:	2218      	movs	r2, #24
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f943 	bl	800722c <_SendPacket>
      RECORD_END();
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007fba:	f000 f9eb 	bl	8008394 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007fbe:	f000 f9b1 	bl	8008324 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007fc2:	f000 fc09 	bl	80087d8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007fc6:	bf00      	nop
 8007fc8:	3730      	adds	r7, #48	; 0x30
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200144d0 	.word	0x200144d0
 8007fd4:	08009440 	.word	0x08009440
 8007fd8:	20014500 	.word	0x20014500

08007fdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe6:	f04f 0120 	mov.w	r1, #32
 8007fea:	f381 8811 	msr	BASEPRI, r1
 8007fee:	607b      	str	r3, [r7, #4]
 8007ff0:	480b      	ldr	r0, [pc, #44]	; (8008020 <SEGGER_SYSVIEW_Stop+0x44>)
 8007ff2:	f7ff f82a 	bl	800704a <_PreparePacket>
 8007ff6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <SEGGER_SYSVIEW_Stop+0x48>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d007      	beq.n	8008010 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008000:	220b      	movs	r2, #11
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6838      	ldr	r0, [r7, #0]
 8008006:	f7ff f911 	bl	800722c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <SEGGER_SYSVIEW_Stop+0x48>)
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f383 8811 	msr	BASEPRI, r3
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20014500 	.word	0x20014500
 8008024:	200144d0 	.word	0x200144d0

08008028 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b08c      	sub	sp, #48	; 0x30
 800802c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800802e:	f3ef 8311 	mrs	r3, BASEPRI
 8008032:	f04f 0120 	mov.w	r1, #32
 8008036:	f381 8811 	msr	BASEPRI, r1
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	4845      	ldr	r0, [pc, #276]	; (8008154 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800803e:	f7ff f804 	bl	800704a <_PreparePacket>
 8008042:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804c:	4b42      	ldr	r3, [pc, #264]	; (8008158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
 8008052:	e00b      	b.n	800806c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	b2da      	uxtb	r2, r3
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	1c59      	adds	r1, r3, #1
 800805c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800805e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	09db      	lsrs	r3, r3, #7
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	2b7f      	cmp	r3, #127	; 0x7f
 8008070:	d8f0      	bhi.n	8008054 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	4b34      	ldr	r3, [pc, #208]	; (8008158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	623b      	str	r3, [r7, #32]
 800808c:	e00b      	b.n	80080a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	1c59      	adds	r1, r3, #1
 8008096:	6279      	str	r1, [r7, #36]	; 0x24
 8008098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800809c:	b2d2      	uxtb	r2, r2
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	09db      	lsrs	r3, r3, #7
 80080a4:	623b      	str	r3, [r7, #32]
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	2b7f      	cmp	r3, #127	; 0x7f
 80080aa:	d8f0      	bhi.n	800808e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	627a      	str	r2, [r7, #36]	; 0x24
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	4b25      	ldr	r3, [pc, #148]	; (8008158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	e00b      	b.n	80080e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	1c59      	adds	r1, r3, #1
 80080d0:	61f9      	str	r1, [r7, #28]
 80080d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	09db      	lsrs	r3, r3, #7
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b7f      	cmp	r3, #127	; 0x7f
 80080e4:	d8f0      	bhi.n	80080c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	61fa      	str	r2, [r7, #28]
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	e00b      	b.n	8008118 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	b2da      	uxtb	r2, r3
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	6179      	str	r1, [r7, #20]
 800810a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	09db      	lsrs	r3, r3, #7
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b7f      	cmp	r3, #127	; 0x7f
 800811c:	d8f0      	bhi.n	8008100 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	617a      	str	r2, [r7, #20]
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800812e:	2218      	movs	r2, #24
 8008130:	6879      	ldr	r1, [r7, #4]
 8008132:	68b8      	ldr	r0, [r7, #8]
 8008134:	f7ff f87a 	bl	800722c <_SendPacket>
  RECORD_END();
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008146:	4b04      	ldr	r3, [pc, #16]	; (8008158 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	4798      	blx	r3
  }
}
 800814c:	bf00      	nop
 800814e:	3730      	adds	r7, #48	; 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20014500 	.word	0x20014500
 8008158:	200144d0 	.word	0x200144d0

0800815c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800815c:	b580      	push	{r7, lr}
 800815e:	b092      	sub	sp, #72	; 0x48
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008164:	f3ef 8311 	mrs	r3, BASEPRI
 8008168:	f04f 0120 	mov.w	r1, #32
 800816c:	f381 8811 	msr	BASEPRI, r1
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	486a      	ldr	r0, [pc, #424]	; (800831c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008174:	f7fe ff69 	bl	800704a <_PreparePacket>
 8008178:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	647b      	str	r3, [r7, #68]	; 0x44
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b66      	ldr	r3, [pc, #408]	; (8008320 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	643b      	str	r3, [r7, #64]	; 0x40
 800818e:	e00b      	b.n	80081a8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008192:	b2da      	uxtb	r2, r3
 8008194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	6479      	str	r1, [r7, #68]	; 0x44
 800819a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a4:	09db      	lsrs	r3, r3, #7
 80081a6:	643b      	str	r3, [r7, #64]	; 0x40
 80081a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081aa:	2b7f      	cmp	r3, #127	; 0x7f
 80081ac:	d8f0      	bhi.n	8008190 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80081ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	647a      	str	r2, [r7, #68]	; 0x44
 80081b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c8:	e00b      	b.n	80081e2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d0:	1c59      	adds	r1, r3, #1
 80081d2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80081d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	09db      	lsrs	r3, r3, #7
 80081e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b7f      	cmp	r3, #127	; 0x7f
 80081e6:	d8f0      	bhi.n	80081ca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80081e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	4619      	mov	r1, r3
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f7fe fed5 	bl	8006fb0 <_EncodeStr>
 8008206:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008208:	2209      	movs	r2, #9
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	6938      	ldr	r0, [r7, #16]
 800820e:	f7ff f80d 	bl	800722c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b40      	ldr	r3, [pc, #256]	; (8008320 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	633b      	str	r3, [r7, #48]	; 0x30
 8008226:	e00b      	b.n	8008240 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	b2da      	uxtb	r2, r3
 800822c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822e:	1c59      	adds	r1, r3, #1
 8008230:	6379      	str	r1, [r7, #52]	; 0x34
 8008232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	09db      	lsrs	r3, r3, #7
 800823e:	633b      	str	r3, [r7, #48]	; 0x30
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	2b7f      	cmp	r3, #127	; 0x7f
 8008244:	d8f0      	bhi.n	8008228 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	637a      	str	r2, [r7, #52]	; 0x34
 800824c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800824e:	b2d2      	uxtb	r2, r2
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	e00b      	b.n	800827a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	b2da      	uxtb	r2, r3
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	1c59      	adds	r1, r3, #1
 800826a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800826c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	09db      	lsrs	r3, r3, #7
 8008278:	62bb      	str	r3, [r7, #40]	; 0x28
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	2b7f      	cmp	r3, #127	; 0x7f
 800827e:	d8f0      	bhi.n	8008262 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	623b      	str	r3, [r7, #32]
 800829a:	e00b      	b.n	80082b4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	1c59      	adds	r1, r3, #1
 80082a4:	6279      	str	r1, [r7, #36]	; 0x24
 80082a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	09db      	lsrs	r3, r3, #7
 80082b2:	623b      	str	r3, [r7, #32]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	2b7f      	cmp	r3, #127	; 0x7f
 80082b8:	d8f0      	bhi.n	800829c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	627a      	str	r2, [r7, #36]	; 0x24
 80082c0:	6a3a      	ldr	r2, [r7, #32]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	2300      	movs	r3, #0
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e00b      	b.n	80082ec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	1c59      	adds	r1, r3, #1
 80082dc:	61f9      	str	r1, [r7, #28]
 80082de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	09db      	lsrs	r3, r3, #7
 80082ea:	61bb      	str	r3, [r7, #24]
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	2b7f      	cmp	r3, #127	; 0x7f
 80082f0:	d8f0      	bhi.n	80082d4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	61fa      	str	r2, [r7, #28]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008302:	2215      	movs	r2, #21
 8008304:	68f9      	ldr	r1, [r7, #12]
 8008306:	6938      	ldr	r0, [r7, #16]
 8008308:	f7fe ff90 	bl	800722c <_SendPacket>
  RECORD_END();
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f383 8811 	msr	BASEPRI, r3
}
 8008312:	bf00      	nop
 8008314:	3748      	adds	r7, #72	; 0x48
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20014500 	.word	0x20014500
 8008320:	200144d0 	.word	0x200144d0

08008324 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008328:	4b07      	ldr	r3, [pc, #28]	; (8008348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800833a:	4b03      	ldr	r3, [pc, #12]	; (8008348 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	4798      	blx	r3
  }
}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200144d0 	.word	0x200144d0

0800834c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008354:	f3ef 8311 	mrs	r3, BASEPRI
 8008358:	f04f 0120 	mov.w	r1, #32
 800835c:	f381 8811 	msr	BASEPRI, r1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	480b      	ldr	r0, [pc, #44]	; (8008390 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008364:	f7fe fe71 	bl	800704a <_PreparePacket>
 8008368:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800836a:	2280      	movs	r2, #128	; 0x80
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	6938      	ldr	r0, [r7, #16]
 8008370:	f7fe fe1e 	bl	8006fb0 <_EncodeStr>
 8008374:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008376:	220e      	movs	r2, #14
 8008378:	68f9      	ldr	r1, [r7, #12]
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f7fe ff56 	bl	800722c <_SendPacket>
  RECORD_END();
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f383 8811 	msr	BASEPRI, r3
}
 8008386:	bf00      	nop
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20014500 	.word	0x20014500

08008394 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800839a:	4b15      	ldr	r3, [pc, #84]	; (80083f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01a      	beq.n	80083d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d015      	beq.n	80083d8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80083ac:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4798      	blx	r3
 80083b4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083b8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80083ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	000a      	movs	r2, r1
 80083c8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80083ca:	4613      	mov	r3, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4621      	mov	r1, r4
 80083d0:	200d      	movs	r0, #13
 80083d2:	f7ff fc5b 	bl	8007c8c <SEGGER_SYSVIEW_RecordU32x2>
 80083d6:	e006      	b.n	80083e6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80083d8:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4619      	mov	r1, r3
 80083de:	200c      	movs	r0, #12
 80083e0:	f7ff fc18 	bl	8007c14 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd90      	pop	{r4, r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200144d0 	.word	0x200144d0
 80083f4:	e0001004 	.word	0xe0001004

080083f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80083fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008402:	f04f 0120 	mov.w	r1, #32
 8008406:	f381 8811 	msr	BASEPRI, r1
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	4807      	ldr	r0, [pc, #28]	; (800842c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800840e:	f7fe fe1c 	bl	800704a <_PreparePacket>
 8008412:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008414:	2211      	movs	r2, #17
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6838      	ldr	r0, [r7, #0]
 800841a:	f7fe ff07 	bl	800722c <_SendPacket>
  RECORD_END();
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f383 8811 	msr	BASEPRI, r3
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20014500 	.word	0x20014500

08008430 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008438:	f3ef 8311 	mrs	r3, BASEPRI
 800843c:	f04f 0120 	mov.w	r1, #32
 8008440:	f381 8811 	msr	BASEPRI, r1
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	4819      	ldr	r0, [pc, #100]	; (80084ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008448:	f7fe fdff 	bl	800704a <_PreparePacket>
 800844c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008452:	4b17      	ldr	r3, [pc, #92]	; (80084b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	61bb      	str	r3, [r7, #24]
 8008464:	e00b      	b.n	800847e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	b2da      	uxtb	r2, r3
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	1c59      	adds	r1, r3, #1
 800846e:	61f9      	str	r1, [r7, #28]
 8008470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	09db      	lsrs	r3, r3, #7
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b7f      	cmp	r3, #127	; 0x7f
 8008482:	d8f0      	bhi.n	8008466 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	61fa      	str	r2, [r7, #28]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008494:	2208      	movs	r2, #8
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	6938      	ldr	r0, [r7, #16]
 800849a:	f7fe fec7 	bl	800722c <_SendPacket>
  RECORD_END();
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f383 8811 	msr	BASEPRI, r3
}
 80084a4:	bf00      	nop
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20014500 	.word	0x20014500
 80084b0:	200144d0 	.word	0x200144d0

080084b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80084bc:	f3ef 8311 	mrs	r3, BASEPRI
 80084c0:	f04f 0120 	mov.w	r1, #32
 80084c4:	f381 8811 	msr	BASEPRI, r1
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	4819      	ldr	r0, [pc, #100]	; (8008530 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80084cc:	f7fe fdbd 	bl	800704a <_PreparePacket>
 80084d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80084d6:	4b17      	ldr	r3, [pc, #92]	; (8008534 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	61bb      	str	r3, [r7, #24]
 80084e8:	e00b      	b.n	8008502 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	1c59      	adds	r1, r3, #1
 80084f2:	61f9      	str	r1, [r7, #28]
 80084f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	09db      	lsrs	r3, r3, #7
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b7f      	cmp	r3, #127	; 0x7f
 8008506:	d8f0      	bhi.n	80084ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	61fa      	str	r2, [r7, #28]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008518:	2204      	movs	r2, #4
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	6938      	ldr	r0, [r7, #16]
 800851e:	f7fe fe85 	bl	800722c <_SendPacket>
  RECORD_END();
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f383 8811 	msr	BASEPRI, r3
}
 8008528:	bf00      	nop
 800852a:	3720      	adds	r7, #32
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20014500 	.word	0x20014500
 8008534:	200144d0 	.word	0x200144d0

08008538 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008540:	f3ef 8311 	mrs	r3, BASEPRI
 8008544:	f04f 0120 	mov.w	r1, #32
 8008548:	f381 8811 	msr	BASEPRI, r1
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	4819      	ldr	r0, [pc, #100]	; (80085b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008550:	f7fe fd7b 	bl	800704a <_PreparePacket>
 8008554:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	61fb      	str	r3, [r7, #28]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	61bb      	str	r3, [r7, #24]
 800856c:	e00b      	b.n	8008586 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	1c59      	adds	r1, r3, #1
 8008576:	61f9      	str	r1, [r7, #28]
 8008578:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	09db      	lsrs	r3, r3, #7
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b7f      	cmp	r3, #127	; 0x7f
 800858a:	d8f0      	bhi.n	800856e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	61fa      	str	r2, [r7, #28]
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800859c:	2206      	movs	r2, #6
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	6938      	ldr	r0, [r7, #16]
 80085a2:	f7fe fe43 	bl	800722c <_SendPacket>
  RECORD_END();
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f383 8811 	msr	BASEPRI, r3
}
 80085ac:	bf00      	nop
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20014500 	.word	0x20014500
 80085b8:	200144d0 	.word	0x200144d0

080085bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80085c6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ca:	f04f 0120 	mov.w	r1, #32
 80085ce:	f381 8811 	msr	BASEPRI, r1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	4827      	ldr	r0, [pc, #156]	; (8008674 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80085d6:	f7fe fd38 	bl	800704a <_PreparePacket>
 80085da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	e00b      	b.n	800860c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	1c59      	adds	r1, r3, #1
 80085fc:	6279      	str	r1, [r7, #36]	; 0x24
 80085fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	09db      	lsrs	r3, r3, #7
 800860a:	623b      	str	r3, [r7, #32]
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	2b7f      	cmp	r3, #127	; 0x7f
 8008610:	d8f0      	bhi.n	80085f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	627a      	str	r2, [r7, #36]	; 0x24
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	b2d2      	uxtb	r2, r2
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	e00b      	b.n	8008644 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	b2da      	uxtb	r2, r3
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	1c59      	adds	r1, r3, #1
 8008634:	61f9      	str	r1, [r7, #28]
 8008636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	09db      	lsrs	r3, r3, #7
 8008642:	61bb      	str	r3, [r7, #24]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b7f      	cmp	r3, #127	; 0x7f
 8008648:	d8f0      	bhi.n	800862c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	61fa      	str	r2, [r7, #28]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800865a:	2207      	movs	r2, #7
 800865c:	68f9      	ldr	r1, [r7, #12]
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f7fe fde4 	bl	800722c <_SendPacket>
  RECORD_END();
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f383 8811 	msr	BASEPRI, r3
}
 800866a:	bf00      	nop
 800866c:	3728      	adds	r7, #40	; 0x28
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20014500 	.word	0x20014500
 8008678:	200144d0 	.word	0x200144d0

0800867c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	1ad3      	subs	r3, r2, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	200144d0 	.word	0x200144d0

0800869c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80086a6:	4b3b      	ldr	r3, [pc, #236]	; (8008794 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d06d      	beq.n	800878a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80086ae:	4b39      	ldr	r3, [pc, #228]	; (8008794 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80086b4:	2300      	movs	r3, #0
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b8:	e008      	b.n	80086cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80086ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	3301      	adds	r3, #1
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3f2      	bcc.n	80086ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80086d4:	e000      	b.n	80086d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80086d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d055      	beq.n	800878a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80086de:	f3ef 8311 	mrs	r3, BASEPRI
 80086e2:	f04f 0120 	mov.w	r1, #32
 80086e6:	f381 8811 	msr	BASEPRI, r1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	482a      	ldr	r0, [pc, #168]	; (8008798 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80086ee:	f7fe fcac 	bl	800704a <_PreparePacket>
 80086f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	623b      	str	r3, [r7, #32]
 8008700:	e00b      	b.n	800871a <SEGGER_SYSVIEW_SendModule+0x7e>
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	b2da      	uxtb	r2, r3
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	1c59      	adds	r1, r3, #1
 800870a:	6279      	str	r1, [r7, #36]	; 0x24
 800870c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008710:	b2d2      	uxtb	r2, r2
 8008712:	701a      	strb	r2, [r3, #0]
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	09db      	lsrs	r3, r3, #7
 8008718:	623b      	str	r3, [r7, #32]
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	2b7f      	cmp	r3, #127	; 0x7f
 800871e:	d8f0      	bhi.n	8008702 <SEGGER_SYSVIEW_SendModule+0x66>
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	627a      	str	r2, [r7, #36]	; 0x24
 8008726:	6a3a      	ldr	r2, [r7, #32]
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	e00b      	b.n	8008754 <SEGGER_SYSVIEW_SendModule+0xb8>
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	b2da      	uxtb	r2, r3
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	1c59      	adds	r1, r3, #1
 8008744:	61f9      	str	r1, [r7, #28]
 8008746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	09db      	lsrs	r3, r3, #7
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	2b7f      	cmp	r3, #127	; 0x7f
 8008758:	d8f0      	bhi.n	800873c <SEGGER_SYSVIEW_SendModule+0xa0>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	61fa      	str	r2, [r7, #28]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	b2d2      	uxtb	r2, r2
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	4619      	mov	r1, r3
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7fe fc1c 	bl	8006fb0 <_EncodeStr>
 8008778:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800877a:	2216      	movs	r2, #22
 800877c:	68f9      	ldr	r1, [r7, #12]
 800877e:	6938      	ldr	r0, [r7, #16]
 8008780:	f7fe fd54 	bl	800722c <_SendPacket>
      RECORD_END();
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800878a:	bf00      	nop
 800878c:	3730      	adds	r7, #48	; 0x30
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200144f8 	.word	0x200144f8
 8008798:	20014500 	.word	0x20014500

0800879c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00f      	beq.n	80087ca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f2      	bne.n	80087b0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	200144f8 	.word	0x200144f8

080087d8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80087de:	f3ef 8311 	mrs	r3, BASEPRI
 80087e2:	f04f 0120 	mov.w	r1, #32
 80087e6:	f381 8811 	msr	BASEPRI, r1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	4817      	ldr	r0, [pc, #92]	; (800884c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80087ee:	f7fe fc2c 	bl	800704a <_PreparePacket>
 80087f2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	4b14      	ldr	r3, [pc, #80]	; (8008850 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	e00b      	b.n	800881c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	b2da      	uxtb	r2, r3
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1c59      	adds	r1, r3, #1
 800880c:	6179      	str	r1, [r7, #20]
 800880e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	09db      	lsrs	r3, r3, #7
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2b7f      	cmp	r3, #127	; 0x7f
 8008820:	d8f0      	bhi.n	8008804 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	617a      	str	r2, [r7, #20]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008832:	221b      	movs	r2, #27
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	68b8      	ldr	r0, [r7, #8]
 8008838:	f7fe fcf8 	bl	800722c <_SendPacket>
  RECORD_END();
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f383 8811 	msr	BASEPRI, r3
}
 8008842:	bf00      	nop
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20014500 	.word	0x20014500
 8008850:	200144fc 	.word	0x200144fc

08008854 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8008854:	b40f      	push	{r0, r1, r2, r3}
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800885c:	f107 0314 	add.w	r3, r7, #20
 8008860:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	461a      	mov	r2, r3
 8008866:	2100      	movs	r1, #0
 8008868:	6938      	ldr	r0, [r7, #16]
 800886a:	f7fe ff69 	bl	8007740 <_VPrintTarget>
  va_end(ParamList);
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008878:	b004      	add	sp, #16
 800887a:	4770      	bx	lr

0800887c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008884:	f3ef 8311 	mrs	r3, BASEPRI
 8008888:	f04f 0120 	mov.w	r1, #32
 800888c:	f381 8811 	msr	BASEPRI, r1
 8008890:	617b      	str	r3, [r7, #20]
 8008892:	4827      	ldr	r0, [pc, #156]	; (8008930 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008894:	f7fe fbd9 	bl	800704a <_PreparePacket>
 8008898:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800889a:	2280      	movs	r2, #128	; 0x80
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	6938      	ldr	r0, [r7, #16]
 80088a0:	f7fe fb86 	bl	8006fb0 <_EncodeStr>
 80088a4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
 80088aa:	2301      	movs	r3, #1
 80088ac:	623b      	str	r3, [r7, #32]
 80088ae:	e00b      	b.n	80088c8 <SEGGER_SYSVIEW_Warn+0x4c>
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	1c59      	adds	r1, r3, #1
 80088b8:	6279      	str	r1, [r7, #36]	; 0x24
 80088ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	09db      	lsrs	r3, r3, #7
 80088c6:	623b      	str	r3, [r7, #32]
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2b7f      	cmp	r3, #127	; 0x7f
 80088cc:	d8f0      	bhi.n	80088b0 <SEGGER_SYSVIEW_Warn+0x34>
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	627a      	str	r2, [r7, #36]	; 0x24
 80088d4:	6a3a      	ldr	r2, [r7, #32]
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e00b      	b.n	8008900 <SEGGER_SYSVIEW_Warn+0x84>
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	1c59      	adds	r1, r3, #1
 80088f0:	61f9      	str	r1, [r7, #28]
 80088f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	09db      	lsrs	r3, r3, #7
 80088fe:	61bb      	str	r3, [r7, #24]
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b7f      	cmp	r3, #127	; 0x7f
 8008904:	d8f0      	bhi.n	80088e8 <SEGGER_SYSVIEW_Warn+0x6c>
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	61fa      	str	r2, [r7, #28]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008916:	221a      	movs	r2, #26
 8008918:	68f9      	ldr	r1, [r7, #12]
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f7fe fc86 	bl	800722c <_SendPacket>
  RECORD_END();
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f383 8811 	msr	BASEPRI, r3
}
 8008926:	bf00      	nop
 8008928:	3728      	adds	r7, #40	; 0x28
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20014500 	.word	0x20014500

08008934 <siprintf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b500      	push	{lr}
 8008938:	b09c      	sub	sp, #112	; 0x70
 800893a:	ab1d      	add	r3, sp, #116	; 0x74
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9006      	str	r0, [sp, #24]
 8008940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <siprintf+0x38>)
 8008946:	9107      	str	r1, [sp, #28]
 8008948:	9104      	str	r1, [sp, #16]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <siprintf+0x3c>)
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	a902      	add	r1, sp, #8
 8008958:	f000 f9b0 	bl	8008cbc <_svfiprintf_r>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	20000068 	.word	0x20000068
 8008970:	ffff0208 	.word	0xffff0208

08008974 <memcmp>:
 8008974:	b510      	push	{r4, lr}
 8008976:	3901      	subs	r1, #1
 8008978:	4402      	add	r2, r0
 800897a:	4290      	cmp	r0, r2
 800897c:	d101      	bne.n	8008982 <memcmp+0xe>
 800897e:	2000      	movs	r0, #0
 8008980:	e005      	b.n	800898e <memcmp+0x1a>
 8008982:	7803      	ldrb	r3, [r0, #0]
 8008984:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008988:	42a3      	cmp	r3, r4
 800898a:	d001      	beq.n	8008990 <memcmp+0x1c>
 800898c:	1b18      	subs	r0, r3, r4
 800898e:	bd10      	pop	{r4, pc}
 8008990:	3001      	adds	r0, #1
 8008992:	e7f2      	b.n	800897a <memcmp+0x6>

08008994 <memset>:
 8008994:	4402      	add	r2, r0
 8008996:	4603      	mov	r3, r0
 8008998:	4293      	cmp	r3, r2
 800899a:	d100      	bne.n	800899e <memset+0xa>
 800899c:	4770      	bx	lr
 800899e:	f803 1b01 	strb.w	r1, [r3], #1
 80089a2:	e7f9      	b.n	8008998 <memset+0x4>

080089a4 <__errno>:
 80089a4:	4b01      	ldr	r3, [pc, #4]	; (80089ac <__errno+0x8>)
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	20000068 	.word	0x20000068

080089b0 <__libc_init_array>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	4d0d      	ldr	r5, [pc, #52]	; (80089e8 <__libc_init_array+0x38>)
 80089b4:	4c0d      	ldr	r4, [pc, #52]	; (80089ec <__libc_init_array+0x3c>)
 80089b6:	1b64      	subs	r4, r4, r5
 80089b8:	10a4      	asrs	r4, r4, #2
 80089ba:	2600      	movs	r6, #0
 80089bc:	42a6      	cmp	r6, r4
 80089be:	d109      	bne.n	80089d4 <__libc_init_array+0x24>
 80089c0:	4d0b      	ldr	r5, [pc, #44]	; (80089f0 <__libc_init_array+0x40>)
 80089c2:	4c0c      	ldr	r4, [pc, #48]	; (80089f4 <__libc_init_array+0x44>)
 80089c4:	f000 fc6a 	bl	800929c <_init>
 80089c8:	1b64      	subs	r4, r4, r5
 80089ca:	10a4      	asrs	r4, r4, #2
 80089cc:	2600      	movs	r6, #0
 80089ce:	42a6      	cmp	r6, r4
 80089d0:	d105      	bne.n	80089de <__libc_init_array+0x2e>
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d8:	4798      	blx	r3
 80089da:	3601      	adds	r6, #1
 80089dc:	e7ee      	b.n	80089bc <__libc_init_array+0xc>
 80089de:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e2:	4798      	blx	r3
 80089e4:	3601      	adds	r6, #1
 80089e6:	e7f2      	b.n	80089ce <__libc_init_array+0x1e>
 80089e8:	08009498 	.word	0x08009498
 80089ec:	08009498 	.word	0x08009498
 80089f0:	08009498 	.word	0x08009498
 80089f4:	0800949c 	.word	0x0800949c

080089f8 <__retarget_lock_acquire_recursive>:
 80089f8:	4770      	bx	lr

080089fa <__retarget_lock_release_recursive>:
 80089fa:	4770      	bx	lr

080089fc <memcpy>:
 80089fc:	440a      	add	r2, r1
 80089fe:	4291      	cmp	r1, r2
 8008a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a04:	d100      	bne.n	8008a08 <memcpy+0xc>
 8008a06:	4770      	bx	lr
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a12:	4291      	cmp	r1, r2
 8008a14:	d1f9      	bne.n	8008a0a <memcpy+0xe>
 8008a16:	bd10      	pop	{r4, pc}

08008a18 <_free_r>:
 8008a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1a:	2900      	cmp	r1, #0
 8008a1c:	d044      	beq.n	8008aa8 <_free_r+0x90>
 8008a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a22:	9001      	str	r0, [sp, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f1a1 0404 	sub.w	r4, r1, #4
 8008a2a:	bfb8      	it	lt
 8008a2c:	18e4      	addlt	r4, r4, r3
 8008a2e:	f000 f8df 	bl	8008bf0 <__malloc_lock>
 8008a32:	4a1e      	ldr	r2, [pc, #120]	; (8008aac <_free_r+0x94>)
 8008a34:	9801      	ldr	r0, [sp, #4]
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	b933      	cbnz	r3, 8008a48 <_free_r+0x30>
 8008a3a:	6063      	str	r3, [r4, #4]
 8008a3c:	6014      	str	r4, [r2, #0]
 8008a3e:	b003      	add	sp, #12
 8008a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a44:	f000 b8da 	b.w	8008bfc <__malloc_unlock>
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	d908      	bls.n	8008a5e <_free_r+0x46>
 8008a4c:	6825      	ldr	r5, [r4, #0]
 8008a4e:	1961      	adds	r1, r4, r5
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf01      	itttt	eq
 8008a54:	6819      	ldreq	r1, [r3, #0]
 8008a56:	685b      	ldreq	r3, [r3, #4]
 8008a58:	1949      	addeq	r1, r1, r5
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	e7ed      	b.n	8008a3a <_free_r+0x22>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b10b      	cbz	r3, 8008a68 <_free_r+0x50>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d9fa      	bls.n	8008a5e <_free_r+0x46>
 8008a68:	6811      	ldr	r1, [r2, #0]
 8008a6a:	1855      	adds	r5, r2, r1
 8008a6c:	42a5      	cmp	r5, r4
 8008a6e:	d10b      	bne.n	8008a88 <_free_r+0x70>
 8008a70:	6824      	ldr	r4, [r4, #0]
 8008a72:	4421      	add	r1, r4
 8008a74:	1854      	adds	r4, r2, r1
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	d1e0      	bne.n	8008a3e <_free_r+0x26>
 8008a7c:	681c      	ldr	r4, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	6053      	str	r3, [r2, #4]
 8008a82:	440c      	add	r4, r1
 8008a84:	6014      	str	r4, [r2, #0]
 8008a86:	e7da      	b.n	8008a3e <_free_r+0x26>
 8008a88:	d902      	bls.n	8008a90 <_free_r+0x78>
 8008a8a:	230c      	movs	r3, #12
 8008a8c:	6003      	str	r3, [r0, #0]
 8008a8e:	e7d6      	b.n	8008a3e <_free_r+0x26>
 8008a90:	6825      	ldr	r5, [r4, #0]
 8008a92:	1961      	adds	r1, r4, r5
 8008a94:	428b      	cmp	r3, r1
 8008a96:	bf04      	itt	eq
 8008a98:	6819      	ldreq	r1, [r3, #0]
 8008a9a:	685b      	ldreq	r3, [r3, #4]
 8008a9c:	6063      	str	r3, [r4, #4]
 8008a9e:	bf04      	itt	eq
 8008aa0:	1949      	addeq	r1, r1, r5
 8008aa2:	6021      	streq	r1, [r4, #0]
 8008aa4:	6054      	str	r4, [r2, #4]
 8008aa6:	e7ca      	b.n	8008a3e <_free_r+0x26>
 8008aa8:	b003      	add	sp, #12
 8008aaa:	bd30      	pop	{r4, r5, pc}
 8008aac:	20014724 	.word	0x20014724

08008ab0 <sbrk_aligned>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	4e0e      	ldr	r6, [pc, #56]	; (8008aec <sbrk_aligned+0x3c>)
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	6831      	ldr	r1, [r6, #0]
 8008ab8:	4605      	mov	r5, r0
 8008aba:	b911      	cbnz	r1, 8008ac2 <sbrk_aligned+0x12>
 8008abc:	f000 fba6 	bl	800920c <_sbrk_r>
 8008ac0:	6030      	str	r0, [r6, #0]
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 fba1 	bl	800920c <_sbrk_r>
 8008aca:	1c43      	adds	r3, r0, #1
 8008acc:	d00a      	beq.n	8008ae4 <sbrk_aligned+0x34>
 8008ace:	1cc4      	adds	r4, r0, #3
 8008ad0:	f024 0403 	bic.w	r4, r4, #3
 8008ad4:	42a0      	cmp	r0, r4
 8008ad6:	d007      	beq.n	8008ae8 <sbrk_aligned+0x38>
 8008ad8:	1a21      	subs	r1, r4, r0
 8008ada:	4628      	mov	r0, r5
 8008adc:	f000 fb96 	bl	800920c <_sbrk_r>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d101      	bne.n	8008ae8 <sbrk_aligned+0x38>
 8008ae4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ae8:	4620      	mov	r0, r4
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	20014728 	.word	0x20014728

08008af0 <_malloc_r>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	1ccd      	adds	r5, r1, #3
 8008af6:	f025 0503 	bic.w	r5, r5, #3
 8008afa:	3508      	adds	r5, #8
 8008afc:	2d0c      	cmp	r5, #12
 8008afe:	bf38      	it	cc
 8008b00:	250c      	movcc	r5, #12
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	4607      	mov	r7, r0
 8008b06:	db01      	blt.n	8008b0c <_malloc_r+0x1c>
 8008b08:	42a9      	cmp	r1, r5
 8008b0a:	d905      	bls.n	8008b18 <_malloc_r+0x28>
 8008b0c:	230c      	movs	r3, #12
 8008b0e:	603b      	str	r3, [r7, #0]
 8008b10:	2600      	movs	r6, #0
 8008b12:	4630      	mov	r0, r6
 8008b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bec <_malloc_r+0xfc>
 8008b1c:	f000 f868 	bl	8008bf0 <__malloc_lock>
 8008b20:	f8d8 3000 	ldr.w	r3, [r8]
 8008b24:	461c      	mov	r4, r3
 8008b26:	bb5c      	cbnz	r4, 8008b80 <_malloc_r+0x90>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7ff ffc0 	bl	8008ab0 <sbrk_aligned>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	4604      	mov	r4, r0
 8008b34:	d155      	bne.n	8008be2 <_malloc_r+0xf2>
 8008b36:	f8d8 4000 	ldr.w	r4, [r8]
 8008b3a:	4626      	mov	r6, r4
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	d145      	bne.n	8008bcc <_malloc_r+0xdc>
 8008b40:	2c00      	cmp	r4, #0
 8008b42:	d048      	beq.n	8008bd6 <_malloc_r+0xe6>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	4631      	mov	r1, r6
 8008b48:	4638      	mov	r0, r7
 8008b4a:	eb04 0903 	add.w	r9, r4, r3
 8008b4e:	f000 fb5d 	bl	800920c <_sbrk_r>
 8008b52:	4581      	cmp	r9, r0
 8008b54:	d13f      	bne.n	8008bd6 <_malloc_r+0xe6>
 8008b56:	6821      	ldr	r1, [r4, #0]
 8008b58:	1a6d      	subs	r5, r5, r1
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ffa7 	bl	8008ab0 <sbrk_aligned>
 8008b62:	3001      	adds	r0, #1
 8008b64:	d037      	beq.n	8008bd6 <_malloc_r+0xe6>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	442b      	add	r3, r5
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d038      	beq.n	8008be6 <_malloc_r+0xf6>
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	42a2      	cmp	r2, r4
 8008b78:	d12b      	bne.n	8008bd2 <_malloc_r+0xe2>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
 8008b7e:	e00f      	b.n	8008ba0 <_malloc_r+0xb0>
 8008b80:	6822      	ldr	r2, [r4, #0]
 8008b82:	1b52      	subs	r2, r2, r5
 8008b84:	d41f      	bmi.n	8008bc6 <_malloc_r+0xd6>
 8008b86:	2a0b      	cmp	r2, #11
 8008b88:	d917      	bls.n	8008bba <_malloc_r+0xca>
 8008b8a:	1961      	adds	r1, r4, r5
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	6025      	str	r5, [r4, #0]
 8008b90:	bf18      	it	ne
 8008b92:	6059      	strne	r1, [r3, #4]
 8008b94:	6863      	ldr	r3, [r4, #4]
 8008b96:	bf08      	it	eq
 8008b98:	f8c8 1000 	streq.w	r1, [r8]
 8008b9c:	5162      	str	r2, [r4, r5]
 8008b9e:	604b      	str	r3, [r1, #4]
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f104 060b 	add.w	r6, r4, #11
 8008ba6:	f000 f829 	bl	8008bfc <__malloc_unlock>
 8008baa:	f026 0607 	bic.w	r6, r6, #7
 8008bae:	1d23      	adds	r3, r4, #4
 8008bb0:	1af2      	subs	r2, r6, r3
 8008bb2:	d0ae      	beq.n	8008b12 <_malloc_r+0x22>
 8008bb4:	1b9b      	subs	r3, r3, r6
 8008bb6:	50a3      	str	r3, [r4, r2]
 8008bb8:	e7ab      	b.n	8008b12 <_malloc_r+0x22>
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	6862      	ldr	r2, [r4, #4]
 8008bbe:	d1dd      	bne.n	8008b7c <_malloc_r+0x8c>
 8008bc0:	f8c8 2000 	str.w	r2, [r8]
 8008bc4:	e7ec      	b.n	8008ba0 <_malloc_r+0xb0>
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	6864      	ldr	r4, [r4, #4]
 8008bca:	e7ac      	b.n	8008b26 <_malloc_r+0x36>
 8008bcc:	4634      	mov	r4, r6
 8008bce:	6876      	ldr	r6, [r6, #4]
 8008bd0:	e7b4      	b.n	8008b3c <_malloc_r+0x4c>
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	e7cc      	b.n	8008b70 <_malloc_r+0x80>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f000 f80e 	bl	8008bfc <__malloc_unlock>
 8008be0:	e797      	b.n	8008b12 <_malloc_r+0x22>
 8008be2:	6025      	str	r5, [r4, #0]
 8008be4:	e7dc      	b.n	8008ba0 <_malloc_r+0xb0>
 8008be6:	605b      	str	r3, [r3, #4]
 8008be8:	deff      	udf	#255	; 0xff
 8008bea:	bf00      	nop
 8008bec:	20014724 	.word	0x20014724

08008bf0 <__malloc_lock>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__malloc_lock+0x8>)
 8008bf2:	f7ff bf01 	b.w	80089f8 <__retarget_lock_acquire_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20014720 	.word	0x20014720

08008bfc <__malloc_unlock>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__malloc_unlock+0x8>)
 8008bfe:	f7ff befc 	b.w	80089fa <__retarget_lock_release_recursive>
 8008c02:	bf00      	nop
 8008c04:	20014720 	.word	0x20014720

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	461f      	mov	r7, r3
 8008c10:	42be      	cmp	r6, r7
 8008c12:	680b      	ldr	r3, [r1, #0]
 8008c14:	4682      	mov	sl, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	d82c      	bhi.n	8008c76 <__ssputs_r+0x6e>
 8008c1c:	898a      	ldrh	r2, [r1, #12]
 8008c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c22:	d026      	beq.n	8008c72 <__ssputs_r+0x6a>
 8008c24:	6965      	ldr	r5, [r4, #20]
 8008c26:	6909      	ldr	r1, [r1, #16]
 8008c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c2c:	eba3 0901 	sub.w	r9, r3, r1
 8008c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c34:	1c7b      	adds	r3, r7, #1
 8008c36:	444b      	add	r3, r9
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf38      	it	cc
 8008c3e:	461d      	movcc	r5, r3
 8008c40:	0553      	lsls	r3, r2, #21
 8008c42:	d527      	bpl.n	8008c94 <__ssputs_r+0x8c>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f7ff ff53 	bl	8008af0 <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b360      	cbz	r0, 8008ca8 <__ssputs_r+0xa0>
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	464a      	mov	r2, r9
 8008c52:	f7ff fed3 	bl	80089fc <memcpy>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	6126      	str	r6, [r4, #16]
 8008c64:	6165      	str	r5, [r4, #20]
 8008c66:	444e      	add	r6, r9
 8008c68:	eba5 0509 	sub.w	r5, r5, r9
 8008c6c:	6026      	str	r6, [r4, #0]
 8008c6e:	60a5      	str	r5, [r4, #8]
 8008c70:	463e      	mov	r6, r7
 8008c72:	42be      	cmp	r6, r7
 8008c74:	d900      	bls.n	8008c78 <__ssputs_r+0x70>
 8008c76:	463e      	mov	r6, r7
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	f000 faab 	bl	80091d8 <memmove>
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	4433      	add	r3, r6
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	462a      	mov	r2, r5
 8008c96:	f000 fac9 	bl	800922c <_realloc_r>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d1e0      	bne.n	8008c62 <__ssputs_r+0x5a>
 8008ca0:	6921      	ldr	r1, [r4, #16]
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f7ff feb8 	bl	8008a18 <_free_r>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	f8ca 3000 	str.w	r3, [sl]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cba:	e7e9      	b.n	8008c90 <__ssputs_r+0x88>

08008cbc <_svfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	898b      	ldrh	r3, [r1, #12]
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	4607      	mov	r7, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	4614      	mov	r4, r2
 8008cce:	d50e      	bpl.n	8008cee <_svfiprintf_r+0x32>
 8008cd0:	690b      	ldr	r3, [r1, #16]
 8008cd2:	b963      	cbnz	r3, 8008cee <_svfiprintf_r+0x32>
 8008cd4:	2140      	movs	r1, #64	; 0x40
 8008cd6:	f7ff ff0b 	bl	8008af0 <_malloc_r>
 8008cda:	6028      	str	r0, [r5, #0]
 8008cdc:	6128      	str	r0, [r5, #16]
 8008cde:	b920      	cbnz	r0, 8008cea <_svfiprintf_r+0x2e>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	e0d0      	b.n	8008e8c <_svfiprintf_r+0x1d0>
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	616b      	str	r3, [r5, #20]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfc:	2330      	movs	r3, #48	; 0x30
 8008cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea4 <_svfiprintf_r+0x1e8>
 8008d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d06:	f04f 0901 	mov.w	r9, #1
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d12:	b10a      	cbz	r2, 8008d18 <_svfiprintf_r+0x5c>
 8008d14:	2a25      	cmp	r2, #37	; 0x25
 8008d16:	d1f9      	bne.n	8008d0c <_svfiprintf_r+0x50>
 8008d18:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1c:	d00b      	beq.n	8008d36 <_svfiprintf_r+0x7a>
 8008d1e:	465b      	mov	r3, fp
 8008d20:	4622      	mov	r2, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff ff6f 	bl	8008c08 <__ssputs_r>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f000 80a9 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d32:	445a      	add	r2, fp
 8008d34:	9209      	str	r2, [sp, #36]	; 0x24
 8008d36:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80a1 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d40:	2300      	movs	r3, #0
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4a:	f10a 0a01 	add.w	sl, sl, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	9307      	str	r3, [sp, #28]
 8008d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d56:	931a      	str	r3, [sp, #104]	; 0x68
 8008d58:	4654      	mov	r4, sl
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d60:	4850      	ldr	r0, [pc, #320]	; (8008ea4 <_svfiprintf_r+0x1e8>)
 8008d62:	f7f7 fa95 	bl	8000290 <memchr>
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	b9d8      	cbnz	r0, 8008da2 <_svfiprintf_r+0xe6>
 8008d6a:	06d0      	lsls	r0, r2, #27
 8008d6c:	bf44      	itt	mi
 8008d6e:	2320      	movmi	r3, #32
 8008d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d74:	0711      	lsls	r1, r2, #28
 8008d76:	bf44      	itt	mi
 8008d78:	232b      	movmi	r3, #43	; 0x2b
 8008d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b2a      	cmp	r3, #42	; 0x2a
 8008d84:	d015      	beq.n	8008db2 <_svfiprintf_r+0xf6>
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4654      	mov	r4, sl
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4621      	mov	r1, r4
 8008d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d96:	3b30      	subs	r3, #48	; 0x30
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	d94d      	bls.n	8008e38 <_svfiprintf_r+0x17c>
 8008d9c:	b1b0      	cbz	r0, 8008dcc <_svfiprintf_r+0x110>
 8008d9e:	9207      	str	r2, [sp, #28]
 8008da0:	e014      	b.n	8008dcc <_svfiprintf_r+0x110>
 8008da2:	eba0 0308 	sub.w	r3, r0, r8
 8008da6:	fa09 f303 	lsl.w	r3, r9, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	46a2      	mov	sl, r4
 8008db0:	e7d2      	b.n	8008d58 <_svfiprintf_r+0x9c>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	9103      	str	r1, [sp, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfbb      	ittet	lt
 8008dbe:	425b      	neglt	r3, r3
 8008dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc4:	9307      	strge	r3, [sp, #28]
 8008dc6:	9307      	strlt	r3, [sp, #28]
 8008dc8:	bfb8      	it	lt
 8008dca:	9204      	strlt	r2, [sp, #16]
 8008dcc:	7823      	ldrb	r3, [r4, #0]
 8008dce:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd0:	d10c      	bne.n	8008dec <_svfiprintf_r+0x130>
 8008dd2:	7863      	ldrb	r3, [r4, #1]
 8008dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd6:	d134      	bne.n	8008e42 <_svfiprintf_r+0x186>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9203      	str	r2, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfb8      	it	lt
 8008de4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008de8:	3402      	adds	r4, #2
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008eb4 <_svfiprintf_r+0x1f8>
 8008df0:	7821      	ldrb	r1, [r4, #0]
 8008df2:	2203      	movs	r2, #3
 8008df4:	4650      	mov	r0, sl
 8008df6:	f7f7 fa4b 	bl	8000290 <memchr>
 8008dfa:	b138      	cbz	r0, 8008e0c <_svfiprintf_r+0x150>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	eba0 000a 	sub.w	r0, r0, sl
 8008e02:	2240      	movs	r2, #64	; 0x40
 8008e04:	4082      	lsls	r2, r0
 8008e06:	4313      	orrs	r3, r2
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e10:	4825      	ldr	r0, [pc, #148]	; (8008ea8 <_svfiprintf_r+0x1ec>)
 8008e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e16:	2206      	movs	r2, #6
 8008e18:	f7f7 fa3a 	bl	8000290 <memchr>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d038      	beq.n	8008e92 <_svfiprintf_r+0x1d6>
 8008e20:	4b22      	ldr	r3, [pc, #136]	; (8008eac <_svfiprintf_r+0x1f0>)
 8008e22:	bb1b      	cbnz	r3, 8008e6c <_svfiprintf_r+0x1b0>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	4433      	add	r3, r6
 8008e34:	9309      	str	r3, [sp, #36]	; 0x24
 8008e36:	e768      	b.n	8008d0a <_svfiprintf_r+0x4e>
 8008e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7a6      	b.n	8008d90 <_svfiprintf_r+0xd4>
 8008e42:	2300      	movs	r3, #0
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f04f 0c0a 	mov.w	ip, #10
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e54:	3a30      	subs	r2, #48	; 0x30
 8008e56:	2a09      	cmp	r2, #9
 8008e58:	d903      	bls.n	8008e62 <_svfiprintf_r+0x1a6>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0c6      	beq.n	8008dec <_svfiprintf_r+0x130>
 8008e5e:	9105      	str	r1, [sp, #20]
 8008e60:	e7c4      	b.n	8008dec <_svfiprintf_r+0x130>
 8008e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e66:	4604      	mov	r4, r0
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f0      	b.n	8008e4e <_svfiprintf_r+0x192>
 8008e6c:	ab03      	add	r3, sp, #12
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e74:	a904      	add	r1, sp, #16
 8008e76:	4638      	mov	r0, r7
 8008e78:	f3af 8000 	nop.w
 8008e7c:	1c42      	adds	r2, r0, #1
 8008e7e:	4606      	mov	r6, r0
 8008e80:	d1d6      	bne.n	8008e30 <_svfiprintf_r+0x174>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	065b      	lsls	r3, r3, #25
 8008e86:	f53f af2d 	bmi.w	8008ce4 <_svfiprintf_r+0x28>
 8008e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8c:	b01d      	add	sp, #116	; 0x74
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f000 f879 	bl	8008f94 <_printf_i>
 8008ea2:	e7eb      	b.n	8008e7c <_svfiprintf_r+0x1c0>
 8008ea4:	0800945c 	.word	0x0800945c
 8008ea8:	08009466 	.word	0x08009466
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	08008c09 	.word	0x08008c09
 8008eb4:	08009462 	.word	0x08009462

08008eb8 <_printf_common>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	4699      	mov	r9, r3
 8008ec0:	688a      	ldr	r2, [r1, #8]
 8008ec2:	690b      	ldr	r3, [r1, #16]
 8008ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bfb8      	it	lt
 8008ecc:	4613      	movlt	r3, r2
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b10a      	cbz	r2, 8008ede <_printf_common+0x26>
 8008eda:	3301      	adds	r3, #1
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	0699      	lsls	r1, r3, #26
 8008ee2:	bf42      	ittt	mi
 8008ee4:	6833      	ldrmi	r3, [r6, #0]
 8008ee6:	3302      	addmi	r3, #2
 8008ee8:	6033      	strmi	r3, [r6, #0]
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	f015 0506 	ands.w	r5, r5, #6
 8008ef0:	d106      	bne.n	8008f00 <_printf_common+0x48>
 8008ef2:	f104 0a19 	add.w	sl, r4, #25
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	6832      	ldr	r2, [r6, #0]
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dc26      	bgt.n	8008f4e <_printf_common+0x96>
 8008f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f04:	1e13      	subs	r3, r2, #0
 8008f06:	6822      	ldr	r2, [r4, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	0692      	lsls	r2, r2, #26
 8008f0e:	d42b      	bmi.n	8008f68 <_printf_common+0xb0>
 8008f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f14:	4649      	mov	r1, r9
 8008f16:	4638      	mov	r0, r7
 8008f18:	47c0      	blx	r8
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d01e      	beq.n	8008f5c <_printf_common+0xa4>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	f003 0306 	and.w	r3, r3, #6
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	bf02      	ittt	eq
 8008f2a:	68e5      	ldreq	r5, [r4, #12]
 8008f2c:	6833      	ldreq	r3, [r6, #0]
 8008f2e:	1aed      	subeq	r5, r5, r3
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	bf0c      	ite	eq
 8008f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f38:	2500      	movne	r5, #0
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bfc4      	itt	gt
 8008f3e:	1a9b      	subgt	r3, r3, r2
 8008f40:	18ed      	addgt	r5, r5, r3
 8008f42:	2600      	movs	r6, #0
 8008f44:	341a      	adds	r4, #26
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	d11a      	bne.n	8008f80 <_printf_common+0xc8>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e008      	b.n	8008f60 <_printf_common+0xa8>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4649      	mov	r1, r9
 8008f54:	4638      	mov	r0, r7
 8008f56:	47c0      	blx	r8
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_printf_common+0xac>
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	3501      	adds	r5, #1
 8008f66:	e7c6      	b.n	8008ef6 <_printf_common+0x3e>
 8008f68:	18e1      	adds	r1, r4, r3
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	2030      	movs	r0, #48	; 0x30
 8008f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f72:	4422      	add	r2, r4
 8008f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	e7c7      	b.n	8008f10 <_printf_common+0x58>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4622      	mov	r2, r4
 8008f84:	4649      	mov	r1, r9
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0e6      	beq.n	8008f5c <_printf_common+0xa4>
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7d9      	b.n	8008f46 <_printf_common+0x8e>
	...

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	7e0f      	ldrb	r7, [r1, #24]
 8008f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f9c:	2f78      	cmp	r7, #120	; 0x78
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	469a      	mov	sl, r3
 8008fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	; 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d4 	beq.w	800915e <_printf_i+0x1ca>
 8008fb6:	2f58      	cmp	r7, #88	; 0x58
 8008fb8:	f000 80c0 	beq.w	800913c <_printf_i+0x1a8>
 8008fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a101      	add	r1, pc, #4	; (adr r1, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	08009145 	.word	0x08009145
 8009004:	0800906d 	.word	0x0800906d
 8009008:	080090ff 	.word	0x080090ff
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009167 	.word	0x08009167
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	0800906d 	.word	0x0800906d
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009107 	.word	0x08009107
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	602a      	str	r2, [r5, #0]
 8009034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e09f      	b.n	8009180 <_printf_i+0x1ec>
 8009040:	6820      	ldr	r0, [r4, #0]
 8009042:	682b      	ldr	r3, [r5, #0]
 8009044:	0607      	lsls	r7, r0, #24
 8009046:	f103 0104 	add.w	r1, r3, #4
 800904a:	6029      	str	r1, [r5, #0]
 800904c:	d501      	bpl.n	8009052 <_printf_i+0xbe>
 800904e:	681e      	ldr	r6, [r3, #0]
 8009050:	e003      	b.n	800905a <_printf_i+0xc6>
 8009052:	0646      	lsls	r6, r0, #25
 8009054:	d5fb      	bpl.n	800904e <_printf_i+0xba>
 8009056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800905a:	2e00      	cmp	r6, #0
 800905c:	da03      	bge.n	8009066 <_printf_i+0xd2>
 800905e:	232d      	movs	r3, #45	; 0x2d
 8009060:	4276      	negs	r6, r6
 8009062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009066:	485a      	ldr	r0, [pc, #360]	; (80091d0 <_printf_i+0x23c>)
 8009068:	230a      	movs	r3, #10
 800906a:	e012      	b.n	8009092 <_printf_i+0xfe>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	1d19      	adds	r1, r3, #4
 8009072:	6029      	str	r1, [r5, #0]
 8009074:	0605      	lsls	r5, r0, #24
 8009076:	d501      	bpl.n	800907c <_printf_i+0xe8>
 8009078:	681e      	ldr	r6, [r3, #0]
 800907a:	e002      	b.n	8009082 <_printf_i+0xee>
 800907c:	0641      	lsls	r1, r0, #25
 800907e:	d5fb      	bpl.n	8009078 <_printf_i+0xe4>
 8009080:	881e      	ldrh	r6, [r3, #0]
 8009082:	4853      	ldr	r0, [pc, #332]	; (80091d0 <_printf_i+0x23c>)
 8009084:	2f6f      	cmp	r7, #111	; 0x6f
 8009086:	bf0c      	ite	eq
 8009088:	2308      	moveq	r3, #8
 800908a:	230a      	movne	r3, #10
 800908c:	2100      	movs	r1, #0
 800908e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009092:	6865      	ldr	r5, [r4, #4]
 8009094:	60a5      	str	r5, [r4, #8]
 8009096:	2d00      	cmp	r5, #0
 8009098:	bfa2      	ittt	ge
 800909a:	6821      	ldrge	r1, [r4, #0]
 800909c:	f021 0104 	bicge.w	r1, r1, #4
 80090a0:	6021      	strge	r1, [r4, #0]
 80090a2:	b90e      	cbnz	r6, 80090a8 <_printf_i+0x114>
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	d04b      	beq.n	8009140 <_printf_i+0x1ac>
 80090a8:	4615      	mov	r5, r2
 80090aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80090ae:	fb03 6711 	mls	r7, r3, r1, r6
 80090b2:	5dc7      	ldrb	r7, [r0, r7]
 80090b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090b8:	4637      	mov	r7, r6
 80090ba:	42bb      	cmp	r3, r7
 80090bc:	460e      	mov	r6, r1
 80090be:	d9f4      	bls.n	80090aa <_printf_i+0x116>
 80090c0:	2b08      	cmp	r3, #8
 80090c2:	d10b      	bne.n	80090dc <_printf_i+0x148>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	07de      	lsls	r6, r3, #31
 80090c8:	d508      	bpl.n	80090dc <_printf_i+0x148>
 80090ca:	6923      	ldr	r3, [r4, #16]
 80090cc:	6861      	ldr	r1, [r4, #4]
 80090ce:	4299      	cmp	r1, r3
 80090d0:	bfde      	ittt	le
 80090d2:	2330      	movle	r3, #48	; 0x30
 80090d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090dc:	1b52      	subs	r2, r2, r5
 80090de:	6122      	str	r2, [r4, #16]
 80090e0:	f8cd a000 	str.w	sl, [sp]
 80090e4:	464b      	mov	r3, r9
 80090e6:	aa03      	add	r2, sp, #12
 80090e8:	4621      	mov	r1, r4
 80090ea:	4640      	mov	r0, r8
 80090ec:	f7ff fee4 	bl	8008eb8 <_printf_common>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d14a      	bne.n	800918a <_printf_i+0x1f6>
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	b004      	add	sp, #16
 80090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f043 0320 	orr.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	4833      	ldr	r0, [pc, #204]	; (80091d4 <_printf_i+0x240>)
 8009108:	2778      	movs	r7, #120	; 0x78
 800910a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6829      	ldr	r1, [r5, #0]
 8009112:	061f      	lsls	r7, r3, #24
 8009114:	f851 6b04 	ldr.w	r6, [r1], #4
 8009118:	d402      	bmi.n	8009120 <_printf_i+0x18c>
 800911a:	065f      	lsls	r7, r3, #25
 800911c:	bf48      	it	mi
 800911e:	b2b6      	uxthmi	r6, r6
 8009120:	07df      	lsls	r7, r3, #31
 8009122:	bf48      	it	mi
 8009124:	f043 0320 	orrmi.w	r3, r3, #32
 8009128:	6029      	str	r1, [r5, #0]
 800912a:	bf48      	it	mi
 800912c:	6023      	strmi	r3, [r4, #0]
 800912e:	b91e      	cbnz	r6, 8009138 <_printf_i+0x1a4>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	f023 0320 	bic.w	r3, r3, #32
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	2310      	movs	r3, #16
 800913a:	e7a7      	b.n	800908c <_printf_i+0xf8>
 800913c:	4824      	ldr	r0, [pc, #144]	; (80091d0 <_printf_i+0x23c>)
 800913e:	e7e4      	b.n	800910a <_printf_i+0x176>
 8009140:	4615      	mov	r5, r2
 8009142:	e7bd      	b.n	80090c0 <_printf_i+0x12c>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	6826      	ldr	r6, [r4, #0]
 8009148:	6961      	ldr	r1, [r4, #20]
 800914a:	1d18      	adds	r0, r3, #4
 800914c:	6028      	str	r0, [r5, #0]
 800914e:	0635      	lsls	r5, r6, #24
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	d501      	bpl.n	8009158 <_printf_i+0x1c4>
 8009154:	6019      	str	r1, [r3, #0]
 8009156:	e002      	b.n	800915e <_printf_i+0x1ca>
 8009158:	0670      	lsls	r0, r6, #25
 800915a:	d5fb      	bpl.n	8009154 <_printf_i+0x1c0>
 800915c:	8019      	strh	r1, [r3, #0]
 800915e:	2300      	movs	r3, #0
 8009160:	6123      	str	r3, [r4, #16]
 8009162:	4615      	mov	r5, r2
 8009164:	e7bc      	b.n	80090e0 <_printf_i+0x14c>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	1d1a      	adds	r2, r3, #4
 800916a:	602a      	str	r2, [r5, #0]
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	2100      	movs	r1, #0
 8009172:	4628      	mov	r0, r5
 8009174:	f7f7 f88c 	bl	8000290 <memchr>
 8009178:	b108      	cbz	r0, 800917e <_printf_i+0x1ea>
 800917a:	1b40      	subs	r0, r0, r5
 800917c:	6060      	str	r0, [r4, #4]
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	6123      	str	r3, [r4, #16]
 8009182:	2300      	movs	r3, #0
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	e7aa      	b.n	80090e0 <_printf_i+0x14c>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	462a      	mov	r2, r5
 800918e:	4649      	mov	r1, r9
 8009190:	4640      	mov	r0, r8
 8009192:	47d0      	blx	sl
 8009194:	3001      	adds	r0, #1
 8009196:	d0ad      	beq.n	80090f4 <_printf_i+0x160>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	079b      	lsls	r3, r3, #30
 800919c:	d413      	bmi.n	80091c6 <_printf_i+0x232>
 800919e:	68e0      	ldr	r0, [r4, #12]
 80091a0:	9b03      	ldr	r3, [sp, #12]
 80091a2:	4298      	cmp	r0, r3
 80091a4:	bfb8      	it	lt
 80091a6:	4618      	movlt	r0, r3
 80091a8:	e7a6      	b.n	80090f8 <_printf_i+0x164>
 80091aa:	2301      	movs	r3, #1
 80091ac:	4632      	mov	r2, r6
 80091ae:	4649      	mov	r1, r9
 80091b0:	4640      	mov	r0, r8
 80091b2:	47d0      	blx	sl
 80091b4:	3001      	adds	r0, #1
 80091b6:	d09d      	beq.n	80090f4 <_printf_i+0x160>
 80091b8:	3501      	adds	r5, #1
 80091ba:	68e3      	ldr	r3, [r4, #12]
 80091bc:	9903      	ldr	r1, [sp, #12]
 80091be:	1a5b      	subs	r3, r3, r1
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dcf2      	bgt.n	80091aa <_printf_i+0x216>
 80091c4:	e7eb      	b.n	800919e <_printf_i+0x20a>
 80091c6:	2500      	movs	r5, #0
 80091c8:	f104 0619 	add.w	r6, r4, #25
 80091cc:	e7f5      	b.n	80091ba <_printf_i+0x226>
 80091ce:	bf00      	nop
 80091d0:	0800946d 	.word	0x0800946d
 80091d4:	0800947e 	.word	0x0800947e

080091d8 <memmove>:
 80091d8:	4288      	cmp	r0, r1
 80091da:	b510      	push	{r4, lr}
 80091dc:	eb01 0402 	add.w	r4, r1, r2
 80091e0:	d902      	bls.n	80091e8 <memmove+0x10>
 80091e2:	4284      	cmp	r4, r0
 80091e4:	4623      	mov	r3, r4
 80091e6:	d807      	bhi.n	80091f8 <memmove+0x20>
 80091e8:	1e43      	subs	r3, r0, #1
 80091ea:	42a1      	cmp	r1, r4
 80091ec:	d008      	beq.n	8009200 <memmove+0x28>
 80091ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091f6:	e7f8      	b.n	80091ea <memmove+0x12>
 80091f8:	4402      	add	r2, r0
 80091fa:	4601      	mov	r1, r0
 80091fc:	428a      	cmp	r2, r1
 80091fe:	d100      	bne.n	8009202 <memmove+0x2a>
 8009200:	bd10      	pop	{r4, pc}
 8009202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800920a:	e7f7      	b.n	80091fc <memmove+0x24>

0800920c <_sbrk_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	; (8009228 <_sbrk_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 f8c8 	bl	80013ac <_sbrk>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_sbrk_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_sbrk_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	2001471c 	.word	0x2001471c

0800922c <_realloc_r>:
 800922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009230:	4680      	mov	r8, r0
 8009232:	4614      	mov	r4, r2
 8009234:	460e      	mov	r6, r1
 8009236:	b921      	cbnz	r1, 8009242 <_realloc_r+0x16>
 8009238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800923c:	4611      	mov	r1, r2
 800923e:	f7ff bc57 	b.w	8008af0 <_malloc_r>
 8009242:	b92a      	cbnz	r2, 8009250 <_realloc_r+0x24>
 8009244:	f7ff fbe8 	bl	8008a18 <_free_r>
 8009248:	4625      	mov	r5, r4
 800924a:	4628      	mov	r0, r5
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	f000 f81b 	bl	800928a <_malloc_usable_size_r>
 8009254:	4284      	cmp	r4, r0
 8009256:	4607      	mov	r7, r0
 8009258:	d802      	bhi.n	8009260 <_realloc_r+0x34>
 800925a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800925e:	d812      	bhi.n	8009286 <_realloc_r+0x5a>
 8009260:	4621      	mov	r1, r4
 8009262:	4640      	mov	r0, r8
 8009264:	f7ff fc44 	bl	8008af0 <_malloc_r>
 8009268:	4605      	mov	r5, r0
 800926a:	2800      	cmp	r0, #0
 800926c:	d0ed      	beq.n	800924a <_realloc_r+0x1e>
 800926e:	42bc      	cmp	r4, r7
 8009270:	4622      	mov	r2, r4
 8009272:	4631      	mov	r1, r6
 8009274:	bf28      	it	cs
 8009276:	463a      	movcs	r2, r7
 8009278:	f7ff fbc0 	bl	80089fc <memcpy>
 800927c:	4631      	mov	r1, r6
 800927e:	4640      	mov	r0, r8
 8009280:	f7ff fbca 	bl	8008a18 <_free_r>
 8009284:	e7e1      	b.n	800924a <_realloc_r+0x1e>
 8009286:	4635      	mov	r5, r6
 8009288:	e7df      	b.n	800924a <_realloc_r+0x1e>

0800928a <_malloc_usable_size_r>:
 800928a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928e:	1f18      	subs	r0, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfbc      	itt	lt
 8009294:	580b      	ldrlt	r3, [r1, r0]
 8009296:	18c0      	addlt	r0, r0, r3
 8009298:	4770      	bx	lr
	...

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
