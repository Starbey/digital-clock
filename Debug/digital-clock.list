
digital-clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d78  08007d78  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d80  08007d80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014690  20000068  08007df0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200146f8  08007df0  000246f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a8f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039e8  00000000  00000000  00036b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103f  00000000  00000000  0003ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac89  00000000  00000000  0003cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000193ee  00000000  00000000  00057758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1388  00000000  00000000  00070b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cfc  00000000  00000000  00111ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00117bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bcc 	.word	0x08007bcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007bcc 	.word	0x08007bcc

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012fdc 	.word	0x20012fdc

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <lcdDelayUs>:
static void lcdSendData(char data);

//sends data to LCD (local helper function)
void lcdSend(char data, uint8_t rs);

void lcdDelayUs(uint16_t us){
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <lcdDelayUs+0x30>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800063e:	bf00      	nop
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <lcdDelayUs+0x30>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	429a      	cmp	r2, r3
 800064a:	d3f9      	bcc.n	8000640 <lcdDelayUs+0x14>
}
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a4 	.word	0x200000a4

08000660 <lcdSend>:

void lcdSend(char data, uint8_t rs){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	71fb      	strb	r3, [r7, #7]
 800066c:	4613      	mov	r3, r2
 800066e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs); //rs = 0 => cmd, rs = 1 => data
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	461a      	mov	r2, r3
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <lcdSend+0x9c>)
 8000678:	f000 fff0 	bl	800165c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DB7_PORT, DB7_PIN, ( (data >> 3) & 0x01 ) );
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <lcdSend+0xa0>)
 800068e:	f000 ffe5 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB6_PORT, DB6_PIN, ( (data >> 2) & 0x01 ) );
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2102      	movs	r1, #2
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <lcdSend+0xa0>)
 80006a4:	f000 ffda 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB5_PORT, DB5_PIN, ( (data >> 1) & 0x01 ) );
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	2101      	movs	r1, #1
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <lcdSend+0x9c>)
 80006ba:	f000 ffcf 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB4_PORT, DB4_PIN, ( (data >> 0) & 0x01 ) );
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <lcdSend+0xa4>)
 80006cc:	f000 ffc6 	bl	800165c <HAL_GPIO_WritePin>

	//pulse e pin
	HAL_GPIO_WritePin(E_PORT, E_PIN, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006d6:	480b      	ldr	r0, [pc, #44]	; (8000704 <lcdSend+0xa4>)
 80006d8:	f000 ffc0 	bl	800165c <HAL_GPIO_WritePin>
	lcdDelayUs(12);
 80006dc:	200c      	movs	r0, #12
 80006de:	f7ff ffa5 	bl	800062c <lcdDelayUs>
	HAL_GPIO_WritePin(E_PORT, E_PIN, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <lcdSend+0xa4>)
 80006ea:	f000 ffb7 	bl	800165c <HAL_GPIO_WritePin>
	lcdDelayUs(20);
 80006ee:	2014      	movs	r0, #20
 80006f0:	f7ff ff9c 	bl	800062c <lcdDelayUs>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020400 	.word	0x40020400
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000

08000708 <lcdSendCommand>:

void lcdSendCommand(uint8_t cmd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (cmd >> 4) & 0x0f, RS_CMD );
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ffa0 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (cmd >> 0) & 0x0f, RS_CMD );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff98 	bl	8000660 <lcdSend>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <lcdSendData>:

static void lcdSendData(char data){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* we're in 4-bit mode, so send 4 MSBs, then send 4 LSBs */

	//send 4 MSBs
	lcdSend( (data >> 4) & 0x0f, RS_DATA );
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	091b      	lsrs	r3, r3, #4
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff88 	bl	8000660 <lcdSend>

	//send 4 LSBs
	lcdSend( (data >> 0) & 0x0f, RS_DATA );
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff80 	bl	8000660 <lcdSend>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <lcdMoveCursor>:

void lcdMoveCursor(uint8_t row, uint8_t col){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	71fb      	strb	r3, [r7, #7]
 8000774:	4613      	mov	r3, r2
 8000776:	71bb      	strb	r3, [r7, #6]
	uint8_t cellAddr; //corresponds to a cell's address in DDRAM

	switch(row){
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d002      	beq.n	8000784 <lcdMoveCursor+0x1c>
 800077e:	2b01      	cmp	r3, #1
 8000780:	d005      	beq.n	800078e <lcdMoveCursor+0x26>
 8000782:	e009      	b.n	8000798 <lcdMoveCursor+0x30>
	case 0:
		cellAddr = 0x80 | col;
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	73fb      	strb	r3, [r7, #15]
		break;
 800078c:	e004      	b.n	8000798 <lcdMoveCursor+0x30>
	case 1:
		cellAddr = 0xC0 | col;
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000794:	73fb      	strb	r3, [r7, #15]
		break;
 8000796:	bf00      	nop
	}

	lcdSendCommand(cellAddr);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffb4 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CURSOR_DELAY);
 80007a0:	203c      	movs	r0, #60	; 0x3c
 80007a2:	f7ff ff43 	bl	800062c <lcdDelayUs>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcdClear>:

void lcdClear(void){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
	lcdSendCommand(CMD_CLEAR);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ffa8 	bl	8000708 <lcdSendCommand>
	lcdDelayUs(CMD_CLEAR_DELAY);
 80007b8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80007bc:	f7ff ff36 	bl	800062c <lcdDelayUs>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <lcdSendString>:

void lcdSendString(char *str){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	size_t uxLength = strlen(str);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fd51 	bl	8000274 <strlen>
 80007d2:	60b8      	str	r0, [r7, #8]

	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007d4:	2300      	movs	r3, #0
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <lcdSendString+0x2a>
		lcdSendData(str[i]);
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffa8 	bl	8000738 <lcdSendData>
	for(uint8_t i = 0; i < uxLength && uxLength < 100; i++){
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d902      	bls.n	80007fc <lcdSendString+0x38>
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	d9ee      	bls.n	80007da <lcdSendString+0x16>
	}

//	while (*str) lcdSendData(*str++);
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <lcdInit>:

void lcdInit(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fc9d 	bl	8001148 <HAL_Delay>
	lcdSendCommand(0x30);
 800080e:	2030      	movs	r0, #48	; 0x30
 8000810:	f7ff ff7a 	bl	8000708 <lcdSendCommand>
	HAL_Delay(5);
 8000814:	2005      	movs	r0, #5
 8000816:	f000 fc97 	bl	8001148 <HAL_Delay>
	lcdSendCommand(0x30);
 800081a:	2030      	movs	r0, #48	; 0x30
 800081c:	f7ff ff74 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fc91 	bl	8001148 <HAL_Delay>
	lcdSendCommand(0x30);
 8000826:	2030      	movs	r0, #48	; 0x30
 8000828:	f7ff ff6e 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fc8b 	bl	8001148 <HAL_Delay>
	lcdSendCommand(0x20); //set to 4-bit mode
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff ff68 	bl	8000708 <lcdSendCommand>
	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fc85 	bl	8001148 <HAL_Delay>

	lcdSendCommand(CMD_CONFIG);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f7ff ff62 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fc7f 	bl	8001148 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_OFF);
 800084a:	2008      	movs	r0, #8
 800084c:	f7ff ff5c 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fc79 	bl	8001148 <HAL_Delay>
	lcdSendCommand(CMD_CLEAR);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ff56 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fc73 	bl	8001148 <HAL_Delay>
	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fc70 	bl	8001148 <HAL_Delay>
	lcdSendCommand(CMD_CURSOR_RIGHT);
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff ff4d 	bl	8000708 <lcdSendCommand>
	HAL_Delay(1);
 800086e:	2001      	movs	r0, #1
 8000870:	f000 fc6a 	bl	8001148 <HAL_Delay>
	lcdSendCommand(CMD_DISPLAY_ON);
 8000874:	200c      	movs	r0, #12
 8000876:	f7ff ff47 	bl	8000708 <lcdSendCommand>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fc1d 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f87d 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 f95f 	bl	8000b50 <MX_GPIO_Init>
  MX_RTC_Init();
 8000892:	f000 f8e7 	bl	8000a64 <MX_RTC_Init>
  MX_TIM1_Init();
 8000896:	f000 f90b 	bl	8000ab0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //DWT_CTRL |= (1 << 0); //enable CYCCNT counter (cycle count counter)

  HAL_TIM_Base_Start(&htim1);
 800089a:	4830      	ldr	r0, [pc, #192]	; (800095c <main+0xdc>)
 800089c:	f001 fde6 	bl	800246c <HAL_TIM_Base_Start>

  SEGGER_SYSVIEW_Conf();
 80008a0:	f005 f906 	bl	8005ab0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80008a4:	f005 ff8a 	bl	80067bc <SEGGER_SYSVIEW_Start>

  /* create queues */
  printQueueHandle = xQueueCreate(PRINT_QUEUE_LEN, sizeof(size_t) ); /* size of size_t (32 bits) because print queue holds pointer to char (string) */
 80008a8:	2200      	movs	r2, #0
 80008aa:	2104      	movs	r1, #4
 80008ac:	200a      	movs	r0, #10
 80008ae:	f002 fb71 	bl	8002f94 <xQueueGenericCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <main+0xe0>)
 80008b6:	6013      	str	r3, [r2, #0]
  configASSERT(printQueueHandle != NULL);
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <main+0xe0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d10a      	bne.n	80008d6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c4:	f383 8811 	msr	BASEPRI, r3
 80008c8:	f3bf 8f6f 	isb	sy
 80008cc:	f3bf 8f4f 	dsb	sy
 80008d0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <main+0x54>

  /*create timers */
  rtcUpdateTimerHandle = xTimerCreate("RTC_Timer", pdMS_TO_TICKS(RTC_SAMPLE_PERIOD), pdTRUE, NULL, rtcUpdateTimerCallback);
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <main+0xe4>)
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008e2:	4821      	ldr	r0, [pc, #132]	; (8000968 <main+0xe8>)
 80008e4:	f004 f93c 	bl	8004b60 <xTimerCreate>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a20      	ldr	r2, [pc, #128]	; (800096c <main+0xec>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* create tasks */
  status = xTaskCreate(startTimerTaskHandler, "Start_Timer_Task", 250, NULL, 3, &startTimerTaskHandle);
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <main+0xf0>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2303      	movs	r3, #3
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	22fa      	movs	r2, #250	; 0xfa
 80008fa:	491e      	ldr	r1, [pc, #120]	; (8000974 <main+0xf4>)
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <main+0xf8>)
 80008fe:	f002 ffdd 	bl	80038bc <xTaskCreate>
 8000902:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00a      	beq.n	8000920 <main+0xa0>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	607b      	str	r3, [r7, #4]
    }
 800091c:	bf00      	nop
 800091e:	e7fe      	b.n	800091e <main+0x9e>

  status = xTaskCreate(printTaskHandler, "Print_Task", 250, NULL, 4, &printTaskHandle);
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <main+0xfc>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2304      	movs	r3, #4
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2300      	movs	r3, #0
 800092a:	22fa      	movs	r2, #250	; 0xfa
 800092c:	4914      	ldr	r1, [pc, #80]	; (8000980 <main+0x100>)
 800092e:	4815      	ldr	r0, [pc, #84]	; (8000984 <main+0x104>)
 8000930:	f002 ffc4 	bl	80038bc <xTaskCreate>
 8000934:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d00a      	beq.n	8000952 <main+0xd2>
        __asm volatile
 800093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000940:	f383 8811 	msr	BASEPRI, r3
 8000944:	f3bf 8f6f 	isb	sy
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	603b      	str	r3, [r7, #0]
    }
 800094e:	bf00      	nop
 8000950:	e7fe      	b.n	8000950 <main+0xd0>

//  status = xTaskCreate(rtcUpdateTaskHandler, "RTC_Update_Task", 250, NULL, 1, &rtcUpdateTaskHandle);
//  configASSERT(status == pdPASS);

  lcdInit();
 8000952:	f7ff ff57 	bl	8000804 <lcdInit>

  vTaskStartScheduler();
 8000956:	f003 f9e7 	bl	8003d28 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095a:	e7fe      	b.n	800095a <main+0xda>
 800095c:	200000a4 	.word	0x200000a4
 8000960:	200000f4 	.word	0x200000f4
 8000964:	08000d31 	.word	0x08000d31
 8000968:	08007be4 	.word	0x08007be4
 800096c:	200000f8 	.word	0x200000f8
 8000970:	200000f0 	.word	0x200000f0
 8000974:	08007bf0 	.word	0x08007bf0
 8000978:	08000cf9 	.word	0x08000cf9
 800097c:	200000ec 	.word	0x200000ec
 8000980:	08007c04 	.word	0x08007c04
 8000984:	08000ca5 	.word	0x08000ca5

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f006 fc94 	bl	80072c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <SystemClock_Config+0xd4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a29      	ldr	r2, [pc, #164]	; (8000a5c <SystemClock_Config+0xd4>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <SystemClock_Config+0xd4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <SystemClock_Config+0xd8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009d4:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <SystemClock_Config+0xd8>)
 80009d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <SystemClock_Config+0xd8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009e8:	230a      	movs	r3, #10
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f0:	2310      	movs	r3, #16
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009f4:	2301      	movs	r3, #1
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a00:	2310      	movs	r3, #16
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fe3a 	bl	8001690 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a22:	f000 f9c5 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2102      	movs	r1, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 f89c 	bl	8001b80 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a4e:	f000 f9af 	bl	8000db0 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	; 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <MX_RTC_Init+0x48>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a76:	227f      	movs	r2, #127	; 0x7f
 8000a78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_RTC_Init+0x44>)
 8000a94:	f001 fba0 	bl	80021d8 <HAL_RTC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a9e:	f000 f987 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000084 	.word	0x20000084
 8000aac:	40002800 	.word	0x40002800

08000ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <MX_TIM1_Init+0x9c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ad4:	2254      	movs	r2, #84	; 0x54
 8000ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000afa:	f001 fc67 	bl	80023cc <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f954 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b16:	f001 fe6d 	bl	80027f4 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 f946 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM1_Init+0x98>)
 8000b32:	f002 f869 	bl	8002c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 f938 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000a4 	.word	0x200000a4
 8000b4c:	40010000 	.word	0x40010000

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b4a      	ldr	r3, [pc, #296]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a49      	ldr	r2, [pc, #292]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a42      	ldr	r2, [pc, #264]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <MX_GPIO_Init+0x144>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB7_Pin|DB6_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f240 4103 	movw	r1, #1027	; 0x403
 8000bdc:	482e      	ldr	r0, [pc, #184]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000bde:	f000 fd3d 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|LD2_Pin|E_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f248 0130 	movw	r1, #32816	; 0x8030
 8000be8:	482c      	ldr	r0, [pc, #176]	; (8000c9c <MX_GPIO_Init+0x14c>)
 8000bea:	f000 fd37 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2181      	movs	r1, #129	; 0x81
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0x150>)
 8000bf4:	f000 fd32 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4822      	ldr	r0, [pc, #136]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000c10:	f000 fba0 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin DB6_Pin PC10 */
  GPIO_InitStruct.Pin = DB7_Pin|DB6_Pin|GPIO_PIN_10;
 8000c14:	f240 4303 	movw	r3, #1027	; 0x403
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481a      	ldr	r0, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x148>)
 8000c2e:	f000 fb91 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_GPIO_Init+0x14c>)
 8000c4e:	f000 fb81 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB4_Pin LD2_Pin E_Pin */
  GPIO_InitStruct.Pin = DB4_Pin|LD2_Pin|E_Pin;
 8000c52:	f248 0330 	movw	r3, #32816	; 0x8030
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_GPIO_Init+0x14c>)
 8000c6c:	f000 fb72 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB5_Pin RS_Pin */
  GPIO_InitStruct.Pin = DB5_Pin|RS_Pin;
 8000c70:	2381      	movs	r3, #129	; 0x81
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <MX_GPIO_Init+0x150>)
 8000c88:	f000 fb64 	bl	8001354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <printTaskHandler>:

/* USER CODE BEGIN 4 */

	void printTaskHandler(void *parameters){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
		uint32_t *str;

		char testMsg[10];
		sprintf(testMsg, "%s", "Testing");
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <printTaskHandler+0x44>)
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <printTaskHandler+0x48>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 fad5 	bl	8007264 <siprintf>

		char* testMsg2 = "Hello World";
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <printTaskHandler+0x4c>)
 8000cbc:	61fb      	str	r3, [r7, #28]

		while(1){
			//xTimerStop(rtcUpdateTimerHandle, portMAX_DELAY);

			xQueueReceive(printQueueHandle, &str, portMAX_DELAY); /* msg points to a char, pass reference, make it point to queue item */
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <printTaskHandler+0x50>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f107 0118 	add.w	r1, r7, #24
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fb84 	bl	80033d8 <xQueueReceive>

			lcdClear();
 8000cd0:	f7ff fd6d 	bl	80007ae <lcdClear>
			lcdMoveCursor(0, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd46 	bl	8000768 <lcdMoveCursor>
			lcdSendString( (char*) str );
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd70 	bl	80007c4 <lcdSendString>
			xQueueReceive(printQueueHandle, &str, portMAX_DELAY); /* msg points to a char, pass reference, make it point to queue item */
 8000ce4:	e7eb      	b.n	8000cbe <printTaskHandler+0x1a>
 8000ce6:	bf00      	nop
 8000ce8:	08007c10 	.word	0x08007c10
 8000cec:	08007c18 	.word	0x08007c18
 8000cf0:	08007c1c 	.word	0x08007c1c
 8000cf4:	200000f4 	.word	0x200000f4

08000cf8 <startTimerTaskHandler>:

			//xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
		}
	}

	void startTimerTaskHandler(void *parameters){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	6078      	str	r0, [r7, #4]
		while(1){
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <startTimerTaskHandler+0x30>)
 8000d02:	681c      	ldr	r4, [r3, #0]
 8000d04:	f003 f980 	bl	8004008 <xTaskGetTickCount>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	4620      	mov	r0, r4
 8000d16:	f003 ff7d 	bl	8004c14 <xTimerGenericCommand>
			vTaskSuspend(startTimerTaskHandle);
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <startTimerTaskHandler+0x34>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 ff54 	bl	8003bcc <vTaskSuspend>
			xTimerStart(rtcUpdateTimerHandle, portMAX_DELAY);
 8000d24:	e7ec      	b.n	8000d00 <startTimerTaskHandler+0x8>
 8000d26:	bf00      	nop
 8000d28:	200000f8 	.word	0x200000f8
 8000d2c:	200000f0 	.word	0x200000f0

08000d30 <rtcUpdateTimerCallback>:
		}
	}

	void rtcUpdateTimerCallback(TimerHandle_t xTimer){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
		static int counter = 0;

		static char strBuffer[40];
		static char *str = strBuffer;

		memset(&strBuffer, 0, sizeof(strBuffer) );
 8000d38:	2228      	movs	r2, #40	; 0x28
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <rtcUpdateTimerCallback+0x44>)
 8000d3e:	f006 fac1 	bl	80072c4 <memset>

		sprintf( (char*) strBuffer, "%s%d", "Hello there ", counter);
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <rtcUpdateTimerCallback+0x48>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <rtcUpdateTimerCallback+0x4c>)
 8000d48:	490d      	ldr	r1, [pc, #52]	; (8000d80 <rtcUpdateTimerCallback+0x50>)
 8000d4a:	480a      	ldr	r0, [pc, #40]	; (8000d74 <rtcUpdateTimerCallback+0x44>)
 8000d4c:	f006 fa8a 	bl	8007264 <siprintf>

		xQueueSend(printQueueHandle, &str, portMAX_DELAY);
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <rtcUpdateTimerCallback+0x54>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	490b      	ldr	r1, [pc, #44]	; (8000d88 <rtcUpdateTimerCallback+0x58>)
 8000d5c:	f002 f98c 	bl	8003078 <xQueueGenericSend>

		counter++;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <rtcUpdateTimerCallback+0x48>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <rtcUpdateTimerCallback+0x48>)
 8000d68:	6013      	str	r3, [r2, #0]
	}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000fc 	.word	0x200000fc
 8000d78:	20000124 	.word	0x20000124
 8000d7c:	08007c28 	.word	0x08007c28
 8000d80:	08007c38 	.word	0x08007c38
 8000d84:	200000f4 	.word	0x200000f4
 8000d88:	20000000 	.word	0x20000000

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 f9b3 	bl	8001108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000c00 	.word	0x40000c00

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000dfa:	f004 fadd 	bl	80053b8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <HAL_RTC_MspInit+0x50>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d111      	bne.n	8000e52 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 f8dd 	bl	8001ffc <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e48:	f7ff ffb2 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RTC_MspInit+0x54>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40002800 	.word	0x40002800
 8000e60:	42470e3c 	.word	0x42470e3c

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10d      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_TIM_Base_MspInit+0x40>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <HAL_InitTick+0xe4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a32      	ldr	r2, [pc, #200]	; (8000f8c <HAL_InitTick+0xe4>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <HAL_InitTick+0xe4>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ed4:	f107 0210 	add.w	r2, r7, #16
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f85a 	bl	8001f98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d103      	bne.n	8000ef6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eee:	f001 f83f 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8000ef2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ef4:	e004      	b.n	8000f00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ef6:	f001 f83b 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8000efa:	4603      	mov	r3, r0
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <HAL_InitTick+0xe8>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9b      	lsrs	r3, r3, #18
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_InitTick+0xec>)
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <HAL_InitTick+0xf0>)
 8000f12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_InitTick+0xec>)
 8000f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f1a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_InitTick+0xec>)
 8000f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f20:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_InitTick+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_InitTick+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_InitTick+0xec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000f34:	4817      	ldr	r0, [pc, #92]	; (8000f94 <HAL_InitTick+0xec>)
 8000f36:	f001 fa49 	bl	80023cc <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11b      	bne.n	8000f80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000f48:	4812      	ldr	r0, [pc, #72]	; (8000f94 <HAL_InitTick+0xec>)
 8000f4a:	f001 fae9 	bl	8002520 <HAL_TIM_Base_Start_IT>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d111      	bne.n	8000f80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000f5c:	2032      	movs	r0, #50	; 0x32
 8000f5e:	f000 f9eb 	bl	8001338 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d808      	bhi.n	8000f7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	2032      	movs	r0, #50	; 0x32
 8000f6e:	f000 f9c7 	bl	8001300 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_InitTick+0xf4>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e002      	b.n	8000f80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	431bde83 	.word	0x431bde83
 8000f94:	20000128 	.word	0x20000128
 8000f98:	40000c00 	.word	0x40000c00
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM5_IRQHandler+0x10>)
 8000fd2:	f001 fb07 	bl	80025e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000128 	.word	0x20000128

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f006 f960 	bl	80072d4 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20018000 	.word	0x20018000
 8001040:	00000400 	.word	0x00000400
 8001044:	20000170 	.word	0x20000170
 8001048:	200146f8 	.word	0x200146f8

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f006 f91f 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fbed 	bl	8000880 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010b4:	08007d88 	.word	0x08007d88
  ldr r2, =_sbss
 80010b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010bc:	200146f8 	.word	0x200146f8

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_Init+0x40>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_Init+0x40>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_Init+0x40>)
 80010e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 f8fc 	bl	80012ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fed8 	bl	8000ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fe60 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000000c 	.word	0x2000000c
 800112c:	20000174 	.word	0x20000174

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000174 	.word	0x20000174

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000000c 	.word	0x2000000c

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff4c 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001312:	f7ff ff61 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001316:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff ffb1 	bl	8001284 <NVIC_EncodePriority>
 8001322:	4602      	mov	r2, r0
 8001324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff80 	bl	8001230 <__NVIC_SetPriority>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff54 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e159      	b.n	8001624 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8148 	bne.w	800161e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b01      	cmp	r3, #1
 8001398:	d005      	beq.n	80013a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d130      	bne.n	8001408 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 0201 	and.w	r2, r3, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b03      	cmp	r3, #3
 8001412:	d017      	beq.n	8001444 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80a2 	beq.w	800161e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b57      	ldr	r3, [pc, #348]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a56      	ldr	r2, [pc, #344]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f6:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_GPIO_Init+0x2ec>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x2f0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d019      	beq.n	8001556 <HAL_GPIO_Init+0x202>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2f4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d013      	beq.n	8001552 <HAL_GPIO_Init+0x1fe>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_GPIO_Init+0x2f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d00d      	beq.n	800154e <HAL_GPIO_Init+0x1fa>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a46      	ldr	r2, [pc, #280]	; (8001650 <HAL_GPIO_Init+0x2fc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_GPIO_Init+0x1f6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a45      	ldr	r2, [pc, #276]	; (8001654 <HAL_GPIO_Init+0x300>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_GPIO_Init+0x1f2>
 8001542:	2304      	movs	r3, #4
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001546:	2307      	movs	r3, #7
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x204>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x204>
 8001556:	2300      	movs	r3, #0
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x2ec>)
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_GPIO_Init+0x304>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x304>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_GPIO_Init+0x304>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_GPIO_Init+0x304>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3301      	adds	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2b0f      	cmp	r3, #15
 8001628:	f67f aea2 	bls.w	8001370 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e267      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d075      	beq.n	800179a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d00c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b85      	ldr	r3, [pc, #532]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d112      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c6:	4b82      	ldr	r3, [pc, #520]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016d2:	d10b      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d05b      	beq.n	8001798 <HAL_RCC_OscConfig+0x108>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d157      	bne.n	8001798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e242      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x74>
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a75      	ldr	r2, [pc, #468]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6c      	ldr	r2, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001728:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a68      	ldr	r2, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a65      	ldr	r2, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fcf2 	bl	8001130 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcee 	bl	8001130 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e207      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xc0>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fcde 	bl	8001130 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fcda 	bl	8001130 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1f3      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0xe8>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d063      	beq.n	800186e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1c7      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e03a      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x244>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fc93 	bl	8001130 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fc8f 	bl	8001130 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1a8      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4925      	ldr	r1, [pc, #148]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x244>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fc72 	bl	8001130 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fc6e 	bl	8001130 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e187      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d036      	beq.n	80018e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_RCC_OscConfig+0x248>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fc52 	bl	8001130 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff fc4e 	bl	8001130 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e167      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x240>)
 80018a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x200>
 80018ae:	e01b      	b.n	80018e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_OscConfig+0x248>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fc3b 	bl	8001130 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	e00e      	b.n	80018dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff fc37 	bl	8001130 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d907      	bls.n	80018dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e150      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470000 	.word	0x42470000
 80018d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80018de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ea      	bne.n	80018be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8097 	beq.w	8001a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fa:	4b81      	ldr	r3, [pc, #516]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b7d      	ldr	r3, [pc, #500]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a7c      	ldr	r2, [pc, #496]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b7a      	ldr	r3, [pc, #488]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001926:	4b77      	ldr	r3, [pc, #476]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d118      	bne.n	8001964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001932:	4b74      	ldr	r3, [pc, #464]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a73      	ldr	r2, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800193e:	f7ff fbf7 	bl	8001130 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001946:	f7ff fbf3 	bl	8001130 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e10c      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_OscConfig+0x474>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x2ea>
 800196c:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	e01c      	b.n	80019b4 <HAL_RCC_OscConfig+0x324>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x30c>
 8001982:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a5e      	ldr	r2, [pc, #376]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	4b5c      	ldr	r3, [pc, #368]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a5b      	ldr	r2, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	e00b      	b.n	80019b4 <HAL_RCC_OscConfig+0x324>
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a57      	ldr	r2, [pc, #348]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
 80019a8:	4b55      	ldr	r3, [pc, #340]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 0304 	bic.w	r3, r3, #4
 80019b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d015      	beq.n	80019e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff fbb8 	bl	8001130 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c4:	f7ff fbb4 	bl	8001130 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0cb      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0ee      	beq.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7ff fba2 	bl	8001130 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb9e 	bl	8001130 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0b5      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a06:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ee      	bne.n	80019f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a1 	beq.w	8001b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2e:	4b34      	ldr	r3, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d05c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d141      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb72 	bl	8001130 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fb6e 	bl	8001130 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e087      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	019b      	lsls	r3, r3, #6
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	085b      	lsrs	r3, r3, #1
 8001a86:	3b01      	subs	r3, #1
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	061b      	lsls	r3, r3, #24
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb47 	bl	8001130 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fb43 	bl	8001130 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e05c      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x416>
 8001ac4:	e054      	b.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_RCC_OscConfig+0x478>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fb30 	bl	8001130 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff fb2c 	bl	8001130 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e045      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
 8001af2:	e03d      	b.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e038      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40007000 	.word	0x40007000
 8001b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x4ec>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d028      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d121      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d11a      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d111      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cc      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d90c      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d044      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e067      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa5e 	bl	8001130 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff fa5a 	bl	8001130 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e04f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d20c      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8be 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08007d18 	.word	0x08007d18
 8001d44:	20000004 	.word	0x20000004
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d50:	b094      	sub	sp, #80	; 0x50
 8001d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	647b      	str	r3, [r7, #68]	; 0x44
 8001d58:	2300      	movs	r3, #0
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d64:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d00d      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x40>
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	f200 80e1 	bhi.w	8001f38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7e:	e0db      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b73      	ldr	r3, [pc, #460]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d84:	e0db      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d86:	4b73      	ldr	r3, [pc, #460]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d8a:	e0d8      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8c:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d96:	4b6d      	ldr	r3, [pc, #436]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da2:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	2200      	movs	r2, #0
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
 8001db6:	2300      	movs	r3, #0
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	f04f 0100 	mov.w	r1, #0
 8001dca:	0159      	lsls	r1, r3, #5
 8001dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd0:	0150      	lsls	r0, r2, #5
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	1a51      	subs	r1, r2, r1
 8001dda:	6139      	str	r1, [r7, #16]
 8001ddc:	4629      	mov	r1, r5
 8001dde:	eb63 0301 	sbc.w	r3, r3, r1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001df0:	4659      	mov	r1, fp
 8001df2:	018b      	lsls	r3, r1, #6
 8001df4:	4651      	mov	r1, sl
 8001df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfa:	4651      	mov	r1, sl
 8001dfc:	018a      	lsls	r2, r1, #6
 8001dfe:	4651      	mov	r1, sl
 8001e00:	ebb2 0801 	subs.w	r8, r2, r1
 8001e04:	4659      	mov	r1, fp
 8001e06:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1e:	4690      	mov	r8, r2
 8001e20:	4699      	mov	r9, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	eb18 0303 	adds.w	r3, r8, r3
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	eb49 0303 	adc.w	r3, r9, r3
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e3e:	4629      	mov	r1, r5
 8001e40:	024b      	lsls	r3, r1, #9
 8001e42:	4621      	mov	r1, r4
 8001e44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e48:	4621      	mov	r1, r4
 8001e4a:	024a      	lsls	r2, r1, #9
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e52:	2200      	movs	r2, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e5c:	f7fe fa68 	bl	8000330 <__aeabi_uldivmod>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4613      	mov	r3, r2
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e68:	e058      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	2200      	movs	r2, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	4611      	mov	r1, r2
 8001e76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e84:	4642      	mov	r2, r8
 8001e86:	464b      	mov	r3, r9
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	0159      	lsls	r1, r3, #5
 8001e92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e96:	0150      	lsls	r0, r2, #5
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ebc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ec0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	00eb      	lsls	r3, r5, #3
 8001ece:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed2:	00e2      	lsls	r2, r4, #3
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	4643      	mov	r3, r8
 8001eda:	18e3      	adds	r3, r4, r3
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	464b      	mov	r3, r9
 8001ee0:	eb45 0303 	adc.w	r3, r5, r3
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	028b      	lsls	r3, r1, #10
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001efc:	4621      	mov	r1, r4
 8001efe:	028a      	lsls	r2, r1, #10
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	61fa      	str	r2, [r7, #28]
 8001f0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f10:	f7fe fa0e 	bl	8000330 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	3301      	adds	r3, #1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f36:	e002      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3750      	adds	r7, #80	; 0x50
 8001f44:	46bd      	mov	sp, r7
 8001f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	007a1200 	.word	0x007a1200

08001f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08007d28 	.word	0x08007d28

08001f98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCC_GetClockConfig+0x60>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0207 	and.w	r2, r3, #7
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002020:	2b00      	cmp	r3, #0
 8002022:	d035      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002024:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800202a:	f7ff f881 	bl	8001130 <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002032:	f7ff f87d 	bl	8001130 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0ba      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002044:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	019a      	lsls	r2, r3, #6
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	071b      	lsls	r3, r3, #28
 800205c:	495a      	ldr	r1, [pc, #360]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800206a:	f7ff f861 	bl	8001130 <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002072:	f7ff f85d 	bl	8001130 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e09a      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 8083 	beq.w	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a48      	ldr	r2, [pc, #288]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a43      	ldr	r2, [pc, #268]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020c6:	f7ff f833 	bl	8001130 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff f82f 	bl	8001130 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e06c      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d02f      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	429a      	cmp	r2, r3
 8002108:	d028      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002120:	4a29      	ldr	r2, [pc, #164]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d114      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe fffd 	bl	8001130 <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fff9 	bl	8001130 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e034      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002168:	d10d      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800216a:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800217a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217e:	4912      	ldr	r1, [pc, #72]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e005      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a0f      	ldr	r2, [pc, #60]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800218c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002190:	6093      	str	r3, [r2, #8]
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7c1a      	ldrb	r2, [r3, #16]
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	42470068 	.word	0x42470068
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470e40 	.word	0x42470e40
 80021d4:	424711e0 	.word	0x424711e0

080021d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e066      	b.n	80022bc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7f5b      	ldrb	r3, [r3, #29]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe fe04 	bl	8000e0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	22ca      	movs	r2, #202	; 0xca
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2253      	movs	r2, #83	; 0x53
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f87a 	bl	8002314 <RTC_EnterInitMode>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d12c      	bne.n	8002284 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800223c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	68d2      	ldr	r2, [r2, #12]
 8002264:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6919      	ldr	r1, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f881 	bl	8002382 <RTC_ExitInitMode>
 8002280:	4603      	mov	r3, r0
 8002282:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699a      	ldr	r2, [r3, #24]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e0:	f7fe ff26 	bl	8001130 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022e6:	e009      	b.n	80022fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022e8:	f7fe ff22 	bl	8001130 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f6:	d901      	bls.n	80022fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e007      	b.n	800230c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ee      	beq.n	80022e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d122      	bne.n	8002378 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002340:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002342:	f7fe fef5 	bl	8001130 <HAL_GetTick>
 8002346:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002348:	e00c      	b.n	8002364 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800234a:	f7fe fef1 	bl	8001130 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002358:	d904      	bls.n	8002364 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <RTC_EnterInitMode+0x64>
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d1e8      	bne.n	800234a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff89 	bl	80022c4 <HAL_RTC_WaitForSynchro>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2204      	movs	r2, #4
 80023bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e041      	b.n	8002462 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe fd36 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 fae2 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d001      	beq.n	8002484 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e03c      	b.n	80024fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_TIM_Base_Start+0xa0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d018      	beq.n	80024c8 <HAL_TIM_Base_Start+0x5c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249e:	d013      	beq.n	80024c8 <HAL_TIM_Base_Start+0x5c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1a      	ldr	r2, [pc, #104]	; (8002510 <HAL_TIM_Base_Start+0xa4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <HAL_TIM_Base_Start+0x5c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_TIM_Base_Start+0xa8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d009      	beq.n	80024c8 <HAL_TIM_Base_Start+0x5c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_TIM_Base_Start+0xac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_TIM_Base_Start+0x5c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_TIM_Base_Start+0xb0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d111      	bne.n	80024ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d010      	beq.n	80024fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	e007      	b.n	80024fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40014000 	.word	0x40014000

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e044      	b.n	80025c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d013      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_TIM_Base_Start_IT+0xbc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d111      	bne.n	80025b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d010      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	e007      	b.n	80025c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40000800 	.word	0x40000800
 80025dc:	40000c00 	.word	0x40000c00
 80025e0:	40014000 	.word	0x40014000

080025e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0202 	mvn.w	r2, #2
 8002610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f9b5 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9a7 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f9b8 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0204 	mvn.w	r2, #4
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f98b 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f97d 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f98e 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0208 	mvn.w	r2, #8
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2204      	movs	r2, #4
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f961 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f953 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f964 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b10      	cmp	r3, #16
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0210 	mvn.w	r2, #16
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2208      	movs	r2, #8
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f937 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f929 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f93a 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0201 	mvn.w	r2, #1
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fe fb12 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fab2 	bl	8002cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8ff 	bl	80029be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0220 	mvn.w	r2, #32
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa7c 	bl	8002ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIM_ConfigClockSource+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e0b4      	b.n	800297a <HAL_TIM_ConfigClockSource+0x186>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d03e      	beq.n	80028c8 <HAL_TIM_ConfigClockSource+0xd4>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	f200 8087 	bhi.w	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	f000 8086 	beq.w	8002966 <HAL_TIM_ConfigClockSource+0x172>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d87f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d01a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0xa6>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d87b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b60      	cmp	r3, #96	; 0x60
 800286a:	d050      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x11a>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d877      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b50      	cmp	r3, #80	; 0x50
 8002872:	d03c      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xfa>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d873      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d058      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x13a>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d86f      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b30      	cmp	r3, #48	; 0x30
 8002882:	d064      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d86b      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d060      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d867      	bhi.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d05c      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d05a      	beq.n	800294e <HAL_TIM_ConfigClockSource+0x15a>
 8002898:	e062      	b.n	8002960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6899      	ldr	r1, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f000 f98d 	bl	8002bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	609a      	str	r2, [r3, #8]
      break;
 80028c6:	e04f      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6899      	ldr	r1, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f000 f976 	bl	8002bc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ea:	609a      	str	r2, [r3, #8]
      break;
 80028ec:	e03c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8ea 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2150      	movs	r1, #80	; 0x50
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f943 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800290c:	e02c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f909 	bl	8002b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2160      	movs	r1, #96	; 0x60
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f933 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800292c:	e01c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6859      	ldr	r1, [r3, #4]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f000 f8ca 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2140      	movs	r1, #64	; 0x40
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f923 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800294c:	e00c      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4610      	mov	r0, r2
 800295a:	f000 f91a 	bl	8002b92 <TIM_ITRx_SetConfig>
      break;
 800295e:	e003      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e000      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a34      	ldr	r2, [pc, #208]	; (8002ab8 <TIM_Base_SetConfig+0xe4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00f      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d00b      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a31      	ldr	r2, [pc, #196]	; (8002abc <TIM_Base_SetConfig+0xe8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a30      	ldr	r2, [pc, #192]	; (8002ac0 <TIM_Base_SetConfig+0xec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <TIM_Base_SetConfig+0xf0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <TIM_Base_SetConfig+0xe4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01b      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d017      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a22      	ldr	r2, [pc, #136]	; (8002abc <TIM_Base_SetConfig+0xe8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a21      	ldr	r2, [pc, #132]	; (8002ac0 <TIM_Base_SetConfig+0xec>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00f      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <TIM_Base_SetConfig+0xf0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIM_Base_SetConfig+0xf4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <TIM_Base_SetConfig+0xf8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <TIM_Base_SetConfig+0xfc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a08      	ldr	r2, [pc, #32]	; (8002ab8 <TIM_Base_SetConfig+0xe4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d103      	bne.n	8002aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	615a      	str	r2, [r3, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800
 8002ac4:	40000c00 	.word	0x40000c00
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40014400 	.word	0x40014400
 8002ad0:	40014800 	.word	0x40014800

08002ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0210 	bic.w	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f043 0307 	orr.w	r3, r3, #7
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e050      	b.n	8002cc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d013      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10c      	bne.n	8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	40014000 	.word	0x40014000

08002ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 0208 	add.w	r2, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f103 0208 	add.w	r2, r3, #8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 0208 	add.w	r2, r3, #8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d103      	bne.n	8002dce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e00c      	b.n	8002de8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e002      	b.n	8002ddc <vListInsert+0x2e>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d2f6      	bcs.n	8002dd6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6892      	ldr	r2, [r2, #8]
 8002e36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6852      	ldr	r2, [r2, #4]
 8002e40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d103      	bne.n	8002e54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xQueueGenericReset+0x2e>
        __asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60fb      	str	r3, [r7, #12]
    }
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d05d      	beq.n	8002f64 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d059      	beq.n	8002f64 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2100      	movs	r1, #0
 8002eba:	fba3 2302 	umull	r2, r3, r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d000      	beq.n	8002ec4 <xQueueGenericReset+0x50>
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d14c      	bne.n	8002f64 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002eca:	f002 faf3 	bl	80054b4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	6939      	ldr	r1, [r7, #16]
 8002ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	441a      	add	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6939      	ldr	r1, [r7, #16]
 8002efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	441a      	add	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d114      	bne.n	8002f4a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01a      	beq.n	8002f5e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fa89 	bl	8004444 <xTaskRemoveFromEventList>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <xQueueGenericReset+0x11c>)
 8002f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	e009      	b.n	8002f5e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3310      	adds	r3, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fedc 	bl	8002d0c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	3324      	adds	r3, #36	; 0x24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fed7 	bl	8002d0c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f5e:	f002 fad9 	bl	8005514 <vPortExitCritical>
 8002f62:	e001      	b.n	8002f68 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <xQueueGenericReset+0x110>
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60bb      	str	r3, [r7, #8]
    }
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002f84:	697b      	ldr	r3, [r7, #20]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02e      	beq.n	800300a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fac:	2100      	movs	r1, #0
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d000      	beq.n	8002fbc <xQueueGenericCreate+0x28>
 8002fba:	2101      	movs	r1, #1
 8002fbc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d123      	bne.n	800300a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fca:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002fce:	d81c      	bhi.n	800300a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3350      	adds	r3, #80	; 0x50
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fb8c 	bl	80056fc <pvPortMalloc>
 8002fe4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01c      	beq.n	8003026 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3350      	adds	r3, #80	; 0x50
 8002ff4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff6:	79fa      	ldrb	r2, [r7, #7]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f814 	bl	8003030 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003008:	e00d      	b.n	8003026 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericCreate+0x92>
        __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	613b      	str	r3, [r7, #16]
    }
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003026:	69fb      	ldr	r3, [r7, #28]
    }
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e002      	b.n	8003052 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800305e:	2101      	movs	r1, #1
 8003060:	69b8      	ldr	r0, [r7, #24]
 8003062:	f7ff ff07 	bl	8002e74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    //traceQUEUE_CREATE( pxNewQueue );
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	; 0x38
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <xQueueGenericSend+0x32>
        __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80030a6:	bf00      	nop
 80030a8:	e7fe      	b.n	80030a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <xQueueGenericSend+0x40>
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <xQueueGenericSend+0x44>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <xQueueGenericSend+0x46>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <xQueueGenericSend+0x60>
        __asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d103      	bne.n	80030e6 <xQueueGenericSend+0x6e>
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <xQueueGenericSend+0x72>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <xQueueGenericSend+0x74>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <xQueueGenericSend+0x8e>
        __asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	623b      	str	r3, [r7, #32]
    }
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003106:	f001 fbaf 	bl	8004868 <xTaskGetSchedulerState>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <xQueueGenericSend+0x9e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <xQueueGenericSend+0xa2>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <xQueueGenericSend+0xa4>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <xQueueGenericSend+0xbe>
        __asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	61fb      	str	r3, [r7, #28]
    }
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003136:	f002 f9bd 	bl	80054b4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <xQueueGenericSend+0xd4>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d129      	bne.n	80031a0 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003152:	f000 fa21 	bl	8003598 <prvCopyDataToQueue>
 8003156:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d010      	beq.n	8003182 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	4618      	mov	r0, r3
 8003166:	f001 f96d 	bl	8004444 <xTaskRemoveFromEventList>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <xQueueGenericSend+0x1f8>)
 8003172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	e00a      	b.n	8003198 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003188:	4b39      	ldr	r3, [pc, #228]	; (8003270 <xQueueGenericSend+0x1f8>)
 800318a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003198:	f002 f9bc 	bl	8005514 <vPortExitCritical>
                return pdPASS;
 800319c:	2301      	movs	r3, #1
 800319e:	e063      	b.n	8003268 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80031a6:	f002 f9b5 	bl	8005514 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    //traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e05c      	b.n	8003268 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4618      	mov	r0, r3
 80031ba:	f001 fa1b 	bl	80045f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031c2:	f002 f9a7 	bl	8005514 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031c6:	f000 fe11 	bl	8003dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031ca:	f002 f973 	bl	80054b4 <vPortEnterCritical>
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d4:	b25b      	sxtb	r3, r3
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d103      	bne.n	80031e4 <xQueueGenericSend+0x16c>
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d103      	bne.n	80031fa <xQueueGenericSend+0x182>
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fa:	f002 f98b 	bl	8005514 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031fe:	1d3a      	adds	r2, r7, #4
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fa0a 	bl	8004620 <xTaskCheckForTimeOut>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d124      	bne.n	800325c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003214:	f000 fab8 	bl	8003788 <prvIsQueueFull>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d018      	beq.n	8003250 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	3310      	adds	r3, #16
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f001 f8a0 	bl	800436c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800322c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800322e:	f000 fa43 	bl	80036b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003232:	f000 fde9 	bl	8003e08 <xTaskResumeAll>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	f47f af7c 	bne.w	8003136 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <xQueueGenericSend+0x1f8>)
 8003240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	e772      	b.n	8003136 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003252:	f000 fa31 	bl	80036b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003256:	f000 fdd7 	bl	8003e08 <xTaskResumeAll>
 800325a:	e76c      	b.n	8003136 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800325c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325e:	f000 fa2b 	bl	80036b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003262:	f000 fdd1 	bl	8003e08 <xTaskResumeAll>

            //traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003266:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003268:	4618      	mov	r0, r3
 800326a:	3738      	adds	r7, #56	; 0x38
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	e000ed04 	.word	0xe000ed04

08003274 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b092      	sub	sp, #72	; 0x48
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8003286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <xQueueGenericSendFromISR+0x3c>
 80032a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <xQueueGenericSendFromISR+0x40>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <xQueueGenericSendFromISR+0x42>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <xQueueGenericSendFromISR+0x6a>
 80032d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <xQueueGenericSendFromISR+0x6e>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <xQueueGenericSendFromISR+0x70>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032fe:	f002 f9bd 	bl	800567c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003302:	f3ef 8211 	mrs	r2, BASEPRI
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	623a      	str	r2, [r7, #32]
 8003318:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800331a:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800331e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	429a      	cmp	r2, r3
 8003328:	d302      	bcc.n	8003330 <xQueueGenericSendFromISR+0xbc>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d146      	bne.n	80033be <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003336:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800333a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003346:	f000 f927 	bl	8003598 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800334a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d112      	bne.n	800337a <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d02d      	beq.n	80033b8 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800335c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335e:	3324      	adds	r3, #36	; 0x24
 8003360:	4618      	mov	r0, r3
 8003362:	f001 f86f 	bl	8004444 <xTaskRemoveFromEventList>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d025      	beq.n	80033b8 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d022      	beq.n	80033b8 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e01e      	b.n	80033b8 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800337a:	f000 fe67 	bl	800404c <uxTaskGetNumberOfTasks>
 800337e:	6338      	str	r0, [r7, #48]	; 0x30
 8003380:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003386:	429a      	cmp	r2, r3
 8003388:	d916      	bls.n	80033b8 <xQueueGenericSendFromISR+0x144>
 800338a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800338e:	2b7f      	cmp	r3, #127	; 0x7f
 8003390:	d10a      	bne.n	80033a8 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	61bb      	str	r3, [r7, #24]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueGenericSendFromISR+0x132>
 80033a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	b25a      	sxtb	r2, r3
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80033b8:	2301      	movs	r3, #1
 80033ba:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80033bc:	e001      	b.n	80033c2 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            //traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
 80033c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c4:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80033cc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3748      	adds	r7, #72	; 0x48
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08c      	sub	sp, #48	; 0x30
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <xQueueReceive+0x30>
        __asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	623b      	str	r3, [r7, #32]
    }
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <xQueueReceive+0x3e>
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <xQueueReceive+0x42>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueReceive+0x44>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xQueueReceive+0x5e>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	61fb      	str	r3, [r7, #28]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003436:	f001 fa17 	bl	8004868 <xTaskGetSchedulerState>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <xQueueReceive+0x6e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <xQueueReceive+0x72>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <xQueueReceive+0x74>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueReceive+0x8e>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61bb      	str	r3, [r7, #24]
    }
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003466:	f002 f825 	bl	80054b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01f      	beq.n	80034b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347a:	f000 f8f7 	bl	800366c <prvCopyDataFromQueue>
                //traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00f      	beq.n	80034ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	3310      	adds	r3, #16
 8003492:	4618      	mov	r0, r3
 8003494:	f000 ffd6 	bl	8004444 <xTaskRemoveFromEventList>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <xQueueReceive+0x1bc>)
 80034a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80034ae:	f002 f831 	bl	8005514 <vPortExitCritical>
                return pdPASS;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e069      	b.n	800358a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80034bc:	f002 f82a 	bl	8005514 <vPortExitCritical>
                    //traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e062      	b.n	800358a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034ca:	f107 0310 	add.w	r3, r7, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f890 	bl	80045f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034d8:	f002 f81c 	bl	8005514 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034dc:	f000 fc86 	bl	8003dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034e0:	f001 ffe8 	bl	80054b4 <vPortEnterCritical>
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d103      	bne.n	80034fa <xQueueReceive+0x122>
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003500:	b25b      	sxtb	r3, r3
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d103      	bne.n	8003510 <xQueueReceive+0x138>
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003510:	f002 f800 	bl	8005514 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003514:	1d3a      	adds	r2, r7, #4
 8003516:	f107 0310 	add.w	r3, r7, #16
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f001 f87f 	bl	8004620 <xTaskCheckForTimeOut>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d123      	bne.n	8003570 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800352a:	f000 f917 	bl	800375c <prvIsQueueEmpty>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d017      	beq.n	8003564 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	3324      	adds	r3, #36	; 0x24
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f000 ff15 	bl	800436c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003542:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003544:	f000 f8b8 	bl	80036b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003548:	f000 fc5e 	bl	8003e08 <xTaskResumeAll>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d189      	bne.n	8003466 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003552:	4b10      	ldr	r3, [pc, #64]	; (8003594 <xQueueReceive+0x1bc>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	e780      	b.n	8003466 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003566:	f000 f8a7 	bl	80036b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800356a:	f000 fc4d 	bl	8003e08 <xTaskResumeAll>
 800356e:	e77a      	b.n	8003466 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003572:	f000 f8a1 	bl	80036b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003576:	f000 fc47 	bl	8003e08 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800357a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800357c:	f000 f8ee 	bl	800375c <prvIsQueueEmpty>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	f43f af6f 	beq.w	8003466 <xQueueReceive+0x8e>
            {
                //traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003588:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800358a:	4618      	mov	r0, r3
 800358c:	3730      	adds	r7, #48	; 0x30
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d14d      	bne.n	800365a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f96e 	bl	80048a4 <xTaskPriorityDisinherit>
 80035c8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e043      	b.n	800365a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d119      	bne.n	800360c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6858      	ldr	r0, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	461a      	mov	r2, r3
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	f003 fea2 	bl	800732c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	441a      	add	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d32b      	bcc.n	800365a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	e026      	b.n	800365a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68d8      	ldr	r0, [r3, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	461a      	mov	r2, r3
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	f003 fe88 	bl	800732c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	425b      	negs	r3, r3
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	425b      	negs	r3, r3
 8003642:	441a      	add	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d105      	bne.n	800365a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3b01      	subs	r3, #1
 8003658:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003662:	697b      	ldr	r3, [r7, #20]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d018      	beq.n	80036b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	441a      	add	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d303      	bcc.n	80036a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68d9      	ldr	r1, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	461a      	mov	r2, r3
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f003 fe3e 	bl	800732c <memcpy>
    }
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80036c0:	f001 fef8 	bl	80054b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036cc:	e011      	b.n	80036f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 feb2 	bl	8004444 <xTaskRemoveFromEventList>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80036e6:	f001 f801 	bl	80046ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dce9      	bgt.n	80036ce <prvUnlockQueue+0x16>
 80036fa:	e000      	b.n	80036fe <prvUnlockQueue+0x46>
                    break;
 80036fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003706:	f001 ff05 	bl	8005514 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800370a:	f001 fed3 	bl	80054b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003714:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003716:	e011      	b.n	800373c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3310      	adds	r3, #16
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fe8d 	bl	8004444 <xTaskRemoveFromEventList>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003730:	f000 ffdc 	bl	80046ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003734:	7bbb      	ldrb	r3, [r7, #14]
 8003736:	3b01      	subs	r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800373c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dce9      	bgt.n	8003718 <prvUnlockQueue+0x60>
 8003744:	e000      	b.n	8003748 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003746:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	22ff      	movs	r2, #255	; 0xff
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003750:	f001 fee0 	bl	8005514 <vPortExitCritical>
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003764:	f001 fea6 	bl	80054b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003770:	2301      	movs	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e001      	b.n	800377a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800377a:	f001 fecb 	bl	8005514 <vPortExitCritical>

    return xReturn;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003790:	f001 fe90 	bl	80054b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	429a      	cmp	r2, r3
 800379e:	d102      	bne.n	80037a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e001      	b.n	80037aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80037aa:	f001 feb3 	bl	8005514 <vPortExitCritical>

    return xReturn;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	60fb      	str	r3, [r7, #12]
    }
 80037de:	bf00      	nop
 80037e0:	e7fe      	b.n	80037e0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d024      	beq.n	8003832 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e01e      	b.n	800382c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <vQueueAddToRegistry+0x98>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d105      	bne.n	800380a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <vQueueAddToRegistry+0x98>)
 8003804:	4413      	add	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
                    break;
 8003808:	e013      	b.n	8003832 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <vQueueAddToRegistry+0x6e>
 8003810:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <vQueueAddToRegistry+0x98>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <vQueueAddToRegistry+0x98>)
 8003822:	4413      	add	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b07      	cmp	r3, #7
 8003830:	d9dd      	bls.n	80037ee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]

            //traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	20000178 	.word	0x20000178

08003854 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003864:	f001 fe26 	bl	80054b4 <vPortEnterCritical>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d103      	bne.n	800387e <vQueueWaitForMessageRestricted+0x2a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003884:	b25b      	sxtb	r3, r3
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d103      	bne.n	8003894 <vQueueWaitForMessageRestricted+0x40>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003894:	f001 fe3e 	bl	8005514 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3324      	adds	r3, #36	; 0x24
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd83 	bl	80043b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	f7ff ff02 	bl	80036b8 <prvUnlockQueue>
    }
 80038b4:	bf00      	nop
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af04      	add	r7, sp, #16
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 ff13 	bl	80056fc <pvPortMalloc>
 80038d6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d013      	beq.n	8003906 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80038de:	2058      	movs	r0, #88	; 0x58
 80038e0:	f001 ff0c 	bl	80056fc <pvPortMalloc>
 80038e4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80038ec:	2258      	movs	r2, #88	; 0x58
 80038ee:	2100      	movs	r1, #0
 80038f0:	69f8      	ldr	r0, [r7, #28]
 80038f2:	f003 fce7 	bl	80072c4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
 80038fc:	e005      	b.n	800390a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f001 ffb6 	bl	8005870 <vPortFree>
 8003904:	e001      	b.n	800390a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	2300      	movs	r3, #0
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f80e 	bl	8003948 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800392c:	69f8      	ldr	r0, [r7, #28]
 800392e:	f000 f899 	bl	8003a64 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e002      	b.n	800393e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800393e:	69bb      	ldr	r3, [r7, #24]
    }
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	21a5      	movs	r1, #165	; 0xa5
 8003962:	f003 fcaf 	bl	80072c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003970:	3b01      	subs	r3, #1
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f023 0307 	bic.w	r3, r3, #7
 800397e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <prvInitialiseNewTask+0x58>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	617b      	str	r3, [r7, #20]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01e      	beq.n	80039e4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	e012      	b.n	80039d2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	7819      	ldrb	r1, [r3, #0]
 80039b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	4413      	add	r3, r2
 80039ba:	3334      	adds	r3, #52	; 0x34
 80039bc:	460a      	mov	r2, r1
 80039be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	d9e9      	bls.n	80039ac <prvInitialiseNewTask+0x64>
 80039d8:	e000      	b.n	80039dc <prvInitialiseNewTask+0x94>
            {
                break;
 80039da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d90a      	bls.n	8003a00 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	613b      	str	r3, [r7, #16]
    }
 80039fc:	bf00      	nop
 80039fe:	e7fe      	b.n	80039fe <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d901      	bls.n	8003a0a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a06:	2305      	movs	r3, #5
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a14:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f996 	bl	8002d4c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	3318      	adds	r3, #24
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff f991 	bl	8002d4c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	f1c3 0206 	rsb	r2, r3, #6
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	69b8      	ldr	r0, [r7, #24]
 8003a46:	f001 fb85 	bl	8005154 <pxPortInitialiseStack>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003a64:	b5b0      	push	{r4, r5, r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003a6c:	f001 fd22 	bl	80054b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <prvAddNewTaskToReadyList+0x14c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a4e      	ldr	r2, [pc, #312]	; (8003bb0 <prvAddNewTaskToReadyList+0x14c>)
 8003a78:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003a7a:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <prvAddNewTaskToReadyList+0x150>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003a82:	4a4c      	ldr	r2, [pc, #304]	; (8003bb4 <prvAddNewTaskToReadyList+0x150>)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a88:	4b49      	ldr	r3, [pc, #292]	; (8003bb0 <prvAddNewTaskToReadyList+0x14c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d110      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003a90:	f000 fe50 	bl	8004734 <prvInitialiseTaskLists>
 8003a94:	e00d      	b.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003a96:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <prvAddNewTaskToReadyList+0x154>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a9e:	4b45      	ldr	r3, [pc, #276]	; (8003bb4 <prvAddNewTaskToReadyList+0x150>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d802      	bhi.n	8003ab2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003aac:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <prvAddNewTaskToReadyList+0x150>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <prvAddNewTaskToReadyList+0x158>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a40      	ldr	r2, [pc, #256]	; (8003bbc <prvAddNewTaskToReadyList+0x158>)
 8003aba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003abc:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <prvAddNewTaskToReadyList+0x158>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <prvAddNewTaskToReadyList+0x94>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f003 f95b 	bl	8006d88 <SEGGER_SYSVIEW_OnTaskCreate>
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461c      	mov	r4, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	1ae3      	subs	r3, r4, r3
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	462b      	mov	r3, r5
 8003af4:	f002 f87e 	bl	8005bf4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 f9c8 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	409a      	lsls	r2, r3
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <prvAddNewTaskToReadyList+0x15c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <prvAddNewTaskToReadyList+0x15c>)
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	492b      	ldr	r1, [pc, #172]	; (8003bc4 <prvAddNewTaskToReadyList+0x160>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3304      	adds	r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	3204      	adds	r2, #4
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1d1a      	adds	r2, r3, #4
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <prvAddNewTaskToReadyList+0x160>)
 8003b56:	441a      	add	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	615a      	str	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	4918      	ldr	r1, [pc, #96]	; (8003bc4 <prvAddNewTaskToReadyList+0x160>)
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <prvAddNewTaskToReadyList+0x160>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4403      	add	r3, r0
 8003b7c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003b7e:	f001 fcc9 	bl	8005514 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <prvAddNewTaskToReadyList+0x154>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <prvAddNewTaskToReadyList+0x150>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d207      	bcs.n	8003ba8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <prvAddNewTaskToReadyList+0x164>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb0:	200002a4 	.word	0x200002a4
 8003bb4:	200001b8 	.word	0x200001b8
 8003bb8:	200002b0 	.word	0x200002b0
 8003bbc:	200002c0 	.word	0x200002c0
 8003bc0:	200002ac 	.word	0x200002ac
 8003bc4:	200001bc 	.word	0x200001bc
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8003bd4:	f001 fc6e 	bl	80054b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <vTaskSuspend+0x18>
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <vTaskSuspend+0x13c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e000      	b.n	8003be6 <vTaskSuspend+0x1a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 f9f2 	bl	8006fd4 <SEGGER_SYSVIEW_ShrinkId>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	2029      	movs	r0, #41	; 0x29
 8003bf6:	f002 fd4b 	bl	8006690 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff f90e 	bl	8002e20 <uxListRemove>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	493f      	ldr	r1, [pc, #252]	; (8003d0c <vTaskSuspend+0x140>)
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <vTaskSuspend+0x6a>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2201      	movs	r2, #1
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <vTaskSuspend+0x144>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4013      	ands	r3, r2
 8003c32:	4a37      	ldr	r2, [pc, #220]	; (8003d10 <vTaskSuspend+0x144>)
 8003c34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f8ec 	bl	8002e20 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	211b      	movs	r1, #27
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 f961 	bl	8006f14 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	482e      	ldr	r0, [pc, #184]	; (8003d14 <vTaskSuspend+0x148>)
 8003c5a:	f7ff f884 	bl	8002d66 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	e010      	b.n	8003c86 <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3354      	adds	r3, #84	; 0x54
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4413      	add	r3, r2
 8003c7a:	3354      	adds	r3, #84	; 0x54
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	ddeb      	ble.n	8003c64 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003c8c:	f001 fc42 	bl	8005514 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <vTaskSuspend+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003c98:	f001 fc0c 	bl	80054b4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003c9c:	f000 fdc8 	bl	8004830 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003ca0:	f001 fc38 	bl	8005514 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003ca4:	4b18      	ldr	r3, [pc, #96]	; (8003d08 <vTaskSuspend+0x13c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d127      	bne.n	8003cfe <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <vTaskSuspend+0x14c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d017      	beq.n	8003ce6 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003cb6:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <vTaskSuspend+0x150>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <vTaskSuspend+0x108>
        __asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	60fb      	str	r3, [r7, #12]
    }
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <vTaskSuspend+0x154>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003ce4:	e00b      	b.n	8003cfe <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vTaskSuspend+0x148>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <vTaskSuspend+0x158>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d103      	bne.n	8003cfa <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <vTaskSuspend+0x13c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
    }
 8003cf8:	e001      	b.n	8003cfe <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8003cfa:	f000 facd 	bl	8004298 <vTaskSwitchContext>
    }
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200001b8 	.word	0x200001b8
 8003d0c:	200001bc 	.word	0x200001bc
 8003d10:	200002ac 	.word	0x200002ac
 8003d14:	20000290 	.word	0x20000290
 8003d18:	200002b0 	.word	0x200002b0
 8003d1c:	200002cc 	.word	0x200002cc
 8003d20:	e000ed04 	.word	0xe000ed04
 8003d24:	200002a4 	.word	0x200002a4

08003d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <vTaskStartScheduler+0xa4>)
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	2300      	movs	r3, #0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	2282      	movs	r2, #130	; 0x82
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <vTaskStartScheduler+0xa8>)
 8003d3c:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <vTaskStartScheduler+0xac>)
 8003d3e:	f7ff fdbd 	bl	80038bc <xTaskCreate>
 8003d42:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d102      	bne.n	8003d50 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003d4a:	f000 fed7 	bl	8004afc <xTimerCreateTimerTask>
 8003d4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d124      	bne.n	8003da0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60bb      	str	r3, [r7, #8]
    }
 8003d68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <vTaskStartScheduler+0xb0>)
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <vTaskStartScheduler+0xb4>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <vTaskStartScheduler+0xb8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <vTaskStartScheduler+0xbc>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <vTaskStartScheduler+0xa4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d102      	bne.n	8003d90 <vTaskStartScheduler+0x68>
 8003d8a:	f002 ffe1 	bl	8006d50 <SEGGER_SYSVIEW_OnIdle>
 8003d8e:	e004      	b.n	8003d9a <vTaskStartScheduler+0x72>
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <vTaskStartScheduler+0xbc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f003 f839 	bl	8006e0c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003d9a:	f001 fa6b 	bl	8005274 <xPortStartScheduler>
 8003d9e:	e00e      	b.n	8003dbe <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d10a      	bne.n	8003dbe <vTaskStartScheduler+0x96>
        __asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	607b      	str	r3, [r7, #4]
    }
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <vTaskStartScheduler+0xc0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200002c8 	.word	0x200002c8
 8003dd0:	08007c40 	.word	0x08007c40
 8003dd4:	08004705 	.word	0x08004705
 8003dd8:	200002c4 	.word	0x200002c4
 8003ddc:	200002b0 	.word	0x200002b0
 8003de0:	200002a8 	.word	0x200002a8
 8003de4:	200001b8 	.word	0x200001b8
 8003de8:	20000010 	.word	0x20000010

08003dec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	4a03      	ldr	r2, [pc, #12]	; (8003e04 <vTaskSuspendAll+0x18>)
 8003df8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	200002cc 	.word	0x200002cc

08003e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e16:	4b73      	ldr	r3, [pc, #460]	; (8003fe4 <xTaskResumeAll+0x1dc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xTaskResumeAll+0x2c>
        __asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
    }
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e34:	f001 fb3e 	bl	80054b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e38:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <xTaskResumeAll+0x1dc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <xTaskResumeAll+0x1dc>)
 8003e40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e42:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <xTaskResumeAll+0x1dc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 80c4 	bne.w	8003fd4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4c:	4b66      	ldr	r3, [pc, #408]	; (8003fe8 <xTaskResumeAll+0x1e0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80bf 	beq.w	8003fd4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e56:	e08e      	b.n	8003f76 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b64      	ldr	r3, [pc, #400]	; (8003fec <xTaskResumeAll+0x1e4>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	6a12      	ldr	r2, [r2, #32]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	69d2      	ldr	r2, [r2, #28]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3318      	adds	r3, #24
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d103      	bne.n	8003e8e <xTaskResumeAll+0x86>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2200      	movs	r2, #0
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	1e5a      	subs	r2, r3, #1
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	68d2      	ldr	r2, [r2, #12]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	6892      	ldr	r2, [r2, #8]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d103      	bne.n	8003ecc <xTaskResumeAll+0xc4>
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	615a      	str	r2, [r3, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 ffd6 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	2201      	movs	r2, #1
 8003eea:	409a      	lsls	r2, r3
 8003eec:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <xTaskResumeAll+0x1e8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	4a3f      	ldr	r2, [pc, #252]	; (8003ff0 <xTaskResumeAll+0x1e8>)
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efa:	493e      	ldr	r1, [pc, #248]	; (8003ff4 <xTaskResumeAll+0x1ec>)
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3304      	adds	r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	3204      	adds	r2, #4
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	1d1a      	adds	r2, r3, #4
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4a2e      	ldr	r2, [pc, #184]	; (8003ff4 <xTaskResumeAll+0x1ec>)
 8003f3a:	441a      	add	r2, r3
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	615a      	str	r2, [r3, #20]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	492b      	ldr	r1, [pc, #172]	; (8003ff4 <xTaskResumeAll+0x1ec>)
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	4827      	ldr	r0, [pc, #156]	; (8003ff4 <xTaskResumeAll+0x1ec>)
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4403      	add	r3, r0
 8003f60:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <xTaskResumeAll+0x1f0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <xTaskResumeAll+0x1f4>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <xTaskResumeAll+0x1e4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f47f af6c 	bne.w	8003e58 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f86:	f000 fc53 	bl	8004830 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <xTaskResumeAll+0x1f8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f96:	f000 f865 	bl	8004064 <xTaskIncrementTick>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <xTaskResumeAll+0x1f4>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f1      	bne.n	8003f96 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <xTaskResumeAll+0x1f8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <xTaskResumeAll+0x1f4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <xTaskResumeAll+0x1fc>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003fd4:	f001 fa9e 	bl	8005514 <vPortExitCritical>

    return xAlreadyYielded;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200002cc 	.word	0x200002cc
 8003fe8:	200002a4 	.word	0x200002a4
 8003fec:	20000264 	.word	0x20000264
 8003ff0:	200002ac 	.word	0x200002ac
 8003ff4:	200001bc 	.word	0x200001bc
 8003ff8:	200001b8 	.word	0x200001b8
 8003ffc:	200002b8 	.word	0x200002b8
 8004000:	200002b4 	.word	0x200002b4
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <xTaskGetTickCount+0x1c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004014:	687b      	ldr	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	200002a8 	.word	0x200002a8

08004028 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800402e:	f001 fb25 	bl	800567c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <xTaskGetTickCountFromISR+0x20>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800403c:	683b      	ldr	r3, [r7, #0]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200002a8 	.word	0x200002a8

0800404c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8004050:	4b03      	ldr	r3, [pc, #12]	; (8004060 <uxTaskGetNumberOfTasks+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	200002a4 	.word	0x200002a4

08004064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800406e:	4b7f      	ldr	r3, [pc, #508]	; (800426c <xTaskIncrementTick+0x208>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 80f0 	bne.w	8004258 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004078:	4b7d      	ldr	r3, [pc, #500]	; (8004270 <xTaskIncrementTick+0x20c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004080:	4a7b      	ldr	r2, [pc, #492]	; (8004270 <xTaskIncrementTick+0x20c>)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d120      	bne.n	80040ce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800408c:	4b79      	ldr	r3, [pc, #484]	; (8004274 <xTaskIncrementTick+0x210>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <xTaskIncrementTick+0x48>
        __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	607b      	str	r3, [r7, #4]
    }
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <xTaskIncrementTick+0x46>
 80040ac:	4b71      	ldr	r3, [pc, #452]	; (8004274 <xTaskIncrementTick+0x210>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	4b71      	ldr	r3, [pc, #452]	; (8004278 <xTaskIncrementTick+0x214>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6f      	ldr	r2, [pc, #444]	; (8004274 <xTaskIncrementTick+0x210>)
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <xTaskIncrementTick+0x214>)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b6e      	ldr	r3, [pc, #440]	; (800427c <xTaskIncrementTick+0x218>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	4a6d      	ldr	r2, [pc, #436]	; (800427c <xTaskIncrementTick+0x218>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	f000 fbb1 	bl	8004830 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80040ce:	4b6c      	ldr	r3, [pc, #432]	; (8004280 <xTaskIncrementTick+0x21c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a3a      	ldr	r2, [r7, #32]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	f0c0 80aa 	bcc.w	800422e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040da:	4b66      	ldr	r3, [pc, #408]	; (8004274 <xTaskIncrementTick+0x210>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <xTaskIncrementTick+0x21c>)
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ea:	601a      	str	r2, [r3, #0]
                    break;
 80040ec:	e09f      	b.n	800422e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b61      	ldr	r3, [pc, #388]	; (8004274 <xTaskIncrementTick+0x210>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80040fe:	6a3a      	ldr	r2, [r7, #32]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	429a      	cmp	r2, r3
 8004104:	d203      	bcs.n	800410e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004106:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <xTaskIncrementTick+0x21c>)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800410c:	e08f      	b.n	800422e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	68d2      	ldr	r2, [r2, #12]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	6892      	ldr	r2, [r2, #8]
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	3304      	adds	r3, #4
 8004130:	429a      	cmp	r2, r3
 8004132:	d103      	bne.n	800413c <xTaskIncrementTick+0xd8>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2200      	movs	r2, #0
 8004140:	615a      	str	r2, [r3, #20]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01e      	beq.n	8004192 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	6a12      	ldr	r2, [r2, #32]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	69d2      	ldr	r2, [r2, #28]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	3318      	adds	r3, #24
 8004176:	429a      	cmp	r2, r3
 8004178:	d103      	bne.n	8004182 <xTaskIncrementTick+0x11e>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	6a1a      	ldr	r2, [r3, #32]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2200      	movs	r2, #0
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1e5a      	subs	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4618      	mov	r0, r3
 8004196:	f002 fe7b 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	2201      	movs	r2, #1
 80041a0:	409a      	lsls	r2, r3
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <xTaskIncrementTick+0x220>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	4a36      	ldr	r2, [pc, #216]	; (8004284 <xTaskIncrementTick+0x220>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4935      	ldr	r1, [pc, #212]	; (8004288 <xTaskIncrementTick+0x224>)
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3304      	adds	r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	3204      	adds	r2, #4
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1d1a      	adds	r2, r3, #4
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4a26      	ldr	r2, [pc, #152]	; (8004288 <xTaskIncrementTick+0x224>)
 80041f0:	441a      	add	r2, r3
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4923      	ldr	r1, [pc, #140]	; (8004288 <xTaskIncrementTick+0x224>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c59      	adds	r1, r3, #1
 800420a:	481f      	ldr	r0, [pc, #124]	; (8004288 <xTaskIncrementTick+0x224>)
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4403      	add	r3, r0
 8004216:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <xTaskIncrementTick+0x228>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	429a      	cmp	r2, r3
 8004224:	f67f af59 	bls.w	80040da <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422c:	e755      	b.n	80040da <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <xTaskIncrementTick+0x228>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4914      	ldr	r1, [pc, #80]	; (8004288 <xTaskIncrementTick+0x224>)
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d901      	bls.n	800424a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <xTaskIncrementTick+0x22c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	e004      	b.n	8004262 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <xTaskIncrementTick+0x230>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	4a0d      	ldr	r2, [pc, #52]	; (8004294 <xTaskIncrementTick+0x230>)
 8004260:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	; 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200002cc 	.word	0x200002cc
 8004270:	200002a8 	.word	0x200002a8
 8004274:	2000025c 	.word	0x2000025c
 8004278:	20000260 	.word	0x20000260
 800427c:	200002bc 	.word	0x200002bc
 8004280:	200002c4 	.word	0x200002c4
 8004284:	200002ac 	.word	0x200002ac
 8004288:	200001bc 	.word	0x200001bc
 800428c:	200001b8 	.word	0x200001b8
 8004290:	200002b8 	.word	0x200002b8
 8004294:	200002b4 	.word	0x200002b4

08004298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800429e:	4b2d      	ldr	r3, [pc, #180]	; (8004354 <vTaskSwitchContext+0xbc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80042a6:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <vTaskSwitchContext+0xc0>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80042ac:	e04d      	b.n	800434a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80042ae:	4b2a      	ldr	r3, [pc, #168]	; (8004358 <vTaskSwitchContext+0xc0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <vTaskSwitchContext+0xc4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	f1c3 031f 	rsb	r3, r3, #31
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <vTaskSwitchContext+0xc8>)
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	607b      	str	r3, [r7, #4]
    }
 80042f0:	bf00      	nop
 80042f2:	e7fe      	b.n	80042f2 <vTaskSwitchContext+0x5a>
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <vTaskSwitchContext+0xc8>)
 8004300:	4413      	add	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3308      	adds	r3, #8
 8004316:	429a      	cmp	r2, r3
 8004318:	d104      	bne.n	8004324 <vTaskSwitchContext+0x8c>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <vTaskSwitchContext+0xcc>)
 800432c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <vTaskSwitchContext+0xcc>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <vTaskSwitchContext+0xd0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d102      	bne.n	8004340 <vTaskSwitchContext+0xa8>
 800433a:	f002 fd09 	bl	8006d50 <SEGGER_SYSVIEW_OnIdle>
}
 800433e:	e004      	b.n	800434a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <vTaskSwitchContext+0xcc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f002 fd61 	bl	8006e0c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200002cc 	.word	0x200002cc
 8004358:	200002b8 	.word	0x200002b8
 800435c:	200002ac 	.word	0x200002ac
 8004360:	200001bc 	.word	0x200001bc
 8004364:	200001b8 	.word	0x200001b8
 8004368:	200002c8 	.word	0x200002c8

0800436c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
    }
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <vTaskPlaceOnEventList+0x44>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3318      	adds	r3, #24
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fe fd07 	bl	8002dae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043a0:	2101      	movs	r1, #1
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	f000 fb2a 	bl	80049fc <prvAddCurrentTaskToDelayedList>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200001b8 	.word	0x200001b8

080043b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	613b      	str	r3, [r7, #16]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <vTaskPlaceOnEventListRestricted+0x8c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	61da      	str	r2, [r3, #28]
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <vTaskPlaceOnEventListRestricted+0x8c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	6892      	ldr	r2, [r2, #8]
 80043f2:	621a      	str	r2, [r3, #32]
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <vTaskPlaceOnEventListRestricted+0x8c>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	3218      	adds	r2, #24
 80043fe:	605a      	str	r2, [r3, #4]
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f103 0218 	add.w	r2, r3, #24
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <vTaskPlaceOnEventListRestricted+0x8c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
 8004428:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800442a:	2024      	movs	r0, #36	; 0x24
 800442c:	f002 f912 	bl	8006654 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68b8      	ldr	r0, [r7, #8]
 8004434:	f000 fae2 	bl	80049fc <prvAddCurrentTaskToDelayedList>
    }
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200001b8 	.word	0x200001b8

08004444 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	6a12      	ldr	r2, [r2, #32]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	69d2      	ldr	r2, [r2, #28]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	3318      	adds	r3, #24
 8004492:	429a      	cmp	r2, r3
 8004494:	d103      	bne.n	800449e <xTaskRemoveFromEventList+0x5a>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	6a1a      	ldr	r2, [r3, #32]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	2200      	movs	r2, #0
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ae:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <xTaskRemoveFromEventList+0x198>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d162      	bne.n	800457c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	68d2      	ldr	r2, [r2, #12]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	3304      	adds	r3, #4
 80044d8:	429a      	cmp	r2, r3
 80044da:	d103      	bne.n	80044e4 <xTaskRemoveFromEventList+0xa0>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	2200      	movs	r2, #0
 80044e8:	615a      	str	r2, [r3, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1e5a      	subs	r2, r3, #1
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f002 fcca 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <xTaskRemoveFromEventList+0x19c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	4a35      	ldr	r2, [pc, #212]	; (80045e0 <xTaskRemoveFromEventList+0x19c>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004512:	4934      	ldr	r1, [pc, #208]	; (80045e4 <xTaskRemoveFromEventList+0x1a0>)
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3304      	adds	r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	6a3a      	ldr	r2, [r7, #32]
 8004538:	3204      	adds	r2, #4
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <xTaskRemoveFromEventList+0x1a0>)
 8004552:	441a      	add	r2, r3
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	615a      	str	r2, [r3, #20]
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4921      	ldr	r1, [pc, #132]	; (80045e4 <xTaskRemoveFromEventList+0x1a0>)
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	481d      	ldr	r0, [pc, #116]	; (80045e4 <xTaskRemoveFromEventList+0x1a0>)
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4403      	add	r3, r0
 8004578:	6019      	str	r1, [r3, #0]
 800457a:	e01b      	b.n	80045b4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <xTaskRemoveFromEventList+0x1a4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	61da      	str	r2, [r3, #28]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	621a      	str	r2, [r3, #32]
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	3218      	adds	r2, #24
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f103 0218 	add.w	r2, r3, #24
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <xTaskRemoveFromEventList+0x1a4>)
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
 80045aa:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <xTaskRemoveFromEventList+0x1a4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a0d      	ldr	r2, [pc, #52]	; (80045e8 <xTaskRemoveFromEventList+0x1a4>)
 80045b2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <xTaskRemoveFromEventList+0x1a8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d905      	bls.n	80045ce <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <xTaskRemoveFromEventList+0x1ac>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e001      	b.n	80045d2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	200002cc 	.word	0x200002cc
 80045e0:	200002ac 	.word	0x200002ac
 80045e4:	200001bc 	.word	0x200001bc
 80045e8:	20000264 	.word	0x20000264
 80045ec:	200001b8 	.word	0x200001b8
 80045f0:	200002b8 	.word	0x200002b8

080045f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <vTaskInternalSetTimeOutState+0x24>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <vTaskInternalSetTimeOutState+0x28>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	200002bc 	.word	0x200002bc
 800461c:	200002a8 	.word	0x200002a8

08004620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	613b      	str	r3, [r7, #16]
    }
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
    }
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004662:	f000 ff27 	bl	80054b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <xTaskCheckForTimeOut+0xc4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d102      	bne.n	8004686 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e026      	b.n	80046d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <xTaskCheckForTimeOut+0xc8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d00a      	beq.n	80046a8 <xTaskCheckForTimeOut+0x88>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d305      	bcc.n	80046a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e015      	b.n	80046d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d20b      	bcs.n	80046ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ff98 	bl	80045f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e004      	b.n	80046d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80046d4:	f000 ff1e 	bl	8005514 <vPortExitCritical>

    return xReturn;
 80046d8:	69fb      	ldr	r3, [r7, #28]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200002a8 	.word	0x200002a8
 80046e8:	200002bc 	.word	0x200002bc

080046ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <vTaskMissedYield+0x14>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	200002b8 	.word	0x200002b8

08004704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800470c:	f000 f852 	bl	80047b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <prvIdleTask+0x28>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d9f9      	bls.n	800470c <prvIdleTask+0x8>
            {
                taskYIELD();
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <prvIdleTask+0x2c>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004728:	e7f0      	b.n	800470c <prvIdleTask+0x8>
 800472a:	bf00      	nop
 800472c:	200001bc 	.word	0x200001bc
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	e00c      	b.n	800475a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <prvInitialiseTaskLists+0x60>)
 800474c:	4413      	add	r3, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fadc 	bl	8002d0c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d9ef      	bls.n	8004740 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004760:	480d      	ldr	r0, [pc, #52]	; (8004798 <prvInitialiseTaskLists+0x64>)
 8004762:	f7fe fad3 	bl	8002d0c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004766:	480d      	ldr	r0, [pc, #52]	; (800479c <prvInitialiseTaskLists+0x68>)
 8004768:	f7fe fad0 	bl	8002d0c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800476c:	480c      	ldr	r0, [pc, #48]	; (80047a0 <prvInitialiseTaskLists+0x6c>)
 800476e:	f7fe facd 	bl	8002d0c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004772:	480c      	ldr	r0, [pc, #48]	; (80047a4 <prvInitialiseTaskLists+0x70>)
 8004774:	f7fe faca 	bl	8002d0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004778:	480b      	ldr	r0, [pc, #44]	; (80047a8 <prvInitialiseTaskLists+0x74>)
 800477a:	f7fe fac7 	bl	8002d0c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <prvInitialiseTaskLists+0x78>)
 8004780:	4a05      	ldr	r2, [pc, #20]	; (8004798 <prvInitialiseTaskLists+0x64>)
 8004782:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <prvInitialiseTaskLists+0x7c>)
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <prvInitialiseTaskLists+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200001bc 	.word	0x200001bc
 8004798:	20000234 	.word	0x20000234
 800479c:	20000248 	.word	0x20000248
 80047a0:	20000264 	.word	0x20000264
 80047a4:	20000278 	.word	0x20000278
 80047a8:	20000290 	.word	0x20000290
 80047ac:	2000025c 	.word	0x2000025c
 80047b0:	20000260 	.word	0x20000260

080047b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ba:	e019      	b.n	80047f0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80047bc:	f000 fe7a 	bl	80054b4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <prvCheckTasksWaitingTermination+0x50>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fb27 	bl	8002e20 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <prvCheckTasksWaitingTermination+0x54>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <prvCheckTasksWaitingTermination+0x54>)
 80047da:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047e4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80047e6:	f000 fe95 	bl	8005514 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f810 	bl	8004810 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e1      	bne.n	80047bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000278 	.word	0x20000278
 8004808:	200002a4 	.word	0x200002a4
 800480c:	2000028c 	.word	0x2000028c

08004810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f827 	bl	8005870 <vPortFree>
            vPortFree( pxTCB );
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f001 f824 	bl	8005870 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <prvResetNextTaskUnblockTime+0x30>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d104      	bne.n	8004848 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <prvResetNextTaskUnblockTime+0x34>)
 8004840:	f04f 32ff 	mov.w	r2, #4294967295
 8004844:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004846:	e005      	b.n	8004854 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <prvResetNextTaskUnblockTime+0x30>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <prvResetNextTaskUnblockTime+0x34>)
 8004852:	6013      	str	r3, [r2, #0]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	2000025c 	.word	0x2000025c
 8004864:	200002c4 	.word	0x200002c4

08004868 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800486e:	4b0b      	ldr	r3, [pc, #44]	; (800489c <xTaskGetSchedulerState+0x34>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004876:	2301      	movs	r3, #1
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	e008      	b.n	800488e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <xTaskGetSchedulerState+0x38>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004884:	2302      	movs	r3, #2
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	e001      	b.n	800488e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800488e:	687b      	ldr	r3, [r7, #4]
    }
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	200002b0 	.word	0x200002b0
 80048a0:	200002cc 	.word	0x200002cc

080048a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8095 	beq.w	80049e6 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80048bc:	4b4c      	ldr	r3, [pc, #304]	; (80049f0 <xTaskPriorityDisinherit+0x14c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d00a      	beq.n	80048dc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	613b      	str	r3, [r7, #16]
    }
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
    }
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	429a      	cmp	r2, r3
 800490e:	d06a      	beq.n	80049e6 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d166      	bne.n	80049e6 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fa7f 	bl	8002e20 <uxListRemove>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	2201      	movs	r2, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <xTaskPriorityDisinherit+0x150>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4013      	ands	r3, r2
 800493a:	4a2e      	ldr	r2, [pc, #184]	; (80049f4 <xTaskPriorityDisinherit+0x150>)
 800493c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	204a      	movs	r0, #74	; 0x4a
 8004944:	f001 fea4 	bl	8006690 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	f1c3 0206 	rsb	r2, r3, #6
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4618      	mov	r0, r3
 8004960:	f002 fa96 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <xTaskPriorityDisinherit+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <xTaskPriorityDisinherit+0x150>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	491f      	ldr	r1, [pc, #124]	; (80049f8 <xTaskPriorityDisinherit+0x154>)
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3304      	adds	r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	3204      	adds	r2, #4
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <xTaskPriorityDisinherit+0x154>)
 80049ba:	441a      	add	r2, r3
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	615a      	str	r2, [r3, #20]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	490c      	ldr	r1, [pc, #48]	; (80049f8 <xTaskPriorityDisinherit+0x154>)
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1c59      	adds	r1, r3, #1
 80049d4:	4808      	ldr	r0, [pc, #32]	; (80049f8 <xTaskPriorityDisinherit+0x154>)
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4403      	add	r3, r0
 80049e0:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80049e2:	2301      	movs	r3, #1
 80049e4:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80049e6:	69fb      	ldr	r3, [r7, #28]
    }
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	200001b8 	.word	0x200001b8
 80049f4:	200002ac 	.word	0x200002ac
 80049f8:	200001bc 	.word	0x200001bc

080049fc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a06:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0c:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fa04 	bl	8002e20 <uxListRemove>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4013      	ands	r3, r2
 8004a32:	4a2d      	ldr	r2, [pc, #180]	; (8004ae8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a34:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d124      	bne.n	8004a88 <prvAddCurrentTaskToDelayedList+0x8c>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d021      	beq.n	8004a88 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a44:	4b29      	ldr	r3, [pc, #164]	; (8004aec <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	3204      	adds	r2, #4
 8004a66:	605a      	str	r2, [r3, #4]
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	1d1a      	adds	r2, r3, #4
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a78:	615a      	str	r2, [r3, #20]
 8004a7a:	4b1c      	ldr	r3, [pc, #112]	; (8004aec <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a86:	e026      	b.n	8004ad6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d209      	bcs.n	8004ab4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa0:	4b13      	ldr	r3, [pc, #76]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe f97e 	bl	8002dae <vListInsert>
}
 8004ab2:	e010      	b.n	8004ad6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe f974 	bl	8002dae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d202      	bcs.n	8004ad6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6013      	str	r3, [r2, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200002a8 	.word	0x200002a8
 8004ae4:	200001b8 	.word	0x200001b8
 8004ae8:	200002ac 	.word	0x200002ac
 8004aec:	20000290 	.word	0x20000290
 8004af0:	20000260 	.word	0x20000260
 8004af4:	2000025c 	.word	0x2000025c
 8004af8:	200002c4 	.word	0x200002c4

08004afc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b06:	f000 faef 	bl	80050e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <xTimerCreateTimerTask+0x54>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00b      	beq.n	8004b2a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004b12:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xTimerCreateTimerTask+0x58>)
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	2302      	movs	r3, #2
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b20:	490d      	ldr	r1, [pc, #52]	; (8004b58 <xTimerCreateTimerTask+0x5c>)
 8004b22:	480e      	ldr	r0, [pc, #56]	; (8004b5c <xTimerCreateTimerTask+0x60>)
 8004b24:	f7fe feca 	bl	80038bc <xTaskCreate>
 8004b28:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	603b      	str	r3, [r7, #0]
    }
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004b46:	687b      	ldr	r3, [r7, #4]
    }
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000300 	.word	0x20000300
 8004b54:	20000304 	.word	0x20000304
 8004b58:	08007c48 	.word	0x08007c48
 8004b5c:	08004d55 	.word	0x08004d55

08004b60 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004b6e:	202c      	movs	r0, #44	; 0x2c
 8004b70:	f000 fdc4 	bl	80056fc <pvPortMalloc>
 8004b74:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00d      	beq.n	8004b98 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f805 	bl	8004ba2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8004b98:	697b      	ldr	r3, [r7, #20]
        }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10a      	bne.n	8004bcc <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	617b      	str	r3, [r7, #20]
    }
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8004bcc:	f000 fa8c 	bl	80050e8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	3304      	adds	r3, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fe f8ad 	bl	8002d4c <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8004c0a:	bf00      	nop
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08a      	sub	sp, #40	; 0x28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	623b      	str	r3, [r7, #32]
    }
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <xTimerGenericCommand+0x98>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02a      	beq.n	8004ca0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	dc18      	bgt.n	8004c8e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c5c:	f7ff fe04 	bl	8004868 <xTaskGetSchedulerState>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d109      	bne.n	8004c7a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <xTimerGenericCommand+0x98>)
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	f107 0114 	add.w	r1, r7, #20
 8004c6e:	2300      	movs	r3, #0
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	f7fe fa01 	bl	8003078 <xQueueGenericSend>
 8004c76:	6278      	str	r0, [r7, #36]	; 0x24
 8004c78:	e012      	b.n	8004ca0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <xTimerGenericCommand+0x98>)
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f107 0114 	add.w	r1, r7, #20
 8004c82:	2300      	movs	r3, #0
 8004c84:	2200      	movs	r2, #0
 8004c86:	f7fe f9f7 	bl	8003078 <xQueueGenericSend>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c8c:	e008      	b.n	8004ca0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <xTimerGenericCommand+0x98>)
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	f107 0114 	add.w	r1, r7, #20
 8004c96:	2300      	movs	r3, #0
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	f7fe faeb 	bl	8003274 <xQueueGenericSendFromISR>
 8004c9e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3728      	adds	r7, #40	; 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000300 	.word	0x20000300

08004cb0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cbc:	e008      	b.n	8004cd0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	18d1      	adds	r1, r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f8dd 	bl	8004e9c <prvInsertTimerInActiveList>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ea      	bne.n	8004cbe <prvReloadTimer+0xe>
        }
    }
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <prvProcessExpiredTimer+0x5c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f887 	bl	8002e20 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff ffc3 	bl	8004cb0 <prvReloadTimer>
 8004d2a:	e008      	b.n	8004d3e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	4798      	blx	r3
    }
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200002f8 	.word	0x200002f8

08004d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 f857 	bl	8004e14 <prvGetNextExpireTime>
 8004d66:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f803 	bl	8004d78 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004d72:	f000 f8d5 	bl	8004f20 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d76:	e7f1      	b.n	8004d5c <prvTimerTask+0x8>

08004d78 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004d82:	f7ff f833 	bl	8003dec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f866 	bl	8004e5c <prvSampleTimeNow>
 8004d90:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d130      	bne.n	8004dfa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <prvProcessTimerOrBlockTask+0x3c>
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d806      	bhi.n	8004db4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004da6:	f7ff f82f 	bl	8003e08 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ffa1 	bl	8004cf4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004db2:	e024      	b.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <prvProcessTimerOrBlockTask+0x90>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <prvProcessTimerOrBlockTask+0x50>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <prvProcessTimerOrBlockTask+0x52>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <prvProcessTimerOrBlockTask+0x94>)
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fe fd3b 	bl	8003854 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004dde:	f7ff f813 	bl	8003e08 <xTaskResumeAll>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <prvProcessTimerOrBlockTask+0x98>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
    }
 8004df8:	e001      	b.n	8004dfe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004dfa:	f7ff f805 	bl	8003e08 <xTaskResumeAll>
    }
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200002fc 	.word	0x200002fc
 8004e0c:	20000300 	.word	0x20000300
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <prvGetNextExpireTime+0x44>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <prvGetNextExpireTime+0x16>
 8004e26:	2201      	movs	r2, #1
 8004e28:	e000      	b.n	8004e2c <prvGetNextExpireTime+0x18>
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <prvGetNextExpireTime+0x44>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e001      	b.n	8004e48 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004e48:	68fb      	ldr	r3, [r7, #12]
    }
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	200002f8 	.word	0x200002f8

08004e5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004e64:	f7ff f8d0 	bl	8004008 <xTaskGetTickCount>
 8004e68:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <prvSampleTimeNow+0x3c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d205      	bcs.n	8004e80 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004e74:	f000 f912 	bl	800509c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e002      	b.n	8004e86 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004e86:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvSampleTimeNow+0x3c>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
    }
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000308 	.word	0x20000308

08004e9c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d812      	bhi.n	8004ee8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e01b      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <prvInsertTimerInActiveList+0x7c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7fd ff64 	bl	8002dae <vListInsert>
 8004ee6:	e012      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d206      	bcs.n	8004efe <prvInsertTimerInActiveList+0x62>
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d302      	bcc.n	8004efe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e007      	b.n	8004f0e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <prvInsertTimerInActiveList+0x80>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f7fd ff50 	bl	8002dae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004f0e:	697b      	ldr	r3, [r7, #20]
    }
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	200002fc 	.word	0x200002fc
 8004f1c:	200002f8 	.word	0x200002f8

08004f20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f26:	e0a6      	b.n	8005076 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f2c0 80a3 	blt.w	8005076 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fd ff6d 	bl	8002e20 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f46:	1d3b      	adds	r3, r7, #4
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff87 	bl	8004e5c <prvSampleTimeNow>
 8004f4e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	f200 808d 	bhi.w	8005074 <prvProcessReceivedCommands+0x154>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <prvProcessReceivedCommands+0x40>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08005001 	.word	0x08005001
 8004f70:	0800504b 	.word	0x0800504b
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f85 	.word	0x08004f85
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08005001 	.word	0x08005001
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	18d1      	adds	r1, r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	69f8      	ldr	r0, [r7, #28]
 8004fa4:	f7ff ff7a 	bl	8004e9c <prvInsertTimerInActiveList>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d063      	beq.n	8005076 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	69f8      	ldr	r0, [r7, #28]
 8004fca:	f7ff fe71 	bl	8004cb0 <prvReloadTimer>
 8004fce:	e008      	b.n	8004fe2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	69f8      	ldr	r0, [r7, #28]
 8004fe8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004fea:	e044      	b.n	8005076 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ffe:	e03a      	b.n	8005076 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	617b      	str	r3, [r7, #20]
    }
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	18d1      	adds	r1, r2, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	69f8      	ldr	r0, [r7, #28]
 8005044:	f7ff ff2a 	bl	8004e9c <prvInsertTimerInActiveList>
                        break;
 8005048:	e015      	b.n	8005076 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d103      	bne.n	8005060 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005058:	69f8      	ldr	r0, [r7, #28]
 800505a:	f000 fc09 	bl	8005870 <vPortFree>
 800505e:	e00a      	b.n	8005076 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005072:	e000      	b.n	8005076 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005074:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <prvProcessReceivedCommands+0x178>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f107 0108 	add.w	r1, r7, #8
 800507e:	2200      	movs	r2, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe f9a9 	bl	80033d8 <xQueueReceive>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f af4d 	bne.w	8004f28 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000300 	.word	0x20000300

0800509c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050a2:	e009      	b.n	80050b8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <prvSwitchTimerLists+0x44>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80050ae:	f04f 31ff 	mov.w	r1, #4294967295
 80050b2:	6838      	ldr	r0, [r7, #0]
 80050b4:	f7ff fe1e 	bl	8004cf4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <prvSwitchTimerLists+0x44>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <prvSwitchTimerLists+0x44>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <prvSwitchTimerLists+0x44>)
 80050ce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <prvSwitchTimerLists+0x48>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6013      	str	r3, [r2, #0]
    }
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200002f8 	.word	0x200002f8
 80050e4:	200002fc 	.word	0x200002fc

080050e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80050ec:	f000 f9e2 	bl	80054b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <prvCheckForValidListAndQueue+0x54>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d11d      	bne.n	8005134 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80050f8:	4811      	ldr	r0, [pc, #68]	; (8005140 <prvCheckForValidListAndQueue+0x58>)
 80050fa:	f7fd fe07 	bl	8002d0c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80050fe:	4811      	ldr	r0, [pc, #68]	; (8005144 <prvCheckForValidListAndQueue+0x5c>)
 8005100:	f7fd fe04 	bl	8002d0c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <prvCheckForValidListAndQueue+0x60>)
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <prvCheckForValidListAndQueue+0x58>)
 8005108:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <prvCheckForValidListAndQueue+0x64>)
 800510c:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <prvCheckForValidListAndQueue+0x5c>)
 800510e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005110:	2200      	movs	r2, #0
 8005112:	210c      	movs	r1, #12
 8005114:	200a      	movs	r0, #10
 8005116:	f7fd ff3d 	bl	8002f94 <xQueueGenericCreate>
 800511a:	4603      	mov	r3, r0
 800511c:	4a07      	ldr	r2, [pc, #28]	; (800513c <prvCheckForValidListAndQueue+0x54>)
 800511e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <prvCheckForValidListAndQueue+0x54>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <prvCheckForValidListAndQueue+0x54>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4908      	ldr	r1, [pc, #32]	; (8005150 <prvCheckForValidListAndQueue+0x68>)
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fb42 	bl	80037b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005134:	f000 f9ee 	bl	8005514 <vPortExitCritical>
    }
 8005138:	bf00      	nop
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000300 	.word	0x20000300
 8005140:	200002d0 	.word	0x200002d0
 8005144:	200002e4 	.word	0x200002e4
 8005148:	200002f8 	.word	0x200002f8
 800514c:	200002fc 	.word	0x200002fc
 8005150:	08007c50 	.word	0x08007c50

08005154 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3b04      	subs	r3, #4
 8005164:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800516c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3b04      	subs	r3, #4
 8005172:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f023 0201 	bic.w	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3b04      	subs	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005184:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <pxPortInitialiseStack+0x64>)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3b14      	subs	r3, #20
 800518e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3b04      	subs	r3, #4
 800519a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f06f 0202 	mvn.w	r2, #2
 80051a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	3b20      	subs	r3, #32
 80051a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	080051bd 	.word	0x080051bd

080051bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <prvTaskExitError+0x54>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ce:	d00a      	beq.n	80051e6 <prvTaskExitError+0x2a>
        __asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
    }
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <prvTaskExitError+0x28>
        __asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	60bb      	str	r3, [r7, #8]
    }
 80051f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80051fa:	bf00      	nop
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0fc      	beq.n	80051fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20000014 	.word	0x20000014
	...

08005220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <pxCurrentTCBConst2>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522a:	f380 8809 	msr	PSP, r0
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f04f 0000 	mov.w	r0, #0
 8005236:	f380 8811 	msr	BASEPRI, r0
 800523a:	4770      	bx	lr
 800523c:	f3af 8000 	nop.w

08005240 <pxCurrentTCBConst2>:
 8005240:	200001b8 	.word	0x200001b8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005248:	4808      	ldr	r0, [pc, #32]	; (800526c <prvPortStartFirstTask+0x24>)
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	6800      	ldr	r0, [r0, #0]
 800524e:	f380 8808 	msr	MSP, r0
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8814 	msr	CONTROL, r0
 800525a:	b662      	cpsie	i
 800525c:	b661      	cpsie	f
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	df00      	svc	0
 8005268:	bf00      	nop
 800526a:	0000      	.short	0x0000
 800526c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop

08005274 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800527a:	4b46      	ldr	r3, [pc, #280]	; (8005394 <xPortStartScheduler+0x120>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a46      	ldr	r2, [pc, #280]	; (8005398 <xPortStartScheduler+0x124>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d10a      	bne.n	800529a <xPortStartScheduler+0x26>
        __asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	613b      	str	r3, [r7, #16]
    }
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800529a:	4b3e      	ldr	r3, [pc, #248]	; (8005394 <xPortStartScheduler+0x120>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3f      	ldr	r2, [pc, #252]	; (800539c <xPortStartScheduler+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10a      	bne.n	80052ba <xPortStartScheduler+0x46>
        __asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
    }
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <xPortStartScheduler+0x12c>)
 80052bc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xPortStartScheduler+0x130>)
 80052e0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052e2:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <xPortStartScheduler+0x134>)
 80052e4:	2207      	movs	r2, #7
 80052e6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e8:	e009      	b.n	80052fe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80052ea:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <xPortStartScheduler+0x134>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <xPortStartScheduler+0x134>)
 80052f2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d0ef      	beq.n	80052ea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <xPortStartScheduler+0x134>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1c3 0307 	rsb	r3, r3, #7
 8005312:	2b04      	cmp	r3, #4
 8005314:	d00a      	beq.n	800532c <xPortStartScheduler+0xb8>
        __asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60bb      	str	r3, [r7, #8]
    }
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <xPortStartScheduler+0x134>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <xPortStartScheduler+0x134>)
 8005334:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005336:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <xPortStartScheduler+0x134>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <xPortStartScheduler+0x134>)
 8005340:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800534a:	4b18      	ldr	r3, [pc, #96]	; (80053ac <xPortStartScheduler+0x138>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <xPortStartScheduler+0x138>)
 8005350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005354:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <xPortStartScheduler+0x138>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a14      	ldr	r2, [pc, #80]	; (80053ac <xPortStartScheduler+0x138>)
 800535c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005360:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005362:	f000 f95b 	bl	800561c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005366:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <xPortStartScheduler+0x13c>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800536c:	f000 f97a 	bl	8005664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005370:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <xPortStartScheduler+0x140>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <xPortStartScheduler+0x140>)
 8005376:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800537a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800537c:	f7ff ff64 	bl	8005248 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005380:	f7fe ff8a 	bl	8004298 <vTaskSwitchContext>
    prvTaskExitError();
 8005384:	f7ff ff1a 	bl	80051bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	e000ed00 	.word	0xe000ed00
 8005398:	410fc271 	.word	0x410fc271
 800539c:	410fc270 	.word	0x410fc270
 80053a0:	e000e400 	.word	0xe000e400
 80053a4:	2000030c 	.word	0x2000030c
 80053a8:	20000310 	.word	0x20000310
 80053ac:	e000ed20 	.word	0xe000ed20
 80053b0:	20000014 	.word	0x20000014
 80053b4:	e000ef34 	.word	0xe000ef34

080053b8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <vInitPrioGroupValue+0xe4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a37      	ldr	r2, [pc, #220]	; (80054a0 <vInitPrioGroupValue+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10a      	bne.n	80053de <vInitPrioGroupValue+0x26>
        __asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	613b      	str	r3, [r7, #16]
    }
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053de:	4b2f      	ldr	r3, [pc, #188]	; (800549c <vInitPrioGroupValue+0xe4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a30      	ldr	r2, [pc, #192]	; (80054a4 <vInitPrioGroupValue+0xec>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10a      	bne.n	80053fe <vInitPrioGroupValue+0x46>
        __asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60fb      	str	r3, [r7, #12]
    }
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053fe:	4b2a      	ldr	r3, [pc, #168]	; (80054a8 <vInitPrioGroupValue+0xf0>)
 8005400:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005420:	b2da      	uxtb	r2, r3
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <vInitPrioGroupValue+0xf4>)
 8005424:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005428:	2207      	movs	r2, #7
 800542a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542c:	e009      	b.n	8005442 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3b01      	subs	r3, #1
 8005434:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005436:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b2db      	uxtb	r3, r3
 8005440:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d0ef      	beq.n	800542e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1c3 0307 	rsb	r3, r3, #7
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00a      	beq.n	8005470 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60bb      	str	r3, [r7, #8]
    }
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4a0e      	ldr	r2, [pc, #56]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005478:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005482:	4a0b      	ldr	r2, [pc, #44]	; (80054b0 <vInitPrioGroupValue+0xf8>)
 8005484:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	e000ed00 	.word	0xe000ed00
 80054a0:	410fc271 	.word	0x410fc271
 80054a4:	410fc270 	.word	0x410fc270
 80054a8:	e000e400 	.word	0xe000e400
 80054ac:	2000030c 	.word	0x2000030c
 80054b0:	20000310 	.word	0x20000310

080054b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
        __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
    }
 80054cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <vPortEnterCritical+0x58>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a0d      	ldr	r2, [pc, #52]	; (800550c <vPortEnterCritical+0x58>)
 80054d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <vPortEnterCritical+0x58>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10f      	bne.n	8005500 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <vPortEnterCritical+0x5c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <vPortEnterCritical+0x4c>
        __asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	603b      	str	r3, [r7, #0]
    }
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <vPortEnterCritical+0x4a>
    }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	20000014 	.word	0x20000014
 8005510:	e000ed04 	.word	0xe000ed04

08005514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800551a:	4b12      	ldr	r3, [pc, #72]	; (8005564 <vPortExitCritical+0x50>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <vPortExitCritical+0x24>
        __asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	607b      	str	r3, [r7, #4]
    }
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <vPortExitCritical+0x50>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	4a09      	ldr	r2, [pc, #36]	; (8005564 <vPortExitCritical+0x50>)
 8005540:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <vPortExitCritical+0x50>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <vPortExitCritical+0x42>
 800554a:	2300      	movs	r3, #0
 800554c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f383 8811 	msr	BASEPRI, r3
    }
 8005554:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000014 	.word	0x20000014
	...

08005570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005570:	f3ef 8009 	mrs	r0, PSP
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <pxCurrentTCBConst>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f01e 0f10 	tst.w	lr, #16
 8005580:	bf08      	it	eq
 8005582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005594:	f380 8811 	msr	BASEPRI, r0
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f7fe fe7a 	bl	8004298 <vTaskSwitchContext>
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f380 8811 	msr	BASEPRI, r0
 80055ac:	bc09      	pop	{r0, r3}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b6:	f01e 0f10 	tst.w	lr, #16
 80055ba:	bf08      	it	eq
 80055bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055c0:	f380 8809 	msr	PSP, r0
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst>:
 80055d0:	200001b8 	.word	0x200001b8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
        __asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
    }
 80055f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	//traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80055f2:	f7fe fd37 	bl	8004064 <xTaskIncrementTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <SysTick_Handler+0x2c>
        {
			//traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <SysTick_Handler+0x40>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
    }
 800560e:	bf00      	nop
		{
			//traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005626:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <vPortSetupTimerInterrupt+0x38>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <vPortSetupTimerInterrupt+0x3c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <vPortSetupTimerInterrupt+0x40>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	4a09      	ldr	r2, [pc, #36]	; (8005660 <vPortSetupTimerInterrupt+0x44>)
 800563a:	3b01      	subs	r3, #1
 800563c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e010 	.word	0xe000e010
 8005654:	e000e018 	.word	0xe000e018
 8005658:	20000004 	.word	0x20000004
 800565c:	10624dd3 	.word	0x10624dd3
 8005660:	e000e014 	.word	0xe000e014

08005664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005674 <vPortEnableVFP+0x10>
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800566e:	6001      	str	r1, [r0, #0]
 8005670:	4770      	bx	lr
 8005672:	0000      	.short	0x0000
 8005674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop

0800567c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005682:	f3ef 8305 	mrs	r3, IPSR
 8005686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	d914      	bls.n	80056b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800568e:	4a17      	ldr	r2, [pc, #92]	; (80056ec <vPortValidateInterruptPriority+0x70>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <vPortValidateInterruptPriority+0x74>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	7afa      	ldrb	r2, [r7, #11]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d20a      	bcs.n	80056b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
    }
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <vPortValidateInterruptPriority+0x78>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056c0:	4b0d      	ldr	r3, [pc, #52]	; (80056f8 <vPortValidateInterruptPriority+0x7c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d90a      	bls.n	80056de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	603b      	str	r3, [r7, #0]
    }
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <vPortValidateInterruptPriority+0x60>
    }
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	e000e3f0 	.word	0xe000e3f0
 80056f0:	2000030c 	.word	0x2000030c
 80056f4:	e000ed0c 	.word	0xe000ed0c
 80056f8:	20000310 	.word	0x20000310

080056fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005708:	f7fe fb70 	bl	8003dec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800570c:	4b53      	ldr	r3, [pc, #332]	; (800585c <pvPortMalloc+0x160>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005714:	f000 f908 	bl	8005928 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800571e:	2208      	movs	r2, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	3308      	adds	r3, #8
 800572a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	43db      	mvns	r3, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d804      	bhi.n	8005740 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	4413      	add	r3, r2
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	e001      	b.n	8005744 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	db70      	blt.n	800582c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d06d      	beq.n	800582c <pvPortMalloc+0x130>
 8005750:	4b43      	ldr	r3, [pc, #268]	; (8005860 <pvPortMalloc+0x164>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d868      	bhi.n	800582c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800575a:	4b42      	ldr	r3, [pc, #264]	; (8005864 <pvPortMalloc+0x168>)
 800575c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800575e:	4b41      	ldr	r3, [pc, #260]	; (8005864 <pvPortMalloc+0x168>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005764:	e004      	b.n	8005770 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d903      	bls.n	8005782 <pvPortMalloc+0x86>
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f1      	bne.n	8005766 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005782:	4b36      	ldr	r3, [pc, #216]	; (800585c <pvPortMalloc+0x160>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	d04f      	beq.n	800582c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	4413      	add	r3, r2
 8005794:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	1ad2      	subs	r2, r2, r3
 80057a6:	2308      	movs	r3, #8
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d91f      	bls.n	80057ee <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4413      	add	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <pvPortMalloc+0xda>
        __asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	613b      	str	r3, [r7, #16]
    }
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f000 f8f9 	bl	80059e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057ee:	4b1c      	ldr	r3, [pc, #112]	; (8005860 <pvPortMalloc+0x164>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <pvPortMalloc+0x164>)
 80057fa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057fc:	4b18      	ldr	r3, [pc, #96]	; (8005860 <pvPortMalloc+0x164>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <pvPortMalloc+0x16c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d203      	bcs.n	8005810 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <pvPortMalloc+0x164>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <pvPortMalloc+0x16c>)
 800580e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <pvPortMalloc+0x170>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	4a10      	ldr	r2, [pc, #64]	; (800586c <pvPortMalloc+0x170>)
 800582a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800582c:	f7fe faec 	bl	8003e08 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <pvPortMalloc+0x154>
        __asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	60fb      	str	r3, [r7, #12]
    }
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <pvPortMalloc+0x152>
    return pvReturn;
 8005850:	69fb      	ldr	r3, [r7, #28]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3728      	adds	r7, #40	; 0x28
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20012f1c 	.word	0x20012f1c
 8005860:	20012f20 	.word	0x20012f20
 8005864:	20012f14 	.word	0x20012f14
 8005868:	20012f24 	.word	0x20012f24
 800586c:	20012f28 	.word	0x20012f28

08005870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d049      	beq.n	8005916 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005882:	2308      	movs	r3, #8
 8005884:	425b      	negs	r3, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	db0a      	blt.n	80058ae <vPortFree+0x3e>
        __asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	60fb      	str	r3, [r7, #12]
    }
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <vPortFree+0x5c>
        __asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	60bb      	str	r3, [r7, #8]
    }
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	0fdb      	lsrs	r3, r3, #31
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01c      	beq.n	8005916 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d118      	bne.n	8005916 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80058f0:	f7fe fa7c 	bl	8003dec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4b09      	ldr	r3, [pc, #36]	; (8005920 <vPortFree+0xb0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <vPortFree+0xb0>)
 8005900:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005902:	6938      	ldr	r0, [r7, #16]
 8005904:	f000 f86c 	bl	80059e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005908:	4b06      	ldr	r3, [pc, #24]	; (8005924 <vPortFree+0xb4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	4a05      	ldr	r2, [pc, #20]	; (8005924 <vPortFree+0xb4>)
 8005910:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005912:	f7fe fa79 	bl	8003e08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20012f20 	.word	0x20012f20
 8005924:	20012f2c 	.word	0x20012f2c

08005928 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800592e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005932:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <prvHeapInit+0xa4>)
 8005936:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00c      	beq.n	800595c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3307      	adds	r3, #7
 8005946:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <prvHeapInit+0xa4>)
 8005958:	4413      	add	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <prvHeapInit+0xa8>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005966:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <prvHeapInit+0xa8>)
 8005968:	2200      	movs	r2, #0
 800596a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4413      	add	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005974:	2208      	movs	r2, #8
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1a9b      	subs	r3, r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0307 	bic.w	r3, r3, #7
 8005982:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <prvHeapInit+0xac>)
 8005988:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <prvHeapInit+0xac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <prvHeapInit+0xac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <prvHeapInit+0xac>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <prvHeapInit+0xb0>)
 80059b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	4a07      	ldr	r2, [pc, #28]	; (80059dc <prvHeapInit+0xb4>)
 80059be:	6013      	str	r3, [r2, #0]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000314 	.word	0x20000314
 80059d0:	20012f14 	.word	0x20012f14
 80059d4:	20012f1c 	.word	0x20012f1c
 80059d8:	20012f24 	.word	0x20012f24
 80059dc:	20012f20 	.word	0x20012f20

080059e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059e8:	4b28      	ldr	r3, [pc, #160]	; (8005a8c <prvInsertBlockIntoFreeList+0xac>)
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e002      	b.n	80059f4 <prvInsertBlockIntoFreeList+0x14>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d8f7      	bhi.n	80059ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4413      	add	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d108      	bne.n	8005a22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	441a      	add	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d118      	bne.n	8005a68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <prvInsertBlockIntoFreeList+0xb0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d00d      	beq.n	8005a5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e008      	b.n	8005a70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <prvInsertBlockIntoFreeList+0xb0>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e003      	b.n	8005a70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d002      	beq.n	8005a7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20012f14 	.word	0x20012f14
 8005a90:	20012f1c 	.word	0x20012f1c

08005a94 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005a98:	4803      	ldr	r0, [pc, #12]	; (8005aa8 <_cbSendSystemDesc+0x14>)
 8005a9a:	f001 f903 	bl	8006ca4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005a9e:	4803      	ldr	r0, [pc, #12]	; (8005aac <_cbSendSystemDesc+0x18>)
 8005aa0:	f001 f900 	bl	8006ca4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	08007c58 	.word	0x08007c58
 8005aac:	08007c90 	.word	0x08007c90

08005ab0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <SEGGER_SYSVIEW_Conf+0x20>)
 8005aba:	6819      	ldr	r1, [r3, #0]
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <SEGGER_SYSVIEW_Conf+0x24>)
 8005abe:	4a06      	ldr	r2, [pc, #24]	; (8005ad8 <SEGGER_SYSVIEW_Conf+0x28>)
 8005ac0:	f000 fd74 	bl	80065ac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005ac4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005ac8:	f000 fdb4 	bl	8006634 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005acc:	bf00      	nop
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	08005a95 	.word	0x08005a95
 8005ad8:	08007d30 	.word	0x08007d30

08005adc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	607b      	str	r3, [r7, #4]
 8005ae6:	e033      	b.n	8005b50 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005ae8:	491e      	ldr	r1, [pc, #120]	; (8005b64 <_cbSendTaskList+0x88>)
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	6818      	ldr	r0, [r3, #0]
 8005af8:	491a      	ldr	r1, [pc, #104]	; (8005b64 <_cbSendTaskList+0x88>)
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	3304      	adds	r3, #4
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	4c16      	ldr	r4, [pc, #88]	; (8005b64 <_cbSendTaskList+0x88>)
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4423      	add	r3, r4
 8005b18:	3308      	adds	r3, #8
 8005b1a:	681c      	ldr	r4, [r3, #0]
 8005b1c:	4d11      	ldr	r5, [pc, #68]	; (8005b64 <_cbSendTaskList+0x88>)
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	442b      	add	r3, r5
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	681d      	ldr	r5, [r3, #0]
 8005b2e:	4e0d      	ldr	r6, [pc, #52]	; (8005b64 <_cbSendTaskList+0x88>)
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4433      	add	r3, r6
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	462b      	mov	r3, r5
 8005b44:	4622      	mov	r2, r4
 8005b46:	f000 f8bd 	bl	8005cc4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <_cbSendTaskList+0x8c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3c6      	bcc.n	8005ae8 <_cbSendTaskList+0xc>
  }
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	20012f30 	.word	0x20012f30
 8005b68:	20012fd0 	.word	0x20012fd0

08005b6c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005b74:	f7fe fa58 	bl	8004028 <xTaskGetTickCountFromISR>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	4693      	mov	fp, r2
 8005b80:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	f04f 0b00 	mov.w	fp, #0
 8005b94:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005b98:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005b9c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005ba0:	4652      	mov	r2, sl
 8005ba2:	465b      	mov	r3, fp
 8005ba4:	1a14      	subs	r4, r2, r0
 8005ba6:	eb63 0501 	sbc.w	r5, r3, r1
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	00ab      	lsls	r3, r5, #2
 8005bb4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005bb8:	00a2      	lsls	r2, r4, #2
 8005bba:	4614      	mov	r4, r2
 8005bbc:	461d      	mov	r5, r3
 8005bbe:	eb14 0800 	adds.w	r8, r4, r0
 8005bc2:	eb45 0901 	adc.w	r9, r5, r1
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bda:	4690      	mov	r8, r2
 8005bdc:	4699      	mov	r9, r3
 8005bde:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005be2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005bf4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005c02:	2205      	movs	r2, #5
 8005c04:	492b      	ldr	r1, [pc, #172]	; (8005cb4 <SYSVIEW_AddTask+0xc0>)
 8005c06:	68b8      	ldr	r0, [r7, #8]
 8005c08:	f001 fb4c 	bl	80072a4 <memcmp>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04b      	beq.n	8005caa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b07      	cmp	r3, #7
 8005c18:	d903      	bls.n	8005c22 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005c1a:	4828      	ldr	r0, [pc, #160]	; (8005cbc <SYSVIEW_AddTask+0xc8>)
 8005c1c:	f001 fac6 	bl	80071ac <SEGGER_SYSVIEW_Warn>
    return;
 8005c20:	e044      	b.n	8005cac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005c22:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4926      	ldr	r1, [pc, #152]	; (8005cc0 <SYSVIEW_AddTask+0xcc>)
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4921      	ldr	r1, [pc, #132]	; (8005cc0 <SYSVIEW_AddTask+0xcc>)
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	3304      	adds	r3, #4
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	491b      	ldr	r1, [pc, #108]	; (8005cc0 <SYSVIEW_AddTask+0xcc>)
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4916      	ldr	r1, [pc, #88]	; (8005cc0 <SYSVIEW_AddTask+0xcc>)
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	330c      	adds	r3, #12
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	4910      	ldr	r1, [pc, #64]	; (8005cc0 <SYSVIEW_AddTask+0xcc>)
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	3310      	adds	r3, #16
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005c8e:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <SYSVIEW_AddTask+0xc4>)
 8005c96:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f80e 	bl	8005cc4 <SYSVIEW_SendTaskInfo>
 8005ca8:	e000      	b.n	8005cac <SYSVIEW_AddTask+0xb8>
    return;
 8005caa:	bf00      	nop

}
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	08007ca0 	.word	0x08007ca0
 8005cb8:	20012fd0 	.word	0x20012fd0
 8005cbc:	08007ca8 	.word	0x08007ca8
 8005cc0:	20012f30 	.word	0x20012f30

08005cc4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005cd2:	f107 0314 	add.w	r3, r7, #20
 8005cd6:	2214      	movs	r2, #20
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 faf2 	bl	80072c4 <memset>
  TaskInfo.TaskID     = TaskID;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fedb 	bl	8006ab4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005cfe:	bf00      	nop
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <USART2_IRQHandler+0x80>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d011      	beq.n	8005d42 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <USART2_IRQHandler+0x84>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 030b 	and.w	r3, r3, #11
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d108      	bne.n	8005d42 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <USART2_IRQHandler+0x88>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <USART2_IRQHandler+0x88>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	79fa      	ldrb	r2, [r7, #7]
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <USART2_IRQHandler+0x8c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <USART2_IRQHandler+0x8c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	1dfa      	adds	r2, r7, #7
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4798      	blx	r3
 8005d5e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <USART2_IRQHandler+0x90>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a0b      	ldr	r2, [pc, #44]	; (8005d98 <USART2_IRQHandler+0x90>)
 8005d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e006      	b.n	8005d82 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005d74:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <USART2_IRQHandler+0x80>)
 8005d76:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005d78:	79fa      	ldrb	r2, [r7, #7]
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <USART2_IRQHandler+0x84>)
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e000      	b.n	8005d82 <USART2_IRQHandler+0x7a>
      return;
 8005d80:	bf00      	nop
    }
  }
}
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40011000 	.word	0x40011000
 8005d8c:	40011004 	.word	0x40011004
 8005d90:	20012fd4 	.word	0x20012fd4
 8005d94:	20012fd8 	.word	0x20012fd8
 8005d98:	4001100c 	.word	0x4001100c

08005d9c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	4001100c 	.word	0x4001100c

08005dbc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <_DoInit+0x98>)
 8005dc4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2203      	movs	r2, #3
 8005dca:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2203      	movs	r2, #3
 8005dd0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a20      	ldr	r2, [pc, #128]	; (8005e58 <_DoInit+0x9c>)
 8005dd6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a20      	ldr	r2, [pc, #128]	; (8005e5c <_DoInit+0xa0>)
 8005ddc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a17      	ldr	r2, [pc, #92]	; (8005e58 <_DoInit+0x9c>)
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <_DoInit+0xa4>)
 8005e02:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2210      	movs	r2, #16
 8005e08:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3307      	adds	r3, #7
 8005e20:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <_DoInit+0xa8>)
 8005e22:	6810      	ldr	r0, [r2, #0]
 8005e24:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e26:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a0e      	ldr	r2, [pc, #56]	; (8005e68 <_DoInit+0xac>)
 8005e2e:	6810      	ldr	r0, [r2, #0]
 8005e30:	6018      	str	r0, [r3, #0]
 8005e32:	8891      	ldrh	r1, [r2, #4]
 8005e34:	7992      	ldrb	r2, [r2, #6]
 8005e36:	8099      	strh	r1, [r3, #4]
 8005e38:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e3a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005e44:	f3bf 8f5f 	dmb	sy
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	20012fdc 	.word	0x20012fdc
 8005e58:	08007cf8 	.word	0x08007cf8
 8005e5c:	20013084 	.word	0x20013084
 8005e60:	20013484 	.word	0x20013484
 8005e64:	08007d04 	.word	0x08007d04
 8005e68:	08007d08 	.word	0x08007d08

08005e6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	; 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e78:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e7a:	623b      	str	r3, [r7, #32]
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <SEGGER_RTT_ReadNoLock+0x1e>
 8005e86:	f7ff ff99 	bl	8005dbc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	3360      	adds	r3, #96	; 0x60
 8005e96:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e98:	4413      	add	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005eac:	2300      	movs	r3, #0
 8005eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d92b      	bls.n	8005f10 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	bf28      	it	cs
 8005eca:	4613      	movcs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	4413      	add	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	6939      	ldr	r1, [r7, #16]
 8005edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ede:	f001 fa25 	bl	800732c <memcpy>
    NumBytesRead += NumBytesRem;
 8005ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d101      	bne.n	8005f10 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	bf28      	it	cs
 8005f20:	4613      	movcs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d019      	beq.n	8005f5e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	4413      	add	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	6939      	ldr	r1, [r7, #16]
 8005f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f3a:	f001 f9f7 	bl	800732c <memcpy>
    NumBytesRead += NumBytesRem;
 8005f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	; 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20012fdc 	.word	0x20012fdc

08005f78 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f86:	4b3d      	ldr	r3, [pc, #244]	; (800607c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005f94:	f7ff ff12 	bl	8005dbc <_DoInit>
  SEGGER_RTT_LOCK();
 8005f98:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9c:	f04f 0120 	mov.w	r1, #32
 8005fa0:	f381 8811 	msr	BASEPRI, r1
 8005fa4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fa6:	4b35      	ldr	r3, [pc, #212]	; (800607c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005fa8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	4413      	add	r3, r2
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	440b      	add	r3, r1
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	dbeb      	blt.n	8005fae <SEGGER_RTT_AllocUpBuffer+0x36>
 8005fd6:	e000      	b.n	8005fda <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005fd8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	da3f      	bge.n	8006064 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005fe4:	6939      	ldr	r1, [r7, #16]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	440b      	add	r3, r1
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ff8:	6939      	ldr	r1, [r7, #16]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	4613      	mov	r3, r2
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	440b      	add	r3, r1
 8006008:	3304      	adds	r3, #4
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800600e:	6939      	ldr	r1, [r7, #16]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	4613      	mov	r3, r2
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	440b      	add	r3, r1
 800601c:	3320      	adds	r3, #32
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006022:	6939      	ldr	r1, [r7, #16]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	3328      	adds	r3, #40	; 0x28
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	4613      	mov	r3, r2
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	4413      	add	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	440b      	add	r3, r1
 8006044:	3324      	adds	r3, #36	; 0x24
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800604a:	6939      	ldr	r1, [r7, #16]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	332c      	adds	r3, #44	; 0x2c
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800605e:	f3bf 8f5f 	dmb	sy
 8006062:	e002      	b.n	800606a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295
 8006068:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006070:	69fb      	ldr	r3, [r7, #28]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20012fdc 	.word	0x20012fdc

08006080 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800608e:	4b33      	ldr	r3, [pc, #204]	; (800615c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800609c:	f7ff fe8e 	bl	8005dbc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060a0:	4b2e      	ldr	r3, [pc, #184]	; (800615c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80060a2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d24d      	bcs.n	800614c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80060b0:	f3ef 8311 	mrs	r3, BASEPRI
 80060b4:	f04f 0120 	mov.w	r1, #32
 80060b8:	f381 8811 	msr	BASEPRI, r1
 80060bc:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d031      	beq.n	8006128 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80060c4:	6979      	ldr	r1, [r7, #20]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	440b      	add	r3, r1
 80060d2:	3360      	adds	r3, #96	; 0x60
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80060d8:	6979      	ldr	r1, [r7, #20]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	3364      	adds	r3, #100	; 0x64
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80060ec:	6979      	ldr	r1, [r7, #20]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	440b      	add	r3, r1
 80060fa:	3368      	adds	r3, #104	; 0x68
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	440b      	add	r3, r1
 800610e:	3370      	adds	r3, #112	; 0x70
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	440b      	add	r3, r1
 8006122:	336c      	adds	r3, #108	; 0x6c
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006128:	6979      	ldr	r1, [r7, #20]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	440b      	add	r3, r1
 8006136:	3374      	adds	r3, #116	; 0x74
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800613c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e002      	b.n	8006152 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800614c:	f04f 33ff 	mov.w	r3, #4294967295
 8006150:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006152:	69fb      	ldr	r3, [r7, #28]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20012fdc 	.word	0x20012fdc

08006160 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006170:	e002      	b.n	8006178 <_EncodeStr+0x18>
    Len++;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4413      	add	r3, r2
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f6      	bne.n	8006172 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d901      	bls.n	8006190 <_EncodeStr+0x30>
    Len = Limit;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2bfe      	cmp	r3, #254	; 0xfe
 8006194:	d806      	bhi.n	80061a4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	60fa      	str	r2, [r7, #12]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e011      	b.n	80061c8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	60fa      	str	r2, [r7, #12]
 80061aa:	22ff      	movs	r2, #255	; 0xff
 80061ac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	0a19      	lsrs	r1, r3, #8
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	60fa      	str	r2, [r7, #12]
 80061c4:	b2ca      	uxtb	r2, r1
 80061c6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80061cc:	e00a      	b.n	80061e4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	1c53      	adds	r3, r2, #1
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	60f9      	str	r1, [r7, #12]
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	701a      	strb	r2, [r3, #0]
    n++;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3301      	adds	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3f0      	bcc.n	80061ce <_EncodeStr+0x6e>
  }
  return pPayload;
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3304      	adds	r3, #4
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800621a:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <_HandleIncomingPacket+0xdc>)
 800621c:	7e1b      	ldrb	r3, [r3, #24]
 800621e:	4618      	mov	r0, r3
 8006220:	1cfb      	adds	r3, r7, #3
 8006222:	2201      	movs	r2, #1
 8006224:	4619      	mov	r1, r3
 8006226:	f7ff fe21 	bl	8005e6c <SEGGER_RTT_ReadNoLock>
 800622a:	4603      	mov	r3, r0
 800622c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd59      	ble.n	80062e8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	2b80      	cmp	r3, #128	; 0x80
 8006238:	d032      	beq.n	80062a0 <_HandleIncomingPacket+0x8c>
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	dc42      	bgt.n	80062c4 <_HandleIncomingPacket+0xb0>
 800623e:	2b07      	cmp	r3, #7
 8006240:	dc16      	bgt.n	8006270 <_HandleIncomingPacket+0x5c>
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd3e      	ble.n	80062c4 <_HandleIncomingPacket+0xb0>
 8006246:	3b01      	subs	r3, #1
 8006248:	2b06      	cmp	r3, #6
 800624a:	d83b      	bhi.n	80062c4 <_HandleIncomingPacket+0xb0>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <_HandleIncomingPacket+0x40>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006277 	.word	0x08006277
 8006258:	0800627d 	.word	0x0800627d
 800625c:	08006283 	.word	0x08006283
 8006260:	08006289 	.word	0x08006289
 8006264:	0800628f 	.word	0x0800628f
 8006268:	08006295 	.word	0x08006295
 800626c:	0800629b 	.word	0x0800629b
 8006270:	2b7f      	cmp	r3, #127	; 0x7f
 8006272:	d034      	beq.n	80062de <_HandleIncomingPacket+0xca>
 8006274:	e026      	b.n	80062c4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006276:	f000 faa1 	bl	80067bc <SEGGER_SYSVIEW_Start>
      break;
 800627a:	e035      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800627c:	f000 fb5a 	bl	8006934 <SEGGER_SYSVIEW_Stop>
      break;
 8006280:	e032      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006282:	f000 fd33 	bl	8006cec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006286:	e02f      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006288:	f000 fcf8 	bl	8006c7c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800628c:	e02c      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800628e:	f000 fb77 	bl	8006980 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006292:	e029      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006294:	f000 ff4c 	bl	8007130 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006298:	e026      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800629a:	f000 ff2b 	bl	80070f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800629e:	e023      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <_HandleIncomingPacket+0xdc>)
 80062a2:	7e1b      	ldrb	r3, [r3, #24]
 80062a4:	4618      	mov	r0, r3
 80062a6:	1cfb      	adds	r3, r7, #3
 80062a8:	2201      	movs	r2, #1
 80062aa:	4619      	mov	r1, r3
 80062ac:	f7ff fdde 	bl	8005e6c <SEGGER_RTT_ReadNoLock>
 80062b0:	4603      	mov	r3, r0
 80062b2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dd13      	ble.n	80062e2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fe99 	bl	8006ff4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80062c2:	e00e      	b.n	80062e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	b25b      	sxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da0c      	bge.n	80062e6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80062cc:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <_HandleIncomingPacket+0xdc>)
 80062ce:	7e1b      	ldrb	r3, [r3, #24]
 80062d0:	4618      	mov	r0, r3
 80062d2:	1cfb      	adds	r3, r7, #3
 80062d4:	2201      	movs	r2, #1
 80062d6:	4619      	mov	r1, r3
 80062d8:	f7ff fdc8 	bl	8005e6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80062dc:	e003      	b.n	80062e6 <_HandleIncomingPacket+0xd2>
      break;
 80062de:	bf00      	nop
 80062e0:	e002      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
      break;
 80062e2:	bf00      	nop
 80062e4:	e000      	b.n	80062e8 <_HandleIncomingPacket+0xd4>
      break;
 80062e6:	bf00      	nop
    }
  }
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2001449c 	.word	0x2001449c

080062f4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08c      	sub	sp, #48	; 0x30
 80062f8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80062fa:	2301      	movs	r3, #1
 80062fc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	3301      	adds	r3, #1
 8006302:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
 800630e:	e00b      	b.n	8006328 <_TrySendOverflowPacket+0x34>
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	b2da      	uxtb	r2, r3
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	1c59      	adds	r1, r3, #1
 8006318:	62f9      	str	r1, [r7, #44]	; 0x2c
 800631a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	09db      	lsrs	r3, r3, #7
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b7f      	cmp	r3, #127	; 0x7f
 800632c:	d8f0      	bhi.n	8006310 <_TrySendOverflowPacket+0x1c>
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <_TrySendOverflowPacket+0xe4>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006344:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	e00b      	b.n	8006370 <_TrySendOverflowPacket+0x7c>
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	6279      	str	r1, [r7, #36]	; 0x24
 8006362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	09db      	lsrs	r3, r3, #7
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b7f      	cmp	r3, #127	; 0x7f
 8006374:	d8f0      	bhi.n	8006358 <_TrySendOverflowPacket+0x64>
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	627a      	str	r2, [r7, #36]	; 0x24
 800637c:	6a3a      	ldr	r2, [r7, #32]
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006386:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	4618      	mov	r0, r3
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	461a      	mov	r2, r3
 8006394:	1d3b      	adds	r3, r7, #4
 8006396:	4619      	mov	r1, r3
 8006398:	f7f9 ff22 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800639c:	4603      	mov	r3, r0
 800639e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80063a0:	f7ff fcfc 	bl	8005d9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d009      	beq.n	80063be <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80063aa:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80063b0:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e004      	b.n	80063c8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	3301      	adds	r3, #1
 80063c4:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <_TrySendOverflowPacket+0xe0>)
 80063c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80063c8:	693b      	ldr	r3, [r7, #16]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3730      	adds	r7, #48	; 0x30
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2001449c 	.word	0x2001449c
 80063d8:	e0001004 	.word	0xe0001004

080063dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80063e8:	4b6d      	ldr	r3, [pc, #436]	; (80065a0 <_SendPacket+0x1c4>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d010      	beq.n	8006412 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80063f0:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <_SendPacket+0x1c4>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80a5 	beq.w	8006544 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80063fa:	4b69      	ldr	r3, [pc, #420]	; (80065a0 <_SendPacket+0x1c4>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d109      	bne.n	8006416 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006402:	f7ff ff77 	bl	80062f4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006406:	4b66      	ldr	r3, [pc, #408]	; (80065a0 <_SendPacket+0x1c4>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b01      	cmp	r3, #1
 800640c:	f040 809c 	bne.w	8006548 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006410:	e001      	b.n	8006416 <_SendPacket+0x3a>
    goto Send;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <_SendPacket+0x3c>
Send:
 8006416:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b1f      	cmp	r3, #31
 800641c:	d809      	bhi.n	8006432 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800641e:	4b60      	ldr	r3, [pc, #384]	; (80065a0 <_SendPacket+0x1c4>)
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 808d 	bne.w	800654c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b17      	cmp	r3, #23
 8006436:	d807      	bhi.n	8006448 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e03d      	b.n	80064c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b7f      	cmp	r3, #127	; 0x7f
 8006454:	d912      	bls.n	800647c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	09da      	lsrs	r2, r3, #7
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3b01      	subs	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	3a01      	subs	r2, #1
 800646e:	60fa      	str	r2, [r7, #12]
 8006470:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e006      	b.n	800648a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3b01      	subs	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d912      	bls.n	80064b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	09da      	lsrs	r2, r3, #7
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3b01      	subs	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	3a01      	subs	r2, #1
 80064a8:	60fa      	str	r2, [r7, #12]
 80064aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e006      	b.n	80064c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b01      	subs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064c4:	4b37      	ldr	r3, [pc, #220]	; (80065a4 <_SendPacket+0x1c8>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80064ca:	4b35      	ldr	r3, [pc, #212]	; (80065a0 <_SendPacket+0x1c4>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	e00b      	b.n	80064f6 <_SendPacket+0x11a>
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	6279      	str	r1, [r7, #36]	; 0x24
 80064e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	09db      	lsrs	r3, r3, #7
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b7f      	cmp	r3, #127	; 0x7f
 80064fa:	d8f0      	bhi.n	80064de <_SendPacket+0x102>
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	627a      	str	r2, [r7, #36]	; 0x24
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800650c:	4b24      	ldr	r3, [pc, #144]	; (80065a0 <_SendPacket+0x1c4>)
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	4618      	mov	r0, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	461a      	mov	r2, r3
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	f7f9 fe60 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006520:	4603      	mov	r3, r0
 8006522:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8006524:	f7ff fc3a 	bl	8005d9c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800652e:	4a1c      	ldr	r2, [pc, #112]	; (80065a0 <_SendPacket+0x1c4>)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	60d3      	str	r3, [r2, #12]
 8006534:	e00b      	b.n	800654e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <_SendPacket+0x1c4>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	b2da      	uxtb	r2, r3
 800653e:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <_SendPacket+0x1c4>)
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e004      	b.n	800654e <_SendPacket+0x172>
    goto SendDone;
 8006544:	bf00      	nop
 8006546:	e002      	b.n	800654e <_SendPacket+0x172>
      goto SendDone;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <_SendPacket+0x172>
      goto SendDone;
 800654c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <_SendPacket+0x1c4>)
 8006550:	7e1b      	ldrb	r3, [r3, #24]
 8006552:	4619      	mov	r1, r3
 8006554:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <_SendPacket+0x1cc>)
 8006556:	460b      	mov	r3, r1
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	440b      	add	r3, r1
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	336c      	adds	r3, #108	; 0x6c
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <_SendPacket+0x1c4>)
 8006566:	7e1b      	ldrb	r3, [r3, #24]
 8006568:	4618      	mov	r0, r3
 800656a:	490f      	ldr	r1, [pc, #60]	; (80065a8 <_SendPacket+0x1cc>)
 800656c:	4603      	mov	r3, r0
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4403      	add	r3, r0
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	440b      	add	r3, r1
 8006576:	3370      	adds	r3, #112	; 0x70
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d00b      	beq.n	8006596 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <_SendPacket+0x1c4>)
 8006580:	789b      	ldrb	r3, [r3, #2]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <_SendPacket+0x1c4>)
 8006588:	2201      	movs	r2, #1
 800658a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800658c:	f7ff fe42 	bl	8006214 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <_SendPacket+0x1c4>)
 8006592:	2200      	movs	r2, #0
 8006594:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006596:	bf00      	nop
 8006598:	3728      	adds	r7, #40	; 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	2001449c 	.word	0x2001449c
 80065a4:	e0001004 	.word	0xe0001004
 80065a8:	20012fdc 	.word	0x20012fdc

080065ac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065ba:	2300      	movs	r3, #0
 80065bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065c0:	4917      	ldr	r1, [pc, #92]	; (8006620 <SEGGER_SYSVIEW_Init+0x74>)
 80065c2:	4818      	ldr	r0, [pc, #96]	; (8006624 <SEGGER_SYSVIEW_Init+0x78>)
 80065c4:	f7ff fcd8 	bl	8005f78 <SEGGER_RTT_AllocUpBuffer>
 80065c8:	4603      	mov	r3, r0
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d2:	785a      	ldrb	r2, [r3, #1]
 80065d4:	4b14      	ldr	r3, [pc, #80]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065d8:	4b13      	ldr	r3, [pc, #76]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065da:	7e1b      	ldrb	r3, [r3, #24]
 80065dc:	4618      	mov	r0, r3
 80065de:	2300      	movs	r3, #0
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	2308      	movs	r3, #8
 80065e4:	4a11      	ldr	r2, [pc, #68]	; (800662c <SEGGER_SYSVIEW_Init+0x80>)
 80065e6:	490f      	ldr	r1, [pc, #60]	; (8006624 <SEGGER_SYSVIEW_Init+0x78>)
 80065e8:	f7ff fd4a 	bl	8006080 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065f2:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <SEGGER_SYSVIEW_Init+0x84>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80065fa:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006606:	4a08      	ldr	r2, [pc, #32]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800660c:	4a06      	ldr	r2, [pc, #24]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <SEGGER_SYSVIEW_Init+0x7c>)
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	20013494 	.word	0x20013494
 8006624:	08007d10 	.word	0x08007d10
 8006628:	2001449c 	.word	0x2001449c
 800662c:	20014494 	.word	0x20014494
 8006630:	e0001004 	.word	0xe0001004

08006634 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800663c:	4a04      	ldr	r2, [pc, #16]	; (8006650 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6113      	str	r3, [r2, #16]
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2001449c 	.word	0x2001449c

08006654 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800665c:	f3ef 8311 	mrs	r3, BASEPRI
 8006660:	f04f 0120 	mov.w	r1, #32
 8006664:	f381 8811 	msr	BASEPRI, r1
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	4808      	ldr	r0, [pc, #32]	; (800668c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800666c:	f7ff fdc5 	bl	80061fa <_PreparePacket>
 8006670:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f7ff feb0 	bl	80063dc <_SendPacket>
  RECORD_END();
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f383 8811 	msr	BASEPRI, r3
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	200144cc 	.word	0x200144cc

08006690 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800669a:	f3ef 8311 	mrs	r3, BASEPRI
 800669e:	f04f 0120 	mov.w	r1, #32
 80066a2:	f381 8811 	msr	BASEPRI, r1
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	4816      	ldr	r0, [pc, #88]	; (8006704 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80066aa:	f7ff fda6 	bl	80061fa <_PreparePacket>
 80066ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e00b      	b.n	80066d6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	61f9      	str	r1, [r7, #28]
 80066c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	09db      	lsrs	r3, r3, #7
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b7f      	cmp	r3, #127	; 0x7f
 80066da:	d8f0      	bhi.n	80066be <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	61fa      	str	r2, [r7, #28]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f7ff fe73 	bl	80063dc <_SendPacket>
  RECORD_END();
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f383 8811 	msr	BASEPRI, r3
}
 80066fc:	bf00      	nop
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	200144cc 	.word	0x200144cc

08006708 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	4825      	ldr	r0, [pc, #148]	; (80067b8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006724:	f7ff fd69 	bl	80061fa <_PreparePacket>
 8006728:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	e00b      	b.n	8006750 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	b2da      	uxtb	r2, r3
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b7f      	cmp	r3, #127	; 0x7f
 8006754:	d8f0      	bhi.n	8006738 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800675c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	623b      	str	r3, [r7, #32]
 800676e:	e00b      	b.n	8006788 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	6279      	str	r1, [r7, #36]	; 0x24
 800677a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	09db      	lsrs	r3, r3, #7
 8006786:	623b      	str	r3, [r7, #32]
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	2b7f      	cmp	r3, #127	; 0x7f
 800678c:	d8f0      	bhi.n	8006770 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	627a      	str	r2, [r7, #36]	; 0x24
 8006794:	6a3a      	ldr	r2, [r7, #32]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	6979      	ldr	r1, [r7, #20]
 80067a2:	69b8      	ldr	r0, [r7, #24]
 80067a4:	f7ff fe1a 	bl	80063dc <_SendPacket>
  RECORD_END();
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f383 8811 	msr	BASEPRI, r3
}
 80067ae:	bf00      	nop
 80067b0:	3730      	adds	r7, #48	; 0x30
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200144cc 	.word	0x200144cc

080067bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	; 0x30
 80067c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80067c2:	4b59      	ldr	r3, [pc, #356]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80067c8:	f3ef 8311 	mrs	r3, BASEPRI
 80067cc:	f04f 0120 	mov.w	r1, #32
 80067d0:	f381 8811 	msr	BASEPRI, r1
 80067d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80067d6:	4b54      	ldr	r3, [pc, #336]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	220a      	movs	r2, #10
 80067dc:	4953      	ldr	r1, [pc, #332]	; (800692c <SEGGER_SYSVIEW_Start+0x170>)
 80067de:	4618      	mov	r0, r3
 80067e0:	f7f9 fcfe 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80067ea:	f7ff fad7 	bl	8005d9c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80067ee:	200a      	movs	r0, #10
 80067f0:	f7ff ff30 	bl	8006654 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80067f4:	f3ef 8311 	mrs	r3, BASEPRI
 80067f8:	f04f 0120 	mov.w	r1, #32
 80067fc:	f381 8811 	msr	BASEPRI, r1
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	484b      	ldr	r0, [pc, #300]	; (8006930 <SEGGER_SYSVIEW_Start+0x174>)
 8006804:	f7ff fcf9 	bl	80061fa <_PreparePacket>
 8006808:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	4b45      	ldr	r3, [pc, #276]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
 8006818:	e00b      	b.n	8006832 <SEGGER_SYSVIEW_Start+0x76>
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	b2da      	uxtb	r2, r3
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	1c59      	adds	r1, r3, #1
 8006822:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682e:	09db      	lsrs	r3, r3, #7
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b7f      	cmp	r3, #127	; 0x7f
 8006836:	d8f0      	bhi.n	800681a <SEGGER_SYSVIEW_Start+0x5e>
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800683e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	627b      	str	r3, [r7, #36]	; 0x24
 800684c:	4b36      	ldr	r3, [pc, #216]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	623b      	str	r3, [r7, #32]
 8006852:	e00b      	b.n	800686c <SEGGER_SYSVIEW_Start+0xb0>
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	6279      	str	r1, [r7, #36]	; 0x24
 800685e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	09db      	lsrs	r3, r3, #7
 800686a:	623b      	str	r3, [r7, #32]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d8f0      	bhi.n	8006854 <SEGGER_SYSVIEW_Start+0x98>
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	627a      	str	r2, [r7, #36]	; 0x24
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	4b28      	ldr	r3, [pc, #160]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	e00b      	b.n	80068a6 <SEGGER_SYSVIEW_Start+0xea>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	61f9      	str	r1, [r7, #28]
 8006898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d8f0      	bhi.n	800688e <SEGGER_SYSVIEW_Start+0xd2>
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	2300      	movs	r3, #0
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	e00b      	b.n	80068de <SEGGER_SYSVIEW_Start+0x122>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	1c59      	adds	r1, r3, #1
 80068ce:	6179      	str	r1, [r7, #20]
 80068d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	09db      	lsrs	r3, r3, #7
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b7f      	cmp	r3, #127	; 0x7f
 80068e2:	d8f0      	bhi.n	80068c6 <SEGGER_SYSVIEW_Start+0x10a>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	617a      	str	r2, [r7, #20]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80068f4:	2218      	movs	r2, #24
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff fd6f 	bl	80063dc <_SendPacket>
      RECORD_END();
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <SEGGER_SYSVIEW_Start+0x16c>)
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006912:	f000 f9eb 	bl	8006cec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006916:	f000 f9b1 	bl	8006c7c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800691a:	f000 fc09 	bl	8007130 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800691e:	bf00      	nop
 8006920:	3730      	adds	r7, #48	; 0x30
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2001449c 	.word	0x2001449c
 800692c:	08007d38 	.word	0x08007d38
 8006930:	200144cc 	.word	0x200144cc

08006934 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800693a:	f3ef 8311 	mrs	r3, BASEPRI
 800693e:	f04f 0120 	mov.w	r1, #32
 8006942:	f381 8811 	msr	BASEPRI, r1
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	480b      	ldr	r0, [pc, #44]	; (8006978 <SEGGER_SYSVIEW_Stop+0x44>)
 800694a:	f7ff fc56 	bl	80061fa <_PreparePacket>
 800694e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006950:	4b0a      	ldr	r3, [pc, #40]	; (800697c <SEGGER_SYSVIEW_Stop+0x48>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006958:	220b      	movs	r2, #11
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6838      	ldr	r0, [r7, #0]
 800695e:	f7ff fd3d 	bl	80063dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <SEGGER_SYSVIEW_Stop+0x48>)
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200144cc 	.word	0x200144cc
 800697c:	2001449c 	.word	0x2001449c

08006980 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b08c      	sub	sp, #48	; 0x30
 8006984:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006986:	f3ef 8311 	mrs	r3, BASEPRI
 800698a:	f04f 0120 	mov.w	r1, #32
 800698e:	f381 8811 	msr	BASEPRI, r1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	4845      	ldr	r0, [pc, #276]	; (8006aac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006996:	f7ff fc30 	bl	80061fa <_PreparePacket>
 800699a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a4:	4b42      	ldr	r3, [pc, #264]	; (8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80069aa:	e00b      	b.n	80069c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	09db      	lsrs	r3, r3, #7
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2b7f      	cmp	r3, #127	; 0x7f
 80069c8:	d8f0      	bhi.n	80069ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	4b34      	ldr	r3, [pc, #208]	; (8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	e00b      	b.n	80069fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	6279      	str	r1, [r7, #36]	; 0x24
 80069f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	2b7f      	cmp	r3, #127	; 0x7f
 8006a02:	d8f0      	bhi.n	80069e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	627a      	str	r2, [r7, #36]	; 0x24
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	e00b      	b.n	8006a38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	1c59      	adds	r1, r3, #1
 8006a28:	61f9      	str	r1, [r7, #28]
 8006a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	09db      	lsrs	r3, r3, #7
 8006a36:	61bb      	str	r3, [r7, #24]
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3c:	d8f0      	bhi.n	8006a20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	61fa      	str	r2, [r7, #28]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	2300      	movs	r3, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	e00b      	b.n	8006a70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1c59      	adds	r1, r3, #1
 8006a60:	6179      	str	r1, [r7, #20]
 8006a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	09db      	lsrs	r3, r3, #7
 8006a6e:	613b      	str	r3, [r7, #16]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2b7f      	cmp	r3, #127	; 0x7f
 8006a74:	d8f0      	bhi.n	8006a58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	617a      	str	r2, [r7, #20]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006a86:	2218      	movs	r2, #24
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	68b8      	ldr	r0, [r7, #8]
 8006a8c:	f7ff fca6 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006a96:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006a9e:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa2:	4798      	blx	r3
  }
}
 8006aa4:	bf00      	nop
 8006aa6:	3730      	adds	r7, #48	; 0x30
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200144cc 	.word	0x200144cc
 8006ab0:	2001449c 	.word	0x2001449c

08006ab4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b092      	sub	sp, #72	; 0x48
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006abc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac0:	f04f 0120 	mov.w	r1, #32
 8006ac4:	f381 8811 	msr	BASEPRI, r1
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	486a      	ldr	r0, [pc, #424]	; (8006c74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006acc:	f7ff fb95 	bl	80061fa <_PreparePacket>
 8006ad0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b66      	ldr	r3, [pc, #408]	; (8006c78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ae6:	e00b      	b.n	8006b00 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	6479      	str	r1, [r7, #68]	; 0x44
 8006af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006afc:	09db      	lsrs	r3, r3, #7
 8006afe:	643b      	str	r3, [r7, #64]	; 0x40
 8006b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b02:	2b7f      	cmp	r3, #127	; 0x7f
 8006b04:	d8f0      	bhi.n	8006ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b20:	e00b      	b.n	8006b3a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b28:	1c59      	adds	r1, r3, #1
 8006b2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	09db      	lsrs	r3, r3, #7
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b3e:	d8f0      	bhi.n	8006b22 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff fb01 	bl	8006160 <_EncodeStr>
 8006b5e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006b60:	2209      	movs	r2, #9
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	6938      	ldr	r0, [r7, #16]
 8006b66:	f7ff fc39 	bl	80063dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	6379      	str	r1, [r7, #52]	; 0x34
 8006b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	633b      	str	r3, [r7, #48]	; 0x30
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb8:	e00b      	b.n	8006bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	1c59      	adds	r1, r3, #1
 8006bc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	09db      	lsrs	r3, r3, #7
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd6:	d8f0      	bhi.n	8006bba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	623b      	str	r3, [r7, #32]
 8006bf2:	e00b      	b.n	8006c0c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	6279      	str	r1, [r7, #36]	; 0x24
 8006bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	09db      	lsrs	r3, r3, #7
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c10:	d8f0      	bhi.n	8006bf4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	627a      	str	r2, [r7, #36]	; 0x24
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e00b      	b.n	8006c44 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	1c59      	adds	r1, r3, #1
 8006c34:	61f9      	str	r1, [r7, #28]
 8006c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	09db      	lsrs	r3, r3, #7
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b7f      	cmp	r3, #127	; 0x7f
 8006c48:	d8f0      	bhi.n	8006c2c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	61fa      	str	r2, [r7, #28]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006c5a:	2215      	movs	r2, #21
 8006c5c:	68f9      	ldr	r1, [r7, #12]
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f7ff fbbc 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f383 8811 	msr	BASEPRI, r3
}
 8006c6a:	bf00      	nop
 8006c6c:	3748      	adds	r7, #72	; 0x48
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200144cc 	.word	0x200144cc
 8006c78:	2001449c 	.word	0x2001449c

08006c7c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006c92:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4798      	blx	r3
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2001449c 	.word	0x2001449c

08006ca4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cac:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb0:	f04f 0120 	mov.w	r1, #32
 8006cb4:	f381 8811 	msr	BASEPRI, r1
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	480b      	ldr	r0, [pc, #44]	; (8006ce8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006cbc:	f7ff fa9d 	bl	80061fa <_PreparePacket>
 8006cc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	6938      	ldr	r0, [r7, #16]
 8006cc8:	f7ff fa4a 	bl	8006160 <_EncodeStr>
 8006ccc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006cce:	220e      	movs	r2, #14
 8006cd0:	68f9      	ldr	r1, [r7, #12]
 8006cd2:	6938      	ldr	r0, [r7, #16]
 8006cd4:	f7ff fb82 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f383 8811 	msr	BASEPRI, r3
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	200144cc 	.word	0x200144cc

08006cec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01a      	beq.n	8006d30 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d015      	beq.n	8006d30 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4798      	blx	r3
 8006d0c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d10:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	000a      	movs	r2, r1
 8006d20:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d22:	4613      	mov	r3, r2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4621      	mov	r1, r4
 8006d28:	200d      	movs	r0, #13
 8006d2a:	f7ff fced 	bl	8006708 <SEGGER_SYSVIEW_RecordU32x2>
 8006d2e:	e006      	b.n	8006d3e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4619      	mov	r1, r3
 8006d36:	200c      	movs	r0, #12
 8006d38:	f7ff fcaa 	bl	8006690 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd90      	pop	{r4, r7, pc}
 8006d46:	bf00      	nop
 8006d48:	2001449c 	.word	0x2001449c
 8006d4c:	e0001004 	.word	0xe0001004

08006d50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d56:	f3ef 8311 	mrs	r3, BASEPRI
 8006d5a:	f04f 0120 	mov.w	r1, #32
 8006d5e:	f381 8811 	msr	BASEPRI, r1
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	4807      	ldr	r0, [pc, #28]	; (8006d84 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d66:	f7ff fa48 	bl	80061fa <_PreparePacket>
 8006d6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d6c:	2211      	movs	r2, #17
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6838      	ldr	r0, [r7, #0]
 8006d72:	f7ff fb33 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f383 8811 	msr	BASEPRI, r3
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200144cc 	.word	0x200144cc

08006d88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d90:	f3ef 8311 	mrs	r3, BASEPRI
 8006d94:	f04f 0120 	mov.w	r1, #32
 8006d98:	f381 8811 	msr	BASEPRI, r1
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	4819      	ldr	r0, [pc, #100]	; (8006e04 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006da0:	f7ff fa2b 	bl	80061fa <_PreparePacket>
 8006da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006daa:	4b17      	ldr	r3, [pc, #92]	; (8006e08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	61fb      	str	r3, [r7, #28]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e00b      	b.n	8006dd6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	1c59      	adds	r1, r3, #1
 8006dc6:	61f9      	str	r1, [r7, #28]
 8006dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	09db      	lsrs	r3, r3, #7
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dda:	d8f0      	bhi.n	8006dbe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	61fa      	str	r2, [r7, #28]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006dec:	2208      	movs	r2, #8
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6938      	ldr	r0, [r7, #16]
 8006df2:	f7ff faf3 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f383 8811 	msr	BASEPRI, r3
}
 8006dfc:	bf00      	nop
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	200144cc 	.word	0x200144cc
 8006e08:	2001449c 	.word	0x2001449c

08006e0c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e14:	f3ef 8311 	mrs	r3, BASEPRI
 8006e18:	f04f 0120 	mov.w	r1, #32
 8006e1c:	f381 8811 	msr	BASEPRI, r1
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	4819      	ldr	r0, [pc, #100]	; (8006e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e24:	f7ff f9e9 	bl	80061fa <_PreparePacket>
 8006e28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e2e:	4b17      	ldr	r3, [pc, #92]	; (8006e8c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	61bb      	str	r3, [r7, #24]
 8006e40:	e00b      	b.n	8006e5a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	61f9      	str	r1, [r7, #28]
 8006e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	09db      	lsrs	r3, r3, #7
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e5e:	d8f0      	bhi.n	8006e42 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	61fa      	str	r2, [r7, #28]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	b2d2      	uxtb	r2, r2
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e70:	2204      	movs	r2, #4
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	6938      	ldr	r0, [r7, #16]
 8006e76:	f7ff fab1 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f383 8811 	msr	BASEPRI, r3
}
 8006e80:	bf00      	nop
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	200144cc 	.word	0x200144cc
 8006e8c:	2001449c 	.word	0x2001449c

08006e90 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e98:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9c:	f04f 0120 	mov.w	r1, #32
 8006ea0:	f381 8811 	msr	BASEPRI, r1
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	4819      	ldr	r0, [pc, #100]	; (8006f0c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ea8:	f7ff f9a7 	bl	80061fa <_PreparePacket>
 8006eac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eb2:	4b17      	ldr	r3, [pc, #92]	; (8006f10 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e00b      	b.n	8006ede <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	61f9      	str	r1, [r7, #28]
 8006ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	09db      	lsrs	r3, r3, #7
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee2:	d8f0      	bhi.n	8006ec6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	61fa      	str	r2, [r7, #28]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f7ff fa6f 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f383 8811 	msr	BASEPRI, r3
}
 8006f04:	bf00      	nop
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200144cc 	.word	0x200144cc
 8006f10:	2001449c 	.word	0x2001449c

08006f14 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006f22:	f04f 0120 	mov.w	r1, #32
 8006f26:	f381 8811 	msr	BASEPRI, r1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	4827      	ldr	r0, [pc, #156]	; (8006fcc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f2e:	f7ff f964 	bl	80061fa <_PreparePacket>
 8006f32:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	e00b      	b.n	8006f64 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	6279      	str	r1, [r7, #36]	; 0x24
 8006f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	09db      	lsrs	r3, r3, #7
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	2b7f      	cmp	r3, #127	; 0x7f
 8006f68:	d8f0      	bhi.n	8006f4c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e00b      	b.n	8006f9c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	61f9      	str	r1, [r7, #28]
 8006f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	09db      	lsrs	r3, r3, #7
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa0:	d8f0      	bhi.n	8006f84 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	61fa      	str	r2, [r7, #28]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f7ff fa10 	bl	80063dc <_SendPacket>
  RECORD_END();
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f383 8811 	msr	BASEPRI, r3
}
 8006fc2:	bf00      	nop
 8006fc4:	3728      	adds	r7, #40	; 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200144cc 	.word	0x200144cc
 8006fd0:	2001449c 	.word	0x2001449c

08006fd4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	1ad3      	subs	r3, r2, r3
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	2001449c 	.word	0x2001449c

08006ff4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	; 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006ffe:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d06d      	beq.n	80070e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007006:	4b39      	ldr	r3, [pc, #228]	; (80070ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800700c:	2300      	movs	r3, #0
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007010:	e008      	b.n	8007024 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	3301      	adds	r3, #1
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007028:	429a      	cmp	r2, r3
 800702a:	d3f2      	bcc.n	8007012 <SEGGER_SYSVIEW_SendModule+0x1e>
 800702c:	e000      	b.n	8007030 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800702e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d055      	beq.n	80070e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007036:	f3ef 8311 	mrs	r3, BASEPRI
 800703a:	f04f 0120 	mov.w	r1, #32
 800703e:	f381 8811 	msr	BASEPRI, r1
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	482a      	ldr	r0, [pc, #168]	; (80070f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007046:	f7ff f8d8 	bl	80061fa <_PreparePacket>
 800704a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	623b      	str	r3, [r7, #32]
 8007058:	e00b      	b.n	8007072 <SEGGER_SYSVIEW_SendModule+0x7e>
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	1c59      	adds	r1, r3, #1
 8007062:	6279      	str	r1, [r7, #36]	; 0x24
 8007064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	09db      	lsrs	r3, r3, #7
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	2b7f      	cmp	r3, #127	; 0x7f
 8007076:	d8f0      	bhi.n	800705a <SEGGER_SYSVIEW_SendModule+0x66>
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	627a      	str	r2, [r7, #36]	; 0x24
 800707e:	6a3a      	ldr	r2, [r7, #32]
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	e00b      	b.n	80070ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	61f9      	str	r1, [r7, #28]
 800709e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	09db      	lsrs	r3, r3, #7
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b7f      	cmp	r3, #127	; 0x7f
 80070b0:	d8f0      	bhi.n	8007094 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	61fa      	str	r2, [r7, #28]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2280      	movs	r2, #128	; 0x80
 80070c8:	4619      	mov	r1, r3
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff f848 	bl	8006160 <_EncodeStr>
 80070d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070d2:	2216      	movs	r2, #22
 80070d4:	68f9      	ldr	r1, [r7, #12]
 80070d6:	6938      	ldr	r0, [r7, #16]
 80070d8:	f7ff f980 	bl	80063dc <_SendPacket>
      RECORD_END();
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80070e2:	bf00      	nop
 80070e4:	3730      	adds	r7, #48	; 0x30
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200144c4 	.word	0x200144c4
 80070f0:	200144cc 	.word	0x200144cc

080070f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80070fa:	4b0c      	ldr	r3, [pc, #48]	; (800712c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00f      	beq.n	8007122 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f2      	bne.n	8007108 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200144c4 	.word	0x200144c4

08007130 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007136:	f3ef 8311 	mrs	r3, BASEPRI
 800713a:	f04f 0120 	mov.w	r1, #32
 800713e:	f381 8811 	msr	BASEPRI, r1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	4817      	ldr	r0, [pc, #92]	; (80071a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007146:	f7ff f858 	bl	80061fa <_PreparePacket>
 800714a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e00b      	b.n	8007174 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	1c59      	adds	r1, r3, #1
 8007164:	6179      	str	r1, [r7, #20]
 8007166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	09db      	lsrs	r3, r3, #7
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b7f      	cmp	r3, #127	; 0x7f
 8007178:	d8f0      	bhi.n	800715c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	617a      	str	r2, [r7, #20]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800718a:	221b      	movs	r2, #27
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	68b8      	ldr	r0, [r7, #8]
 8007190:	f7ff f924 	bl	80063dc <_SendPacket>
  RECORD_END();
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f383 8811 	msr	BASEPRI, r3
}
 800719a:	bf00      	nop
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200144cc 	.word	0x200144cc
 80071a8:	200144c8 	.word	0x200144c8

080071ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071b4:	f3ef 8311 	mrs	r3, BASEPRI
 80071b8:	f04f 0120 	mov.w	r1, #32
 80071bc:	f381 8811 	msr	BASEPRI, r1
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	4827      	ldr	r0, [pc, #156]	; (8007260 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071c4:	f7ff f819 	bl	80061fa <_PreparePacket>
 80071c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ca:	2280      	movs	r2, #128	; 0x80
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f7fe ffc6 	bl	8006160 <_EncodeStr>
 80071d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
 80071da:	2301      	movs	r3, #1
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	e00b      	b.n	80071f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	1c59      	adds	r1, r3, #1
 80071e8:	6279      	str	r1, [r7, #36]	; 0x24
 80071ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ee:	b2d2      	uxtb	r2, r2
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	09db      	lsrs	r3, r3, #7
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b7f      	cmp	r3, #127	; 0x7f
 80071fc:	d8f0      	bhi.n	80071e0 <SEGGER_SYSVIEW_Warn+0x34>
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	627a      	str	r2, [r7, #36]	; 0x24
 8007204:	6a3a      	ldr	r2, [r7, #32]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	e00b      	b.n	8007230 <SEGGER_SYSVIEW_Warn+0x84>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	61f9      	str	r1, [r7, #28]
 8007222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	09db      	lsrs	r3, r3, #7
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b7f      	cmp	r3, #127	; 0x7f
 8007234:	d8f0      	bhi.n	8007218 <SEGGER_SYSVIEW_Warn+0x6c>
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	61fa      	str	r2, [r7, #28]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007246:	221a      	movs	r2, #26
 8007248:	68f9      	ldr	r1, [r7, #12]
 800724a:	6938      	ldr	r0, [r7, #16]
 800724c:	f7ff f8c6 	bl	80063dc <_SendPacket>
  RECORD_END();
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f383 8811 	msr	BASEPRI, r3
}
 8007256:	bf00      	nop
 8007258:	3728      	adds	r7, #40	; 0x28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200144cc 	.word	0x200144cc

08007264 <siprintf>:
 8007264:	b40e      	push	{r1, r2, r3}
 8007266:	b500      	push	{lr}
 8007268:	b09c      	sub	sp, #112	; 0x70
 800726a:	ab1d      	add	r3, sp, #116	; 0x74
 800726c:	9002      	str	r0, [sp, #8]
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <siprintf+0x38>)
 8007276:	9107      	str	r1, [sp, #28]
 8007278:	9104      	str	r1, [sp, #16]
 800727a:	4909      	ldr	r1, [pc, #36]	; (80072a0 <siprintf+0x3c>)
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007280:	9105      	str	r1, [sp, #20]
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	a902      	add	r1, sp, #8
 8007288:	f000 f9b0 	bl	80075ec <_svfiprintf_r>
 800728c:	9b02      	ldr	r3, [sp, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	b01c      	add	sp, #112	; 0x70
 8007294:	f85d eb04 	ldr.w	lr, [sp], #4
 8007298:	b003      	add	sp, #12
 800729a:	4770      	bx	lr
 800729c:	20000064 	.word	0x20000064
 80072a0:	ffff0208 	.word	0xffff0208

080072a4 <memcmp>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	3901      	subs	r1, #1
 80072a8:	4402      	add	r2, r0
 80072aa:	4290      	cmp	r0, r2
 80072ac:	d101      	bne.n	80072b2 <memcmp+0xe>
 80072ae:	2000      	movs	r0, #0
 80072b0:	e005      	b.n	80072be <memcmp+0x1a>
 80072b2:	7803      	ldrb	r3, [r0, #0]
 80072b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d001      	beq.n	80072c0 <memcmp+0x1c>
 80072bc:	1b18      	subs	r0, r3, r4
 80072be:	bd10      	pop	{r4, pc}
 80072c0:	3001      	adds	r0, #1
 80072c2:	e7f2      	b.n	80072aa <memcmp+0x6>

080072c4 <memset>:
 80072c4:	4402      	add	r2, r0
 80072c6:	4603      	mov	r3, r0
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d100      	bne.n	80072ce <memset+0xa>
 80072cc:	4770      	bx	lr
 80072ce:	f803 1b01 	strb.w	r1, [r3], #1
 80072d2:	e7f9      	b.n	80072c8 <memset+0x4>

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000064 	.word	0x20000064

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4d0d      	ldr	r5, [pc, #52]	; (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2600      	movs	r6, #0
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4d0b      	ldr	r5, [pc, #44]	; (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	; (8007324 <__libc_init_array+0x44>)
 80072f4:	f000 fc6a 	bl	8007bcc <_init>
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2600      	movs	r6, #0
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	08007d80 	.word	0x08007d80
 800731c:	08007d80 	.word	0x08007d80
 8007320:	08007d80 	.word	0x08007d80
 8007324:	08007d84 	.word	0x08007d84

08007328 <__retarget_lock_acquire_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_release_recursive>:
 800732a:	4770      	bx	lr

0800732c <memcpy>:
 800732c:	440a      	add	r2, r1
 800732e:	4291      	cmp	r1, r2
 8007330:	f100 33ff 	add.w	r3, r0, #4294967295
 8007334:	d100      	bne.n	8007338 <memcpy+0xc>
 8007336:	4770      	bx	lr
 8007338:	b510      	push	{r4, lr}
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007342:	4291      	cmp	r1, r2
 8007344:	d1f9      	bne.n	800733a <memcpy+0xe>
 8007346:	bd10      	pop	{r4, pc}

08007348 <_free_r>:
 8007348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800734a:	2900      	cmp	r1, #0
 800734c:	d044      	beq.n	80073d8 <_free_r+0x90>
 800734e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007352:	9001      	str	r0, [sp, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f1a1 0404 	sub.w	r4, r1, #4
 800735a:	bfb8      	it	lt
 800735c:	18e4      	addlt	r4, r4, r3
 800735e:	f000 f8df 	bl	8007520 <__malloc_lock>
 8007362:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <_free_r+0x94>)
 8007364:	9801      	ldr	r0, [sp, #4]
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	b933      	cbnz	r3, 8007378 <_free_r+0x30>
 800736a:	6063      	str	r3, [r4, #4]
 800736c:	6014      	str	r4, [r2, #0]
 800736e:	b003      	add	sp, #12
 8007370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007374:	f000 b8da 	b.w	800752c <__malloc_unlock>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d908      	bls.n	800738e <_free_r+0x46>
 800737c:	6825      	ldr	r5, [r4, #0]
 800737e:	1961      	adds	r1, r4, r5
 8007380:	428b      	cmp	r3, r1
 8007382:	bf01      	itttt	eq
 8007384:	6819      	ldreq	r1, [r3, #0]
 8007386:	685b      	ldreq	r3, [r3, #4]
 8007388:	1949      	addeq	r1, r1, r5
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	e7ed      	b.n	800736a <_free_r+0x22>
 800738e:	461a      	mov	r2, r3
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b10b      	cbz	r3, 8007398 <_free_r+0x50>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d9fa      	bls.n	800738e <_free_r+0x46>
 8007398:	6811      	ldr	r1, [r2, #0]
 800739a:	1855      	adds	r5, r2, r1
 800739c:	42a5      	cmp	r5, r4
 800739e:	d10b      	bne.n	80073b8 <_free_r+0x70>
 80073a0:	6824      	ldr	r4, [r4, #0]
 80073a2:	4421      	add	r1, r4
 80073a4:	1854      	adds	r4, r2, r1
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	6011      	str	r1, [r2, #0]
 80073aa:	d1e0      	bne.n	800736e <_free_r+0x26>
 80073ac:	681c      	ldr	r4, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	440c      	add	r4, r1
 80073b4:	6014      	str	r4, [r2, #0]
 80073b6:	e7da      	b.n	800736e <_free_r+0x26>
 80073b8:	d902      	bls.n	80073c0 <_free_r+0x78>
 80073ba:	230c      	movs	r3, #12
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	e7d6      	b.n	800736e <_free_r+0x26>
 80073c0:	6825      	ldr	r5, [r4, #0]
 80073c2:	1961      	adds	r1, r4, r5
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf04      	itt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	bf04      	itt	eq
 80073d0:	1949      	addeq	r1, r1, r5
 80073d2:	6021      	streq	r1, [r4, #0]
 80073d4:	6054      	str	r4, [r2, #4]
 80073d6:	e7ca      	b.n	800736e <_free_r+0x26>
 80073d8:	b003      	add	sp, #12
 80073da:	bd30      	pop	{r4, r5, pc}
 80073dc:	200146f0 	.word	0x200146f0

080073e0 <sbrk_aligned>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	4e0e      	ldr	r6, [pc, #56]	; (800741c <sbrk_aligned+0x3c>)
 80073e4:	460c      	mov	r4, r1
 80073e6:	6831      	ldr	r1, [r6, #0]
 80073e8:	4605      	mov	r5, r0
 80073ea:	b911      	cbnz	r1, 80073f2 <sbrk_aligned+0x12>
 80073ec:	f000 fba6 	bl	8007b3c <_sbrk_r>
 80073f0:	6030      	str	r0, [r6, #0]
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f000 fba1 	bl	8007b3c <_sbrk_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d00a      	beq.n	8007414 <sbrk_aligned+0x34>
 80073fe:	1cc4      	adds	r4, r0, #3
 8007400:	f024 0403 	bic.w	r4, r4, #3
 8007404:	42a0      	cmp	r0, r4
 8007406:	d007      	beq.n	8007418 <sbrk_aligned+0x38>
 8007408:	1a21      	subs	r1, r4, r0
 800740a:	4628      	mov	r0, r5
 800740c:	f000 fb96 	bl	8007b3c <_sbrk_r>
 8007410:	3001      	adds	r0, #1
 8007412:	d101      	bne.n	8007418 <sbrk_aligned+0x38>
 8007414:	f04f 34ff 	mov.w	r4, #4294967295
 8007418:	4620      	mov	r0, r4
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	200146f4 	.word	0x200146f4

08007420 <_malloc_r>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4607      	mov	r7, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d905      	bls.n	8007448 <_malloc_r+0x28>
 800743c:	230c      	movs	r3, #12
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	2600      	movs	r6, #0
 8007442:	4630      	mov	r0, r6
 8007444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007448:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800751c <_malloc_r+0xfc>
 800744c:	f000 f868 	bl	8007520 <__malloc_lock>
 8007450:	f8d8 3000 	ldr.w	r3, [r8]
 8007454:	461c      	mov	r4, r3
 8007456:	bb5c      	cbnz	r4, 80074b0 <_malloc_r+0x90>
 8007458:	4629      	mov	r1, r5
 800745a:	4638      	mov	r0, r7
 800745c:	f7ff ffc0 	bl	80073e0 <sbrk_aligned>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	4604      	mov	r4, r0
 8007464:	d155      	bne.n	8007512 <_malloc_r+0xf2>
 8007466:	f8d8 4000 	ldr.w	r4, [r8]
 800746a:	4626      	mov	r6, r4
 800746c:	2e00      	cmp	r6, #0
 800746e:	d145      	bne.n	80074fc <_malloc_r+0xdc>
 8007470:	2c00      	cmp	r4, #0
 8007472:	d048      	beq.n	8007506 <_malloc_r+0xe6>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	4631      	mov	r1, r6
 8007478:	4638      	mov	r0, r7
 800747a:	eb04 0903 	add.w	r9, r4, r3
 800747e:	f000 fb5d 	bl	8007b3c <_sbrk_r>
 8007482:	4581      	cmp	r9, r0
 8007484:	d13f      	bne.n	8007506 <_malloc_r+0xe6>
 8007486:	6821      	ldr	r1, [r4, #0]
 8007488:	1a6d      	subs	r5, r5, r1
 800748a:	4629      	mov	r1, r5
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff ffa7 	bl	80073e0 <sbrk_aligned>
 8007492:	3001      	adds	r0, #1
 8007494:	d037      	beq.n	8007506 <_malloc_r+0xe6>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	442b      	add	r3, r5
 800749a:	6023      	str	r3, [r4, #0]
 800749c:	f8d8 3000 	ldr.w	r3, [r8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d038      	beq.n	8007516 <_malloc_r+0xf6>
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	42a2      	cmp	r2, r4
 80074a8:	d12b      	bne.n	8007502 <_malloc_r+0xe2>
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	e00f      	b.n	80074d0 <_malloc_r+0xb0>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	1b52      	subs	r2, r2, r5
 80074b4:	d41f      	bmi.n	80074f6 <_malloc_r+0xd6>
 80074b6:	2a0b      	cmp	r2, #11
 80074b8:	d917      	bls.n	80074ea <_malloc_r+0xca>
 80074ba:	1961      	adds	r1, r4, r5
 80074bc:	42a3      	cmp	r3, r4
 80074be:	6025      	str	r5, [r4, #0]
 80074c0:	bf18      	it	ne
 80074c2:	6059      	strne	r1, [r3, #4]
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	bf08      	it	eq
 80074c8:	f8c8 1000 	streq.w	r1, [r8]
 80074cc:	5162      	str	r2, [r4, r5]
 80074ce:	604b      	str	r3, [r1, #4]
 80074d0:	4638      	mov	r0, r7
 80074d2:	f104 060b 	add.w	r6, r4, #11
 80074d6:	f000 f829 	bl	800752c <__malloc_unlock>
 80074da:	f026 0607 	bic.w	r6, r6, #7
 80074de:	1d23      	adds	r3, r4, #4
 80074e0:	1af2      	subs	r2, r6, r3
 80074e2:	d0ae      	beq.n	8007442 <_malloc_r+0x22>
 80074e4:	1b9b      	subs	r3, r3, r6
 80074e6:	50a3      	str	r3, [r4, r2]
 80074e8:	e7ab      	b.n	8007442 <_malloc_r+0x22>
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	6862      	ldr	r2, [r4, #4]
 80074ee:	d1dd      	bne.n	80074ac <_malloc_r+0x8c>
 80074f0:	f8c8 2000 	str.w	r2, [r8]
 80074f4:	e7ec      	b.n	80074d0 <_malloc_r+0xb0>
 80074f6:	4623      	mov	r3, r4
 80074f8:	6864      	ldr	r4, [r4, #4]
 80074fa:	e7ac      	b.n	8007456 <_malloc_r+0x36>
 80074fc:	4634      	mov	r4, r6
 80074fe:	6876      	ldr	r6, [r6, #4]
 8007500:	e7b4      	b.n	800746c <_malloc_r+0x4c>
 8007502:	4613      	mov	r3, r2
 8007504:	e7cc      	b.n	80074a0 <_malloc_r+0x80>
 8007506:	230c      	movs	r3, #12
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4638      	mov	r0, r7
 800750c:	f000 f80e 	bl	800752c <__malloc_unlock>
 8007510:	e797      	b.n	8007442 <_malloc_r+0x22>
 8007512:	6025      	str	r5, [r4, #0]
 8007514:	e7dc      	b.n	80074d0 <_malloc_r+0xb0>
 8007516:	605b      	str	r3, [r3, #4]
 8007518:	deff      	udf	#255	; 0xff
 800751a:	bf00      	nop
 800751c:	200146f0 	.word	0x200146f0

08007520 <__malloc_lock>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__malloc_lock+0x8>)
 8007522:	f7ff bf01 	b.w	8007328 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	200146ec 	.word	0x200146ec

0800752c <__malloc_unlock>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__malloc_unlock+0x8>)
 800752e:	f7ff befc 	b.w	800732a <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	200146ec 	.word	0x200146ec

08007538 <__ssputs_r>:
 8007538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	688e      	ldr	r6, [r1, #8]
 800753e:	461f      	mov	r7, r3
 8007540:	42be      	cmp	r6, r7
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	4682      	mov	sl, r0
 8007546:	460c      	mov	r4, r1
 8007548:	4690      	mov	r8, r2
 800754a:	d82c      	bhi.n	80075a6 <__ssputs_r+0x6e>
 800754c:	898a      	ldrh	r2, [r1, #12]
 800754e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007552:	d026      	beq.n	80075a2 <__ssputs_r+0x6a>
 8007554:	6965      	ldr	r5, [r4, #20]
 8007556:	6909      	ldr	r1, [r1, #16]
 8007558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800755c:	eba3 0901 	sub.w	r9, r3, r1
 8007560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007564:	1c7b      	adds	r3, r7, #1
 8007566:	444b      	add	r3, r9
 8007568:	106d      	asrs	r5, r5, #1
 800756a:	429d      	cmp	r5, r3
 800756c:	bf38      	it	cc
 800756e:	461d      	movcc	r5, r3
 8007570:	0553      	lsls	r3, r2, #21
 8007572:	d527      	bpl.n	80075c4 <__ssputs_r+0x8c>
 8007574:	4629      	mov	r1, r5
 8007576:	f7ff ff53 	bl	8007420 <_malloc_r>
 800757a:	4606      	mov	r6, r0
 800757c:	b360      	cbz	r0, 80075d8 <__ssputs_r+0xa0>
 800757e:	6921      	ldr	r1, [r4, #16]
 8007580:	464a      	mov	r2, r9
 8007582:	f7ff fed3 	bl	800732c <memcpy>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800758c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	6126      	str	r6, [r4, #16]
 8007594:	6165      	str	r5, [r4, #20]
 8007596:	444e      	add	r6, r9
 8007598:	eba5 0509 	sub.w	r5, r5, r9
 800759c:	6026      	str	r6, [r4, #0]
 800759e:	60a5      	str	r5, [r4, #8]
 80075a0:	463e      	mov	r6, r7
 80075a2:	42be      	cmp	r6, r7
 80075a4:	d900      	bls.n	80075a8 <__ssputs_r+0x70>
 80075a6:	463e      	mov	r6, r7
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	4632      	mov	r2, r6
 80075ac:	4641      	mov	r1, r8
 80075ae:	f000 faab 	bl	8007b08 <memmove>
 80075b2:	68a3      	ldr	r3, [r4, #8]
 80075b4:	1b9b      	subs	r3, r3, r6
 80075b6:	60a3      	str	r3, [r4, #8]
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	4433      	add	r3, r6
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	2000      	movs	r0, #0
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c4:	462a      	mov	r2, r5
 80075c6:	f000 fac9 	bl	8007b5c <_realloc_r>
 80075ca:	4606      	mov	r6, r0
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1e0      	bne.n	8007592 <__ssputs_r+0x5a>
 80075d0:	6921      	ldr	r1, [r4, #16]
 80075d2:	4650      	mov	r0, sl
 80075d4:	f7ff feb8 	bl	8007348 <_free_r>
 80075d8:	230c      	movs	r3, #12
 80075da:	f8ca 3000 	str.w	r3, [sl]
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ea:	e7e9      	b.n	80075c0 <__ssputs_r+0x88>

080075ec <_svfiprintf_r>:
 80075ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	4698      	mov	r8, r3
 80075f2:	898b      	ldrh	r3, [r1, #12]
 80075f4:	061b      	lsls	r3, r3, #24
 80075f6:	b09d      	sub	sp, #116	; 0x74
 80075f8:	4607      	mov	r7, r0
 80075fa:	460d      	mov	r5, r1
 80075fc:	4614      	mov	r4, r2
 80075fe:	d50e      	bpl.n	800761e <_svfiprintf_r+0x32>
 8007600:	690b      	ldr	r3, [r1, #16]
 8007602:	b963      	cbnz	r3, 800761e <_svfiprintf_r+0x32>
 8007604:	2140      	movs	r1, #64	; 0x40
 8007606:	f7ff ff0b 	bl	8007420 <_malloc_r>
 800760a:	6028      	str	r0, [r5, #0]
 800760c:	6128      	str	r0, [r5, #16]
 800760e:	b920      	cbnz	r0, 800761a <_svfiprintf_r+0x2e>
 8007610:	230c      	movs	r3, #12
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	e0d0      	b.n	80077bc <_svfiprintf_r+0x1d0>
 800761a:	2340      	movs	r3, #64	; 0x40
 800761c:	616b      	str	r3, [r5, #20]
 800761e:	2300      	movs	r3, #0
 8007620:	9309      	str	r3, [sp, #36]	; 0x24
 8007622:	2320      	movs	r3, #32
 8007624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007628:	f8cd 800c 	str.w	r8, [sp, #12]
 800762c:	2330      	movs	r3, #48	; 0x30
 800762e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80077d4 <_svfiprintf_r+0x1e8>
 8007632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007636:	f04f 0901 	mov.w	r9, #1
 800763a:	4623      	mov	r3, r4
 800763c:	469a      	mov	sl, r3
 800763e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007642:	b10a      	cbz	r2, 8007648 <_svfiprintf_r+0x5c>
 8007644:	2a25      	cmp	r2, #37	; 0x25
 8007646:	d1f9      	bne.n	800763c <_svfiprintf_r+0x50>
 8007648:	ebba 0b04 	subs.w	fp, sl, r4
 800764c:	d00b      	beq.n	8007666 <_svfiprintf_r+0x7a>
 800764e:	465b      	mov	r3, fp
 8007650:	4622      	mov	r2, r4
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ff6f 	bl	8007538 <__ssputs_r>
 800765a:	3001      	adds	r0, #1
 800765c:	f000 80a9 	beq.w	80077b2 <_svfiprintf_r+0x1c6>
 8007660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007662:	445a      	add	r2, fp
 8007664:	9209      	str	r2, [sp, #36]	; 0x24
 8007666:	f89a 3000 	ldrb.w	r3, [sl]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80a1 	beq.w	80077b2 <_svfiprintf_r+0x1c6>
 8007670:	2300      	movs	r3, #0
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800767a:	f10a 0a01 	add.w	sl, sl, #1
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007686:	931a      	str	r3, [sp, #104]	; 0x68
 8007688:	4654      	mov	r4, sl
 800768a:	2205      	movs	r2, #5
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	4850      	ldr	r0, [pc, #320]	; (80077d4 <_svfiprintf_r+0x1e8>)
 8007692:	f7f8 fdfd 	bl	8000290 <memchr>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	b9d8      	cbnz	r0, 80076d2 <_svfiprintf_r+0xe6>
 800769a:	06d0      	lsls	r0, r2, #27
 800769c:	bf44      	itt	mi
 800769e:	2320      	movmi	r3, #32
 80076a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076a4:	0711      	lsls	r1, r2, #28
 80076a6:	bf44      	itt	mi
 80076a8:	232b      	movmi	r3, #43	; 0x2b
 80076aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ae:	f89a 3000 	ldrb.w	r3, [sl]
 80076b2:	2b2a      	cmp	r3, #42	; 0x2a
 80076b4:	d015      	beq.n	80076e2 <_svfiprintf_r+0xf6>
 80076b6:	9a07      	ldr	r2, [sp, #28]
 80076b8:	4654      	mov	r4, sl
 80076ba:	2000      	movs	r0, #0
 80076bc:	f04f 0c0a 	mov.w	ip, #10
 80076c0:	4621      	mov	r1, r4
 80076c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076c6:	3b30      	subs	r3, #48	; 0x30
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d94d      	bls.n	8007768 <_svfiprintf_r+0x17c>
 80076cc:	b1b0      	cbz	r0, 80076fc <_svfiprintf_r+0x110>
 80076ce:	9207      	str	r2, [sp, #28]
 80076d0:	e014      	b.n	80076fc <_svfiprintf_r+0x110>
 80076d2:	eba0 0308 	sub.w	r3, r0, r8
 80076d6:	fa09 f303 	lsl.w	r3, r9, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	46a2      	mov	sl, r4
 80076e0:	e7d2      	b.n	8007688 <_svfiprintf_r+0x9c>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9103      	str	r1, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbb      	ittet	lt
 80076ee:	425b      	neglt	r3, r3
 80076f0:	f042 0202 	orrlt.w	r2, r2, #2
 80076f4:	9307      	strge	r3, [sp, #28]
 80076f6:	9307      	strlt	r3, [sp, #28]
 80076f8:	bfb8      	it	lt
 80076fa:	9204      	strlt	r2, [sp, #16]
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007700:	d10c      	bne.n	800771c <_svfiprintf_r+0x130>
 8007702:	7863      	ldrb	r3, [r4, #1]
 8007704:	2b2a      	cmp	r3, #42	; 0x2a
 8007706:	d134      	bne.n	8007772 <_svfiprintf_r+0x186>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	9203      	str	r2, [sp, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	bfb8      	it	lt
 8007714:	f04f 33ff 	movlt.w	r3, #4294967295
 8007718:	3402      	adds	r4, #2
 800771a:	9305      	str	r3, [sp, #20]
 800771c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80077e4 <_svfiprintf_r+0x1f8>
 8007720:	7821      	ldrb	r1, [r4, #0]
 8007722:	2203      	movs	r2, #3
 8007724:	4650      	mov	r0, sl
 8007726:	f7f8 fdb3 	bl	8000290 <memchr>
 800772a:	b138      	cbz	r0, 800773c <_svfiprintf_r+0x150>
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	eba0 000a 	sub.w	r0, r0, sl
 8007732:	2240      	movs	r2, #64	; 0x40
 8007734:	4082      	lsls	r2, r0
 8007736:	4313      	orrs	r3, r2
 8007738:	3401      	adds	r4, #1
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007740:	4825      	ldr	r0, [pc, #148]	; (80077d8 <_svfiprintf_r+0x1ec>)
 8007742:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007746:	2206      	movs	r2, #6
 8007748:	f7f8 fda2 	bl	8000290 <memchr>
 800774c:	2800      	cmp	r0, #0
 800774e:	d038      	beq.n	80077c2 <_svfiprintf_r+0x1d6>
 8007750:	4b22      	ldr	r3, [pc, #136]	; (80077dc <_svfiprintf_r+0x1f0>)
 8007752:	bb1b      	cbnz	r3, 800779c <_svfiprintf_r+0x1b0>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	3307      	adds	r3, #7
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	3308      	adds	r3, #8
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	4433      	add	r3, r6
 8007764:	9309      	str	r3, [sp, #36]	; 0x24
 8007766:	e768      	b.n	800763a <_svfiprintf_r+0x4e>
 8007768:	fb0c 3202 	mla	r2, ip, r2, r3
 800776c:	460c      	mov	r4, r1
 800776e:	2001      	movs	r0, #1
 8007770:	e7a6      	b.n	80076c0 <_svfiprintf_r+0xd4>
 8007772:	2300      	movs	r3, #0
 8007774:	3401      	adds	r4, #1
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	4619      	mov	r1, r3
 800777a:	f04f 0c0a 	mov.w	ip, #10
 800777e:	4620      	mov	r0, r4
 8007780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007784:	3a30      	subs	r2, #48	; 0x30
 8007786:	2a09      	cmp	r2, #9
 8007788:	d903      	bls.n	8007792 <_svfiprintf_r+0x1a6>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0c6      	beq.n	800771c <_svfiprintf_r+0x130>
 800778e:	9105      	str	r1, [sp, #20]
 8007790:	e7c4      	b.n	800771c <_svfiprintf_r+0x130>
 8007792:	fb0c 2101 	mla	r1, ip, r1, r2
 8007796:	4604      	mov	r4, r0
 8007798:	2301      	movs	r3, #1
 800779a:	e7f0      	b.n	800777e <_svfiprintf_r+0x192>
 800779c:	ab03      	add	r3, sp, #12
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	462a      	mov	r2, r5
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <_svfiprintf_r+0x1f4>)
 80077a4:	a904      	add	r1, sp, #16
 80077a6:	4638      	mov	r0, r7
 80077a8:	f3af 8000 	nop.w
 80077ac:	1c42      	adds	r2, r0, #1
 80077ae:	4606      	mov	r6, r0
 80077b0:	d1d6      	bne.n	8007760 <_svfiprintf_r+0x174>
 80077b2:	89ab      	ldrh	r3, [r5, #12]
 80077b4:	065b      	lsls	r3, r3, #25
 80077b6:	f53f af2d 	bmi.w	8007614 <_svfiprintf_r+0x28>
 80077ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077bc:	b01d      	add	sp, #116	; 0x74
 80077be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c2:	ab03      	add	r3, sp, #12
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	462a      	mov	r2, r5
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <_svfiprintf_r+0x1f4>)
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	4638      	mov	r0, r7
 80077ce:	f000 f879 	bl	80078c4 <_printf_i>
 80077d2:	e7eb      	b.n	80077ac <_svfiprintf_r+0x1c0>
 80077d4:	08007d42 	.word	0x08007d42
 80077d8:	08007d4c 	.word	0x08007d4c
 80077dc:	00000000 	.word	0x00000000
 80077e0:	08007539 	.word	0x08007539
 80077e4:	08007d48 	.word	0x08007d48

080077e8 <_printf_common>:
 80077e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	4616      	mov	r6, r2
 80077ee:	4699      	mov	r9, r3
 80077f0:	688a      	ldr	r2, [r1, #8]
 80077f2:	690b      	ldr	r3, [r1, #16]
 80077f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077f8:	4293      	cmp	r3, r2
 80077fa:	bfb8      	it	lt
 80077fc:	4613      	movlt	r3, r2
 80077fe:	6033      	str	r3, [r6, #0]
 8007800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007804:	4607      	mov	r7, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b10a      	cbz	r2, 800780e <_printf_common+0x26>
 800780a:	3301      	adds	r3, #1
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	0699      	lsls	r1, r3, #26
 8007812:	bf42      	ittt	mi
 8007814:	6833      	ldrmi	r3, [r6, #0]
 8007816:	3302      	addmi	r3, #2
 8007818:	6033      	strmi	r3, [r6, #0]
 800781a:	6825      	ldr	r5, [r4, #0]
 800781c:	f015 0506 	ands.w	r5, r5, #6
 8007820:	d106      	bne.n	8007830 <_printf_common+0x48>
 8007822:	f104 0a19 	add.w	sl, r4, #25
 8007826:	68e3      	ldr	r3, [r4, #12]
 8007828:	6832      	ldr	r2, [r6, #0]
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	42ab      	cmp	r3, r5
 800782e:	dc26      	bgt.n	800787e <_printf_common+0x96>
 8007830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007834:	1e13      	subs	r3, r2, #0
 8007836:	6822      	ldr	r2, [r4, #0]
 8007838:	bf18      	it	ne
 800783a:	2301      	movne	r3, #1
 800783c:	0692      	lsls	r2, r2, #26
 800783e:	d42b      	bmi.n	8007898 <_printf_common+0xb0>
 8007840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d01e      	beq.n	800788c <_printf_common+0xa4>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	f003 0306 	and.w	r3, r3, #6
 8007856:	2b04      	cmp	r3, #4
 8007858:	bf02      	ittt	eq
 800785a:	68e5      	ldreq	r5, [r4, #12]
 800785c:	6833      	ldreq	r3, [r6, #0]
 800785e:	1aed      	subeq	r5, r5, r3
 8007860:	68a3      	ldr	r3, [r4, #8]
 8007862:	bf0c      	ite	eq
 8007864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007868:	2500      	movne	r5, #0
 800786a:	4293      	cmp	r3, r2
 800786c:	bfc4      	itt	gt
 800786e:	1a9b      	subgt	r3, r3, r2
 8007870:	18ed      	addgt	r5, r5, r3
 8007872:	2600      	movs	r6, #0
 8007874:	341a      	adds	r4, #26
 8007876:	42b5      	cmp	r5, r6
 8007878:	d11a      	bne.n	80078b0 <_printf_common+0xc8>
 800787a:	2000      	movs	r0, #0
 800787c:	e008      	b.n	8007890 <_printf_common+0xa8>
 800787e:	2301      	movs	r3, #1
 8007880:	4652      	mov	r2, sl
 8007882:	4649      	mov	r1, r9
 8007884:	4638      	mov	r0, r7
 8007886:	47c0      	blx	r8
 8007888:	3001      	adds	r0, #1
 800788a:	d103      	bne.n	8007894 <_printf_common+0xac>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	3501      	adds	r5, #1
 8007896:	e7c6      	b.n	8007826 <_printf_common+0x3e>
 8007898:	18e1      	adds	r1, r4, r3
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	2030      	movs	r0, #48	; 0x30
 800789e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078a2:	4422      	add	r2, r4
 80078a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ac:	3302      	adds	r3, #2
 80078ae:	e7c7      	b.n	8007840 <_printf_common+0x58>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4622      	mov	r2, r4
 80078b4:	4649      	mov	r1, r9
 80078b6:	4638      	mov	r0, r7
 80078b8:	47c0      	blx	r8
 80078ba:	3001      	adds	r0, #1
 80078bc:	d0e6      	beq.n	800788c <_printf_common+0xa4>
 80078be:	3601      	adds	r6, #1
 80078c0:	e7d9      	b.n	8007876 <_printf_common+0x8e>
	...

080078c4 <_printf_i>:
 80078c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	7e0f      	ldrb	r7, [r1, #24]
 80078ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078cc:	2f78      	cmp	r7, #120	; 0x78
 80078ce:	4691      	mov	r9, r2
 80078d0:	4680      	mov	r8, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	469a      	mov	sl, r3
 80078d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078da:	d807      	bhi.n	80078ec <_printf_i+0x28>
 80078dc:	2f62      	cmp	r7, #98	; 0x62
 80078de:	d80a      	bhi.n	80078f6 <_printf_i+0x32>
 80078e0:	2f00      	cmp	r7, #0
 80078e2:	f000 80d4 	beq.w	8007a8e <_printf_i+0x1ca>
 80078e6:	2f58      	cmp	r7, #88	; 0x58
 80078e8:	f000 80c0 	beq.w	8007a6c <_printf_i+0x1a8>
 80078ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078f4:	e03a      	b.n	800796c <_printf_i+0xa8>
 80078f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078fa:	2b15      	cmp	r3, #21
 80078fc:	d8f6      	bhi.n	80078ec <_printf_i+0x28>
 80078fe:	a101      	add	r1, pc, #4	; (adr r1, 8007904 <_printf_i+0x40>)
 8007900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007904:	0800795d 	.word	0x0800795d
 8007908:	08007971 	.word	0x08007971
 800790c:	080078ed 	.word	0x080078ed
 8007910:	080078ed 	.word	0x080078ed
 8007914:	080078ed 	.word	0x080078ed
 8007918:	080078ed 	.word	0x080078ed
 800791c:	08007971 	.word	0x08007971
 8007920:	080078ed 	.word	0x080078ed
 8007924:	080078ed 	.word	0x080078ed
 8007928:	080078ed 	.word	0x080078ed
 800792c:	080078ed 	.word	0x080078ed
 8007930:	08007a75 	.word	0x08007a75
 8007934:	0800799d 	.word	0x0800799d
 8007938:	08007a2f 	.word	0x08007a2f
 800793c:	080078ed 	.word	0x080078ed
 8007940:	080078ed 	.word	0x080078ed
 8007944:	08007a97 	.word	0x08007a97
 8007948:	080078ed 	.word	0x080078ed
 800794c:	0800799d 	.word	0x0800799d
 8007950:	080078ed 	.word	0x080078ed
 8007954:	080078ed 	.word	0x080078ed
 8007958:	08007a37 	.word	0x08007a37
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	602a      	str	r2, [r5, #0]
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800796c:	2301      	movs	r3, #1
 800796e:	e09f      	b.n	8007ab0 <_printf_i+0x1ec>
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	0607      	lsls	r7, r0, #24
 8007976:	f103 0104 	add.w	r1, r3, #4
 800797a:	6029      	str	r1, [r5, #0]
 800797c:	d501      	bpl.n	8007982 <_printf_i+0xbe>
 800797e:	681e      	ldr	r6, [r3, #0]
 8007980:	e003      	b.n	800798a <_printf_i+0xc6>
 8007982:	0646      	lsls	r6, r0, #25
 8007984:	d5fb      	bpl.n	800797e <_printf_i+0xba>
 8007986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800798a:	2e00      	cmp	r6, #0
 800798c:	da03      	bge.n	8007996 <_printf_i+0xd2>
 800798e:	232d      	movs	r3, #45	; 0x2d
 8007990:	4276      	negs	r6, r6
 8007992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007996:	485a      	ldr	r0, [pc, #360]	; (8007b00 <_printf_i+0x23c>)
 8007998:	230a      	movs	r3, #10
 800799a:	e012      	b.n	80079c2 <_printf_i+0xfe>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	1d19      	adds	r1, r3, #4
 80079a2:	6029      	str	r1, [r5, #0]
 80079a4:	0605      	lsls	r5, r0, #24
 80079a6:	d501      	bpl.n	80079ac <_printf_i+0xe8>
 80079a8:	681e      	ldr	r6, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <_printf_i+0xee>
 80079ac:	0641      	lsls	r1, r0, #25
 80079ae:	d5fb      	bpl.n	80079a8 <_printf_i+0xe4>
 80079b0:	881e      	ldrh	r6, [r3, #0]
 80079b2:	4853      	ldr	r0, [pc, #332]	; (8007b00 <_printf_i+0x23c>)
 80079b4:	2f6f      	cmp	r7, #111	; 0x6f
 80079b6:	bf0c      	ite	eq
 80079b8:	2308      	moveq	r3, #8
 80079ba:	230a      	movne	r3, #10
 80079bc:	2100      	movs	r1, #0
 80079be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079c2:	6865      	ldr	r5, [r4, #4]
 80079c4:	60a5      	str	r5, [r4, #8]
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	bfa2      	ittt	ge
 80079ca:	6821      	ldrge	r1, [r4, #0]
 80079cc:	f021 0104 	bicge.w	r1, r1, #4
 80079d0:	6021      	strge	r1, [r4, #0]
 80079d2:	b90e      	cbnz	r6, 80079d8 <_printf_i+0x114>
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	d04b      	beq.n	8007a70 <_printf_i+0x1ac>
 80079d8:	4615      	mov	r5, r2
 80079da:	fbb6 f1f3 	udiv	r1, r6, r3
 80079de:	fb03 6711 	mls	r7, r3, r1, r6
 80079e2:	5dc7      	ldrb	r7, [r0, r7]
 80079e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079e8:	4637      	mov	r7, r6
 80079ea:	42bb      	cmp	r3, r7
 80079ec:	460e      	mov	r6, r1
 80079ee:	d9f4      	bls.n	80079da <_printf_i+0x116>
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d10b      	bne.n	8007a0c <_printf_i+0x148>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07de      	lsls	r6, r3, #31
 80079f8:	d508      	bpl.n	8007a0c <_printf_i+0x148>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	6861      	ldr	r1, [r4, #4]
 80079fe:	4299      	cmp	r1, r3
 8007a00:	bfde      	ittt	le
 8007a02:	2330      	movle	r3, #48	; 0x30
 8007a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a0c:	1b52      	subs	r2, r2, r5
 8007a0e:	6122      	str	r2, [r4, #16]
 8007a10:	f8cd a000 	str.w	sl, [sp]
 8007a14:	464b      	mov	r3, r9
 8007a16:	aa03      	add	r2, sp, #12
 8007a18:	4621      	mov	r1, r4
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	f7ff fee4 	bl	80077e8 <_printf_common>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d14a      	bne.n	8007aba <_printf_i+0x1f6>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	b004      	add	sp, #16
 8007a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f043 0320 	orr.w	r3, r3, #32
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	4833      	ldr	r0, [pc, #204]	; (8007b04 <_printf_i+0x240>)
 8007a38:	2778      	movs	r7, #120	; 0x78
 8007a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	6829      	ldr	r1, [r5, #0]
 8007a42:	061f      	lsls	r7, r3, #24
 8007a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a48:	d402      	bmi.n	8007a50 <_printf_i+0x18c>
 8007a4a:	065f      	lsls	r7, r3, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b2b6      	uxthmi	r6, r6
 8007a50:	07df      	lsls	r7, r3, #31
 8007a52:	bf48      	it	mi
 8007a54:	f043 0320 	orrmi.w	r3, r3, #32
 8007a58:	6029      	str	r1, [r5, #0]
 8007a5a:	bf48      	it	mi
 8007a5c:	6023      	strmi	r3, [r4, #0]
 8007a5e:	b91e      	cbnz	r6, 8007a68 <_printf_i+0x1a4>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	f023 0320 	bic.w	r3, r3, #32
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	2310      	movs	r3, #16
 8007a6a:	e7a7      	b.n	80079bc <_printf_i+0xf8>
 8007a6c:	4824      	ldr	r0, [pc, #144]	; (8007b00 <_printf_i+0x23c>)
 8007a6e:	e7e4      	b.n	8007a3a <_printf_i+0x176>
 8007a70:	4615      	mov	r5, r2
 8007a72:	e7bd      	b.n	80079f0 <_printf_i+0x12c>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	6826      	ldr	r6, [r4, #0]
 8007a78:	6961      	ldr	r1, [r4, #20]
 8007a7a:	1d18      	adds	r0, r3, #4
 8007a7c:	6028      	str	r0, [r5, #0]
 8007a7e:	0635      	lsls	r5, r6, #24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0x1c4>
 8007a84:	6019      	str	r1, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0x1ca>
 8007a88:	0670      	lsls	r0, r6, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0x1c0>
 8007a8c:	8019      	strh	r1, [r3, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	4615      	mov	r5, r2
 8007a94:	e7bc      	b.n	8007a10 <_printf_i+0x14c>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	1d1a      	adds	r2, r3, #4
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	6862      	ldr	r2, [r4, #4]
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7f8 fbf4 	bl	8000290 <memchr>
 8007aa8:	b108      	cbz	r0, 8007aae <_printf_i+0x1ea>
 8007aaa:	1b40      	subs	r0, r0, r5
 8007aac:	6060      	str	r0, [r4, #4]
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab8:	e7aa      	b.n	8007a10 <_printf_i+0x14c>
 8007aba:	6923      	ldr	r3, [r4, #16]
 8007abc:	462a      	mov	r2, r5
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	47d0      	blx	sl
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d0ad      	beq.n	8007a24 <_printf_i+0x160>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	079b      	lsls	r3, r3, #30
 8007acc:	d413      	bmi.n	8007af6 <_printf_i+0x232>
 8007ace:	68e0      	ldr	r0, [r4, #12]
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	4298      	cmp	r0, r3
 8007ad4:	bfb8      	it	lt
 8007ad6:	4618      	movlt	r0, r3
 8007ad8:	e7a6      	b.n	8007a28 <_printf_i+0x164>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4632      	mov	r2, r6
 8007ade:	4649      	mov	r1, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	47d0      	blx	sl
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d09d      	beq.n	8007a24 <_printf_i+0x160>
 8007ae8:	3501      	adds	r5, #1
 8007aea:	68e3      	ldr	r3, [r4, #12]
 8007aec:	9903      	ldr	r1, [sp, #12]
 8007aee:	1a5b      	subs	r3, r3, r1
 8007af0:	42ab      	cmp	r3, r5
 8007af2:	dcf2      	bgt.n	8007ada <_printf_i+0x216>
 8007af4:	e7eb      	b.n	8007ace <_printf_i+0x20a>
 8007af6:	2500      	movs	r5, #0
 8007af8:	f104 0619 	add.w	r6, r4, #25
 8007afc:	e7f5      	b.n	8007aea <_printf_i+0x226>
 8007afe:	bf00      	nop
 8007b00:	08007d53 	.word	0x08007d53
 8007b04:	08007d64 	.word	0x08007d64

08007b08 <memmove>:
 8007b08:	4288      	cmp	r0, r1
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	eb01 0402 	add.w	r4, r1, r2
 8007b10:	d902      	bls.n	8007b18 <memmove+0x10>
 8007b12:	4284      	cmp	r4, r0
 8007b14:	4623      	mov	r3, r4
 8007b16:	d807      	bhi.n	8007b28 <memmove+0x20>
 8007b18:	1e43      	subs	r3, r0, #1
 8007b1a:	42a1      	cmp	r1, r4
 8007b1c:	d008      	beq.n	8007b30 <memmove+0x28>
 8007b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b26:	e7f8      	b.n	8007b1a <memmove+0x12>
 8007b28:	4402      	add	r2, r0
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	428a      	cmp	r2, r1
 8007b2e:	d100      	bne.n	8007b32 <memmove+0x2a>
 8007b30:	bd10      	pop	{r4, pc}
 8007b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b3a:	e7f7      	b.n	8007b2c <memmove+0x24>

08007b3c <_sbrk_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d06      	ldr	r5, [pc, #24]	; (8007b58 <_sbrk_r+0x1c>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7f9 fa4a 	bl	8000fe0 <_sbrk>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_sbrk_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_sbrk_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	200146e8 	.word	0x200146e8

08007b5c <_realloc_r>:
 8007b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	4680      	mov	r8, r0
 8007b62:	4614      	mov	r4, r2
 8007b64:	460e      	mov	r6, r1
 8007b66:	b921      	cbnz	r1, 8007b72 <_realloc_r+0x16>
 8007b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	f7ff bc57 	b.w	8007420 <_malloc_r>
 8007b72:	b92a      	cbnz	r2, 8007b80 <_realloc_r+0x24>
 8007b74:	f7ff fbe8 	bl	8007348 <_free_r>
 8007b78:	4625      	mov	r5, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b80:	f000 f81b 	bl	8007bba <_malloc_usable_size_r>
 8007b84:	4284      	cmp	r4, r0
 8007b86:	4607      	mov	r7, r0
 8007b88:	d802      	bhi.n	8007b90 <_realloc_r+0x34>
 8007b8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b8e:	d812      	bhi.n	8007bb6 <_realloc_r+0x5a>
 8007b90:	4621      	mov	r1, r4
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fc44 	bl	8007420 <_malloc_r>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d0ed      	beq.n	8007b7a <_realloc_r+0x1e>
 8007b9e:	42bc      	cmp	r4, r7
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	bf28      	it	cs
 8007ba6:	463a      	movcs	r2, r7
 8007ba8:	f7ff fbc0 	bl	800732c <memcpy>
 8007bac:	4631      	mov	r1, r6
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f7ff fbca 	bl	8007348 <_free_r>
 8007bb4:	e7e1      	b.n	8007b7a <_realloc_r+0x1e>
 8007bb6:	4635      	mov	r5, r6
 8007bb8:	e7df      	b.n	8007b7a <_realloc_r+0x1e>

08007bba <_malloc_usable_size_r>:
 8007bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbe:	1f18      	subs	r0, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bfbc      	itt	lt
 8007bc4:	580b      	ldrlt	r3, [r1, r0]
 8007bc6:	18c0      	addlt	r0, r0, r3
 8007bc8:	4770      	bx	lr
	...

08007bcc <_init>:
 8007bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bce:	bf00      	nop
 8007bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd2:	bc08      	pop	{r3}
 8007bd4:	469e      	mov	lr, r3
 8007bd6:	4770      	bx	lr

08007bd8 <_fini>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr
